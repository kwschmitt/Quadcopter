

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Jul 23 22:25:42 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   101                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   102  0000                     
   103                           ; Version 1.42
   104                           ; Generated 13/04/2017 GMT
   105                           ; 
   106                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution.
   120                           ; 
   121                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   122                           ;        software without specific prior written permission.
   123                           ; 
   124                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   125                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   126                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   127                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   128                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   129                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   130                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   131                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   132                           ; 
   133                           ; 
   134                           ; Code-generator required, PIC18F47K40 Definitions
   135                           ; 
   136                           ; SFR Addresses
   137  0000                     
   138                           	psect	idataBANK0
   139  004C8E                     __pidataBANK0:
   140                           	opt stack 0
   141                           
   142                           ;initializer for _gyroAlpha
   143  004C8E  B8                 	db	184
   144  004C8F  7E                 	db	126
   145  004C90  3F                 	db	63
   146                           
   147                           ;initializer for _accelAlpha
   148  004C91  CD                 	db	205
   149  004C92  4C                 	db	76
   150  004C93  3F                 	db	63
   151                           
   152                           	psect	smallconst
   153  000F00                     __psmallconst:
   154                           	opt stack 0
   155  000F00  00                 	db	0
   156  000F01                     _dpowers:
   157                           	opt stack 0
   158  000F01  0001               	dw	1
   159  000F03  0000               	dw	0
   160  000F05  000A               	dw	10
   161  000F07  0000               	dw	0
   162  000F09  0064               	dw	100
   163  000F0B  0000               	dw	0
   164  000F0D  03E8               	dw	1000
   165  000F0F  0000               	dw	0
   166  000F11  2710               	dw	10000
   167  000F13  0000               	dw	0
   168  000F15  86A0               	dw	34464
   169  000F17  0001               	dw	1
   170  000F19  4240               	dw	16960
   171  000F1B  000F               	dw	15
   172  000F1D  9680               	dw	38528
   173  000F1F  0098               	dw	152
   174  000F21  E100               	dw	57600
   175  000F23  05F5               	dw	1525
   176  000F25  CA00               	dw	51712
   177  000F27  3B9A               	dw	15258
   178  000F29                     __end_of_dpowers:
   179                           	opt stack 0
   180  000F29                     __powers_:
   181                           	opt stack 0
   182  000F29  00                 	db	0
   183  000F2A  80                 	db	128
   184  000F2B  3F                 	db	63
   185  000F2C  00                 	db	0
   186  000F2D  20                 	db	32
   187  000F2E  41                 	db	65
   188  000F2F  00                 	db	0
   189  000F30  C8                 	db	200
   190  000F31  42                 	db	66
   191  000F32  00                 	db	0
   192  000F33  7A                 	db	122
   193  000F34  44                 	db	68
   194  000F35  40                 	db	64
   195  000F36  1C                 	db	28
   196  000F37  46                 	db	70
   197  000F38  50                 	db	80
   198  000F39  C3                 	db	195
   199  000F3A  47                 	db	71
   200  000F3B  24                 	db	36
   201  000F3C  74                 	db	116
   202  000F3D  49                 	db	73
   203  000F3E  97                 	db	151
   204  000F3F  18                 	db	24
   205  000F40  4B                 	db	75
   206  000F41  BC                 	db	188
   207  000F42  BE                 	db	190
   208  000F43  4C                 	db	76
   209  000F44  6B                 	db	107
   210  000F45  6E                 	db	110
   211  000F46  4E                 	db	78
   212  000F47  03                 	db	3
   213  000F48  15                 	db	21
   214  000F49  50                 	db	80
   215  000F4A  79                 	db	121
   216  000F4B  AD                 	db	173
   217  000F4C  60                 	db	96
   218  000F4D  F3                 	db	243
   219  000F4E  49                 	db	73
   220  000F4F  71                 	db	113
   221  000F50                     __end_of__powers_:
   222                           	opt stack 0
   223  000F50                     __npowers_:
   224                           	opt stack 0
   225  000F50  00                 	db	0
   226  000F51  80                 	db	128
   227  000F52  3F                 	db	63
   228  000F53  CD                 	db	205
   229  000F54  CC                 	db	204
   230  000F55  3D                 	db	61
   231  000F56  D7                 	db	215
   232  000F57  23                 	db	35
   233  000F58  3C                 	db	60
   234  000F59  12                 	db	18
   235  000F5A  83                 	db	131
   236  000F5B  3A                 	db	58
   237  000F5C  B7                 	db	183
   238  000F5D  D1                 	db	209
   239  000F5E  38                 	db	56
   240  000F5F  C6                 	db	198
   241  000F60  27                 	db	39
   242  000F61  37                 	db	55
   243  000F62  38                 	db	56
   244  000F63  86                 	db	134
   245  000F64  35                 	db	53
   246  000F65  C0                 	db	192
   247  000F66  D6                 	db	214
   248  000F67  33                 	db	51
   249  000F68  CC                 	db	204
   250  000F69  2B                 	db	43
   251  000F6A  32                 	db	50
   252  000F6B  70                 	db	112
   253  000F6C  89                 	db	137
   254  000F6D  30                 	db	48
   255  000F6E  E7                 	db	231
   256  000F6F  DB                 	db	219
   257  000F70  2E                 	db	46
   258  000F71  E5                 	db	229
   259  000F72  3C                 	db	60
   260  000F73  1E                 	db	30
   261  000F74  42                 	db	66
   262  000F75  A2                 	db	162
   263  000F76  0D                 	db	13
   264  000F77                     __end_of__npowers_:
   265                           	opt stack 0
   266  000F77                     atan@coeff_a:
   267                           	opt stack 0
   268  000F77  3C                 	db	60
   269  000F78  04                 	db	4
   270  000F79  42                 	db	66
   271  000F7A  9F                 	db	159
   272  000F7B  6A                 	db	106
   273  000F7C  42                 	db	66
   274  000F7D  90                 	db	144
   275  000F7E  01                 	db	1
   276  000F7F  42                 	db	66
   277  000F80  4D                 	db	77
   278  000F81  BB                 	db	187
   279  000F82  40                 	db	64
   280  000F83  EC                 	db	236
   281  000F84  47                 	db	71
   282  000F85  3E                 	db	62
   283  000F86  8E                 	db	142
   284  000F87  1F                 	db	31
   285  000F88  BB                 	db	187
   286  000F89                     __end_ofatan@coeff_a:
   287                           	opt stack 0
   288  000F89                     atan@coeff_b:
   289                           	opt stack 0
   290  000F89  3C                 	db	60
   291  000F8A  04                 	db	4
   292  000F8B  42                 	db	66
   293  000F8C  5A                 	db	90
   294  000F8D  8B                 	db	139
   295  000F8E  42                 	db	66
   296  000F8F  04                 	db	4
   297  000F90  44                 	db	68
   298  000F91  42                 	db	66
   299  000F92  9C                 	db	156
   300  000F93  4F                 	db	79
   301  000F94  41                 	db	65
   302  000F95  00                 	db	0
   303  000F96  80                 	db	128
   304  000F97  3F                 	db	63
   305  000F98                     __end_ofatan@coeff_b:
   306                           	opt stack 0
   307  0000                     _PIR0bits	set	3786
   308  0000                     _OSCTUNE	set	3805
   309  0000                     _OSCFRQ	set	3806
   310  0000                     _OSCEN	set	3804
   311  0000                     _OSCCON3	set	3802
   312  0000                     _OSCCON1	set	3800
   313  0000                     _IPR3bits	set	3773
   314  0000                     _IPR4bits	set	3774
   315  0000                     _PIR3bits	set	3789
   316  0000                     _SSP1DATPPSbits	set	3768
   317  0000                     _SSP1CLKPPSbits	set	3767
   318  0000                     _RC7PPS	set	3838
   319  0000                     _RX1PPSbits	set	3765
   320  0000                     _RA5PPS	set	3820
   321  0000                     _RC4PPS	set	3835
   322  0000                     _RB2PPS	set	3825
   323  0000                     _RC3PPS	set	3834
   324  0000                     _RB1PPS	set	3824
   325  0000                     _RA4PPS	set	3819
   326  0000                     _PPSLOCKbits	set	3744
   327  0000                     _PPSLOCK	set	3744
   328  0000                     _PIE4bits	set	3782
   329  0000                     _PIR4bits	set	3790
   330  0000                     _ODCOND	set	3876
   331  0000                     _ODCONC	set	3871
   332  0000                     _ODCONB	set	3863
   333  0000                     _ODCONA	set	3855
   334  0000                     _ODCONE	set	3884
   335  0000                     _WPUC	set	3872
   336  0000                     _WPUA	set	3856
   337  0000                     _WPUB	set	3864
   338  0000                     _WPUE	set	3885
   339  0000                     _WPUD	set	3877
   340  0000                     _ANSELA	set	3857
   341  0000                     _ANSELE	set	3886
   342  0000                     _ANSELD	set	3878
   343  0000                     _ANSELB	set	3865
   344  0000                     _ANSELC	set	3873
   345  0000                     _SSP1STATbits	set	3989
   346  0000                     _SSP1CON2	set	3991
   347  0000                     _LATCbits	set	3973
   348  0000                     _TRISCbits	set	3978
   349  0000                     _T0CON0bits	set	4053
   350  0000                     _TMR0L	set	4051
   351  0000                     _TMR0H	set	4052
   352  0000                     _T0CON1	set	4054
   353  0000                     _T0CON0	set	4053
   354  0000                     _PWM3DCL	set	4003
   355  0000                     _PWM3DCH	set	4004
   356  0000                     _PWM3CON	set	4005
   357  0000                     _PWM4DCL	set	4000
   358  0000                     _PWM4DCH	set	4001
   359  0000                     _PWM4CON	set	4002
   360  0000                     _CCP2CONbits	set	4008
   361  0000                     _CCPR2L	set	4006
   362  0000                     _CCPR2H	set	4007
   363  0000                     _CCP2CON	set	4008
   364  0000                     _CCP1CONbits	set	4012
   365  0000                     _CCPTMRSbits	set	4014
   366  0000                     _CCPR1L	set	4010
   367  0000                     _CCPR1H	set	4011
   368  0000                     _CCP1CON	set	4012
   369  0000                     _INTCONbits	set	4082
   370  0000                     _TX1REG	set	3994
   371  0000                     _RC1REG	set	3993
   372  0000                     _RC1STAbits	set	3997
   373  0000                     _SP1BRGH	set	3996
   374  0000                     _SP1BRGL	set	3995
   375  0000                     _TX1STA	set	3998
   376  0000                     _RC1STA	set	3997
   377  0000                     _BAUD1CON	set	3999
   378  0000                     _SSP1BUF	set	3986
   379  0000                     _SSP1CON2bits	set	3991
   380  0000                     _SSP1CON1bits	set	3990
   381  0000                     _SSP1ADD	set	3987
   382  0000                     _SSP1CON3	set	3992
   383  0000                     _SSP1CON1	set	3990
   384  0000                     _SSP1STAT	set	3989
   385  0000                     _TRISD	set	3979
   386  0000                     _TRISC	set	3978
   387  0000                     _TRISB	set	3977
   388  0000                     _TRISA	set	3976
   389  0000                     _TRISE	set	3980
   390  0000                     _LATC	set	3973
   391  0000                     _LATB	set	3972
   392  0000                     _LATA	set	3971
   393  0000                     _LATD	set	3974
   394  0000                     _LATE	set	3975
   395  0000                     _PR2	set	4028
   396  0000                     _TMR2	set	4027
   397  0000                     _T2CONbits	set	4029
   398  0000                     _T2RSTbits	set	4032
   399  0000                     _T2HLTbits	set	4030
   400  0000                     _T2TMR	set	4027
   401  0000                     _T2PR	set	4028
   402  0000                     _T2RST	set	4032
   403  0000                     _T2HLT	set	4030
   404  0000                     _T2CLKCON	set	4031
   405  0000                     _T2CON	set	4029
   406  0000                     _GIE	set	32663
   407  000F98                     STR_1:
   408  000F98  6B                 	db	107	;'k'
   409  000F99  70                 	db	112	;'p'
   410  000F9A  3A                 	db	58	;':'
   411  000F9B  20                 	db	32
   412  000F9C  25                 	db	37
   413  000F9D  2E                 	db	46
   414  000F9E  32                 	db	50	;'2'
   415  000F9F  66                 	db	102	;'f'
   416  000FA0  20                 	db	32
   417  000FA1  20                 	db	32
   418  000FA2  20                 	db	32
   419  000FA3  6B                 	db	107	;'k'
   420  000FA4  64                 	db	100	;'d'
   421  000FA5  3A                 	db	58	;':'
   422  000FA6  20                 	db	32
   423  000FA7  25                 	db	37
   424  000FA8  2E                 	db	46
   425  000FA9  32                 	db	50	;'2'
   426  000FAA  66                 	db	102	;'f'
   427  000FAB  20                 	db	32
   428  000FAC  20                 	db	32
   429  000FAD  20                 	db	32
   430  000FAE  6B                 	db	107	;'k'
   431  000FAF  69                 	db	105	;'i'
   432  000FB0  3A                 	db	58	;':'
   433  000FB1  20                 	db	32
   434  000FB2  25                 	db	37
   435  000FB3  2E                 	db	46
   436  000FB4  33                 	db	51	;'3'
   437  000FB5  66                 	db	102	;'f'
   438  000FB6  20                 	db	32
   439  000FB7  20                 	db	32
   440  000FB8  20                 	db	32
   441  000FB9  74                 	db	116	;'t'
   442  000FBA  68                 	db	104	;'h'
   443  000FBB  72                 	db	114	;'r'
   444  000FBC  6F                 	db	111	;'o'
   445  000FBD  74                 	db	116	;'t'
   446  000FBE  74                 	db	116	;'t'
   447  000FBF  6C                 	db	108	;'l'
   448  000FC0  65                 	db	101	;'e'
   449  000FC1  3A                 	db	58	;':'
   450  000FC2  20                 	db	32
   451  000FC3  25                 	db	37
   452  000FC4  69                 	db	105	;'i'
   453  000FC5  20                 	db	32
   454  000FC6  0A                 	db	10
   455  000FC7  0D                 	db	13
   456  000FC8  00                 	db	0
   457                           
   458                           ; #config settings
   459  000FC9  00                 	db	0	; dummy byte at the end
   460  0000                     
   461                           	psect	cinit
   462  0046E0                     __pcinit:
   463                           	opt stack 0
   464  0046E0                     start_initialization:
   465                           	opt stack 0
   466  0046E0                     __initialization:
   467                           	opt stack 0
   468                           
   469                           ; NVMREG Errata
   470  0046E0                     	if	3969
   471  0046E0  8E81               	bsf	129,7,c
   472  0046E2  9C81               	bcf	129,6,c
   473  0046E4                     	endif
   474                           
   475                           ; Initialize objects allocated to BANK0 (6 bytes)
   476                           ; load TBLPTR registers with __pidataBANK0
   477  0046E4  0E8E               	movlw	low __pidataBANK0
   478  0046E6  6EF6               	movwf	tblptrl,c
   479  0046E8  0E4C               	movlw	high __pidataBANK0
   480  0046EA  6EF7               	movwf	tblptrh,c
   481  0046EC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   482  0046EE  6EF8               	movwf	tblptru,c
   483  0046F0  EE00  F0F4         	lfsr	0,__pdataBANK0
   484  0046F4  EE10 F006          	lfsr	1,6
   485  0046F8                     copy_data0:
   486  0046F8  0009               	tblrd		*+
   487  0046FA  CFF5 FFEE          	movff	tablat,postinc0
   488  0046FE  50E5               	movf	postdec1,w,c
   489  004700  50E1               	movf	fsr1l,w,c
   490  004702  E1FA               	bnz	copy_data0
   491                           
   492                           ; Clear objects allocated to BANK1 (141 bytes)
   493  004704  EE01  F000         	lfsr	0,__pbssBANK1
   494  004708  0E8D               	movlw	141
   495  00470A                     clear_0:
   496  00470A  6AEE               	clrf	postinc0,c
   497  00470C  06E8               	decf	wreg,f,c
   498  00470E  E1FD               	bnz	clear_0
   499                           
   500                           ; Clear objects allocated to BANK0 (72 bytes)
   501  004710  EE00  F0AC         	lfsr	0,__pbssBANK0
   502  004714  0E48               	movlw	72
   503  004716                     clear_1:
   504  004716  6AEE               	clrf	postinc0,c
   505  004718  06E8               	decf	wreg,f,c
   506  00471A  E1FD               	bnz	clear_1
   507                           
   508                           ; Clear objects allocated to COMRAM (19 bytes)
   509  00471C  EE00  F039         	lfsr	0,__pbssCOMRAM
   510  004720  0E13               	movlw	19
   511  004722                     clear_2:
   512  004722  6AEE               	clrf	postinc0,c
   513  004724  06E8               	decf	wreg,f,c
   514  004726  E1FD               	bnz	clear_2
   515  004728                     end_of_initialization:
   516                           	opt stack 0
   517  004728                     __end_of__initialization:
   518                           	opt stack 0
   519  004728  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   520  00472A  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   521  00472C  0100               	movlb	0
   522  00472E  EFAA  F00E         	goto	_main	;jump to C main() function
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	bssCOMRAM
   533  000039                     __pbssCOMRAM:
   534                           	opt stack 0
   535  000039                     _TMR2_InterruptHandler:
   536                           	opt stack 0
   537  000039                     	ds	3
   538  00003C                     _timer0ReloadVal16bit:
   539                           	opt stack 0
   540  00003C                     	ds	2
   541  00003E                     I2C1_ISR@pi2c_buf_ptr:
   542                           	opt stack 0
   543  00003E                     	ds	2
   544  000040                     _p_i2c1_trb_current:
   545                           	opt stack 0
   546  000040                     	ds	2
   547  000042                     _throttle2:
   548                           	opt stack 0
   549  000042                     	ds	2
   550  000044                     _throttle1:
   551                           	opt stack 0
   552  000044                     	ds	2
   553  000046                     I2C1_ISR@i2c_10bit_address_restart:
   554                           	opt stack 0
   555  000046                     	ds	1
   556  000047                     I2C1_ISR@i2c_bytes_left:
   557                           	opt stack 0
   558  000047                     	ds	1
   559  000048                     _i2c1_trb_count:
   560                           	opt stack 0
   561  000048                     	ds	1
   562  000049                     _i2c1_state:
   563                           	opt stack 0
   564  000049                     	ds	1
   565  00004A                     I2C1_ISR@i2c_address:
   566                           	opt stack 0
   567  00004A                     	ds	2
   568                           tblptru	equ	0xFF8
   569                           tblptrh	equ	0xFF7
   570                           tblptrl	equ	0xFF6
   571                           tablat	equ	0xFF5
   572                           postinc0	equ	0xFEE
   573                           wreg	equ	0xFE8
   574                           postdec1	equ	0xFE5
   575                           fsr1l	equ	0xFE1
   576                           
   577                           	psect	bssBANK0
   578  0000AC                     __pbssBANK0:
   579                           	opt stack 0
   580  0000AC                     _i2c1_object:
   581                           	opt stack 0
   582  0000AC                     	ds	7
   583  0000B3                     _rollAcc:
   584                           	opt stack 0
   585  0000B3                     	ds	3
   586  0000B6                     _roll:
   587                           	opt stack 0
   588  0000B6                     	ds	3
   589  0000B9                     _gz:
   590                           	opt stack 0
   591  0000B9                     	ds	3
   592  0000BC                     _gy:
   593                           	opt stack 0
   594  0000BC                     	ds	3
   595  0000BF                     _gx:
   596                           	opt stack 0
   597  0000BF                     	ds	3
   598  0000C2                     _az:
   599                           	opt stack 0
   600  0000C2                     	ds	3
   601  0000C5                     _ay:
   602                           	opt stack 0
   603  0000C5                     	ds	3
   604  0000C8                     _ax:
   605                           	opt stack 0
   606  0000C8                     	ds	3
   607  0000CB                     _rollIntegral:
   608                           	opt stack 0
   609  0000CB                     	ds	3
   610  0000CE                     _rollPreviousError:
   611                           	opt stack 0
   612  0000CE                     	ds	3
   613  0000D1                     _rollkd:
   614                           	opt stack 0
   615  0000D1                     	ds	3
   616  0000D4                     _rollki:
   617                           	opt stack 0
   618  0000D4                     	ds	3
   619  0000D7                     _rollkp:
   620                           	opt stack 0
   621  0000D7                     	ds	3
   622  0000DA                     _errno:
   623                           	opt stack 0
   624  0000DA                     	ds	2
   625  0000DC                     _throttle:
   626                           	opt stack 0
   627  0000DC                     	ds	2
   628  0000DE                     _p_i2c1_current:
   629                           	opt stack 0
   630  0000DE                     	ds	2
   631  0000E0                     _throttle4:
   632                           	opt stack 0
   633  0000E0                     	ds	2
   634  0000E2                     _throttle3:
   635                           	opt stack 0
   636  0000E2                     	ds	2
   637  0000E4                     _yawAdj:
   638                           	opt stack 0
   639  0000E4                     	ds	2
   640  0000E6                     _pitchAdj:
   641                           	opt stack 0
   642  0000E6                     	ds	2
   643  0000E8                     _rollAdj:
   644                           	opt stack 0
   645  0000E8                     	ds	2
   646  0000EA                     _beginCounter:
   647                           	opt stack 0
   648  0000EA                     	ds	2
   649  0000EC                     _accCounter:
   650                           	opt stack 0
   651  0000EC                     	ds	1
   652  0000ED                     _begin:
   653                           	opt stack 0
   654  0000ED                     	ds	1
   655  0000EE                     _i2c1_tr_queue:
   656                           	opt stack 0
   657  0000EE                     	ds	6
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           postdec1	equ	0xFE5
   665                           fsr1l	equ	0xFE1
   666                           
   667                           	psect	dataBANK0
   668  0000F4                     __pdataBANK0:
   669                           	opt stack 0
   670  0000F4                     _gyroAlpha:
   671                           	opt stack 0
   672  0000F4                     	ds	3
   673  0000F7                     _accelAlpha:
   674                           	opt stack 0
   675  0000F7                     	ds	3
   676                           tblptru	equ	0xFF8
   677                           tblptrh	equ	0xFF7
   678                           tblptrl	equ	0xFF6
   679                           tablat	equ	0xFF5
   680                           postinc0	equ	0xFEE
   681                           wreg	equ	0xFE8
   682                           postdec1	equ	0xFE5
   683                           fsr1l	equ	0xFE1
   684                           
   685                           	psect	bssBANK1
   686  000100                     __pbssBANK1:
   687                           	opt stack 0
   688  000100                     _pitchAcc:
   689                           	opt stack 0
   690  000100                     	ds	3
   691  000103                     _yaw:
   692                           	opt stack 0
   693  000103                     	ds	3
   694  000106                     _pitch:
   695                           	opt stack 0
   696  000106                     	ds	3
   697  000109                     _yawIntegral:
   698                           	opt stack 0
   699  000109                     	ds	3
   700  00010C                     _yawPreviousError:
   701                           	opt stack 0
   702  00010C                     	ds	3
   703  00010F                     _yawkd:
   704                           	opt stack 0
   705  00010F                     	ds	3
   706  000112                     _yawki:
   707                           	opt stack 0
   708  000112                     	ds	3
   709  000115                     _yawkp:
   710                           	opt stack 0
   711  000115                     	ds	3
   712  000118                     _pitchIntegral:
   713                           	opt stack 0
   714  000118                     	ds	3
   715  00011B                     _pitchPreviousError:
   716                           	opt stack 0
   717  00011B                     	ds	3
   718  00011E                     _pitchkd:
   719                           	opt stack 0
   720  00011E                     	ds	3
   721  000121                     _pitchki:
   722                           	opt stack 0
   723  000121                     	ds	3
   724  000124                     _pitchkp:
   725                           	opt stack 0
   726  000124                     	ds	3
   727  000127                     _gzState:
   728                           	opt stack 0
   729  000127                     	ds	15
   730  000136                     _gyState:
   731                           	opt stack 0
   732  000136                     	ds	15
   733  000145                     _gxState:
   734                           	opt stack 0
   735  000145                     	ds	15
   736  000154                     _azState:
   737                           	opt stack 0
   738  000154                     	ds	15
   739  000163                     _ayState:
   740                           	opt stack 0
   741  000163                     	ds	15
   742  000172                     _axState:
   743                           	opt stack 0
   744  000172                     	ds	15
   745  000181                     I2C1_MasterRead@trBlock:
   746                           	opt stack 0
   747  000181                     	ds	6
   748  000187                     I2C1_MasterWrite@trBlock:
   749                           	opt stack 0
   750  000187                     	ds	6
   751                           tblptru	equ	0xFF8
   752                           tblptrh	equ	0xFF7
   753                           tblptrl	equ	0xFF6
   754                           tablat	equ	0xFF5
   755                           postinc0	equ	0xFEE
   756                           wreg	equ	0xFE8
   757                           postdec1	equ	0xFE5
   758                           fsr1l	equ	0xFE1
   759                           
   760                           	psect	cstackBANK1
   761  00018D                     __pcstackBANK1:
   762                           	opt stack 0
   763  00018D                     computeRollPitch@dt:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0x0
   767  00018D                     	ds	3
   768  000190                     _computeRollPitch$2927:
   769                           	opt stack 0
   770                           
   771                           ; 3 bytes @ 0x3
   772  000190                     	ds	3
   773  000193                     _computeRollPitch$2928:
   774                           	opt stack 0
   775                           
   776                           ; 3 bytes @ 0x6
   777  000193                     	ds	3
   778  000196                     _computeRollPitch$2929:
   779                           	opt stack 0
   780                           
   781                           ; 3 bytes @ 0x9
   782  000196                     	ds	3
   783  000199                     _computeRollPitch$2930:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0xC
   787  000199                     	ds	3
   788  00019C                     _computeRollPitch$2931:
   789                           	opt stack 0
   790                           
   791                           ; 3 bytes @ 0xF
   792  00019C                     	ds	3
   793  00019F                     _computeRollPitch$2932:
   794                           	opt stack 0
   795                           
   796                           ; 3 bytes @ 0x12
   797  00019F                     	ds	3
   798  0001A2                     _computeRollPitch$2933:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x15
   802  0001A2                     	ds	3
   803  0001A5                     computeRollPitch@tmr0val:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x18
   807  0001A5                     	ds	2
   808  0001A7                     main@c:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x1A
   812  0001A7                     	ds	1
   813  0001A8                     main@show:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x1B
   817  0001A8                     	ds	2
   818  0001AA                     main@val:
   819                           	opt stack 0
   820                           
   821                           ; 3 bytes @ 0x1D
   822  0001AA                     	ds	3
   823  0001AD                     main@val2:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x20
   827  0001AD                     	ds	3
   828                           tblptru	equ	0xFF8
   829                           tblptrh	equ	0xFF7
   830                           tblptrl	equ	0xFF6
   831                           tablat	equ	0xFF5
   832                           postinc0	equ	0xFEE
   833                           wreg	equ	0xFE8
   834                           postdec1	equ	0xFE5
   835                           fsr1l	equ	0xFE1
   836                           
   837                           	psect	cstackBANK0
   838  000060                     __pcstackBANK0:
   839                           	opt stack 0
   840  000060                     ?_fabs:
   841                           	opt stack 0
   842  000060                     fabs@d:
   843                           	opt stack 0
   844  000060                     _fround$2940:
   845                           	opt stack 0
   846  000060                     _scale$2941:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x0
   850  000060                     	ds	3
   851  000063                     scale@scl:
   852                           	opt stack 0
   853  000063                     ___ftge@ff1:
   854                           	opt stack 0
   855  000063                     _fround$2939:
   856                           	opt stack 0
   857                           
   858                           ; 3 bytes @ 0x3
   859  000063                     	ds	3
   860  000066                     fround@prec:
   861                           	opt stack 0
   862  000066                     ___ftge@ff2:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x6
   866  000066                     	ds	1
   867  000067                     ?___ftadd:
   868                           	opt stack 0
   869  000067                     ___ftadd@f1:
   870                           	opt stack 0
   871                           
   872                           ; 3 bytes @ 0x7
   873  000067                     	ds	2
   874  000069                     ??___ftge:
   875                           
   876                           ; 1 bytes @ 0x9
   877  000069                     	ds	1
   878  00006A                     ___ftadd@f2:
   879                           	opt stack 0
   880                           
   881                           ; 3 bytes @ 0xA
   882  00006A                     	ds	2
   883  00006C                     ?_minimum:
   884                           	opt stack 0
   885  00006C                     ?_maximum:
   886                           	opt stack 0
   887  00006C                     maximum@x:
   888                           	opt stack 0
   889  00006C                     minimum@x:
   890                           	opt stack 0
   891                           
   892                           ; 3 bytes @ 0xC
   893  00006C                     	ds	1
   894  00006D                     ??___ftadd:
   895                           
   896                           ; 1 bytes @ 0xD
   897  00006D                     	ds	2
   898  00006F                     maximum@y:
   899                           	opt stack 0
   900  00006F                     minimum@y:
   901                           	opt stack 0
   902                           
   903                           ; 3 bytes @ 0xF
   904  00006F                     	ds	1
   905  000070                     ___ftadd@sign:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x10
   909  000070                     	ds	1
   910  000071                     ___ftadd@exp2:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x11
   914  000071                     	ds	1
   915  000072                     ___ftadd@exp1:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x12
   919  000072                     	ds	1
   920  000073                     ?___ftdiv:
   921                           	opt stack 0
   922  000073                     ?___ftsub:
   923                           	opt stack 0
   924  000073                     ?_eval_poly:
   925                           	opt stack 0
   926  000073                     ?___fttol:
   927                           	opt stack 0
   928  000073                     ___ftdiv@f1:
   929                           	opt stack 0
   930  000073                     ___ftsub@f1:
   931                           	opt stack 0
   932  000073                     ___fttol@f1:
   933                           	opt stack 0
   934  000073                     eval_poly@x:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x13
   938  000073                     	ds	3
   939  000076                     eval_poly@d:
   940                           	opt stack 0
   941  000076                     ___ftdiv@f2:
   942                           	opt stack 0
   943  000076                     ___ftsub@f2:
   944                           	opt stack 0
   945                           
   946                           ; 3 bytes @ 0x16
   947  000076                     	ds	1
   948  000077                     ??___fttol:
   949                           
   950                           ; 1 bytes @ 0x17
   951  000077                     	ds	1
   952  000078                     eval_poly@n:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x18
   956  000078                     	ds	1
   957  000079                     ??___ftdiv:
   958                           
   959                           ; 1 bytes @ 0x19
   960  000079                     	ds	1
   961  00007A                     ??_eval_poly:
   962                           
   963                           ; 1 bytes @ 0x1A
   964  00007A                     	ds	2
   965  00007C                     ___ftdiv@cntr:
   966                           	opt stack 0
   967  00007C                     ___fttol@sign1:
   968                           	opt stack 0
   969  00007C                     eval_poly@res:
   970                           	opt stack 0
   971                           
   972                           ; 3 bytes @ 0x1C
   973  00007C                     	ds	1
   974  00007D                     ___ftdiv@f3:
   975                           	opt stack 0
   976  00007D                     ___fttol@lval:
   977                           	opt stack 0
   978                           
   979                           ; 4 bytes @ 0x1D
   980  00007D                     	ds	3
   981  000080                     ___ftdiv@exp:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x20
   985  000080                     	ds	1
   986  000081                     ___ftdiv@sign:
   987                           	opt stack 0
   988  000081                     ___fttol@exp1:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x21
   992  000081                     	ds	1
   993  000082                     ??_readAccel:
   994  000082                     ?_printf:
   995                           	opt stack 0
   996  000082                     ?_fastatan2:
   997                           	opt stack 0
   998  000082                     ?_atan:
   999                           	opt stack 0
  1000  000082                     kalmanUpdate@state:
  1001                           	opt stack 0
  1002  000082                     printf@f:
  1003                           	opt stack 0
  1004  000082                     fastatan2@x:
  1005                           	opt stack 0
  1006  000082                     rollPid@desiredRoll:
  1007                           	opt stack 0
  1008  000082                     atan@f:
  1009                           	opt stack 0
  1010                           
  1011                           ; 3 bytes @ 0x22
  1012  000082                     	ds	2
  1013  000084                     kalmanUpdate@measurement:
  1014                           	opt stack 0
  1015                           
  1016                           ; 3 bytes @ 0x24
  1017  000084                     	ds	1
  1018  000085                     fastatan2@y:
  1019                           	opt stack 0
  1020  000085                     rollPid@changeInError:
  1021                           	opt stack 0
  1022  000085                     atan@y:
  1023                           	opt stack 0
  1024                           
  1025                           ; 3 bytes @ 0x25
  1026  000085                     	ds	1
  1027  000086                     readAccel@aData:
  1028                           	opt stack 0
  1029                           
  1030                           ; 6 bytes @ 0x26
  1031  000086                     	ds	1
  1032  000087                     _kalmanUpdate$2938:
  1033                           	opt stack 0
  1034                           
  1035                           ; 3 bytes @ 0x27
  1036  000087                     	ds	1
  1037  000088                     atan@x:
  1038                           	opt stack 0
  1039  000088                     _fastatan2$2934:
  1040                           	opt stack 0
  1041  000088                     _rollPid$2937:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x28
  1045  000088                     	ds	3
  1046  00008B                     atan@recip:
  1047                           	opt stack 0
  1048  00008B                     rollPid@rollError:
  1049                           	opt stack 0
  1050  00008B                     _fastatan2$2935:
  1051                           	opt stack 0
  1052                           
  1053                           ; 3 bytes @ 0x2B
  1054  00008B                     	ds	1
  1055  00008C                     atan@val_squared:
  1056                           	opt stack 0
  1057                           
  1058                           ; 3 bytes @ 0x2C
  1059  00008C                     	ds	2
  1060  00008E                     pid@desiredRoll:
  1061                           	opt stack 0
  1062  00008E                     _fastatan2$2936:
  1063                           	opt stack 0
  1064                           
  1065                           ; 3 bytes @ 0x2E
  1066  00008E                     	ds	1
  1067  00008F                     ??_printf:
  1068  00008F                     atan@val:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x2F
  1072  00008F                     	ds	2
  1073  000091                     fastatan2@s:
  1074                           	opt stack 0
  1075  000091                     pid@desiredPitch:
  1076                           	opt stack 0
  1077                           
  1078                           ; 3 bytes @ 0x31
  1079  000091                     	ds	1
  1080  000092                     ?_atan2:
  1081                           	opt stack 0
  1082  000092                     atan2@y:
  1083                           	opt stack 0
  1084                           
  1085                           ; 3 bytes @ 0x32
  1086  000092                     	ds	2
  1087  000094                     fastatan2@a:
  1088                           	opt stack 0
  1089  000094                     pid@desiredYaw:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x34
  1093  000094                     	ds	1
  1094  000095                     atan2@x:
  1095                           	opt stack 0
  1096  000095                     _printf$2942:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x35
  1100  000095                     	ds	2
  1101  000097                     ??_pid:
  1102  000097                     fastatan2@r:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0x37
  1106  000097                     	ds	1
  1107  000098                     printf@ap:
  1108                           	opt stack 0
  1109  000098                     _atan2$2944:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0x38
  1113  000098                     	ds	2
  1114  00009A                     printf@flag:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x3A
  1118  00009A                     	ds	1
  1119  00009B                     _atan2$2943:
  1120                           	opt stack 0
  1121                           
  1122                           ; 3 bytes @ 0x3B
  1123  00009B                     	ds	1
  1124  00009C                     printf@exp:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x3C
  1128  00009C                     	ds	2
  1129  00009E                     atan2@v:
  1130                           	opt stack 0
  1131  00009E                     printf@tmpval:
  1132                           	opt stack 0
  1133                           
  1134                           ; 4 bytes @ 0x3E
  1135  00009E                     	ds	4
  1136  0000A2                     printf@val:
  1137                           	opt stack 0
  1138                           
  1139                           ; 4 bytes @ 0x42
  1140  0000A2                     	ds	4
  1141  0000A6                     printf@prec:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x46
  1145  0000A6                     	ds	2
  1146  0000A8                     printf@fval:
  1147                           	opt stack 0
  1148                           
  1149                           ; 3 bytes @ 0x48
  1150  0000A8                     	ds	3
  1151  0000AB                     printf@c:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x4B
  1155  0000AB                     	ds	1
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           postdec1	equ	0xFE5
  1163                           fsr1l	equ	0xFE1
  1164                           
  1165                           	psect	cstackCOMRAM
  1166  000001                     __pcstackCOMRAM:
  1167                           	opt stack 0
  1168  000001                     PWM1_LoadDutyValue@dutyValue:
  1169                           	opt stack 0
  1170  000001                     PWM2_LoadDutyValue@dutyValue:
  1171                           	opt stack 0
  1172  000001                     PWM4_LoadDutyValue@dutyValue:
  1173                           	opt stack 0
  1174  000001                     PWM3_LoadDutyValue@dutyValue:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x0
  1178  000001                     	ds	2
  1179  000003                     ??_PWM3_LoadDutyValue:
  1180  000003                     ??_PWM4_LoadDutyValue:
  1181                           
  1182                           ; 1 bytes @ 0x2
  1183  000003                     	ds	2
  1184  000005                     ??_INTERRUPT_InterruptManagerHigh:
  1185                           
  1186                           ; 1 bytes @ 0x4
  1187  000005                     	ds	14
  1188  000013                     ??_TMR0_Initialize:
  1189  000013                     ??_unlockI2C:
  1190  000013                     ??_isdigit:
  1191  000013                     ??_checkI2Cbusy:
  1192  000013                     ?_TMR0_Read16bitTimer:
  1193                           	opt stack 0
  1194  000013                     ?___awmod:
  1195                           	opt stack 0
  1196  000013                     ?___ftpack:
  1197                           	opt stack 0
  1198  000013                     ?__tdiv_to_l_:
  1199                           	opt stack 0
  1200  000013                     ?__div_to_l_:
  1201                           	opt stack 0
  1202  000013                     ?___lldiv:
  1203                           	opt stack 0
  1204  000013                     PIN_MANAGER_Initialize@state:
  1205                           	opt stack 0
  1206  000013                     EUSART1_Write@txData:
  1207                           	opt stack 0
  1208  000013                     TMR0_Write16bitTimer@timerVal:
  1209                           	opt stack 0
  1210  000013                     ___awmod@dividend:
  1211                           	opt stack 0
  1212  000013                     TMR2_SetInterruptHandler@InterruptHandler:
  1213                           	opt stack 0
  1214  000013                     pitchPid@desiredPitch:
  1215                           	opt stack 0
  1216  000013                     yawPid@desiredYaw:
  1217                           	opt stack 0
  1218  000013                     __div_to_l_@f1:
  1219                           	opt stack 0
  1220  000013                     ___ftpack@arg:
  1221                           	opt stack 0
  1222  000013                     __tdiv_to_l_@f1:
  1223                           	opt stack 0
  1224  000013                     ___lldiv@dividend:
  1225                           	opt stack 0
  1226                           
  1227                           ; 4 bytes @ 0x12
  1228  000013                     	ds	1
  1229  000014                     putch@txData:
  1230                           	opt stack 0
  1231  000014                     writei2c@data:
  1232                           	opt stack 0
  1233  000014                     _isdigit$2464:
  1234                           	opt stack 0
  1235  000014                     unlockI2C@i:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x13
  1239  000014                     	ds	1
  1240  000015                     ??_TMR0_Read16bitTimer:
  1241  000015                     writei2cData@reg:
  1242                           	opt stack 0
  1243  000015                     readi2cData@reg:
  1244                           	opt stack 0
  1245  000015                     isdigit@c:
  1246                           	opt stack 0
  1247  000015                     ___awmod@divisor:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0x14
  1251  000015                     	ds	1
  1252  000016                     writei2cData@data:
  1253                           	opt stack 0
  1254  000016                     ___ftpack@exp:
  1255                           	opt stack 0
  1256  000016                     readi2cData@data:
  1257                           	opt stack 0
  1258  000016                     __div_to_l_@f2:
  1259                           	opt stack 0
  1260  000016                     __tdiv_to_l_@f2:
  1261                           	opt stack 0
  1262                           
  1263                           ; 3 bytes @ 0x15
  1264  000016                     	ds	1
  1265  000017                     writei2cData@address:
  1266                           	opt stack 0
  1267  000017                     ___awmod@counter:
  1268                           	opt stack 0
  1269  000017                     ___ftpack@sign:
  1270                           	opt stack 0
  1271  000017                     TMR0_Read16bitTimer@readVal:
  1272                           	opt stack 0
  1273  000017                     ___lldiv@divisor:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0x16
  1277  000017                     	ds	1
  1278  000018                     ??___ftpack:
  1279  000018                     readi2cData@len:
  1280                           	opt stack 0
  1281  000018                     ___awmod@sign:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x17
  1285  000018                     	ds	1
  1286  000019                     ??_readi2cData:
  1287  000019                     ??__tdiv_to_l_:
  1288  000019                     ?___awdiv:
  1289                           	opt stack 0
  1290  000019                     TMR0_Read16bitTimer@readValLow:
  1291                           	opt stack 0
  1292  000019                     ___awdiv@dividend:
  1293                           	opt stack 0
  1294  000019                     __div_to_l_@quot:
  1295                           	opt stack 0
  1296                           
  1297                           ; 4 bytes @ 0x18
  1298  000019                     	ds	1
  1299  00001A                     TMR0_Read16bitTimer@readValHigh:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x19
  1303  00001A                     	ds	1
  1304  00001B                     ?___awtoft:
  1305                           	opt stack 0
  1306  00001B                     ?___lltoft:
  1307                           	opt stack 0
  1308  00001B                     ?___lwtoft:
  1309                           	opt stack 0
  1310  00001B                     ___awdiv@divisor:
  1311                           	opt stack 0
  1312  00001B                     ___awtoft@c:
  1313                           	opt stack 0
  1314  00001B                     ___lwtoft@c:
  1315                           	opt stack 0
  1316  00001B                     ___lldiv@quotient:
  1317                           	opt stack 0
  1318  00001B                     ___lltoft@c:
  1319                           	opt stack 0
  1320                           
  1321                           ; 4 bytes @ 0x1A
  1322  00001B                     	ds	1
  1323  00001C                     __tdiv_to_l_@quot:
  1324                           	opt stack 0
  1325                           
  1326                           ; 4 bytes @ 0x1B
  1327  00001C                     	ds	1
  1328  00001D                     readi2cData@address:
  1329                           	opt stack 0
  1330  00001D                     ___awdiv@counter:
  1331                           	opt stack 0
  1332  00001D                     __div_to_l_@cntr:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x1C
  1336  00001D                     	ds	1
  1337  00001E                     ___awdiv@sign:
  1338                           	opt stack 0
  1339  00001E                     ___awtoft@sign:
  1340                           	opt stack 0
  1341  00001E                     __div_to_l_@exp1:
  1342                           	opt stack 0
  1343  00001E                     readi2cData@i:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x1D
  1347  00001E                     	ds	1
  1348  00001F                     ??___lltoft:
  1349  00001F                     ___lldiv@counter:
  1350                           	opt stack 0
  1351  00001F                     ___awdiv@quotient:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x1E
  1355  00001F                     	ds	1
  1356  000020                     ??_readGyro:
  1357  000020                     ?___llmod:
  1358                           	opt stack 0
  1359  000020                     __tdiv_to_l_@cntr:
  1360                           	opt stack 0
  1361  000020                     ___llmod@dividend:
  1362                           	opt stack 0
  1363                           
  1364                           ; 4 bytes @ 0x1F
  1365  000020                     	ds	1
  1366  000021                     ?___wmul:
  1367                           	opt stack 0
  1368  000021                     __tdiv_to_l_@exp1:
  1369                           	opt stack 0
  1370  000021                     ___wmul@multiplier:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x20
  1374  000021                     	ds	2
  1375  000023                     ___lltoft@exp:
  1376                           	opt stack 0
  1377  000023                     ___wmul@multiplicand:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x22
  1381  000023                     	ds	1
  1382  000024                     ___llmod@divisor:
  1383                           	opt stack 0
  1384  000024                     readGyro@gData:
  1385                           	opt stack 0
  1386                           
  1387                           ; 6 bytes @ 0x23
  1388  000024                     	ds	1
  1389  000025                     ___wmul@product:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x24
  1393  000025                     	ds	2
  1394  000027                     ?___ftmul:
  1395                           	opt stack 0
  1396  000027                     ___ftmul@f1:
  1397                           	opt stack 0
  1398                           
  1399                           ; 3 bytes @ 0x26
  1400  000027                     	ds	1
  1401  000028                     ___llmod@counter:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x27
  1405  000028                     	ds	2
  1406  00002A                     ___ftmul@f2:
  1407                           	opt stack 0
  1408                           
  1409                           ; 3 bytes @ 0x29
  1410  00002A                     	ds	3
  1411  00002D                     ??___ftmul:
  1412                           
  1413                           ; 1 bytes @ 0x2C
  1414  00002D                     	ds	3
  1415  000030                     ___ftmul@exp:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x2F
  1419  000030                     	ds	1
  1420  000031                     ___ftmul@f3_as_product:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0x30
  1424  000031                     	ds	3
  1425  000034                     ___ftmul@cntr:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x33
  1429  000034                     	ds	1
  1430  000035                     ___ftmul@sign:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x34
  1434  000035                     	ds	1
  1435  000036                     ?_fround:
  1436                           	opt stack 0
  1437  000036                     ?_scale:
  1438                           	opt stack 0
  1439  000036                     ?___ftneg:
  1440                           	opt stack 0
  1441  000036                     ___ftneg@f1:
  1442                           	opt stack 0
  1443                           
  1444                           ; 3 bytes @ 0x35
  1445  000036                     	ds	3
  1446  000039                     tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           postinc0	equ	0xFEE
  1451                           wreg	equ	0xFE8
  1452                           postdec1	equ	0xFE5
  1453                           fsr1l	equ	0xFE1
  1454                           
  1455                           ; 1 bytes @ 0x38
  1456 ;;
  1457 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1458 ;;
  1459 ;; *************** function _main *****************
  1460 ;; Defined at:
  1461 ;;		line 20 in file "main.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  val2            3   32[BANK1 ] float 
  1466 ;;  val             3   29[BANK1 ] float 
  1467 ;;  show            2   27[BANK1 ] int 
  1468 ;;  c               1   26[BANK1 ] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1479 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1481 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1482 ;;Total ram usage:        9 bytes
  1483 ;; Hardware stack levels required when called:   10
  1484 ;; This function calls:
  1485 ;;		_EUSART1_Read
  1486 ;;		_EUSART1_Write
  1487 ;;		_SYSTEM_Initialize
  1488 ;;		___ftadd
  1489 ;;		___ftmul
  1490 ;;		___ftsub
  1491 ;;		___fttol
  1492 ;;		_computeRollPitch
  1493 ;;		_filterData
  1494 ;;		_interrupt_Init
  1495 ;;		_kalman_Init
  1496 ;;		_pid
  1497 ;;		_pid_Init
  1498 ;;		_printf
  1499 ;;		_readSensors
  1500 ;;		_sensors_Init
  1501 ;;		_unlockI2C
  1502 ;; This function is called by:
  1503 ;;		Startup code after reset
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text0
  1508  001D54                     __ptext0:
  1509                           	opt stack 0
  1510  001D54                     _main:
  1511                           	opt stack 21
  1512                           
  1513                           ;main.c: 22: char c;
  1514                           ;main.c: 23: int show = 0;
  1515                           
  1516                           ;incstack = 0
  1517  001D54  0E00               	movlw	0
  1518  001D56  0101               	movlb	1	; () banked
  1519  001D58  6FA9               	movwf	(main@show+1)& (0+255),b
  1520  001D5A  0E00               	movlw	0
  1521  001D5C  6FA8               	movwf	main@show& (0+255),b
  1522                           
  1523                           ; BSR set to: 1
  1524                           ;main.c: 26: unlockI2C();
  1525  001D5E  ECFD  F023         	call	_unlockI2C	;wreg free
  1526                           
  1527                           ;main.c: 29: SYSTEM_Initialize();
  1528  001D62  ECCF  F024         	call	_SYSTEM_Initialize	;wreg free
  1529                           
  1530                           ;main.c: 30: interrupt_Init();
  1531  001D66  EC4D  F026         	call	_interrupt_Init	;wreg free
  1532                           
  1533                           ;main.c: 31: sensors_Init();
  1534  001D6A  EC33  F026         	call	_sensors_Init	;wreg free
  1535                           
  1536                           ;main.c: 32: pid_Init();
  1537  001D6E  EC42  F01E         	call	_pid_Init	;wreg free
  1538                           
  1539                           ;main.c: 33: kalman_Init();
  1540  001D72  EC31  F019         	call	_kalman_Init	;wreg free
  1541                           
  1542                           ;main.c: 36: accelAlpha = 0;
  1543  001D76  0E00               	movlw	0
  1544  001D78  0100               	movlb	0	; () banked
  1545  001D7A  6FF7               	movwf	_accelAlpha& (0+255),b
  1546  001D7C  0E00               	movlw	0
  1547  001D7E  0100               	movlb	0	; () banked
  1548  001D80  6FF8               	movwf	(_accelAlpha+1)& (0+255),b
  1549  001D82  0E00               	movlw	0
  1550  001D84  0100               	movlb	0	; () banked
  1551  001D86  6FF9               	movwf	(_accelAlpha+2)& (0+255),b
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 37: gyroAlpha = 0;
  1555  001D88  0E00               	movlw	0
  1556  001D8A  0100               	movlb	0	; () banked
  1557  001D8C  6FF4               	movwf	_gyroAlpha& (0+255),b
  1558  001D8E  0E00               	movlw	0
  1559  001D90  0100               	movlb	0	; () banked
  1560  001D92  6FF5               	movwf	(_gyroAlpha+1)& (0+255),b
  1561  001D94  0E00               	movlw	0
  1562  001D96  0100               	movlb	0	; () banked
  1563  001D98  6FF6               	movwf	(_gyroAlpha+2)& (0+255),b
  1564                           
  1565                           ;main.c: 38: while ( !begin ) {readSensors(); filterData(); computeRollPitch();}
  1566  001D9A  D006               	goto	l6477
  1567  001D9C                     l6473:
  1568                           
  1569                           ; BSR set to: 0
  1570  001D9C  EC38  F026         	call	_readSensors	;wreg free
  1571  001DA0  ECC3  F01F         	call	_filterData	;wreg free
  1572  001DA4  ECF8  F011         	call	_computeRollPitch	;wreg free
  1573  001DA8                     l6477:
  1574  001DA8  0100               	movlb	0	; () banked
  1575  001DAA  51ED               	movf	_begin& (0+255),w,b
  1576  001DAC  B4D8               	btfsc	status,2,c
  1577  001DAE  D7F6               	goto	l6473
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;main.c: 39: accelAlpha = .95;
  1581                           
  1582                           ; BSR set to: 0
  1583  001DB0  0E33               	movlw	51
  1584  001DB2  0100               	movlb	0	; () banked
  1585  001DB4  6FF7               	movwf	_accelAlpha& (0+255),b
  1586  001DB6  0E73               	movlw	115
  1587  001DB8  0100               	movlb	0	; () banked
  1588  001DBA  6FF8               	movwf	(_accelAlpha+1)& (0+255),b
  1589  001DBC  0E3F               	movlw	63
  1590  001DBE  0100               	movlb	0	; () banked
  1591  001DC0  6FF9               	movwf	(_accelAlpha+2)& (0+255),b
  1592                           
  1593                           ;main.c: 40: gyroAlpha = .995;
  1594  001DC2  0EB8               	movlw	184
  1595  001DC4  0100               	movlb	0	; () banked
  1596  001DC6  6FF4               	movwf	_gyroAlpha& (0+255),b
  1597  001DC8  0E7E               	movlw	126
  1598  001DCA  0100               	movlb	0	; () banked
  1599  001DCC  6FF5               	movwf	(_gyroAlpha+1)& (0+255),b
  1600  001DCE  0E3F               	movlw	63
  1601  001DD0  0100               	movlb	0	; () banked
  1602  001DD2  6FF6               	movwf	(_gyroAlpha+2)& (0+255),b
  1603  001DD4                     l6481:
  1604                           
  1605                           ;main.c: 44: {
  1606                           ;main.c: 45: readSensors();
  1607  001DD4  EC38  F026         	call	_readSensors	;wreg free
  1608                           
  1609                           ;main.c: 46: filterData();
  1610  001DD8  ECC3  F01F         	call	_filterData	;wreg free
  1611                           
  1612                           ;main.c: 47: computeRollPitch();
  1613  001DDC  ECF8  F011         	call	_computeRollPitch	;wreg free
  1614                           
  1615                           ;main.c: 48: pid( -5.7, 0, 0 );
  1616  001DE0  0E66               	movlw	102
  1617  001DE2  0100               	movlb	0	; () banked
  1618  001DE4  6F8E               	movwf	pid@desiredRoll& (0+255),b
  1619  001DE6  0EB6               	movlw	182
  1620  001DE8  0100               	movlb	0	; () banked
  1621  001DEA  6F8F               	movwf	(pid@desiredRoll+1)& (0+255),b
  1622  001DEC  0EC0               	movlw	192
  1623  001DEE  0100               	movlb	0	; () banked
  1624  001DF0  6F90               	movwf	(pid@desiredRoll+2)& (0+255),b
  1625  001DF2  0E00               	movlw	0
  1626  001DF4  0100               	movlb	0	; () banked
  1627  001DF6  6F91               	movwf	pid@desiredPitch& (0+255),b
  1628  001DF8  0E00               	movlw	0
  1629  001DFA  0100               	movlb	0	; () banked
  1630  001DFC  6F92               	movwf	(pid@desiredPitch+1)& (0+255),b
  1631  001DFE  0E00               	movlw	0
  1632  001E00  0100               	movlb	0	; () banked
  1633  001E02  6F93               	movwf	(pid@desiredPitch+2)& (0+255),b
  1634  001E04  0E00               	movlw	0
  1635  001E06  0100               	movlb	0	; () banked
  1636  001E08  6F94               	movwf	pid@desiredYaw& (0+255),b
  1637  001E0A  0E00               	movlw	0
  1638  001E0C  0100               	movlb	0	; () banked
  1639  001E0E  6F95               	movwf	(pid@desiredYaw+1)& (0+255),b
  1640  001E10  0E00               	movlw	0
  1641  001E12  0100               	movlb	0	; () banked
  1642  001E14  6F96               	movwf	(pid@desiredYaw+2)& (0+255),b
  1643  001E16  ECB3  F01D         	call	_pid	;wreg free
  1644                           
  1645                           ;main.c: 50: if ( PIR3bits.RC1IF ) {
  1646  001E1A  010E               	movlb	14	; () banked
  1647  001E1C  ABCD               	btfss	205,5,b	;volatile
  1648  001E1E  D0DF               	goto	l6517
  1649                           
  1650                           ; BSR set to: 14
  1651                           ;main.c: 51: c = EUSART1_Read();
  1652  001E20  EC08  F026         	call	_EUSART1_Read	;wreg free
  1653  001E24  0101               	movlb	1	; () banked
  1654  001E26  6FA7               	movwf	main@c& (0+255),b
  1655                           
  1656                           ;main.c: 53: switch(c){
  1657  001E28  D09F               	goto	l6513
  1658  001E2A                     l6493:
  1659                           
  1660                           ; BSR set to: 1
  1661  001E2A  C0D7  F067         	movff	_rollkp,___ftadd@f1
  1662  001E2E  C0D8  F068         	movff	_rollkp+1,___ftadd@f1+1
  1663  001E32  C0D9  F069         	movff	_rollkp+2,___ftadd@f1+2
  1664  001E36  0ED7               	movlw	215
  1665  001E38  0100               	movlb	0	; () banked
  1666  001E3A  6F6A               	movwf	___ftadd@f2& (0+255),b
  1667  001E3C  0E23               	movlw	35
  1668  001E3E  0100               	movlb	0	; () banked
  1669  001E40  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  1670  001E42  0E3C               	movlw	60
  1671  001E44  0100               	movlb	0	; () banked
  1672  001E46  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  1673  001E48  EC03  F016         	call	___ftadd	;wreg free
  1674  001E4C  C067  F0D7         	movff	?___ftadd,_rollkp
  1675  001E50  C068  F0D8         	movff	?___ftadd+1,_rollkp+1
  1676  001E54  C069  F0D9         	movff	?___ftadd+2,_rollkp+2
  1677  001E58  D0A4               	goto	l6515
  1678  001E5A                     l6495:
  1679  001E5A  C0D7  F073         	movff	_rollkp,___ftsub@f1
  1680  001E5E  C0D8  F074         	movff	_rollkp+1,___ftsub@f1+1
  1681  001E62  C0D9  F075         	movff	_rollkp+2,___ftsub@f1+2
  1682  001E66  0ED7               	movlw	215
  1683  001E68  0100               	movlb	0	; () banked
  1684  001E6A  6F76               	movwf	___ftsub@f2& (0+255),b
  1685  001E6C  0E23               	movlw	35
  1686  001E6E  0100               	movlb	0	; () banked
  1687  001E70  6F77               	movwf	(___ftsub@f2+1)& (0+255),b
  1688  001E72  0E3C               	movlw	60
  1689  001E74  0100               	movlb	0	; () banked
  1690  001E76  6F78               	movwf	(___ftsub@f2+2)& (0+255),b
  1691  001E78  EC99  F023         	call	___ftsub	;wreg free
  1692  001E7C  C073  F0D7         	movff	?___ftsub,_rollkp
  1693  001E80  C074  F0D8         	movff	?___ftsub+1,_rollkp+1
  1694  001E84  C075  F0D9         	movff	?___ftsub+2,_rollkp+2
  1695  001E88  D08C               	goto	l6515
  1696  001E8A                     l6497:
  1697  001E8A  C0D1  F067         	movff	_rollkd,___ftadd@f1
  1698  001E8E  C0D2  F068         	movff	_rollkd+1,___ftadd@f1+1
  1699  001E92  C0D3  F069         	movff	_rollkd+2,___ftadd@f1+2
  1700  001E96  0ECD               	movlw	205
  1701  001E98  0100               	movlb	0	; () banked
  1702  001E9A  6F6A               	movwf	___ftadd@f2& (0+255),b
  1703  001E9C  0E4C               	movlw	76
  1704  001E9E  0100               	movlb	0	; () banked
  1705  001EA0  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  1706  001EA2  0E3D               	movlw	61
  1707  001EA4  0100               	movlb	0	; () banked
  1708  001EA6  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  1709  001EA8  EC03  F016         	call	___ftadd	;wreg free
  1710  001EAC  C067  F0D1         	movff	?___ftadd,_rollkd
  1711  001EB0  C068  F0D2         	movff	?___ftadd+1,_rollkd+1
  1712  001EB4  C069  F0D3         	movff	?___ftadd+2,_rollkd+2
  1713  001EB8  D074               	goto	l6515
  1714  001EBA                     l6499:
  1715  001EBA  C0D1  F073         	movff	_rollkd,___ftsub@f1
  1716  001EBE  C0D2  F074         	movff	_rollkd+1,___ftsub@f1+1
  1717  001EC2  C0D3  F075         	movff	_rollkd+2,___ftsub@f1+2
  1718  001EC6  0ECD               	movlw	205
  1719  001EC8  0100               	movlb	0	; () banked
  1720  001ECA  6F76               	movwf	___ftsub@f2& (0+255),b
  1721  001ECC  0E4C               	movlw	76
  1722  001ECE  0100               	movlb	0	; () banked
  1723  001ED0  6F77               	movwf	(___ftsub@f2+1)& (0+255),b
  1724  001ED2  0E3D               	movlw	61
  1725  001ED4  0100               	movlb	0	; () banked
  1726  001ED6  6F78               	movwf	(___ftsub@f2+2)& (0+255),b
  1727  001ED8  EC99  F023         	call	___ftsub	;wreg free
  1728  001EDC  C073  F0D1         	movff	?___ftsub,_rollkd
  1729  001EE0  C074  F0D2         	movff	?___ftsub+1,_rollkd+1
  1730  001EE4  C075  F0D3         	movff	?___ftsub+2,_rollkd+2
  1731  001EE8  D05C               	goto	l6515
  1732  001EEA                     l6501:
  1733  001EEA  C0D4  F067         	movff	_rollki,___ftadd@f1
  1734  001EEE  C0D5  F068         	movff	_rollki+1,___ftadd@f1+1
  1735  001EF2  C0D6  F069         	movff	_rollki+2,___ftadd@f1+2
  1736  001EF6  0E12               	movlw	18
  1737  001EF8  0100               	movlb	0	; () banked
  1738  001EFA  6F6A               	movwf	___ftadd@f2& (0+255),b
  1739  001EFC  0E83               	movlw	131
  1740  001EFE  0100               	movlb	0	; () banked
  1741  001F00  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  1742  001F02  0E3A               	movlw	58
  1743  001F04  0100               	movlb	0	; () banked
  1744  001F06  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  1745  001F08  EC03  F016         	call	___ftadd	;wreg free
  1746  001F0C  C067  F0D4         	movff	?___ftadd,_rollki
  1747  001F10  C068  F0D5         	movff	?___ftadd+1,_rollki+1
  1748  001F14  C069  F0D6         	movff	?___ftadd+2,_rollki+2
  1749  001F18  D044               	goto	l6515
  1750  001F1A                     l6503:
  1751  001F1A  C0D4  F073         	movff	_rollki,___ftsub@f1
  1752  001F1E  C0D5  F074         	movff	_rollki+1,___ftsub@f1+1
  1753  001F22  C0D6  F075         	movff	_rollki+2,___ftsub@f1+2
  1754  001F26  0E12               	movlw	18
  1755  001F28  0100               	movlb	0	; () banked
  1756  001F2A  6F76               	movwf	___ftsub@f2& (0+255),b
  1757  001F2C  0E83               	movlw	131
  1758  001F2E  0100               	movlb	0	; () banked
  1759  001F30  6F77               	movwf	(___ftsub@f2+1)& (0+255),b
  1760  001F32  0E3A               	movlw	58
  1761  001F34  0100               	movlb	0	; () banked
  1762  001F36  6F78               	movwf	(___ftsub@f2+2)& (0+255),b
  1763  001F38  EC99  F023         	call	___ftsub	;wreg free
  1764  001F3C  C073  F0D4         	movff	?___ftsub,_rollki
  1765  001F40  C074  F0D5         	movff	?___ftsub+1,_rollki+1
  1766  001F44  C075  F0D6         	movff	?___ftsub+2,_rollki+2
  1767  001F48  D02C               	goto	l6515
  1768  001F4A                     l6505:
  1769  001F4A  0E02               	movlw	2
  1770  001F4C  0100               	movlb	0	; () banked
  1771  001F4E  27DC               	addwf	_throttle& (0+255),f,b
  1772  001F50  0E00               	movlw	0
  1773  001F52  D004               	goto	L1
  1774  001F54                     l6507:
  1775  001F54  0100               	movlb	0	; () banked
  1776  001F56  0EFE               	movlw	254
  1777  001F58  27DC               	addwf	_throttle& (0+255),f,b
  1778  001F5A  0EFF               	movlw	255
  1779  001F5C                     L1:
  1780  001F5C  23DD               	addwfc	(_throttle+1)& (0+255),f,b
  1781  001F5E  D021               	goto	l6515
  1782  001F60                     l6509:
  1783  001F60  0E01               	movlw	1
  1784  001F62  0101               	movlb	1	; () banked
  1785  001F64  1BA8               	xorwf	main@show& (0+255),f,b
  1786                           
  1787                           ; BSR set to: 1
  1788                           ;main.c: 64: }
  1789                           
  1790                           ; BSR set to: 1
  1791                           
  1792                           ;main.c: 63: default: break;
  1793  001F66  D01D               	goto	l6515
  1794  001F68                     l6513:
  1795                           
  1796                           ; BSR set to: 1
  1797  001F68  0101               	movlb	1	; () banked
  1798  001F6A  51A7               	movf	main@c& (0+255),w,b
  1799                           
  1800                           ; Switch size 1, requested type "space"
  1801                           ; Number of cases is 9, Range of values is 97 to 122
  1802                           ; switch strategies available:
  1803                           ; Name         Instructions Cycles
  1804                           ; simple_byte           28    15 (average)
  1805                           ;	Chosen strategy is simple_byte
  1806  001F6C  0A61               	xorlw	97	; case 97
  1807  001F6E  B4D8               	btfsc	status,2,c
  1808  001F70  D774               	goto	l6495
  1809  001F72  0A05               	xorlw	5	; case 100
  1810  001F74  B4D8               	btfsc	status,2,c
  1811  001F76  D7D1               	goto	l6503
  1812  001F78  0A01               	xorlw	1	; case 101
  1813  001F7A  B4D8               	btfsc	status,2,c
  1814  001F7C  D7B6               	goto	l6501
  1815  001F7E  0A02               	xorlw	2	; case 103
  1816  001F80  B4D8               	btfsc	status,2,c
  1817  001F82  D7E8               	goto	l6507
  1818  001F84  0A16               	xorlw	22	; case 113
  1819  001F86  B4D8               	btfsc	status,2,c
  1820  001F88  D750               	goto	l6493
  1821  001F8A  0A02               	xorlw	2	; case 115
  1822  001F8C  B4D8               	btfsc	status,2,c
  1823  001F8E  D795               	goto	l6499
  1824  001F90  0A07               	xorlw	7	; case 116
  1825  001F92  B4D8               	btfsc	status,2,c
  1826  001F94  D7DA               	goto	l6505
  1827  001F96  0A03               	xorlw	3	; case 119
  1828  001F98  B4D8               	btfsc	status,2,c
  1829  001F9A  D777               	goto	l6497
  1830  001F9C  0A0D               	xorlw	13	; case 122
  1831  001F9E  B4D8               	btfsc	status,2,c
  1832  001FA0  D7DF               	goto	l6509
  1833  001FA2                     l6515:
  1834                           
  1835                           ;main.c: 65: printf( "kp: %.2f   kd: %.2f   ki: %.3f   throttle: %i \n\r", rollkp, rollk
      +                          d, rollki, throttle );
  1836  001FA2  0E98               	movlw	low STR_1
  1837  001FA4  0100               	movlb	0	; () banked
  1838  001FA6  6F82               	movwf	printf@f& (0+255),b
  1839  001FA8  0E0F               	movlw	high STR_1
  1840  001FAA  0100               	movlb	0	; () banked
  1841  001FAC  6F83               	movwf	(printf@f+1)& (0+255),b
  1842  001FAE  C0D7  F084         	movff	_rollkp,?_printf+2
  1843  001FB2  C0D8  F085         	movff	_rollkp+1,?_printf+3
  1844  001FB6  C0D9  F086         	movff	_rollkp+2,?_printf+4
  1845  001FBA  C0D1  F087         	movff	_rollkd,?_printf+5
  1846  001FBE  C0D2  F088         	movff	_rollkd+1,?_printf+6
  1847  001FC2  C0D3  F089         	movff	_rollkd+2,?_printf+7
  1848  001FC6  C0D4  F08A         	movff	_rollki,?_printf+8
  1849  001FCA  C0D5  F08B         	movff	_rollki+1,?_printf+9
  1850  001FCE  C0D6  F08C         	movff	_rollki+2,?_printf+10
  1851  001FD2  C0DC  F08D         	movff	_throttle,?_printf+11
  1852  001FD6  C0DD  F08E         	movff	_throttle+1,?_printf+12
  1853  001FDA  ECE5  F007         	call	_printf	;wreg free
  1854  001FDE                     l6517:
  1855                           
  1856                           ;main.c: 66: }
  1857                           ;main.c: 67: if (show) {
  1858  001FDE  0101               	movlb	1	; () banked
  1859  001FE0  51A8               	movf	main@show& (0+255),w,b
  1860  001FE2  0101               	movlb	1	; () banked
  1861  001FE4  11A9               	iorwf	(main@show+1)& (0+255),w,b
  1862  001FE6  B4D8               	btfsc	status,2,c
  1863  001FE8  D6F5               	goto	l6481
  1864                           
  1865                           ; BSR set to: 1
  1866                           ;main.c: 68: float val = roll*100;
  1867  001FEA  C0B6  F027         	movff	_roll,___ftmul@f1
  1868  001FEE  C0B7  F028         	movff	_roll+1,___ftmul@f1+1
  1869  001FF2  C0B8  F029         	movff	_roll+2,___ftmul@f1+2
  1870  001FF6  0E00               	movlw	0
  1871  001FF8  6E2A               	movwf	___ftmul@f2,c
  1872  001FFA  0EC8               	movlw	200
  1873  001FFC  6E2B               	movwf	___ftmul@f2+1,c
  1874  001FFE  0E42               	movlw	66
  1875  002000  6E2C               	movwf	___ftmul@f2+2,c
  1876  002002  EC49  F01F         	call	___ftmul	;wreg free
  1877  002006  C027  F1AA         	movff	?___ftmul,main@val
  1878  00200A  C028  F1AB         	movff	?___ftmul+1,main@val+1
  1879  00200E  C029  F1AC         	movff	?___ftmul+2,main@val+2
  1880                           
  1881                           ;main.c: 69: float val2 = 100;
  1882  002012  0E00               	movlw	0
  1883  002014  0101               	movlb	1	; () banked
  1884  002016  6FAD               	movwf	main@val2& (0+255),b
  1885  002018  0EC8               	movlw	200
  1886  00201A  0101               	movlb	1	; () banked
  1887  00201C  6FAE               	movwf	(main@val2+1)& (0+255),b
  1888  00201E  0E42               	movlw	66
  1889  002020  0101               	movlb	1	; () banked
  1890  002022  6FAF               	movwf	(main@val2+2)& (0+255),b
  1891                           
  1892                           ; BSR set to: 1
  1893                           ;main.c: 70: EUSART1_Write(0xAA);
  1894  002024  0EAA               	movlw	170
  1895  002026  EC19  F026         	call	_EUSART1_Write
  1896                           
  1897                           ;main.c: 71: EUSART1_Write(((int)(val2))>>8);
  1898  00202A  C1AD  F073         	movff	main@val2,___fttol@f1
  1899  00202E  C1AE  F074         	movff	main@val2+1,___fttol@f1+1
  1900  002032  C1AF  F075         	movff	main@val2+2,___fttol@f1+2
  1901  002036  EC51  F01B         	call	___fttol	;wreg free
  1902  00203A  0100               	movlb	0	; () banked
  1903  00203C  C074  F073         	movff	?___fttol+1,?___fttol
  1904  002040  0100               	movlb	0	; () banked
  1905  002042  6B74               	clrf	(?___fttol+1)& (0+255),b
  1906  002044  0100               	movlb	0	; () banked
  1907  002046  BF73               	btfsc	?___fttol& (0+255),7,b
  1908  002048  6974               	setf	(?___fttol+1)& (0+255),b
  1909  00204A  0100               	movlb	0	; () banked
  1910  00204C  5173               	movf	?___fttol& (0+255),w,b
  1911  00204E  EC19  F026         	call	_EUSART1_Write
  1912                           
  1913                           ;main.c: 72: EUSART1_Write(((int)(val2)));
  1914  002052  C1AD  F073         	movff	main@val2,___fttol@f1
  1915  002056  C1AE  F074         	movff	main@val2+1,___fttol@f1+1
  1916  00205A  C1AF  F075         	movff	main@val2+2,___fttol@f1+2
  1917  00205E  EC51  F01B         	call	___fttol	;wreg free
  1918  002062  0100               	movlb	0	; () banked
  1919  002064  5173               	movf	?___fttol& (0+255),w,b
  1920  002066  EC19  F026         	call	_EUSART1_Write
  1921                           
  1922                           ;main.c: 73: EUSART1_Write(((int)(val))>>8);
  1923  00206A  C1AA  F073         	movff	main@val,___fttol@f1
  1924  00206E  C1AB  F074         	movff	main@val+1,___fttol@f1+1
  1925  002072  C1AC  F075         	movff	main@val+2,___fttol@f1+2
  1926  002076  EC51  F01B         	call	___fttol	;wreg free
  1927  00207A  0100               	movlb	0	; () banked
  1928  00207C  C074  F073         	movff	?___fttol+1,?___fttol
  1929  002080  0100               	movlb	0	; () banked
  1930  002082  6B74               	clrf	(?___fttol+1)& (0+255),b
  1931  002084  0100               	movlb	0	; () banked
  1932  002086  BF73               	btfsc	?___fttol& (0+255),7,b
  1933  002088  6974               	setf	(?___fttol+1)& (0+255),b
  1934  00208A  0100               	movlb	0	; () banked
  1935  00208C  5173               	movf	?___fttol& (0+255),w,b
  1936  00208E  EC19  F026         	call	_EUSART1_Write
  1937                           
  1938                           ;main.c: 74: EUSART1_Write((int)(val));
  1939  002092  C1AA  F073         	movff	main@val,___fttol@f1
  1940  002096  C1AB  F074         	movff	main@val+1,___fttol@f1+1
  1941  00209A  C1AC  F075         	movff	main@val+2,___fttol@f1+2
  1942  00209E  EC51  F01B         	call	___fttol	;wreg free
  1943  0020A2  0100               	movlb	0	; () banked
  1944  0020A4  5173               	movf	?___fttol& (0+255),w,b
  1945  0020A6  EC19  F026         	call	_EUSART1_Write
  1946  0020AA  D694               	goto	l6481
  1947  0020AC                     __end_of_main:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           postdec1	equ	0xFE5
  1956                           fsr1l	equ	0xFE1
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _unlockI2C *****************
  1960 ;; Defined at:
  1961 ;;		line 87 in file "main.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  i               2   19[COMRAM] unsigned int 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2, status,0
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1979 ;;Total ram usage:        3 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    4
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text1
  1990  0047FA                     __ptext1:
  1991                           	opt stack 0
  1992  0047FA                     _unlockI2C:
  1993                           	opt stack 26
  1994                           
  1995                           ;main.c: 88: unsigned int i = 0;
  1996                           
  1997                           ;incstack = 0
  1998  0047FA  0E00               	movlw	0
  1999  0047FC  6E15               	movwf	unlockI2C@i+1,c
  2000  0047FE  0E00               	movlw	0
  2001  004800  6E14               	movwf	unlockI2C@i,c
  2002                           
  2003                           ;main.c: 89: TRISCbits.TRISC3 = 0;
  2004  004802  968A               	bcf	3978,3,c	;volatile
  2005                           
  2006                           ;main.c: 90: for ( i = 0; i < 40; i++ ) {
  2007  004804  0E00               	movlw	0
  2008  004806  6E15               	movwf	unlockI2C@i+1,c
  2009  004808  0E00               	movlw	0
  2010  00480A  6E14               	movwf	unlockI2C@i,c
  2011  00480C                     l6137:
  2012  00480C  5015               	movf	unlockI2C@i+1,w,c
  2013  00480E  E110               	bnz	l731
  2014  004810  0E28               	movlw	40
  2015  004812  5C14               	subwf	unlockI2C@i,w,c
  2016  004814  B0D8               	btfsc	status,0,c
  2017  004816  0012               	return	
  2018                           
  2019                           ;main.c: 91: LATCbits.LATC3 ^= 1;
  2020  004818  7685               	btg	3973,3,c	;volatile
  2021                           
  2022                           ;main.c: 92: _delay((unsigned long)((10)*(48000000/4000.0)));
  2023  00481A  0E9C               	movlw	156
  2024  00481C  6E13               	movwf	??_unlockI2C& (0+255),c
  2025  00481E  0ED7               	movlw	215
  2026  004820                     u6017:
  2027  004820  2EE8               	decfsz	wreg,f,c
  2028  004822  D7FE               	bra	u6017
  2029  004824  2E13               	decfsz	??_unlockI2C& (0+255),f,c
  2030  004826  D7FC               	bra	u6017
  2031  004828  F000               	nop	
  2032  00482A  4A14               	infsnz	unlockI2C@i,f,c
  2033  00482C  2A15               	incf	unlockI2C@i+1,f,c
  2034  00482E  D7EE               	goto	l6137
  2035  004830                     l731:
  2036  004830  0012               	return		;funcret
  2037  004832                     __end_of_unlockI2C:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           tblptrl	equ	0xFF6
  2042                           tablat	equ	0xFF5
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           postdec1	equ	0xFE5
  2046                           fsr1l	equ	0xFE1
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _sensors_Init *****************
  2050 ;; Defined at:
  2051 ;;		line 7 in file "sensors.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;		None
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2069 ;;Total ram usage:        0 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    8
  2072 ;; This function calls:
  2073 ;;		_accel_Init
  2074 ;;		_gyro_Init
  2075 ;; This function is called by:
  2076 ;;		_main
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text2
  2081  004C66                     __ptext2:
  2082                           	opt stack 0
  2083  004C66                     _sensors_Init:
  2084                           	opt stack 22
  2085                           
  2086                           ;sensors.c: 8: accel_Init();
  2087                           
  2088                           ;incstack = 0
  2089  004C66  ECE6  F024         	call	_accel_Init	;wreg free
  2090                           
  2091                           ;sensors.c: 9: gyro_Init();
  2092  004C6A  EC82  F025         	call	_gyro_Init	;wreg free
  2093  004C6E  0012               	return		;funcret
  2094  004C70                     __end_of_sensors_Init:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           postinc0	equ	0xFEE
  2101                           wreg	equ	0xFE8
  2102                           postdec1	equ	0xFE5
  2103                           fsr1l	equ	0xFE1
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _gyro_Init *****************
  2107 ;; Defined at:
  2108 ;;		line 18 in file "sensors.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    7
  2129 ;; This function calls:
  2130 ;;		_writei2cData
  2131 ;; This function is called by:
  2132 ;;		_sensors_Init
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text3
  2137  004B04                     __ptext3:
  2138                           	opt stack 0
  2139  004B04                     _gyro_Init:
  2140                           	opt stack 22
  2141                           
  2142                           ;sensors.c: 19: writei2cData( 0b11010110, 0x20, 0xAF );
  2143                           
  2144                           ;incstack = 0
  2145  004B04  0E20               	movlw	32
  2146  004B06  6E15               	movwf	writei2cData@reg,c
  2147  004B08  0EAF               	movlw	175
  2148  004B0A  6E16               	movwf	writei2cData@data,c
  2149  004B0C  0ED6               	movlw	214
  2150  004B0E  EC91  F025         	call	_writei2cData
  2151                           
  2152                           ;sensors.c: 20: writei2cData( 0b11010110, 0x23, 0x10 );
  2153  004B12  0E23               	movlw	35
  2154  004B14  6E15               	movwf	writei2cData@reg,c
  2155  004B16  0E10               	movlw	16
  2156  004B18  6E16               	movwf	writei2cData@data,c
  2157  004B1A  0ED6               	movlw	214
  2158  004B1C  EC91  F025         	call	_writei2cData
  2159  004B20  0012               	return		;funcret
  2160  004B22                     __end_of_gyro_Init:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           tblptrh	equ	0xFF7
  2164                           tblptrl	equ	0xFF6
  2165                           tablat	equ	0xFF5
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           postdec1	equ	0xFE5
  2169                           fsr1l	equ	0xFE1
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function _accel_Init *****************
  2173 ;; Defined at:
  2174 ;;		line 12 in file "sensors.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2, status,0, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    7
  2195 ;; This function calls:
  2196 ;;		_writei2cData
  2197 ;; This function is called by:
  2198 ;;		_sensors_Init
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text4
  2203  0049CC                     __ptext4:
  2204                           	opt stack 0
  2205  0049CC                     _accel_Init:
  2206                           	opt stack 22
  2207                           
  2208                           ;sensors.c: 13: writei2cData( 0b00110010, 0x20, 0x37 );
  2209                           
  2210                           ;incstack = 0
  2211  0049CC  0E20               	movlw	32
  2212  0049CE  6E15               	movwf	writei2cData@reg,c
  2213  0049D0  0E37               	movlw	55
  2214  0049D2  6E16               	movwf	writei2cData@data,c
  2215  0049D4  0E32               	movlw	50
  2216  0049D6  EC91  F025         	call	_writei2cData
  2217                           
  2218                           ;sensors.c: 14: writei2cData( 0b00110010, 0x21, 0x00 );
  2219  0049DA  0E21               	movlw	33
  2220  0049DC  6E15               	movwf	writei2cData@reg,c
  2221  0049DE  0E00               	movlw	0
  2222  0049E0  6E16               	movwf	writei2cData@data,c
  2223  0049E2  0E32               	movlw	50
  2224  0049E4  EC91  F025         	call	_writei2cData
  2225                           
  2226                           ;sensors.c: 15: writei2cData( 0b00110010, 0x22, 0x00 );
  2227  0049E8  0E22               	movlw	34
  2228  0049EA  6E15               	movwf	writei2cData@reg,c
  2229  0049EC  0E00               	movlw	0
  2230  0049EE  6E16               	movwf	writei2cData@data,c
  2231  0049F0  0E32               	movlw	50
  2232  0049F2  EC91  F025         	call	_writei2cData
  2233  0049F6  0012               	return		;funcret
  2234  0049F8                     __end_of_accel_Init:
  2235                           	opt stack 0
  2236                           tblptru	equ	0xFF8
  2237                           tblptrh	equ	0xFF7
  2238                           tblptrl	equ	0xFF6
  2239                           tablat	equ	0xFF5
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           postdec1	equ	0xFE5
  2243                           fsr1l	equ	0xFE1
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _writei2cData *****************
  2247 ;; Defined at:
  2248 ;;		line 48 in file "i2c.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  address         1    wreg     unsigned char 
  2251 ;;  reg             1   20[COMRAM] unsigned char 
  2252 ;;  data            1   21[COMRAM] unsigned char 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  address         1   22[COMRAM] unsigned char 
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  1    wreg      void 
  2257 ;; Registers used:
  2258 ;;		wreg, status,2, status,0, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2267 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2268 ;;Total ram usage:        3 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    6
  2271 ;; This function calls:
  2272 ;;		_starti2c
  2273 ;;		_stopi2c
  2274 ;;		_writei2c
  2275 ;; This function is called by:
  2276 ;;		_accel_Init
  2277 ;;		_gyro_Init
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text5
  2282  004B22                     __ptext5:
  2283                           	opt stack 0
  2284  004B22                     _writei2cData:
  2285                           	opt stack 22
  2286                           
  2287                           ;incstack = 0
  2288                           ;writei2cData@address stored from wreg
  2289  004B22  6E17               	movwf	writei2cData@address,c
  2290                           
  2291                           ;i2c.c: 49: starti2c();
  2292  004B24  EC27  F026         	call	_starti2c	;wreg free
  2293                           
  2294                           ;i2c.c: 50: writei2c( address );
  2295  004B28  5017               	movf	writei2cData@address,w,c
  2296  004B2A  ECF5  F025         	call	_writei2c
  2297                           
  2298                           ;i2c.c: 51: writei2c( reg );
  2299  004B2E  5015               	movf	writei2cData@reg,w,c
  2300  004B30  ECF5  F025         	call	_writei2c
  2301                           
  2302                           ;i2c.c: 52: writei2c( data );
  2303  004B34  5016               	movf	writei2cData@data,w,c
  2304  004B36  ECF5  F025         	call	_writei2c
  2305                           
  2306                           ;i2c.c: 53: stopi2c();
  2307  004B3A  EC50  F026         	call	_stopi2c	;wreg free
  2308  004B3E  0012               	return		;funcret
  2309  004B40                     __end_of_writei2cData:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _readSensors *****************
  2322 ;; Defined at:
  2323 ;;		line 23 in file "sensors.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2341 ;;Total ram usage:        0 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    8
  2344 ;; This function calls:
  2345 ;;		_readAccel
  2346 ;;		_readGyro
  2347 ;; This function is called by:
  2348 ;;		_main
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text6
  2353  004C70                     __ptext6:
  2354                           	opt stack 0
  2355  004C70                     _readSensors:
  2356                           	opt stack 22
  2357                           
  2358                           ;sensors.c: 24: readAccel();
  2359                           
  2360                           ;incstack = 0
  2361  004C70  EC20  F01D         	call	_readAccel	;wreg free
  2362                           
  2363                           ;sensors.c: 25: readGyro();
  2364  004C74  EC0C  F022         	call	_readGyro	;wreg free
  2365  004C78  0012               	return		;funcret
  2366  004C7A                     __end_of_readSensors:
  2367                           	opt stack 0
  2368                           tblptru	equ	0xFF8
  2369                           tblptrh	equ	0xFF7
  2370                           tblptrl	equ	0xFF6
  2371                           tablat	equ	0xFF5
  2372                           postinc0	equ	0xFEE
  2373                           wreg	equ	0xFE8
  2374                           postdec1	equ	0xFE5
  2375                           fsr1l	equ	0xFE1
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _readGyro *****************
  2379 ;; Defined at:
  2380 ;;		line 41 in file "sensors.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  gData           6   35[COMRAM] unsigned char [6]
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2395 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2396 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2397 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2398 ;;Total ram usage:       10 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    7
  2401 ;; This function calls:
  2402 ;;		___awtoft
  2403 ;;		_readi2cData
  2404 ;; This function is called by:
  2405 ;;		_readSensors
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text7
  2410  004418                     __ptext7:
  2411                           	opt stack 0
  2412  004418                     _readGyro:
  2413                           	opt stack 22
  2414                           
  2415                           ;sensors.c: 43: uint8_t gData[6];
  2416                           ;sensors.c: 46: readi2cData( 0b11010110, 0xA8, gData, 6 );
  2417                           
  2418                           ;incstack = 0
  2419  004418  0EA8               	movlw	168
  2420  00441A  6E15               	movwf	readi2cData@reg,c
  2421  00441C  0E24               	movlw	low readGyro@gData
  2422  00441E  6E16               	movwf	readi2cData@data,c
  2423  004420  0E00               	movlw	high readGyro@gData
  2424  004422  6E17               	movwf	readi2cData@data+1,c
  2425  004424  0E06               	movlw	6
  2426  004426  6E18               	movwf	readi2cData@len,c
  2427  004428  0ED6               	movlw	214
  2428  00442A  EC6B  F021         	call	_readi2cData
  2429                           
  2430                           ;sensors.c: 49: gx = (float)((int)gData[0] | ((int)gData[1] << 8));
  2431  00442E  5025               	movf	readGyro@gData+1,w,c
  2432  004430  6E21               	movwf	(??_readGyro+1)& (0+255),c
  2433  004432  6A20               	clrf	??_readGyro& (0+255),c
  2434  004434  5024               	movf	readGyro@gData,w,c
  2435  004436  6E22               	movwf	(??_readGyro+2)& (0+255),c
  2436  004438  6A23               	clrf	(??_readGyro+3)& (0+255),c
  2437  00443A  5020               	movf	??_readGyro,w,c
  2438  00443C  1022               	iorwf	??_readGyro+2,w,c
  2439  00443E  6E1B               	movwf	___awtoft@c,c
  2440  004440  5021               	movf	??_readGyro+1,w,c
  2441  004442  1023               	iorwf	??_readGyro+3,w,c
  2442  004444  6E1C               	movwf	___awtoft@c+1,c
  2443  004446  EC19  F024         	call	___awtoft	;wreg free
  2444  00444A  C01B  F0BF         	movff	?___awtoft,_gx
  2445  00444E  C01C  F0C0         	movff	?___awtoft+1,_gx+1
  2446  004452  C01D  F0C1         	movff	?___awtoft+2,_gx+2
  2447                           
  2448                           ;sensors.c: 50: gy = (float)((int)gData[2] | ((int)gData[3] << 8));
  2449  004456  5027               	movf	readGyro@gData+3,w,c
  2450  004458  6E21               	movwf	(??_readGyro+1)& (0+255),c
  2451  00445A  6A20               	clrf	??_readGyro& (0+255),c
  2452  00445C  5026               	movf	readGyro@gData+2,w,c
  2453  00445E  6E22               	movwf	(??_readGyro+2)& (0+255),c
  2454  004460  6A23               	clrf	(??_readGyro+3)& (0+255),c
  2455  004462  5020               	movf	??_readGyro,w,c
  2456  004464  1022               	iorwf	??_readGyro+2,w,c
  2457  004466  6E1B               	movwf	___awtoft@c,c
  2458  004468  5021               	movf	??_readGyro+1,w,c
  2459  00446A  1023               	iorwf	??_readGyro+3,w,c
  2460  00446C  6E1C               	movwf	___awtoft@c+1,c
  2461  00446E  EC19  F024         	call	___awtoft	;wreg free
  2462  004472  C01B  F0BC         	movff	?___awtoft,_gy
  2463  004476  C01C  F0BD         	movff	?___awtoft+1,_gy+1
  2464  00447A  C01D  F0BE         	movff	?___awtoft+2,_gy+2
  2465                           
  2466                           ;sensors.c: 51: gz = (float)((int)gData[4] | ((int)gData[5] << 8));
  2467  00447E  5029               	movf	readGyro@gData+5,w,c
  2468  004480  6E21               	movwf	(??_readGyro+1)& (0+255),c
  2469  004482  6A20               	clrf	??_readGyro& (0+255),c
  2470  004484  5028               	movf	readGyro@gData+4,w,c
  2471  004486  6E22               	movwf	(??_readGyro+2)& (0+255),c
  2472  004488  6A23               	clrf	(??_readGyro+3)& (0+255),c
  2473  00448A  5020               	movf	??_readGyro,w,c
  2474  00448C  1022               	iorwf	??_readGyro+2,w,c
  2475  00448E  6E1B               	movwf	___awtoft@c,c
  2476  004490  5021               	movf	??_readGyro+1,w,c
  2477  004492  1023               	iorwf	??_readGyro+3,w,c
  2478  004494  6E1C               	movwf	___awtoft@c+1,c
  2479  004496  EC19  F024         	call	___awtoft	;wreg free
  2480  00449A  C01B  F0B9         	movff	?___awtoft,_gz
  2481  00449E  C01C  F0BA         	movff	?___awtoft+1,_gz+1
  2482  0044A2  C01D  F0BB         	movff	?___awtoft+2,_gz+2
  2483  0044A6  0012               	return		;funcret
  2484  0044A8                     __end_of_readGyro:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           postdec1	equ	0xFE5
  2493                           fsr1l	equ	0xFE1
  2494                           status	equ	0xFD8
  2495                           
  2496 ;; *************** function _readAccel *****************
  2497 ;; Defined at:
  2498 ;;		line 28 in file "sensors.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  aData           6   38[BANK0 ] unsigned char [6]
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2513 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2514 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2515 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2516 ;;Total ram usage:       10 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    7
  2519 ;; This function calls:
  2520 ;;		___awtoft
  2521 ;;		___ftdiv
  2522 ;;		_readi2cData
  2523 ;; This function is called by:
  2524 ;;		_readSensors
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text8
  2529  003A40                     __ptext8:
  2530                           	opt stack 0
  2531  003A40                     _readAccel:
  2532                           	opt stack 22
  2533                           
  2534                           ;sensors.c: 30: uint8_t aData[6];
  2535                           ;sensors.c: 33: readi2cData( 0b00110010, 0xA8, aData, 6 );
  2536                           
  2537                           ;incstack = 0
  2538  003A40  0EA8               	movlw	168
  2539  003A42  6E15               	movwf	readi2cData@reg,c
  2540  003A44  0E86               	movlw	low readAccel@aData
  2541  003A46  6E16               	movwf	readi2cData@data,c
  2542  003A48  0E00               	movlw	high readAccel@aData
  2543  003A4A  6E17               	movwf	readi2cData@data+1,c
  2544  003A4C  0E06               	movlw	6
  2545  003A4E  6E18               	movwf	readi2cData@len,c
  2546  003A50  0E32               	movlw	50
  2547  003A52  EC6B  F021         	call	_readi2cData
  2548                           
  2549                           ;sensors.c: 36: ax = (float)((int)aData[0] | ((int)aData[1] << 8))/16;
  2550  003A56  0100               	movlb	0	; () banked
  2551  003A58  5187               	movf	(readAccel@aData+1)& (0+255),w,b
  2552  003A5A  0100               	movlb	0	; () banked
  2553  003A5C  6F83               	movwf	(??_readAccel+1)& (0+255),b
  2554  003A5E  6B82               	clrf	??_readAccel& (0+255),b
  2555  003A60  0100               	movlb	0	; () banked
  2556  003A62  5186               	movf	readAccel@aData& (0+255),w,b
  2557  003A64  0100               	movlb	0	; () banked
  2558  003A66  6F84               	movwf	(??_readAccel+2)& (0+255),b
  2559  003A68  6B85               	clrf	(??_readAccel+3)& (0+255),b
  2560  003A6A  0100               	movlb	0	; () banked
  2561  003A6C  5182               	movf	??_readAccel& (0+255),w,b
  2562  003A6E  0100               	movlb	0	; () banked
  2563  003A70  1184               	iorwf	(??_readAccel+2)& (0+255),w,b
  2564  003A72  6E1B               	movwf	___awtoft@c,c
  2565  003A74  0100               	movlb	0	; () banked
  2566  003A76  5183               	movf	(??_readAccel+1)& (0+255),w,b
  2567  003A78  0100               	movlb	0	; () banked
  2568  003A7A  1185               	iorwf	(??_readAccel+3)& (0+255),w,b
  2569  003A7C  6E1C               	movwf	___awtoft@c+1,c
  2570  003A7E  EC19  F024         	call	___awtoft	;wreg free
  2571  003A82  C01B  F073         	movff	?___awtoft,___ftdiv@f1
  2572  003A86  C01C  F074         	movff	?___awtoft+1,___ftdiv@f1+1
  2573  003A8A  C01D  F075         	movff	?___awtoft+2,___ftdiv@f1+2
  2574  003A8E  0E00               	movlw	0
  2575  003A90  0100               	movlb	0	; () banked
  2576  003A92  6F76               	movwf	___ftdiv@f2& (0+255),b
  2577  003A94  0E80               	movlw	128
  2578  003A96  0100               	movlb	0	; () banked
  2579  003A98  6F77               	movwf	(___ftdiv@f2+1)& (0+255),b
  2580  003A9A  0E41               	movlw	65
  2581  003A9C  0100               	movlb	0	; () banked
  2582  003A9E  6F78               	movwf	(___ftdiv@f2+2)& (0+255),b
  2583  003AA0  ECAB  F01A         	call	___ftdiv	;wreg free
  2584  003AA4  C073  F0C8         	movff	?___ftdiv,_ax
  2585  003AA8  C074  F0C9         	movff	?___ftdiv+1,_ax+1
  2586  003AAC  C075  F0CA         	movff	?___ftdiv+2,_ax+2
  2587                           
  2588                           ;sensors.c: 37: ay = (float)((int)aData[2] | ((int)aData[3] << 8))/16;
  2589  003AB0  0100               	movlb	0	; () banked
  2590  003AB2  5189               	movf	(readAccel@aData+3)& (0+255),w,b
  2591  003AB4  0100               	movlb	0	; () banked
  2592  003AB6  6F83               	movwf	(??_readAccel+1)& (0+255),b
  2593  003AB8  6B82               	clrf	??_readAccel& (0+255),b
  2594  003ABA  0100               	movlb	0	; () banked
  2595  003ABC  5188               	movf	(readAccel@aData+2)& (0+255),w,b
  2596  003ABE  0100               	movlb	0	; () banked
  2597  003AC0  6F84               	movwf	(??_readAccel+2)& (0+255),b
  2598  003AC2  6B85               	clrf	(??_readAccel+3)& (0+255),b
  2599  003AC4  0100               	movlb	0	; () banked
  2600  003AC6  5182               	movf	??_readAccel& (0+255),w,b
  2601  003AC8  0100               	movlb	0	; () banked
  2602  003ACA  1184               	iorwf	(??_readAccel+2)& (0+255),w,b
  2603  003ACC  6E1B               	movwf	___awtoft@c,c
  2604  003ACE  0100               	movlb	0	; () banked
  2605  003AD0  5183               	movf	(??_readAccel+1)& (0+255),w,b
  2606  003AD2  0100               	movlb	0	; () banked
  2607  003AD4  1185               	iorwf	(??_readAccel+3)& (0+255),w,b
  2608  003AD6  6E1C               	movwf	___awtoft@c+1,c
  2609  003AD8  EC19  F024         	call	___awtoft	;wreg free
  2610  003ADC  C01B  F073         	movff	?___awtoft,___ftdiv@f1
  2611  003AE0  C01C  F074         	movff	?___awtoft+1,___ftdiv@f1+1
  2612  003AE4  C01D  F075         	movff	?___awtoft+2,___ftdiv@f1+2
  2613  003AE8  0E00               	movlw	0
  2614  003AEA  0100               	movlb	0	; () banked
  2615  003AEC  6F76               	movwf	___ftdiv@f2& (0+255),b
  2616  003AEE  0E80               	movlw	128
  2617  003AF0  0100               	movlb	0	; () banked
  2618  003AF2  6F77               	movwf	(___ftdiv@f2+1)& (0+255),b
  2619  003AF4  0E41               	movlw	65
  2620  003AF6  0100               	movlb	0	; () banked
  2621  003AF8  6F78               	movwf	(___ftdiv@f2+2)& (0+255),b
  2622  003AFA  ECAB  F01A         	call	___ftdiv	;wreg free
  2623  003AFE  C073  F0C5         	movff	?___ftdiv,_ay
  2624  003B02  C074  F0C6         	movff	?___ftdiv+1,_ay+1
  2625  003B06  C075  F0C7         	movff	?___ftdiv+2,_ay+2
  2626                           
  2627                           ;sensors.c: 38: az = (float)((int)aData[4] | ((int)aData[5] << 8))/16;
  2628  003B0A  0100               	movlb	0	; () banked
  2629  003B0C  518B               	movf	(readAccel@aData+5)& (0+255),w,b
  2630  003B0E  0100               	movlb	0	; () banked
  2631  003B10  6F83               	movwf	(??_readAccel+1)& (0+255),b
  2632  003B12  6B82               	clrf	??_readAccel& (0+255),b
  2633  003B14  0100               	movlb	0	; () banked
  2634  003B16  518A               	movf	(readAccel@aData+4)& (0+255),w,b
  2635  003B18  0100               	movlb	0	; () banked
  2636  003B1A  6F84               	movwf	(??_readAccel+2)& (0+255),b
  2637  003B1C  6B85               	clrf	(??_readAccel+3)& (0+255),b
  2638  003B1E  0100               	movlb	0	; () banked
  2639  003B20  5182               	movf	??_readAccel& (0+255),w,b
  2640  003B22  0100               	movlb	0	; () banked
  2641  003B24  1184               	iorwf	(??_readAccel+2)& (0+255),w,b
  2642  003B26  6E1B               	movwf	___awtoft@c,c
  2643  003B28  0100               	movlb	0	; () banked
  2644  003B2A  5183               	movf	(??_readAccel+1)& (0+255),w,b
  2645  003B2C  0100               	movlb	0	; () banked
  2646  003B2E  1185               	iorwf	(??_readAccel+3)& (0+255),w,b
  2647  003B30  6E1C               	movwf	___awtoft@c+1,c
  2648  003B32  EC19  F024         	call	___awtoft	;wreg free
  2649  003B36  C01B  F073         	movff	?___awtoft,___ftdiv@f1
  2650  003B3A  C01C  F074         	movff	?___awtoft+1,___ftdiv@f1+1
  2651  003B3E  C01D  F075         	movff	?___awtoft+2,___ftdiv@f1+2
  2652  003B42  0E00               	movlw	0
  2653  003B44  0100               	movlb	0	; () banked
  2654  003B46  6F76               	movwf	___ftdiv@f2& (0+255),b
  2655  003B48  0E80               	movlw	128
  2656  003B4A  0100               	movlb	0	; () banked
  2657  003B4C  6F77               	movwf	(___ftdiv@f2+1)& (0+255),b
  2658  003B4E  0E41               	movlw	65
  2659  003B50  0100               	movlb	0	; () banked
  2660  003B52  6F78               	movwf	(___ftdiv@f2+2)& (0+255),b
  2661  003B54  ECAB  F01A         	call	___ftdiv	;wreg free
  2662  003B58  C073  F0C2         	movff	?___ftdiv,_az
  2663  003B5C  C074  F0C3         	movff	?___ftdiv+1,_az+1
  2664  003B60  C075  F0C4         	movff	?___ftdiv+2,_az+2
  2665  003B64  0012               	return		;funcret
  2666  003B66                     __end_of_readAccel:
  2667                           	opt stack 0
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           postdec1	equ	0xFE5
  2675                           fsr1l	equ	0xFE1
  2676                           status	equ	0xFD8
  2677                           
  2678 ;; *************** function _readi2cData *****************
  2679 ;; Defined at:
  2680 ;;		line 56 in file "i2c.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;  address         1    wreg     unsigned char 
  2683 ;;  reg             1   20[COMRAM] unsigned char 
  2684 ;;  data            2   21[COMRAM] PTR unsigned char 
  2685 ;;		 -> readGyro@gData(6), readAccel@aData(6), 
  2686 ;;  len             1   23[COMRAM] unsigned char 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  address         1   28[COMRAM] unsigned char 
  2689 ;;  i               2   29[COMRAM] unsigned int 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2699 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2700 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2701 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2702 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2703 ;;Total ram usage:       11 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    6
  2706 ;; This function calls:
  2707 ;;		_acki2c
  2708 ;;		_checkI2Cbusy
  2709 ;;		_readi2c
  2710 ;;		_starti2c
  2711 ;;		_stopi2c
  2712 ;;		_writei2c
  2713 ;; This function is called by:
  2714 ;;		_readAccel
  2715 ;;		_readGyro
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text9
  2720  0042D6                     __ptext9:
  2721                           	opt stack 0
  2722  0042D6                     _readi2cData:
  2723                           	opt stack 22
  2724                           
  2725                           ;incstack = 0
  2726                           ;readi2cData@address stored from wreg
  2727  0042D6  6E1D               	movwf	readi2cData@address,c
  2728                           
  2729                           ;i2c.c: 57: unsigned int i = 0;
  2730  0042D8  0E00               	movlw	0
  2731  0042DA  6E1F               	movwf	readi2cData@i+1,c
  2732  0042DC  0E00               	movlw	0
  2733  0042DE  6E1E               	movwf	readi2cData@i,c
  2734                           
  2735                           ;i2c.c: 59: starti2c();
  2736  0042E0  EC27  F026         	call	_starti2c	;wreg free
  2737                           
  2738                           ;i2c.c: 60: writei2c(address & ~0x01);
  2739  0042E4  501D               	movf	readi2cData@address,w,c
  2740  0042E6  0BFE               	andlw	254
  2741  0042E8  ECF5  F025         	call	_writei2c
  2742                           
  2743                           ;i2c.c: 61: writei2c(reg);
  2744  0042EC  5015               	movf	readi2cData@reg,w,c
  2745  0042EE  ECF5  F025         	call	_writei2c
  2746                           
  2747                           ;i2c.c: 62: stopi2c();
  2748  0042F2  EC50  F026         	call	_stopi2c	;wreg free
  2749                           
  2750                           ;i2c.c: 64: starti2c();
  2751  0042F6  EC27  F026         	call	_starti2c	;wreg free
  2752                           
  2753                           ;i2c.c: 65: writei2c(address | 0x01);
  2754  0042FA  501D               	movf	readi2cData@address,w,c
  2755  0042FC  0901               	iorlw	1
  2756  0042FE  ECF5  F025         	call	_writei2c
  2757                           
  2758                           ;i2c.c: 67: for ( i = 0; i < len-1; i++) {
  2759  004302  0E00               	movlw	0
  2760  004304  6E1F               	movwf	readi2cData@i+1,c
  2761  004306  0E00               	movlw	0
  2762  004308  6E1E               	movwf	readi2cData@i,c
  2763  00430A  D011               	goto	l5473
  2764  00430C                     l5463:
  2765                           
  2766                           ;i2c.c: 68: data[i] = readi2c();
  2767  00430C  501E               	movf	readi2cData@i,w,c
  2768  00430E  2416               	addwf	readi2cData@data,w,c
  2769  004310  6ED9               	movwf	fsr2l,c
  2770  004312  501F               	movf	readi2cData@i+1,w,c
  2771  004314  2017               	addwfc	readi2cData@data+1,w,c
  2772  004316  6EDA               	movwf	fsr2h,c
  2773  004318  EC11  F026         	call	_readi2c	;wreg free
  2774  00431C  6EDF               	movwf	indf2,c
  2775                           
  2776                           ;i2c.c: 69: checkI2Cbusy();
  2777  00431E  ECFF  F025         	call	_checkI2Cbusy	;wreg free
  2778                           
  2779                           ;i2c.c: 70: acki2c();
  2780  004322  EC4A  F026         	call	_acki2c	;wreg free
  2781                           
  2782                           ;i2c.c: 71: checkI2Cbusy();
  2783  004326  ECFF  F025         	call	_checkI2Cbusy	;wreg free
  2784  00432A  4A1E               	infsnz	readi2cData@i,f,c
  2785  00432C  2A1F               	incf	readi2cData@i+1,f,c
  2786  00432E                     l5473:
  2787  00432E  0EFF               	movlw	255
  2788  004330  6E19               	movwf	??_readi2cData& (0+255),c
  2789  004332  0EFF               	movlw	255
  2790  004334  6E1A               	movwf	(??_readi2cData+1)& (0+255),c
  2791  004336  5018               	movf	readi2cData@len,w,c
  2792  004338  6E1B               	movwf	(??_readi2cData+2)& (0+255),c
  2793  00433A  6A1C               	clrf	(??_readi2cData+3)& (0+255),c
  2794  00433C  5019               	movf	??_readi2cData,w,c
  2795  00433E  261B               	addwf	??_readi2cData+2,f,c
  2796  004340  501A               	movf	??_readi2cData+1,w,c
  2797  004342  221C               	addwfc	??_readi2cData+3,f,c
  2798  004344  501B               	movf	??_readi2cData+2,w,c
  2799  004346  5C1E               	subwf	readi2cData@i,w,c
  2800  004348  501C               	movf	??_readi2cData+3,w,c
  2801  00434A  581F               	subwfb	readi2cData@i+1,w,c
  2802  00434C  A0D8               	btfss	status,0,c
  2803  00434E  D7DE               	goto	l5463
  2804                           
  2805                           ;i2c.c: 72: }
  2806                           ;i2c.c: 74: data[len-1] = readi2c();
  2807  004350  0EFF               	movlw	255
  2808  004352  6E19               	movwf	??_readi2cData& (0+255),c
  2809  004354  0EFF               	movlw	255
  2810  004356  6E1A               	movwf	(??_readi2cData+1)& (0+255),c
  2811  004358  5018               	movf	readi2cData@len,w,c
  2812  00435A  6E1B               	movwf	(??_readi2cData+2)& (0+255),c
  2813  00435C  6A1C               	clrf	(??_readi2cData+3)& (0+255),c
  2814  00435E  5019               	movf	??_readi2cData,w,c
  2815  004360  261B               	addwf	??_readi2cData+2,f,c
  2816  004362  501A               	movf	??_readi2cData+1,w,c
  2817  004364  221C               	addwfc	??_readi2cData+3,f,c
  2818  004366  501B               	movf	??_readi2cData+2,w,c
  2819  004368  2416               	addwf	readi2cData@data,w,c
  2820  00436A  6ED9               	movwf	fsr2l,c
  2821  00436C  501C               	movf	??_readi2cData+3,w,c
  2822  00436E  2017               	addwfc	readi2cData@data+1,w,c
  2823  004370  6EDA               	movwf	fsr2h,c
  2824  004372  EC11  F026         	call	_readi2c	;wreg free
  2825  004376  6EDF               	movwf	indf2,c
  2826                           
  2827                           ;i2c.c: 75: checkI2Cbusy();
  2828  004378  ECFF  F025         	call	_checkI2Cbusy	;wreg free
  2829                           
  2830                           ;i2c.c: 76: stopi2c();
  2831  00437C  EC50  F026         	call	_stopi2c	;wreg free
  2832  004380  0012               	return		;funcret
  2833  004382                     __end_of_readi2cData:
  2834                           	opt stack 0
  2835                           tblptru	equ	0xFF8
  2836                           tblptrh	equ	0xFF7
  2837                           tblptrl	equ	0xFF6
  2838                           tablat	equ	0xFF5
  2839                           postinc0	equ	0xFEE
  2840                           wreg	equ	0xFE8
  2841                           postdec1	equ	0xFE5
  2842                           fsr1l	equ	0xFE1
  2843                           indf2	equ	0xFDF
  2844                           fsr2h	equ	0xFDA
  2845                           fsr2l	equ	0xFD9
  2846                           status	equ	0xFD8
  2847                           
  2848 ;; *************** function _writei2c *****************
  2849 ;; Defined at:
  2850 ;;		line 17 in file "i2c.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  data            1    wreg     unsigned char 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  data            1   19[COMRAM] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2868 ;;Total ram usage:        1 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    5
  2871 ;; This function calls:
  2872 ;;		_checkI2Cbusy
  2873 ;; This function is called by:
  2874 ;;		_writei2cData
  2875 ;;		_readi2cData
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text10
  2880  004BEA                     __ptext10:
  2881                           	opt stack 0
  2882  004BEA                     _writei2c:
  2883                           	opt stack 22
  2884                           
  2885                           ;incstack = 0
  2886                           ;writei2c@data stored from wreg
  2887  004BEA  6E14               	movwf	writei2c@data,c
  2888                           
  2889                           ;i2c.c: 18: checkI2Cbusy();
  2890  004BEC  ECFF  F025         	call	_checkI2Cbusy	;wreg free
  2891                           
  2892                           ;i2c.c: 19: SSP1BUF = data;
  2893  004BF0  C014  FF92         	movff	writei2c@data,3986	;volatile
  2894  004BF4                     l865:
  2895  004BF4  B095               	btfsc	3989,0,c	;volatile
  2896  004BF6  D7FE               	goto	l865
  2897                           
  2898                           ;i2c.c: 21: checkI2Cbusy();
  2899  004BF8  ECFF  F025         	call	_checkI2Cbusy	;wreg free
  2900  004BFC  0012               	return		;funcret
  2901  004BFE                     __end_of_writei2c:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           postinc0	equ	0xFEE
  2908                           wreg	equ	0xFE8
  2909                           postdec1	equ	0xFE5
  2910                           fsr1l	equ	0xFE1
  2911                           indf2	equ	0xFDF
  2912                           fsr2h	equ	0xFDA
  2913                           fsr2l	equ	0xFD9
  2914                           status	equ	0xFD8
  2915                           
  2916 ;; *************** function _stopi2c *****************
  2917 ;; Defined at:
  2918 ;;		line 44 in file "i2c.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;		None
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;		None
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		None
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2936 ;;Total ram usage:        0 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    4
  2939 ;; This function calls:
  2940 ;;		Nothing
  2941 ;; This function is called by:
  2942 ;;		_writei2cData
  2943 ;;		_readi2cData
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text11
  2948  004CA0                     __ptext11:
  2949                           	opt stack 0
  2950  004CA0                     _stopi2c:
  2951                           	opt stack 23
  2952                           
  2953                           ;i2c.c: 45: SSP1CON2bits.PEN = 1;
  2954                           
  2955                           ;incstack = 0
  2956  004CA0  8497               	bsf	3991,2,c	;volatile
  2957  004CA2  0012               	return		;funcret
  2958  004CA4                     __end_of_stopi2c:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           postdec1	equ	0xFE5
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           fsr2h	equ	0xFDA
  2970                           fsr2l	equ	0xFD9
  2971                           status	equ	0xFD8
  2972                           
  2973 ;; *************** function _starti2c *****************
  2974 ;; Defined at:
  2975 ;;		line 11 in file "i2c.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;		None
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;		None
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		wreg, status,2, status,0, cstack
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2993 ;;Total ram usage:        0 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    5
  2996 ;; This function calls:
  2997 ;;		_checkI2Cbusy
  2998 ;; This function is called by:
  2999 ;;		_writei2cData
  3000 ;;		_readi2cData
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text12
  3005  004C4E                     __ptext12:
  3006                           	opt stack 0
  3007  004C4E                     _starti2c:
  3008                           	opt stack 22
  3009                           
  3010                           ;i2c.c: 12: checkI2Cbusy();
  3011                           
  3012                           ;incstack = 0
  3013  004C4E  ECFF  F025         	call	_checkI2Cbusy	;wreg free
  3014                           
  3015                           ;i2c.c: 13: SSP1CON2bits.SEN = 1;
  3016  004C52  8097               	bsf	3991,0,c	;volatile
  3017                           
  3018                           ;i2c.c: 14: checkI2Cbusy();
  3019  004C54  ECFF  F025         	call	_checkI2Cbusy	;wreg free
  3020  004C58  0012               	return		;funcret
  3021  004C5A                     __end_of_starti2c:
  3022                           	opt stack 0
  3023                           tblptru	equ	0xFF8
  3024                           tblptrh	equ	0xFF7
  3025                           tblptrl	equ	0xFF6
  3026                           tablat	equ	0xFF5
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           postdec1	equ	0xFE5
  3030                           fsr1l	equ	0xFE1
  3031                           indf2	equ	0xFDF
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _checkI2Cbusy *****************
  3037 ;; Defined at:
  3038 ;;		line 6 in file "i2c.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  2  855[None  ] int 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3055 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3056 ;;Total ram usage:        1 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    4
  3059 ;; This function calls:
  3060 ;;		Nothing
  3061 ;; This function is called by:
  3062 ;;		_starti2c
  3063 ;;		_writei2c
  3064 ;;		_readi2cData
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text13
  3069  004BFE                     __ptext13:
  3070                           	opt stack 0
  3071  004BFE                     _checkI2Cbusy:
  3072                           	opt stack 22
  3073  004BFE                     l5205:
  3074  004BFE  CF97 F013          	movff	3991,??_checkI2Cbusy	;volatile
  3075  004C02  0E1F               	movlw	31
  3076  004C04  1613               	andwf	??_checkI2Cbusy,f,c
  3077  004C06  A4D8               	btfss	status,2,c
  3078  004C08  D7FA               	goto	l5205
  3079  004C0A  A495               	btfss	3989,2,c	;volatile
  3080  004C0C  0012               	return	
  3081  004C0E  D7F7               	goto	l5205
  3082  004C10                     __end_of_checkI2Cbusy:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           postinc0	equ	0xFEE
  3089                           wreg	equ	0xFE8
  3090                           postdec1	equ	0xFE5
  3091                           fsr1l	equ	0xFE1
  3092                           indf2	equ	0xFDF
  3093                           fsr2h	equ	0xFDA
  3094                           fsr2l	equ	0xFD9
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _readi2c *****************
  3098 ;; Defined at:
  3099 ;;		line 24 in file "i2c.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;		None
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  1    wreg      unsigned char 
  3106 ;; Registers used:
  3107 ;;		wreg, status,2
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3117 ;;Total ram usage:        0 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    4
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_readi2cData
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text14
  3128  004C22                     __ptext14:
  3129                           	opt stack 0
  3130  004C22                     _readi2c:
  3131                           	opt stack 23
  3132                           
  3133                           ;i2c.c: 25: SSP1CON2bits.RCEN = 1;
  3134                           
  3135                           ;incstack = 0
  3136  004C22  8697               	bsf	3991,3,c	;volatile
  3137  004C24                     l871:
  3138  004C24  A095               	btfss	3989,0,c	;volatile
  3139  004C26  D7FE               	goto	l871
  3140                           
  3141                           ;i2c.c: 28: SSP1STATbits.BF = 0;
  3142  004C28  9095               	bcf	3989,0,c	;volatile
  3143                           
  3144                           ;i2c.c: 29: PIR3bits.SSP1IF = 0;
  3145  004C2A  010E               	movlb	14	; () banked
  3146  004C2C  91CD               	bcf	205,0,b	;volatile
  3147                           
  3148                           ; BSR set to: 14
  3149                           ;i2c.c: 31: return ( SSP1BUF );
  3150  004C2E  5092               	movf	3986,w,c	;volatile
  3151  004C30  0012               	return	
  3152  004C32                     __end_of_readi2c:
  3153                           	opt stack 0
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           postinc0	equ	0xFEE
  3159                           wreg	equ	0xFE8
  3160                           postdec1	equ	0xFE5
  3161                           fsr1l	equ	0xFE1
  3162                           indf2	equ	0xFDF
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167 ;; *************** function _acki2c *****************
  3168 ;; Defined at:
  3169 ;;		line 34 in file "i2c.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      void 
  3176 ;; Registers used:
  3177 ;;		None
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3187 ;;Total ram usage:        0 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    4
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_readi2cData
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text15
  3198  004C94                     __ptext15:
  3199                           	opt stack 0
  3200  004C94                     _acki2c:
  3201                           	opt stack 23
  3202                           
  3203                           ;i2c.c: 35: SSP1CON2bits.ACKDT = 0;
  3204                           
  3205                           ; BSR set to: 14
  3206                           ;incstack = 0
  3207  004C94  9A97               	bcf	3991,5,c	;volatile
  3208                           
  3209                           ;i2c.c: 36: SSP1CON2bits.ACKEN = 1;
  3210  004C96  8897               	bsf	3991,4,c	;volatile
  3211  004C98  0012               	return		;funcret
  3212  004C9A                     __end_of_acki2c:
  3213                           	opt stack 0
  3214                           tblptru	equ	0xFF8
  3215                           tblptrh	equ	0xFF7
  3216                           tblptrl	equ	0xFF6
  3217                           tablat	equ	0xFF5
  3218                           postinc0	equ	0xFEE
  3219                           wreg	equ	0xFE8
  3220                           postdec1	equ	0xFE5
  3221                           fsr1l	equ	0xFE1
  3222                           indf2	equ	0xFDF
  3223                           fsr2h	equ	0xFDA
  3224                           fsr2l	equ	0xFD9
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function ___awtoft *****************
  3228 ;; Defined at:
  3229 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  c               2   26[COMRAM] int 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  sign            1   29[COMRAM] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  3   26[COMRAM] float 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3243 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3246 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3247 ;;Total ram usage:        4 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    5
  3250 ;; This function calls:
  3251 ;;		___ftpack
  3252 ;; This function is called by:
  3253 ;;		_readAccel
  3254 ;;		_readGyro
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text16
  3259  004832                     __ptext16:
  3260                           	opt stack 0
  3261  004832                     ___awtoft:
  3262                           	opt stack 23
  3263                           
  3264                           ;incstack = 0
  3265  004832  0E00               	movlw	0
  3266  004834  6E1E               	movwf	___awtoft@sign,c
  3267  004836  AE1C               	btfss	___awtoft@c+1,7,c
  3268  004838  D006               	goto	l5615
  3269  00483A  6C1B               	negf	___awtoft@c,c
  3270  00483C  1E1C               	comf	___awtoft@c+1,f,c
  3271  00483E  B0D8               	btfsc	status,0,c
  3272  004840  2A1C               	incf	___awtoft@c+1,f,c
  3273  004842  0E01               	movlw	1
  3274  004844  6E1E               	movwf	___awtoft@sign,c
  3275  004846                     l5615:
  3276  004846  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  3277  00484A  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  3278  00484E  6A15               	clrf	___ftpack@arg+2,c
  3279  004850  0E8E               	movlw	142
  3280  004852  6E16               	movwf	___ftpack@exp,c
  3281  004854  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  3282  004858  EC14  F021         	call	___ftpack	;wreg free
  3283  00485C  C013  F01B         	movff	?___ftpack,?___awtoft
  3284  004860  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  3285  004864  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  3286  004868  0012               	return	
  3287  00486A                     __end_of___awtoft:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           postinc0	equ	0xFEE
  3294                           wreg	equ	0xFE8
  3295                           postdec1	equ	0xFE5
  3296                           fsr1l	equ	0xFE1
  3297                           indf2	equ	0xFDF
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _printf *****************
  3303 ;; Defined at:
  3304 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3307 ;;		 -> STR_1(49), 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  val             4   66[BANK0 ] unsigned long 
  3310 ;;  tmpval          4   62[BANK0 ] struct .
  3311 ;;  fval            3   72[BANK0 ] struct .
  3312 ;;  cp              3    0        PTR const unsigned char 
  3313 ;;  prec            2   70[BANK0 ] int 
  3314 ;;  exp             2   60[BANK0 ] int 
  3315 ;;  flag            2   58[BANK0 ] unsigned short 
  3316 ;;  ap              2   56[BANK0 ] PTR void [1]
  3317 ;;		 -> ?_printf(2), 
  3318 ;;  len             2    0        unsigned int 
  3319 ;;  width           2    0        int 
  3320 ;;  c               1   75[BANK0 ] char 
  3321 ;;  d               1    0        unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  2   34[BANK0 ] int 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3331 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3332 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3333 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;      Totals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;Total ram usage:       42 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    7
  3338 ;; This function calls:
  3339 ;;		___awdiv
  3340 ;;		___ftadd
  3341 ;;		___ftge
  3342 ;;		___ftmul
  3343 ;;		___ftneg
  3344 ;;		___ftsub
  3345 ;;		___fttol
  3346 ;;		___lldiv
  3347 ;;		___llmod
  3348 ;;		___lltoft
  3349 ;;		___wmul
  3350 ;;		__div_to_l_
  3351 ;;		__tdiv_to_l_
  3352 ;;		_fround
  3353 ;;		_isdigit
  3354 ;;		_putch
  3355 ;;		_scale
  3356 ;; This function is called by:
  3357 ;;		_main
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text17
  3362  000FCA                     __ptext17:
  3363                           	opt stack 0
  3364  000FCA                     _printf:
  3365                           	opt stack 23
  3366                           
  3367                           ;doprnt.c: 466: va_list ap;
  3368                           ;doprnt.c: 499: signed char c;
  3369                           ;doprnt.c: 501: int width;
  3370                           ;doprnt.c: 504: int prec;
  3371                           ;doprnt.c: 508: unsigned short flag;
  3372                           ;doprnt.c: 515: char d;
  3373                           ;doprnt.c: 516: double fval;
  3374                           ;doprnt.c: 517: int exp;
  3375                           ;doprnt.c: 523: union {
  3376                           ;doprnt.c: 524: unsigned long vd;
  3377                           ;doprnt.c: 525: double integ;
  3378                           ;doprnt.c: 526: } tmpval;
  3379                           ;doprnt.c: 528: unsigned long val;
  3380                           ;doprnt.c: 529: unsigned len;
  3381                           ;doprnt.c: 530: const char * cp;
  3382                           ;doprnt.c: 533: *ap = __va_start();
  3383                           
  3384                           ;incstack = 0
  3385  000FCA  0E84               	movlw	low (?_printf+2)
  3386  000FCC  0100               	movlb	0	; () banked
  3387  000FCE  6F98               	movwf	printf@ap& (0+255),b
  3388  000FD0  0E00               	movlw	high (?_printf+2)
  3389  000FD2  0100               	movlb	0	; () banked
  3390  000FD4  6F99               	movwf	(printf@ap+1)& (0+255),b
  3391                           
  3392                           ;doprnt.c: 536: while(c = *f++) {
  3393  000FD6  EF69  F00C         	goto	l6447
  3394  000FDA                     l6237:
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;doprnt.c: 538: if(c != '%')
  3398  000FDA  0E25               	movlw	37
  3399  000FDC  0100               	movlb	0	; () banked
  3400  000FDE  19AB               	xorwf	printf@c& (0+255),w,b
  3401  000FE0  B4D8               	btfsc	status,2,c
  3402  000FE2  D006               	goto	l6241
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;doprnt.c: 540: {
  3406                           ;doprnt.c: 541: (putch(c) );
  3407  000FE4  0100               	movlb	0	; () banked
  3408  000FE6  51AB               	movf	printf@c& (0+255),w,b
  3409  000FE8  EC3D  F026         	call	_putch
  3410                           
  3411                           ;doprnt.c: 542: continue;
  3412  000FEC  EF69  F00C         	goto	l6447
  3413  000FF0                     l6241:
  3414                           
  3415                           ;doprnt.c: 543: }
  3416                           ;doprnt.c: 548: flag = 0;
  3417  000FF0  0E00               	movlw	0
  3418  000FF2  0100               	movlb	0	; () banked
  3419  000FF4  6F9B               	movwf	(printf@flag+1)& (0+255),b
  3420  000FF6  0E00               	movlw	0
  3421  000FF8  6F9A               	movwf	printf@flag& (0+255),b
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;doprnt.c: 611: if(*f == '.') {
  3425  000FFA  C082  FFF6         	movff	printf@f,tblptrl
  3426  000FFE  C083  FFF7         	movff	printf@f+1,tblptrh
  3427  001002                     	if	0	;tblptru may be non-zero
  3428  001002                     	endif
  3429  001002                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3430  001002  0E00               	movlw	low (__mediumconst shr (0+16))
  3431  001004  6EF8               	movwf	tblptru,c
  3432  001006                     	endif
  3433  001006  0008               	tblrd		*
  3434  001008  50F5               	movf	tablat,w,c
  3435  00100A  0A2E               	xorlw	46
  3436  00100C  A4D8               	btfss	status,2,c
  3437  00100E  D038               	goto	l6255
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;doprnt.c: 612: flag |= 0x4000;
  3441  001010  0100               	movlb	0	; () banked
  3442  001012  8D9B               	bsf	(printf@flag+1)& (0+255),6,b
  3443                           
  3444                           ;doprnt.c: 613: f++;
  3445  001014  0100               	movlb	0	; () banked
  3446  001016  4B82               	infsnz	printf@f& (0+255),f,b
  3447  001018  2B83               	incf	(printf@f+1)& (0+255),f,b
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;doprnt.c: 620: {
  3451                           ;doprnt.c: 621: prec = 0;
  3452  00101A  0E00               	movlw	0
  3453  00101C  0100               	movlb	0	; () banked
  3454  00101E  6FA7               	movwf	(printf@prec+1)& (0+255),b
  3455  001020  0E00               	movlw	0
  3456  001022  6FA6               	movwf	printf@prec& (0+255),b
  3457                           
  3458                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3459  001024  D020               	goto	l6253
  3460  001026                     l6249:
  3461                           
  3462                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3463  001026  C0A6  F021         	movff	printf@prec,___wmul@multiplier
  3464  00102A  C0A7  F022         	movff	printf@prec+1,___wmul@multiplier+1
  3465  00102E  0E00               	movlw	0
  3466  001030  6E24               	movwf	___wmul@multiplicand+1,c
  3467  001032  0E0A               	movlw	10
  3468  001034  6E23               	movwf	___wmul@multiplicand,c
  3469  001036  EC28  F025         	call	___wmul	;wreg free
  3470  00103A  C082  FFF6         	movff	printf@f,tblptrl
  3471  00103E  C083  FFF7         	movff	printf@f+1,tblptrh
  3472  001042                     	if	0	;tblptru may be non-zero
  3473  001042                     	endif
  3474  001042                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3475  001042  0E00               	movlw	low (__mediumconst shr (0+16))
  3476  001044  6EF8               	movwf	tblptru,c
  3477  001046                     	endif
  3478  001046  0008               	tblrd		*
  3479  001048  50F5               	movf	tablat,w,c
  3480  00104A  2621               	addwf	?___wmul,f,c
  3481  00104C  0E00               	movlw	0
  3482  00104E  2222               	addwfc	?___wmul+1,f,c
  3483  001050  0ED0               	movlw	208
  3484  001052  2421               	addwf	?___wmul,w,c
  3485  001054  0100               	movlb	0	; () banked
  3486  001056  6FA6               	movwf	printf@prec& (0+255),b
  3487  001058  0EFF               	movlw	255
  3488  00105A  2022               	addwfc	?___wmul+1,w,c
  3489  00105C  0100               	movlb	0	; () banked
  3490  00105E  6FA7               	movwf	(printf@prec+1)& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493  001060  0100               	movlb	0	; () banked
  3494  001062  4B82               	infsnz	printf@f& (0+255),f,b
  3495  001064  2B83               	incf	(printf@f+1)& (0+255),f,b
  3496  001066                     l6253:
  3497                           
  3498                           ; BSR set to: 0
  3499  001066  C082  FFF6         	movff	printf@f,tblptrl
  3500  00106A  C083  FFF7         	movff	printf@f+1,tblptrh
  3501  00106E                     	if	0	;tblptru may be non-zero
  3502  00106E                     	endif
  3503  00106E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3504  00106E  0E00               	movlw	low (__mediumconst shr (0+16))
  3505  001070  6EF8               	movwf	tblptru,c
  3506  001072                     	endif
  3507  001072  0008               	tblrd		*
  3508  001074  50F5               	movf	tablat,w,c
  3509  001076  ECA0  F025         	call	_isdigit
  3510  00107A  A0D8               	btfss	status,0,c
  3511  00107C  D00C               	goto	l6263
  3512  00107E  D7D3               	goto	l6249
  3513  001080                     l6255:
  3514                           
  3515                           ;doprnt.c: 626: prec = 0;
  3516  001080  0E00               	movlw	0
  3517  001082  0100               	movlb	0	; () banked
  3518  001084  6FA7               	movwf	(printf@prec+1)& (0+255),b
  3519  001086  0E00               	movlw	0
  3520  001088  6FA6               	movwf	printf@prec& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;doprnt.c: 628: flag |= 0x1000;
  3524  00108A  0100               	movlb	0	; () banked
  3525  00108C  899B               	bsf	(printf@flag+1)& (0+255),4,b
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;doprnt.c: 630: }
  3529                           ;doprnt.c: 635: switch(c = *f++) {
  3530  00108E  D003               	goto	l6263
  3531  001090                     l6259:
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;doprnt.c: 663: flag |= 0x400;
  3535  001090  0100               	movlb	0	; () banked
  3536  001092  859B               	bsf	(printf@flag+1)& (0+255),2,b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;doprnt.c: 698: case 'i':
  3540                           ;doprnt.c: 699: break;
  3541                           
  3542                           ; BSR set to: 0
  3543                           
  3544                           ;doprnt.c: 697: case 'd':
  3545                           
  3546                           ;doprnt.c: 664: break;
  3547  001094  D01B               	goto	l6265
  3548  001096                     l6263:
  3549  001096  C082  FFF6         	movff	printf@f,tblptrl
  3550  00109A  C083  FFF7         	movff	printf@f+1,tblptrh
  3551  00109E  0100               	movlb	0	; () banked
  3552  0010A0  4B82               	infsnz	printf@f& (0+255),f,b
  3553  0010A2  2B83               	incf	(printf@f+1)& (0+255),f,b
  3554  0010A4                     	if	0	;tblptru may be non-zero
  3555  0010A4                     	endif
  3556  0010A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3557  0010A4  0E00               	movlw	low (__mediumconst shr (0+16))
  3558  0010A6  6EF8               	movwf	tblptru,c
  3559  0010A8                     	endif
  3560  0010A8  0008               	tblrd		*
  3561  0010AA  CFF5 F0AB          	movff	tablat,printf@c
  3562  0010AE  0100               	movlb	0	; () banked
  3563  0010B0  51AB               	movf	printf@c& (0+255),w,b
  3564                           
  3565                           ; Switch size 1, requested type "space"
  3566                           ; Number of cases is 4, Range of values is 0 to 105
  3567                           ; switch strategies available:
  3568                           ; Name         Instructions Cycles
  3569                           ; simple_byte           13     7 (average)
  3570                           ;	Chosen strategy is simple_byte
  3571  0010B2  0A00               	xorlw	0	; case 0
  3572  0010B4  B4D8               	btfsc	status,2,c
  3573  0010B6  0012               	return	
  3574  0010B8  0A64               	xorlw	100	; case 100
  3575  0010BA  B4D8               	btfsc	status,2,c
  3576  0010BC  D007               	goto	l6265
  3577  0010BE  0A02               	xorlw	2	; case 102
  3578  0010C0  B4D8               	btfsc	status,2,c
  3579  0010C2  D7E6               	goto	l6259
  3580  0010C4  0A0F               	xorlw	15	; case 105
  3581  0010C6  A4D8               	btfss	status,2,c
  3582  0010C8  EF69  F00C         	goto	l6447
  3583  0010CC                     l6265:
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;doprnt.c: 825: if(flag & (0x700)) {
  3587  0010CC  0E07               	movlw	7
  3588  0010CE  0100               	movlb	0	; () banked
  3589  0010D0  159B               	andwf	(printf@flag+1)& (0+255),w,b
  3590  0010D2  B4D8               	btfsc	status,2,c
  3591  0010D4  D30F               	goto	l6399
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;doprnt.c: 827: if(flag & 0x1000)
  3595  0010D6  0100               	movlb	0	; () banked
  3596  0010D8  A99B               	btfss	(printf@flag+1)& (0+255),4,b
  3597  0010DA  D005               	goto	l6271
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;doprnt.c: 829: prec = 6;
  3601  0010DC  0E00               	movlw	0
  3602  0010DE  0100               	movlb	0	; () banked
  3603  0010E0  6FA7               	movwf	(printf@prec+1)& (0+255),b
  3604  0010E2  0E06               	movlw	6
  3605  0010E4  6FA6               	movwf	printf@prec& (0+255),b
  3606  0010E6                     l6271:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3610  0010E6  C098  FFD9         	movff	printf@ap,fsr2l
  3611  0010EA  C099  FFDA         	movff	printf@ap+1,fsr2h
  3612  0010EE  CFDE F0A8          	movff	postinc2,printf@fval
  3613  0010F2  CFDE F0A9          	movff	postinc2,printf@fval+1
  3614  0010F6  CFDD F0AA          	movff	postdec2,printf@fval+2
  3615                           
  3616                           ; BSR set to: 0
  3617  0010FA  0E03               	movlw	3
  3618  0010FC  0100               	movlb	0	; () banked
  3619  0010FE  2798               	addwf	printf@ap& (0+255),f,b
  3620  001100  0E00               	movlw	0
  3621  001102  2399               	addwfc	(printf@ap+1)& (0+255),f,b
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;doprnt.c: 831: if(fval < 0.0) {
  3625  001104  0100               	movlb	0	; () banked
  3626  001106  AFAA               	btfss	(printf@fval+2)& (0+255),7,b
  3627  001108  D011               	goto	l6281
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;doprnt.c: 832: fval = -fval;
  3631  00110A  C0A8  F036         	movff	printf@fval,___ftneg@f1
  3632  00110E  C0A9  F037         	movff	printf@fval+1,___ftneg@f1+1
  3633  001112  C0AA  F038         	movff	printf@fval+2,___ftneg@f1+2
  3634  001116  EC4E  F025         	call	___ftneg	;wreg free
  3635  00111A  C036  F0A8         	movff	?___ftneg,printf@fval
  3636  00111E  C037  F0A9         	movff	?___ftneg+1,printf@fval+1
  3637  001122  C038  F0AA         	movff	?___ftneg+2,printf@fval+2
  3638                           
  3639                           ;doprnt.c: 833: flag |= 0x03;
  3640  001126  0E03               	movlw	3
  3641  001128  0100               	movlb	0	; () banked
  3642  00112A  139A               	iorwf	printf@flag& (0+255),f,b
  3643  00112C                     l6281:
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;doprnt.c: 834: }
  3647                           ;doprnt.c: 835: exp = 0;
  3648  00112C  0E00               	movlw	0
  3649  00112E  0100               	movlb	0	; () banked
  3650  001130  6F9D               	movwf	(printf@exp+1)& (0+255),b
  3651  001132  0E00               	movlw	0
  3652  001134  6F9C               	movwf	printf@exp& (0+255),b
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;doprnt.c: 836: if( fval!=0) {
  3656  001136  0100               	movlb	0	; () banked
  3657  001138  51A8               	movf	printf@fval& (0+255),w,b
  3658  00113A  0100               	movlb	0	; () banked
  3659  00113C  11A9               	iorwf	(printf@fval+1)& (0+255),w,b
  3660  00113E  0100               	movlb	0	; () banked
  3661  001140  11AA               	iorwf	(printf@fval+2)& (0+255),w,b
  3662  001142  B4D8               	btfsc	status,2,c
  3663  001144  D099               	goto	l6309
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3667  001146  0E82               	movlw	130
  3668  001148  0100               	movlb	0	; () banked
  3669  00114A  6F8F               	movwf	??_printf& (0+255),b
  3670  00114C  0EFF               	movlw	255
  3671  00114E  0100               	movlb	0	; () banked
  3672  001150  6F90               	movwf	(??_printf+1)& (0+255),b
  3673  001152  C0A8  F091         	movff	printf@fval,??_printf+2
  3674  001156  C0A9  F092         	movff	printf@fval+1,??_printf+3
  3675  00115A  C0AA  F093         	movff	printf@fval+2,??_printf+4
  3676  00115E  C0AB  F094         	movff	printf@fval+3,??_printf+5
  3677  001162  0E10               	movlw	16
  3678  001164  D006               	goto	u5670
  3679  001166                     u5675:
  3680  001166  0100               	movlb	0	; () banked
  3681  001168  90D8               	bcf	status,0,c
  3682  00116A  3394               	rrcf	(??_printf+5)& (0+255),f,b
  3683  00116C  3393               	rrcf	(??_printf+4)& (0+255),f,b
  3684  00116E  3392               	rrcf	(??_printf+3)& (0+255),f,b
  3685  001170  3391               	rrcf	(??_printf+2)& (0+255),f,b
  3686  001172                     u5670:
  3687  001172  2EE8               	decfsz	wreg,f,c
  3688  001174  D7F8               	goto	u5675
  3689  001176  0100               	movlb	0	; () banked
  3690  001178  5191               	movf	(??_printf+2)& (0+255),w,b
  3691  00117A  0100               	movlb	0	; () banked
  3692  00117C  258F               	addwf	??_printf& (0+255),w,b
  3693  00117E  0100               	movlb	0	; () banked
  3694  001180  6F9C               	movwf	printf@exp& (0+255),b
  3695  001182  0E00               	movlw	0
  3696  001184  0100               	movlb	0	; () banked
  3697  001186  2190               	addwfc	(??_printf+1)& (0+255),w,b
  3698  001188  0100               	movlb	0	; () banked
  3699  00118A  6F9D               	movwf	(printf@exp+1)& (0+255),b
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 838: exp--;
  3703  00118C  0100               	movlb	0	; () banked
  3704  00118E  079C               	decf	printf@exp& (0+255),f,b
  3705  001190  A0D8               	btfss	status,0,c
  3706  001192  079D               	decf	(printf@exp+1)& (0+255),f,b
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;doprnt.c: 839: exp *= 3;
  3710  001194  C09C  F021         	movff	printf@exp,___wmul@multiplier
  3711  001198  C09D  F022         	movff	printf@exp+1,___wmul@multiplier+1
  3712  00119C  0E00               	movlw	0
  3713  00119E  6E24               	movwf	___wmul@multiplicand+1,c
  3714  0011A0  0E03               	movlw	3
  3715  0011A2  6E23               	movwf	___wmul@multiplicand,c
  3716  0011A4  EC28  F025         	call	___wmul	;wreg free
  3717  0011A8  C021  F09C         	movff	?___wmul,printf@exp
  3718  0011AC  C022  F09D         	movff	?___wmul+1,printf@exp+1
  3719                           
  3720                           ;doprnt.c: 840: exp /= 10;
  3721  0011B0  C09C  F019         	movff	printf@exp,___awdiv@dividend
  3722  0011B4  C09D  F01A         	movff	printf@exp+1,___awdiv@dividend+1
  3723  0011B8  0E00               	movlw	0
  3724  0011BA  6E1C               	movwf	___awdiv@divisor+1,c
  3725  0011BC  0E0A               	movlw	10
  3726  0011BE  6E1B               	movwf	___awdiv@divisor,c
  3727  0011C0  EC54  F022         	call	___awdiv	;wreg free
  3728  0011C4  C019  F09C         	movff	?___awdiv,printf@exp
  3729  0011C8  C01A  F09D         	movff	?___awdiv+1,printf@exp+1
  3730                           
  3731                           ;doprnt.c: 841: if(exp < 0)
  3732  0011CC  0100               	movlb	0	; () banked
  3733  0011CE  AF9D               	btfss	(printf@exp+1)& (0+255),7,b
  3734  0011D0  D004               	goto	l6297
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;doprnt.c: 842: exp--;
  3738  0011D2  0100               	movlb	0	; () banked
  3739  0011D4  079C               	decf	printf@exp& (0+255),f,b
  3740  0011D6  A0D8               	btfss	status,0,c
  3741  0011D8  079D               	decf	(printf@exp+1)& (0+255),f,b
  3742  0011DA                     l6297:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3746  0011DA  0100               	movlb	0	; () banked
  3747  0011DC  519C               	movf	printf@exp& (0+255),w,b
  3748  0011DE  0800               	sublw	0
  3749  0011E0  EC7B  F00C         	call	_scale
  3750  0011E4  C036  F09E         	movff	?_scale,printf@tmpval
  3751  0011E8  C037  F09F         	movff	?_scale+1,printf@tmpval+1
  3752  0011EC  C038  F0A0         	movff	?_scale+2,printf@tmpval+2
  3753                           
  3754                           ;doprnt.c: 847: tmpval.integ *= fval;
  3755  0011F0  C09E  F027         	movff	printf@tmpval,___ftmul@f1
  3756  0011F4  C09F  F028         	movff	printf@tmpval+1,___ftmul@f1+1
  3757  0011F8  C0A0  F029         	movff	printf@tmpval+2,___ftmul@f1+2
  3758  0011FC  C0A8  F02A         	movff	printf@fval,___ftmul@f2
  3759  001200  C0A9  F02B         	movff	printf@fval+1,___ftmul@f2+1
  3760  001204  C0AA  F02C         	movff	printf@fval+2,___ftmul@f2+2
  3761  001208  EC49  F01F         	call	___ftmul	;wreg free
  3762  00120C  C027  F09E         	movff	?___ftmul,printf@tmpval
  3763  001210  C028  F09F         	movff	?___ftmul+1,printf@tmpval+1
  3764  001214  C029  F0A0         	movff	?___ftmul+2,printf@tmpval+2
  3765                           
  3766                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3767  001218  C09E  F063         	movff	printf@tmpval,___ftge@ff1
  3768  00121C  C09F  F064         	movff	printf@tmpval+1,___ftge@ff1+1
  3769  001220  C0A0  F065         	movff	printf@tmpval+2,___ftge@ff1+2
  3770  001224  0E00               	movlw	0
  3771  001226  0100               	movlb	0	; () banked
  3772  001228  6F66               	movwf	___ftge@ff2& (0+255),b
  3773  00122A  0E80               	movlw	128
  3774  00122C  0100               	movlb	0	; () banked
  3775  00122E  6F67               	movwf	(___ftge@ff2+1)& (0+255),b
  3776  001230  0E3F               	movlw	63
  3777  001232  0100               	movlb	0	; () banked
  3778  001234  6F68               	movwf	(___ftge@ff2+2)& (0+255),b
  3779  001236  ECB0  F020         	call	___ftge	;wreg free
  3780  00123A  0100               	movlb	0	; () banked
  3781  00123C  B0D8               	btfsc	status,0,c
  3782  00123E  D005               	goto	l6305
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;doprnt.c: 849: exp--;
  3786  001240  0100               	movlb	0	; () banked
  3787  001242  079C               	decf	printf@exp& (0+255),f,b
  3788  001244  A0D8               	btfss	status,0,c
  3789  001246  079D               	decf	(printf@exp+1)& (0+255),f,b
  3790  001248  D017               	goto	l6309
  3791  00124A                     l6305:
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3795  00124A  C09E  F063         	movff	printf@tmpval,___ftge@ff1
  3796  00124E  C09F  F064         	movff	printf@tmpval+1,___ftge@ff1+1
  3797  001252  C0A0  F065         	movff	printf@tmpval+2,___ftge@ff1+2
  3798  001256  0E00               	movlw	0
  3799  001258  0100               	movlb	0	; () banked
  3800  00125A  6F66               	movwf	___ftge@ff2& (0+255),b
  3801  00125C  0E20               	movlw	32
  3802  00125E  0100               	movlb	0	; () banked
  3803  001260  6F67               	movwf	(___ftge@ff2+1)& (0+255),b
  3804  001262  0E41               	movlw	65
  3805  001264  0100               	movlb	0	; () banked
  3806  001266  6F68               	movwf	(___ftge@ff2+2)& (0+255),b
  3807  001268  ECB0  F020         	call	___ftge	;wreg free
  3808  00126C  0100               	movlb	0	; () banked
  3809  00126E  A0D8               	btfss	status,0,c
  3810  001270  D003               	goto	l6309
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;doprnt.c: 851: exp++;
  3814  001272  0100               	movlb	0	; () banked
  3815  001274  4B9C               	infsnz	printf@exp& (0+255),f,b
  3816  001276  2B9D               	incf	(printf@exp+1)& (0+255),f,b
  3817  001278                     l6309:
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;doprnt.c: 852: }
  3821                           ;doprnt.c: 1112: if(prec <= 12)
  3822  001278  0100               	movlb	0	; () banked
  3823  00127A  BFA7               	btfsc	(printf@prec+1)& (0+255),7,b
  3824  00127C  D008               	goto	l6311
  3825  00127E  0100               	movlb	0	; () banked
  3826  001280  51A7               	movf	(printf@prec+1)& (0+255),w,b
  3827  001282  E11D               	bnz	l6313
  3828  001284  0E0D               	movlw	13
  3829  001286  0100               	movlb	0	; () banked
  3830  001288  5DA6               	subwf	printf@prec& (0+255),w,b
  3831  00128A  B0D8               	btfsc	status,0,c
  3832  00128C  D018               	goto	l6313
  3833  00128E                     l6311:
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;doprnt.c: 1113: fval += fround(prec);
  3837  00128E  C0A8  F067         	movff	printf@fval,___ftadd@f1
  3838  001292  C0A9  F068         	movff	printf@fval+1,___ftadd@f1+1
  3839  001296  C0AA  F069         	movff	printf@fval+2,___ftadd@f1+2
  3840  00129A  0100               	movlb	0	; () banked
  3841  00129C  51A6               	movf	printf@prec& (0+255),w,b
  3842  00129E  ECCA  F014         	call	_fround
  3843  0012A2  C036  F06A         	movff	?_fround,___ftadd@f2
  3844  0012A6  C037  F06B         	movff	?_fround+1,___ftadd@f2+1
  3845  0012AA  C038  F06C         	movff	?_fround+2,___ftadd@f2+2
  3846  0012AE  EC03  F016         	call	___ftadd	;wreg free
  3847  0012B2  C067  F0A8         	movff	?___ftadd,printf@fval
  3848  0012B6  C068  F0A9         	movff	?___ftadd+1,printf@fval+1
  3849  0012BA  C069  F0AA         	movff	?___ftadd+2,printf@fval+2
  3850  0012BE                     l6313:
  3851                           
  3852                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3853  0012BE  0100               	movlb	0	; () banked
  3854  0012C0  BF9D               	btfsc	(printf@exp+1)& (0+255),7,b
  3855  0012C2  D008               	goto	l6315
  3856  0012C4  0100               	movlb	0	; () banked
  3857  0012C6  519D               	movf	(printf@exp+1)& (0+255),w,b
  3858  0012C8  E12A               	bnz	l6321
  3859  0012CA  0E0A               	movlw	10
  3860  0012CC  0100               	movlb	0	; () banked
  3861  0012CE  5D9C               	subwf	printf@exp& (0+255),w,b
  3862  0012D0  B0D8               	btfsc	status,0,c
  3863  0012D2  D025               	goto	l6321
  3864  0012D4                     l6315:
  3865                           
  3866                           ; BSR set to: 0
  3867  0012D4  0100               	movlb	0	; () banked
  3868  0012D6  51A8               	movf	printf@fval& (0+255),w,b
  3869  0012D8  0100               	movlb	0	; () banked
  3870  0012DA  11A9               	iorwf	(printf@fval+1)& (0+255),w,b
  3871  0012DC  0100               	movlb	0	; () banked
  3872  0012DE  11AA               	iorwf	(printf@fval+2)& (0+255),w,b
  3873  0012E0  B4D8               	btfsc	status,2,c
  3874  0012E2  D063               	goto	l6335
  3875                           
  3876                           ; BSR set to: 0
  3877  0012E4  C0A8  F073         	movff	printf@fval,___fttol@f1
  3878  0012E8  C0A9  F074         	movff	printf@fval+1,___fttol@f1+1
  3879  0012EC  C0AA  F075         	movff	printf@fval+2,___fttol@f1+2
  3880  0012F0  EC51  F01B         	call	___fttol	;wreg free
  3881  0012F4  0100               	movlb	0	; () banked
  3882  0012F6  5173               	movf	?___fttol& (0+255),w,b
  3883  0012F8  0100               	movlb	0	; () banked
  3884  0012FA  1174               	iorwf	(?___fttol+1)& (0+255),w,b
  3885  0012FC  0100               	movlb	0	; () banked
  3886  0012FE  1175               	iorwf	(?___fttol+2)& (0+255),w,b
  3887  001300  0100               	movlb	0	; () banked
  3888  001302  1176               	iorwf	(?___fttol+3)& (0+255),w,b
  3889  001304  A4D8               	btfss	status,2,c
  3890  001306  D051               	goto	l6335
  3891                           
  3892                           ; BSR set to: 0
  3893  001308  0100               	movlb	0	; () banked
  3894  00130A  BF9D               	btfsc	(printf@exp+1)& (0+255),7,b
  3895  00130C  D04E               	goto	l6335
  3896  00130E  0100               	movlb	0	; () banked
  3897  001310  519D               	movf	(printf@exp+1)& (0+255),w,b
  3898  001312  E105               	bnz	l6321
  3899  001314  0E02               	movlw	2
  3900  001316  0100               	movlb	0	; () banked
  3901  001318  5D9C               	subwf	printf@exp& (0+255),w,b
  3902  00131A  A0D8               	btfss	status,0,c
  3903  00131C  D046               	goto	l6335
  3904  00131E                     l6321:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3908  00131E  C09E  F063         	movff	printf@tmpval,___ftge@ff1
  3909  001322  C09F  F064         	movff	printf@tmpval+1,___ftge@ff1+1
  3910  001326  C0A0  F065         	movff	printf@tmpval+2,___ftge@ff1+2
  3911  00132A  0E70               	movlw	112
  3912  00132C  0100               	movlb	0	; () banked
  3913  00132E  6F66               	movwf	___ftge@ff2& (0+255),b
  3914  001330  0E89               	movlw	137
  3915  001332  0100               	movlb	0	; () banked
  3916  001334  6F67               	movwf	(___ftge@ff2+1)& (0+255),b
  3917  001336  0E40               	movlw	64
  3918  001338  0100               	movlb	0	; () banked
  3919  00133A  6F68               	movwf	(___ftge@ff2+2)& (0+255),b
  3920  00133C  ECB0  F020         	call	___ftge	;wreg free
  3921  001340  0100               	movlb	0	; () banked
  3922  001342  B0D8               	btfsc	status,0,c
  3923  001344  D003               	goto	l6325
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3927  001346  0100               	movlb	0	; () banked
  3928  001348  0EF7               	movlw	247
  3929  00134A  D002               	goto	L2
  3930  00134C                     l6325:
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3934  00134C  0100               	movlb	0	; () banked
  3935  00134E  0EF8               	movlw	248
  3936  001350                     L2:
  3937  001350  279C               	addwf	printf@exp& (0+255),f,b
  3938  001352  0EFF               	movlw	255
  3939  001354  239D               	addwfc	(printf@exp+1)& (0+255),f,b
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;doprnt.c: 1124: }
  3943                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3944                           
  3945                           ; BSR set to: 0
  3946  001356  0100               	movlb	0	; () banked
  3947  001358  519C               	movf	printf@exp& (0+255),w,b
  3948  00135A  EC7B  F00C         	call	_scale
  3949  00135E  C036  F09E         	movff	?_scale,printf@tmpval
  3950  001362  C037  F09F         	movff	?_scale+1,printf@tmpval+1
  3951  001366  C038  F0A0         	movff	?_scale+2,printf@tmpval+2
  3952                           
  3953                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3954  00136A  C0A8  F013         	movff	printf@fval,__tdiv_to_l_@f1
  3955  00136E  C0A9  F014         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3956  001372  C0AA  F015         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3957  001376  C09E  F016         	movff	printf@tmpval,__tdiv_to_l_@f2
  3958  00137A  C09F  F017         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3959  00137E  C0A0  F018         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3960  001382  ECF3  F01B         	call	__tdiv_to_l_	;wreg free
  3961  001386  C013  F0A2         	movff	?__tdiv_to_l_,printf@val
  3962  00138A  C014  F0A3         	movff	?__tdiv_to_l_+1,printf@val+1
  3963  00138E  C015  F0A4         	movff	?__tdiv_to_l_+2,printf@val+2
  3964  001392  C016  F0A5         	movff	?__tdiv_to_l_+3,printf@val+3
  3965                           
  3966                           ;doprnt.c: 1129: fval = 0.0;
  3967  001396  0E00               	movlw	0
  3968  001398  0100               	movlb	0	; () banked
  3969  00139A  6FA8               	movwf	printf@fval& (0+255),b
  3970  00139C  0E00               	movlw	0
  3971  00139E  0100               	movlb	0	; () banked
  3972  0013A0  6FA9               	movwf	(printf@fval+1)& (0+255),b
  3973  0013A2  0E00               	movlw	0
  3974  0013A4  0100               	movlb	0	; () banked
  3975  0013A6  6FAA               	movwf	(printf@fval+2)& (0+255),b
  3976                           
  3977                           ;doprnt.c: 1130: } else {
  3978  0013A8  D033               	goto	l6339
  3979  0013AA                     l6335:
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3983  0013AA  C0A8  F073         	movff	printf@fval,___fttol@f1
  3984  0013AE  C0A9  F074         	movff	printf@fval+1,___fttol@f1+1
  3985  0013B2  C0AA  F075         	movff	printf@fval+2,___fttol@f1+2
  3986  0013B6  EC51  F01B         	call	___fttol	;wreg free
  3987  0013BA  C073  F0A2         	movff	?___fttol,printf@val
  3988  0013BE  C074  F0A3         	movff	?___fttol+1,printf@val+1
  3989  0013C2  C075  F0A4         	movff	?___fttol+2,printf@val+2
  3990  0013C6  C076  F0A5         	movff	?___fttol+3,printf@val+3
  3991                           
  3992                           ;doprnt.c: 1132: fval -= (double)val;
  3993  0013CA  C0A8  F073         	movff	printf@fval,___ftsub@f1
  3994  0013CE  C0A9  F074         	movff	printf@fval+1,___ftsub@f1+1
  3995  0013D2  C0AA  F075         	movff	printf@fval+2,___ftsub@f1+2
  3996  0013D6  C0A2  F01B         	movff	printf@val,___lltoft@c
  3997  0013DA  C0A3  F01C         	movff	printf@val+1,___lltoft@c+1
  3998  0013DE  C0A4  F01D         	movff	printf@val+2,___lltoft@c+2
  3999  0013E2  C0A5  F01E         	movff	printf@val+3,___lltoft@c+3
  4000  0013E6  EC42  F023         	call	___lltoft	;wreg free
  4001  0013EA  C01B  F076         	movff	?___lltoft,___ftsub@f2
  4002  0013EE  C01C  F077         	movff	?___lltoft+1,___ftsub@f2+1
  4003  0013F2  C01D  F078         	movff	?___lltoft+2,___ftsub@f2+2
  4004  0013F6  EC99  F023         	call	___ftsub	;wreg free
  4005  0013FA  C073  F0A8         	movff	?___ftsub,printf@fval
  4006  0013FE  C074  F0A9         	movff	?___ftsub+1,printf@fval+1
  4007  001402  C075  F0AA         	movff	?___ftsub+2,printf@fval+2
  4008                           
  4009                           ;doprnt.c: 1133: exp = 0;
  4010  001406  0E00               	movlw	0
  4011  001408  0100               	movlb	0	; () banked
  4012  00140A  6F9D               	movwf	(printf@exp+1)& (0+255),b
  4013  00140C  0E00               	movlw	0
  4014  00140E  6F9C               	movwf	printf@exp& (0+255),b
  4015  001410                     l6339:
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;doprnt.c: 1134: }
  4019                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4020  001410  0E01               	movlw	1
  4021  001412  0100               	movlb	0	; () banked
  4022  001414  6FAB               	movwf	printf@c& (0+255),b
  4023  001416                     l6341:
  4024                           
  4025                           ; BSR set to: 0
  4026  001416  0E0A               	movlw	10
  4027  001418  0100               	movlb	0	; () banked
  4028  00141A  19AB               	xorwf	printf@c& (0+255),w,b
  4029  00141C  B4D8               	btfsc	status,2,c
  4030  00141E  D021               	goto	l6353
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;doprnt.c: 1137: if(val < dpowers[c])
  4034                           
  4035                           ; BSR set to: 0
  4036                           
  4037                           ; BSR set to: 0
  4038  001420  0100               	movlb	0	; () banked
  4039  001422  51AB               	movf	printf@c& (0+255),w,b
  4040  001424  0D04               	mullw	4
  4041  001426  0E01               	movlw	low _dpowers
  4042  001428  24F3               	addwf	prodl,w,c
  4043  00142A  6EF6               	movwf	tblptrl,c
  4044  00142C  0E0F               	movlw	high _dpowers
  4045  00142E  20F4               	addwfc	prodh,w,c
  4046  001430  6EF7               	movwf	tblptrh,c
  4047  001432                     	if	1	;There are 3 active tblptr bytes
  4048  001432  6AF8               	clrf	tblptru,c
  4049  001434  0E00               	movlw	low (__mediumconst shr (0+16))
  4050  001436  22F8               	addwfc	tblptru,f,c
  4051  001438                     	endif
  4052  001438  0009               	tblrd		*+
  4053  00143A  50F5               	movf	tablat,w,c
  4054  00143C  0100               	movlb	0	; () banked
  4055  00143E  5DA2               	subwf	printf@val& (0+255),w,b
  4056  001440  0009               	tblrd		*+
  4057  001442  50F5               	movf	tablat,w,c
  4058  001444  0100               	movlb	0	; () banked
  4059  001446  59A3               	subwfb	(printf@val+1)& (0+255),w,b
  4060  001448  0009               	tblrd		*+
  4061  00144A  50F5               	movf	tablat,w,c
  4062  00144C  0100               	movlb	0	; () banked
  4063  00144E  59A4               	subwfb	(printf@val+2)& (0+255),w,b
  4064  001450  0009               	tblrd		*+
  4065  001452  50F5               	movf	tablat,w,c
  4066  001454  0100               	movlb	0	; () banked
  4067  001456  59A5               	subwfb	(printf@val+3)& (0+255),w,b
  4068  001458  A0D8               	btfss	status,0,c
  4069  00145A  D003               	goto	l6353
  4070                           
  4071                           ; BSR set to: 0
  4072                           
  4073                           ; BSR set to: 0
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;doprnt.c: 1138: break;
  4077  00145C  0100               	movlb	0	; () banked
  4078  00145E  2BAB               	incf	printf@c& (0+255),f,b
  4079  001460  D7DA               	goto	l6341
  4080  001462                     l6353:
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;doprnt.c: 1175: {
  4084                           ;doprnt.c: 1188: if(flag & 0x03)
  4085  001462  0E03               	movlw	3
  4086  001464  0100               	movlb	0	; () banked
  4087  001466  159A               	andwf	printf@flag& (0+255),w,b
  4088  001468  0100               	movlb	0	; () banked
  4089  00146A  6F8F               	movwf	??_printf& (0+255),b
  4090  00146C  0E00               	movlw	0
  4091  00146E  0100               	movlb	0	; () banked
  4092  001470  159B               	andwf	(printf@flag+1)& (0+255),w,b
  4093  001472  0100               	movlb	0	; () banked
  4094  001474  6F90               	movwf	(??_printf+1)& (0+255),b
  4095  001476  0100               	movlb	0	; () banked
  4096  001478  518F               	movf	??_printf& (0+255),w,b
  4097  00147A  0100               	movlb	0	; () banked
  4098  00147C  1190               	iorwf	(??_printf+1)& (0+255),w,b
  4099  00147E  B4D8               	btfsc	status,2,c
  4100  001480  D04D               	goto	l6363
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;doprnt.c: 1190: (putch('-') );
  4104  001482  0E2D               	movlw	45
  4105  001484  EC3D  F026         	call	_putch
  4106                           
  4107                           ;doprnt.c: 1195: }
  4108                           ;doprnt.c: 1196: while(c--) {
  4109  001488  D049               	goto	l6363
  4110  00148A                     l6357:
  4111                           
  4112                           ;doprnt.c: 1200: {
  4113                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4114  00148A  C0A2  F013         	movff	printf@val,___lldiv@dividend
  4115  00148E  C0A3  F014         	movff	printf@val+1,___lldiv@dividend+1
  4116  001492  C0A4  F015         	movff	printf@val+2,___lldiv@dividend+2
  4117  001496  C0A5  F016         	movff	printf@val+3,___lldiv@dividend+3
  4118  00149A  0100               	movlb	0	; () banked
  4119  00149C  51AB               	movf	printf@c& (0+255),w,b
  4120  00149E  0D04               	mullw	4
  4121  0014A0  0E01               	movlw	low _dpowers
  4122  0014A2  24F3               	addwf	prodl,w,c
  4123  0014A4  6EF6               	movwf	tblptrl,c
  4124  0014A6  0E0F               	movlw	high _dpowers
  4125  0014A8  20F4               	addwfc	prodh,w,c
  4126  0014AA  6EF7               	movwf	tblptrh,c
  4127  0014AC                     	if	1	;There are 3 active tblptr bytes
  4128  0014AC  6AF8               	clrf	tblptru,c
  4129  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
  4130  0014B0  22F8               	addwfc	tblptru,f,c
  4131  0014B2                     	endif
  4132  0014B2  0009               	tblrd		*+
  4133  0014B4  CFF5 F017          	movff	tablat,___lldiv@divisor
  4134  0014B8  0009               	tblrd		*+
  4135  0014BA  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4136  0014BE  0009               	tblrd		*+
  4137  0014C0  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4138  0014C4  000A               	tblrd		*-
  4139  0014C6  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4140  0014CA  EC96  F022         	call	___lldiv	;wreg free
  4141  0014CE  C013  F09E         	movff	?___lldiv,printf@tmpval
  4142  0014D2  C014  F09F         	movff	?___lldiv+1,printf@tmpval+1
  4143  0014D6  C015  F0A0         	movff	?___lldiv+2,printf@tmpval+2
  4144  0014DA  C016  F0A1         	movff	?___lldiv+3,printf@tmpval+3
  4145                           
  4146                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4147  0014DE  C09E  F020         	movff	printf@tmpval,___llmod@dividend
  4148  0014E2  C09F  F021         	movff	printf@tmpval+1,___llmod@dividend+1
  4149  0014E6  C0A0  F022         	movff	printf@tmpval+2,___llmod@dividend+2
  4150  0014EA  C0A1  F023         	movff	printf@tmpval+3,___llmod@dividend+3
  4151  0014EE  0E0A               	movlw	10
  4152  0014F0  6E24               	movwf	___llmod@divisor,c
  4153  0014F2  0E00               	movlw	0
  4154  0014F4  6E25               	movwf	___llmod@divisor+1,c
  4155  0014F6  0E00               	movlw	0
  4156  0014F8  6E26               	movwf	___llmod@divisor+2,c
  4157  0014FA  0E00               	movlw	0
  4158  0014FC  6E27               	movwf	___llmod@divisor+3,c
  4159  0014FE  EC0F  F023         	call	___llmod	;wreg free
  4160  001502  C020  F09E         	movff	?___llmod,printf@tmpval
  4161  001506  C021  F09F         	movff	?___llmod+1,printf@tmpval+1
  4162  00150A  C022  F0A0         	movff	?___llmod+2,printf@tmpval+2
  4163  00150E  C023  F0A1         	movff	?___llmod+3,printf@tmpval+3
  4164                           
  4165                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  4166  001512  0100               	movlb	0	; () banked
  4167  001514  519E               	movf	printf@tmpval& (0+255),w,b
  4168  001516  0F30               	addlw	48
  4169  001518  EC3D  F026         	call	_putch
  4170  00151C                     l6363:
  4171  00151C  0100               	movlb	0	; () banked
  4172  00151E  07AB               	decf	printf@c& (0+255),f,b
  4173  001520  0100               	movlb	0	; () banked
  4174  001522  29AB               	incf	printf@c& (0+255),w,b
  4175  001524  B4D8               	btfsc	status,2,c
  4176  001526  D008               	goto	l6369
  4177  001528  D7B0               	goto	l6357
  4178  00152A                     l6365:
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;doprnt.c: 1208: (putch('0') );
  4182  00152A  0E30               	movlw	48
  4183  00152C  EC3D  F026         	call	_putch
  4184                           
  4185                           ;doprnt.c: 1209: exp--;
  4186  001530  0100               	movlb	0	; () banked
  4187  001532  079C               	decf	printf@exp& (0+255),f,b
  4188  001534  A0D8               	btfss	status,0,c
  4189  001536  079D               	decf	(printf@exp+1)& (0+255),f,b
  4190  001538                     l6369:
  4191                           
  4192                           ; BSR set to: 0
  4193  001538  0100               	movlb	0	; () banked
  4194  00153A  BF9D               	btfsc	(printf@exp+1)& (0+255),7,b
  4195  00153C  D007               	goto	l6371
  4196  00153E  0100               	movlb	0	; () banked
  4197  001540  519D               	movf	(printf@exp+1)& (0+255),w,b
  4198  001542  E1F3               	bnz	l6365
  4199  001544  0100               	movlb	0	; () banked
  4200  001546  059C               	decf	printf@exp& (0+255),w,b
  4201  001548  B0D8               	btfsc	status,0,c
  4202  00154A  D7EF               	goto	l6365
  4203  00154C                     l6371:
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;doprnt.c: 1210: }
  4207                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4208  00154C  0100               	movlb	0	; () banked
  4209  00154E  BFA7               	btfsc	(printf@prec+1)& (0+255),7,b
  4210  001550  D00C               	goto	l1100
  4211  001552  0100               	movlb	0	; () banked
  4212  001554  51A7               	movf	(printf@prec+1)& (0+255),w,b
  4213  001556  E105               	bnz	u5830
  4214  001558  0E09               	movlw	9
  4215  00155A  0100               	movlb	0	; () banked
  4216  00155C  5DA6               	subwf	printf@prec& (0+255),w,b
  4217  00155E  A0D8               	btfss	status,0,c
  4218  001560  D004               	goto	l1100
  4219  001562                     u5830:
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4223  001562  0E08               	movlw	8
  4224  001564  0100               	movlb	0	; () banked
  4225  001566  6FAB               	movwf	printf@c& (0+255),b
  4226  001568  D002               	goto	l6375
  4227  00156A                     l1100:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;doprnt.c: 1213: else
  4231                           ;doprnt.c: 1214: c = prec;
  4232  00156A  C0A6  F0AB         	movff	printf@prec,printf@c
  4233  00156E                     l6375:
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;doprnt.c: 1215: prec -= c;
  4237  00156E  0100               	movlb	0	; () banked
  4238  001570  51AB               	movf	printf@c& (0+255),w,b
  4239  001572  0100               	movlb	0	; () banked
  4240  001574  5FA6               	subwf	printf@prec& (0+255),f,b
  4241  001576  0E00               	movlw	0
  4242  001578  0100               	movlb	0	; () banked
  4243  00157A  BFAB               	btfsc	printf@c& (0+255),7,b
  4244  00157C  0EFF               	movlw	255
  4245  00157E  0100               	movlb	0	; () banked
  4246  001580  5BA7               	subwfb	(printf@prec+1)& (0+255),f,b
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;doprnt.c: 1219: if(c)
  4250  001582  0100               	movlb	0	; () banked
  4251  001584  51AB               	movf	printf@c& (0+255),w,b
  4252  001586  0100               	movlb	0	; () banked
  4253  001588  B4D8               	btfsc	status,2,c
  4254  00158A  D003               	goto	l6381
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;doprnt.c: 1221: (putch('.') );
  4258  00158C  0E2E               	movlw	46
  4259  00158E  EC3D  F026         	call	_putch
  4260  001592                     l6381:
  4261                           
  4262                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4263  001592  0100               	movlb	0	; () banked
  4264  001594  51AB               	movf	printf@c& (0+255),w,b
  4265  001596  EC7B  F00C         	call	_scale
  4266  00159A  C036  F095         	movff	?_scale,_printf$2942
  4267  00159E  C037  F096         	movff	?_scale+1,_printf$2942+1
  4268  0015A2  C038  F097         	movff	?_scale+2,_printf$2942+2
  4269                           
  4270                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4271  0015A6  C0A8  F02A         	movff	printf@fval,___ftmul@f2
  4272  0015AA  C0A9  F02B         	movff	printf@fval+1,___ftmul@f2+1
  4273  0015AE  C0AA  F02C         	movff	printf@fval+2,___ftmul@f2+2
  4274  0015B2  C095  F027         	movff	_printf$2942,___ftmul@f1
  4275  0015B6  C096  F028         	movff	_printf$2942+1,___ftmul@f1+1
  4276  0015BA  C097  F029         	movff	_printf$2942+2,___ftmul@f1+2
  4277  0015BE  EC49  F01F         	call	___ftmul	;wreg free
  4278  0015C2  C027  F073         	movff	?___ftmul,___fttol@f1
  4279  0015C6  C028  F074         	movff	?___ftmul+1,___fttol@f1+1
  4280  0015CA  C029  F075         	movff	?___ftmul+2,___fttol@f1+2
  4281  0015CE  EC51  F01B         	call	___fttol	;wreg free
  4282  0015D2  C073  F0A2         	movff	?___fttol,printf@val
  4283  0015D6  C074  F0A3         	movff	?___fttol+1,printf@val+1
  4284  0015DA  C075  F0A4         	movff	?___fttol+2,printf@val+2
  4285  0015DE  C076  F0A5         	movff	?___fttol+3,printf@val+3
  4286                           
  4287                           ;doprnt.c: 1228: while(c--) {
  4288  0015E2  D073               	goto	l6391
  4289  0015E4                     l6385:
  4290                           
  4291                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4292  0015E4  C0A2  F013         	movff	printf@val,___lldiv@dividend
  4293  0015E8  C0A3  F014         	movff	printf@val+1,___lldiv@dividend+1
  4294  0015EC  C0A4  F015         	movff	printf@val+2,___lldiv@dividend+2
  4295  0015F0  C0A5  F016         	movff	printf@val+3,___lldiv@dividend+3
  4296  0015F4  0100               	movlb	0	; () banked
  4297  0015F6  51AB               	movf	printf@c& (0+255),w,b
  4298  0015F8  0D04               	mullw	4
  4299  0015FA  0E01               	movlw	low _dpowers
  4300  0015FC  24F3               	addwf	prodl,w,c
  4301  0015FE  6EF6               	movwf	tblptrl,c
  4302  001600  0E0F               	movlw	high _dpowers
  4303  001602  20F4               	addwfc	prodh,w,c
  4304  001604  6EF7               	movwf	tblptrh,c
  4305  001606                     	if	1	;There are 3 active tblptr bytes
  4306  001606  6AF8               	clrf	tblptru,c
  4307  001608  0E00               	movlw	low (__mediumconst shr (0+16))
  4308  00160A  22F8               	addwfc	tblptru,f,c
  4309  00160C                     	endif
  4310  00160C  0009               	tblrd		*+
  4311  00160E  CFF5 F017          	movff	tablat,___lldiv@divisor
  4312  001612  0009               	tblrd		*+
  4313  001614  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4314  001618  0009               	tblrd		*+
  4315  00161A  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4316  00161E  000A               	tblrd		*-
  4317  001620  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4318  001624  EC96  F022         	call	___lldiv	;wreg free
  4319  001628  C013  F09E         	movff	?___lldiv,printf@tmpval
  4320  00162C  C014  F09F         	movff	?___lldiv+1,printf@tmpval+1
  4321  001630  C015  F0A0         	movff	?___lldiv+2,printf@tmpval+2
  4322  001634  C016  F0A1         	movff	?___lldiv+3,printf@tmpval+3
  4323                           
  4324                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4325  001638  C09E  F020         	movff	printf@tmpval,___llmod@dividend
  4326  00163C  C09F  F021         	movff	printf@tmpval+1,___llmod@dividend+1
  4327  001640  C0A0  F022         	movff	printf@tmpval+2,___llmod@dividend+2
  4328  001644  C0A1  F023         	movff	printf@tmpval+3,___llmod@dividend+3
  4329  001648  0E0A               	movlw	10
  4330  00164A  6E24               	movwf	___llmod@divisor,c
  4331  00164C  0E00               	movlw	0
  4332  00164E  6E25               	movwf	___llmod@divisor+1,c
  4333  001650  0E00               	movlw	0
  4334  001652  6E26               	movwf	___llmod@divisor+2,c
  4335  001654  0E00               	movlw	0
  4336  001656  6E27               	movwf	___llmod@divisor+3,c
  4337  001658  EC0F  F023         	call	___llmod	;wreg free
  4338  00165C  C020  F09E         	movff	?___llmod,printf@tmpval
  4339  001660  C021  F09F         	movff	?___llmod+1,printf@tmpval+1
  4340  001664  C022  F0A0         	movff	?___llmod+2,printf@tmpval+2
  4341  001668  C023  F0A1         	movff	?___llmod+3,printf@tmpval+3
  4342                           
  4343                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4344  00166C  0100               	movlb	0	; () banked
  4345  00166E  519E               	movf	printf@tmpval& (0+255),w,b
  4346  001670  0F30               	addlw	48
  4347  001672  EC3D  F026         	call	_putch
  4348                           
  4349                           ;doprnt.c: 1232: val %= dpowers[c];
  4350  001676  C0A2  F020         	movff	printf@val,___llmod@dividend
  4351  00167A  C0A3  F021         	movff	printf@val+1,___llmod@dividend+1
  4352  00167E  C0A4  F022         	movff	printf@val+2,___llmod@dividend+2
  4353  001682  C0A5  F023         	movff	printf@val+3,___llmod@dividend+3
  4354  001686  0100               	movlb	0	; () banked
  4355  001688  51AB               	movf	printf@c& (0+255),w,b
  4356  00168A  0D04               	mullw	4
  4357  00168C  0E01               	movlw	low _dpowers
  4358  00168E  24F3               	addwf	prodl,w,c
  4359  001690  6EF6               	movwf	tblptrl,c
  4360  001692  0E0F               	movlw	high _dpowers
  4361  001694  20F4               	addwfc	prodh,w,c
  4362  001696  6EF7               	movwf	tblptrh,c
  4363  001698                     	if	1	;There are 3 active tblptr bytes
  4364  001698  6AF8               	clrf	tblptru,c
  4365  00169A  0E00               	movlw	low (__mediumconst shr (0+16))
  4366  00169C  22F8               	addwfc	tblptru,f,c
  4367  00169E                     	endif
  4368  00169E  0009               	tblrd		*+
  4369  0016A0  CFF5 F024          	movff	tablat,___llmod@divisor
  4370  0016A4  0009               	tblrd		*+
  4371  0016A6  CFF5 F025          	movff	tablat,___llmod@divisor+1
  4372  0016AA  0009               	tblrd		*+
  4373  0016AC  CFF5 F026          	movff	tablat,___llmod@divisor+2
  4374  0016B0  000A               	tblrd		*-
  4375  0016B2  CFF5 F027          	movff	tablat,___llmod@divisor+3
  4376  0016B6  EC0F  F023         	call	___llmod	;wreg free
  4377  0016BA  C020  F0A2         	movff	?___llmod,printf@val
  4378  0016BE  C021  F0A3         	movff	?___llmod+1,printf@val+1
  4379  0016C2  C022  F0A4         	movff	?___llmod+2,printf@val+2
  4380  0016C6  C023  F0A5         	movff	?___llmod+3,printf@val+3
  4381  0016CA                     l6391:
  4382  0016CA  0100               	movlb	0	; () banked
  4383  0016CC  07AB               	decf	printf@c& (0+255),f,b
  4384  0016CE  0100               	movlb	0	; () banked
  4385  0016D0  29AB               	incf	printf@c& (0+255),w,b
  4386  0016D2  B4D8               	btfsc	status,2,c
  4387  0016D4  D008               	goto	l6397
  4388  0016D6  D786               	goto	l6385
  4389  0016D8                     l6393:
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;doprnt.c: 1236: (putch('0') );
  4393  0016D8  0E30               	movlw	48
  4394  0016DA  EC3D  F026         	call	_putch
  4395                           
  4396                           ;doprnt.c: 1237: prec--;
  4397  0016DE  0100               	movlb	0	; () banked
  4398  0016E0  07A6               	decf	printf@prec& (0+255),f,b
  4399  0016E2  A0D8               	btfss	status,0,c
  4400  0016E4  07A7               	decf	(printf@prec+1)& (0+255),f,b
  4401  0016E6                     l6397:
  4402                           
  4403                           ; BSR set to: 0
  4404  0016E6  0100               	movlb	0	; () banked
  4405  0016E8  51A6               	movf	printf@prec& (0+255),w,b
  4406  0016EA  0100               	movlb	0	; () banked
  4407  0016EC  11A7               	iorwf	(printf@prec+1)& (0+255),w,b
  4408  0016EE  B4D8               	btfsc	status,2,c
  4409  0016F0  D0F0               	goto	l6447
  4410  0016F2  D7F2               	goto	l6393
  4411  0016F4                     l6399:
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;doprnt.c: 1246: }
  4415                           ;doprnt.c: 1253: {
  4416                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4417  0016F4  C098  FFD9         	movff	printf@ap,fsr2l
  4418  0016F8  C099  FFDA         	movff	printf@ap+1,fsr2h
  4419  0016FC  CFDE F0A2          	movff	postinc2,printf@val
  4420  001700  CFDD F0A3          	movff	postdec2,printf@val+1
  4421  001704  0100               	movlb	0	; () banked
  4422  001706  0E00               	movlw	0
  4423  001708  BFA3               	btfsc	(printf@val+1)& (0+255),7,b
  4424  00170A  0EFF               	movlw	-1
  4425  00170C  6FA4               	movwf	(printf@val+2)& (0+255),b
  4426  00170E  6FA5               	movwf	(printf@val+3)& (0+255),b
  4427                           
  4428                           ; BSR set to: 0
  4429  001710  0E02               	movlw	2
  4430  001712  0100               	movlb	0	; () banked
  4431  001714  2798               	addwf	printf@ap& (0+255),f,b
  4432  001716  0E00               	movlw	0
  4433  001718  2399               	addwfc	(printf@ap+1)& (0+255),f,b
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;doprnt.c: 1261: if((long)val < 0) {
  4437  00171A  0100               	movlb	0	; () banked
  4438  00171C  AFA5               	btfss	(printf@val+3)& (0+255),7,b
  4439  00171E  D00C               	goto	l6409
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;doprnt.c: 1262: flag |= 0x03;
  4443  001720  0E03               	movlw	3
  4444  001722  0100               	movlb	0	; () banked
  4445  001724  139A               	iorwf	printf@flag& (0+255),f,b
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;doprnt.c: 1263: val = -val;
  4449  001726  0100               	movlb	0	; () banked
  4450  001728  1FA5               	comf	(printf@val+3)& (0+255),f,b
  4451  00172A  1FA4               	comf	(printf@val+2)& (0+255),f,b
  4452  00172C  1FA3               	comf	(printf@val+1)& (0+255),f,b
  4453  00172E  6DA2               	negf	printf@val& (0+255),b
  4454  001730  0E00               	movlw	0
  4455  001732  23A3               	addwfc	(printf@val+1)& (0+255),f,b
  4456  001734  23A4               	addwfc	(printf@val+2)& (0+255),f,b
  4457  001736  23A5               	addwfc	(printf@val+3)& (0+255),f,b
  4458  001738                     l6409:
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;doprnt.c: 1264: }
  4462                           ;doprnt.c: 1266: }
  4463                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4464  001738  0100               	movlb	0	; () banked
  4465  00173A  51A6               	movf	printf@prec& (0+255),w,b
  4466  00173C  0100               	movlb	0	; () banked
  4467  00173E  11A7               	iorwf	(printf@prec+1)& (0+255),w,b
  4468  001740  A4D8               	btfss	status,2,c
  4469  001742  D00D               	goto	l6415
  4470                           
  4471                           ; BSR set to: 0
  4472  001744  0100               	movlb	0	; () banked
  4473  001746  51A2               	movf	printf@val& (0+255),w,b
  4474  001748  0100               	movlb	0	; () banked
  4475  00174A  11A3               	iorwf	(printf@val+1)& (0+255),w,b
  4476  00174C  0100               	movlb	0	; () banked
  4477  00174E  11A4               	iorwf	(printf@val+2)& (0+255),w,b
  4478  001750  0100               	movlb	0	; () banked
  4479  001752  11A5               	iorwf	(printf@val+3)& (0+255),w,b
  4480  001754  A4D8               	btfss	status,2,c
  4481  001756  D003               	goto	l6415
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;doprnt.c: 1291: prec++;
  4485  001758  0100               	movlb	0	; () banked
  4486  00175A  4BA6               	infsnz	printf@prec& (0+255),f,b
  4487  00175C  2BA7               	incf	(printf@prec+1)& (0+255),f,b
  4488  00175E                     l6415:
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4492  00175E  0E01               	movlw	1
  4493  001760  0100               	movlb	0	; () banked
  4494  001762  6FAB               	movwf	printf@c& (0+255),b
  4495  001764                     l6417:
  4496                           
  4497                           ; BSR set to: 0
  4498  001764  0E0A               	movlw	10
  4499  001766  0100               	movlb	0	; () banked
  4500  001768  19AB               	xorwf	printf@c& (0+255),w,b
  4501  00176A  B4D8               	btfsc	status,2,c
  4502  00176C  D021               	goto	l6429
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;doprnt.c: 1306: if(val < dpowers[c])
  4506                           
  4507                           ; BSR set to: 0
  4508                           
  4509                           ; BSR set to: 0
  4510  00176E  0100               	movlb	0	; () banked
  4511  001770  51AB               	movf	printf@c& (0+255),w,b
  4512  001772  0D04               	mullw	4
  4513  001774  0E01               	movlw	low _dpowers
  4514  001776  24F3               	addwf	prodl,w,c
  4515  001778  6EF6               	movwf	tblptrl,c
  4516  00177A  0E0F               	movlw	high _dpowers
  4517  00177C  20F4               	addwfc	prodh,w,c
  4518  00177E  6EF7               	movwf	tblptrh,c
  4519  001780                     	if	1	;There are 3 active tblptr bytes
  4520  001780  6AF8               	clrf	tblptru,c
  4521  001782  0E00               	movlw	low (__mediumconst shr (0+16))
  4522  001784  22F8               	addwfc	tblptru,f,c
  4523  001786                     	endif
  4524  001786  0009               	tblrd		*+
  4525  001788  50F5               	movf	tablat,w,c
  4526  00178A  0100               	movlb	0	; () banked
  4527  00178C  5DA2               	subwf	printf@val& (0+255),w,b
  4528  00178E  0009               	tblrd		*+
  4529  001790  50F5               	movf	tablat,w,c
  4530  001792  0100               	movlb	0	; () banked
  4531  001794  59A3               	subwfb	(printf@val+1)& (0+255),w,b
  4532  001796  0009               	tblrd		*+
  4533  001798  50F5               	movf	tablat,w,c
  4534  00179A  0100               	movlb	0	; () banked
  4535  00179C  59A4               	subwfb	(printf@val+2)& (0+255),w,b
  4536  00179E  0009               	tblrd		*+
  4537  0017A0  50F5               	movf	tablat,w,c
  4538  0017A2  0100               	movlb	0	; () banked
  4539  0017A4  59A5               	subwfb	(printf@val+3)& (0+255),w,b
  4540  0017A6  A0D8               	btfss	status,0,c
  4541  0017A8  D003               	goto	l6429
  4542                           
  4543                           ; BSR set to: 0
  4544                           
  4545                           ; BSR set to: 0
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;doprnt.c: 1307: break;
  4549  0017AA  0100               	movlb	0	; () banked
  4550  0017AC  2BAB               	incf	printf@c& (0+255),f,b
  4551  0017AE  D7DA               	goto	l6417
  4552  0017B0                     l6429:
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;doprnt.c: 1339: if(c < prec)
  4556  0017B0  0E80               	movlw	128
  4557  0017B2  0100               	movlb	0	; () banked
  4558  0017B4  BFAB               	btfsc	printf@c& (0+255),7,b
  4559  0017B6  0E7F               	movlw	127
  4560  0017B8  0100               	movlb	0	; () banked
  4561  0017BA  6F8F               	movwf	??_printf& (0+255),b
  4562  0017BC  0100               	movlb	0	; () banked
  4563  0017BE  51A6               	movf	printf@prec& (0+255),w,b
  4564  0017C0  0100               	movlb	0	; () banked
  4565  0017C2  5DAB               	subwf	printf@c& (0+255),w,b
  4566  0017C4  0100               	movlb	0	; () banked
  4567  0017C6  51A7               	movf	(printf@prec+1)& (0+255),w,b
  4568  0017C8  0A80               	xorlw	128
  4569  0017CA  0100               	movlb	0	; () banked
  4570  0017CC  598F               	subwfb	??_printf& (0+255),w,b
  4571  0017CE  B0D8               	btfsc	status,0,c
  4572  0017D0  D003               	goto	l6433
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;doprnt.c: 1340: c = prec;
  4576  0017D2  C0A6  F0AB         	movff	printf@prec,printf@c
  4577  0017D6  D018               	goto	l6437
  4578  0017D8                     l6433:
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;doprnt.c: 1341: else if(prec < c)
  4582  0017D8  0100               	movlb	0	; () banked
  4583  0017DA  51A7               	movf	(printf@prec+1)& (0+255),w,b
  4584  0017DC  0A80               	xorlw	128
  4585  0017DE  0100               	movlb	0	; () banked
  4586  0017E0  6F8F               	movwf	??_printf& (0+255),b
  4587  0017E2  0100               	movlb	0	; () banked
  4588  0017E4  51AB               	movf	printf@c& (0+255),w,b
  4589  0017E6  0100               	movlb	0	; () banked
  4590  0017E8  5DA6               	subwf	printf@prec& (0+255),w,b
  4591  0017EA  0E80               	movlw	128
  4592  0017EC  0100               	movlb	0	; () banked
  4593  0017EE  BFAB               	btfsc	printf@c& (0+255),7,b
  4594  0017F0  0E7F               	movlw	127
  4595  0017F2  0100               	movlb	0	; () banked
  4596  0017F4  598F               	subwfb	??_printf& (0+255),w,b
  4597  0017F6  B0D8               	btfsc	status,0,c
  4598  0017F8  D007               	goto	l6437
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;doprnt.c: 1342: prec = c;
  4602  0017FA  0100               	movlb	0	; () banked
  4603  0017FC  51AB               	movf	printf@c& (0+255),w,b
  4604  0017FE  0100               	movlb	0	; () banked
  4605  001800  6FA6               	movwf	printf@prec& (0+255),b
  4606  001802  6BA7               	clrf	(printf@prec+1)& (0+255),b
  4607  001804  BFA6               	btfsc	printf@prec& (0+255),7,b
  4608  001806  07A7               	decf	(printf@prec+1)& (0+255),f,b
  4609  001808                     l6437:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;doprnt.c: 1422: {
  4613                           ;doprnt.c: 1438: if(flag & 0x03)
  4614  001808  0E03               	movlw	3
  4615  00180A  0100               	movlb	0	; () banked
  4616  00180C  159A               	andwf	printf@flag& (0+255),w,b
  4617  00180E  0100               	movlb	0	; () banked
  4618  001810  6F8F               	movwf	??_printf& (0+255),b
  4619  001812  0E00               	movlw	0
  4620  001814  0100               	movlb	0	; () banked
  4621  001816  159B               	andwf	(printf@flag+1)& (0+255),w,b
  4622  001818  0100               	movlb	0	; () banked
  4623  00181A  6F90               	movwf	(??_printf+1)& (0+255),b
  4624  00181C  0100               	movlb	0	; () banked
  4625  00181E  518F               	movf	??_printf& (0+255),w,b
  4626  001820  0100               	movlb	0	; () banked
  4627  001822  1190               	iorwf	(??_printf+1)& (0+255),w,b
  4628  001824  B4D8               	btfsc	status,2,c
  4629  001826  D04A               	goto	l6445
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;doprnt.c: 1439: (putch('-') );
  4633  001828  0E2D               	movlw	45
  4634  00182A  EC3D  F026         	call	_putch
  4635                           
  4636                           ;doprnt.c: 1469: }
  4637                           ;doprnt.c: 1474: while(prec--) {
  4638  00182E  D046               	goto	l6445
  4639  001830                     l6441:
  4640                           
  4641                           ;doprnt.c: 1478: {
  4642                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4643  001830  C0A6  F08F         	movff	printf@prec,??_printf
  4644  001834  C0A7  F090         	movff	printf@prec+1,??_printf+1
  4645  001838  0100               	movlb	0	; () banked
  4646  00183A  90D8               	bcf	status,0,c
  4647  00183C  378F               	rlcf	??_printf& (0+255),f,b
  4648  00183E  3790               	rlcf	(??_printf+1)& (0+255),f,b
  4649  001840  0100               	movlb	0	; () banked
  4650  001842  90D8               	bcf	status,0,c
  4651  001844  378F               	rlcf	??_printf& (0+255),f,b
  4652  001846  3790               	rlcf	(??_printf+1)& (0+255),f,b
  4653  001848  0E01               	movlw	low _dpowers
  4654  00184A  0100               	movlb	0	; () banked
  4655  00184C  258F               	addwf	??_printf& (0+255),w,b
  4656  00184E  6EF6               	movwf	tblptrl,c
  4657  001850  0E0F               	movlw	high _dpowers
  4658  001852  2190               	addwfc	(??_printf+1)& (0+255),w,b
  4659  001854  6EF7               	movwf	tblptrh,c
  4660  001856                     	if	1	;There are 3 active tblptr bytes
  4661  001856  6AF8               	clrf	tblptru,c
  4662  001858  0E00               	movlw	low (__mediumconst shr (0+16))
  4663  00185A  22F8               	addwfc	tblptru,f,c
  4664  00185C                     	endif
  4665  00185C  0009               	tblrd		*+
  4666  00185E  CFF5 F017          	movff	tablat,___lldiv@divisor
  4667  001862  0009               	tblrd		*+
  4668  001864  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4669  001868  0009               	tblrd		*+
  4670  00186A  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4671  00186E  000A               	tblrd		*-
  4672  001870  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4673  001874  C0A2  F013         	movff	printf@val,___lldiv@dividend
  4674  001878  C0A3  F014         	movff	printf@val+1,___lldiv@dividend+1
  4675  00187C  C0A4  F015         	movff	printf@val+2,___lldiv@dividend+2
  4676  001880  C0A5  F016         	movff	printf@val+3,___lldiv@dividend+3
  4677  001884  EC96  F022         	call	___lldiv	;wreg free
  4678  001888  C013  F020         	movff	?___lldiv,___llmod@dividend
  4679  00188C  C014  F021         	movff	?___lldiv+1,___llmod@dividend+1
  4680  001890  C015  F022         	movff	?___lldiv+2,___llmod@dividend+2
  4681  001894  C016  F023         	movff	?___lldiv+3,___llmod@dividend+3
  4682  001898  0E0A               	movlw	10
  4683  00189A  6E24               	movwf	___llmod@divisor,c
  4684  00189C  0E00               	movlw	0
  4685  00189E  6E25               	movwf	___llmod@divisor+1,c
  4686  0018A0  0E00               	movlw	0
  4687  0018A2  6E26               	movwf	___llmod@divisor+2,c
  4688  0018A4  0E00               	movlw	0
  4689  0018A6  6E27               	movwf	___llmod@divisor+3,c
  4690  0018A8  EC0F  F023         	call	___llmod	;wreg free
  4691  0018AC  5020               	movf	?___llmod,w,c
  4692  0018AE  0F30               	addlw	48
  4693  0018B0  0100               	movlb	0	; () banked
  4694  0018B2  6FAB               	movwf	printf@c& (0+255),b
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;doprnt.c: 1523: }
  4698                           ;doprnt.c: 1524: (putch(c) );
  4699  0018B4  0100               	movlb	0	; () banked
  4700  0018B6  51AB               	movf	printf@c& (0+255),w,b
  4701  0018B8  EC3D  F026         	call	_putch
  4702  0018BC                     l6445:
  4703  0018BC  0100               	movlb	0	; () banked
  4704  0018BE  07A6               	decf	printf@prec& (0+255),f,b
  4705  0018C0  A0D8               	btfss	status,0,c
  4706  0018C2  07A7               	decf	(printf@prec+1)& (0+255),f,b
  4707  0018C4  0100               	movlb	0	; () banked
  4708  0018C6  29A6               	incf	printf@prec& (0+255),w,b
  4709  0018C8  E1B3               	bnz	l6441
  4710  0018CA  0100               	movlb	0	; () banked
  4711  0018CC  29A7               	incf	(printf@prec+1)& (0+255),w,b
  4712  0018CE  A4D8               	btfss	status,2,c
  4713  0018D0  D7AF               	goto	l6441
  4714  0018D2                     l6447:
  4715  0018D2  C082  FFF6         	movff	printf@f,tblptrl
  4716  0018D6  C083  FFF7         	movff	printf@f+1,tblptrh
  4717  0018DA  0100               	movlb	0	; () banked
  4718  0018DC  4B82               	infsnz	printf@f& (0+255),f,b
  4719  0018DE  2B83               	incf	(printf@f+1)& (0+255),f,b
  4720  0018E0                     	if	0	;tblptru may be non-zero
  4721  0018E0                     	endif
  4722  0018E0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4723  0018E0  0E00               	movlw	low (__mediumconst shr (0+16))
  4724  0018E2  6EF8               	movwf	tblptru,c
  4725  0018E4                     	endif
  4726  0018E4  0008               	tblrd		*
  4727  0018E6  CFF5 F0AB          	movff	tablat,printf@c
  4728  0018EA  0100               	movlb	0	; () banked
  4729  0018EC  51AB               	movf	printf@c& (0+255),w,b
  4730  0018EE  B4D8               	btfsc	status,2,c
  4731  0018F0  0012               	return	
  4732  0018F2  EFED  F007         	goto	l6237
  4733  0018F6                     __end_of_printf:
  4734                           	opt stack 0
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           postinc0	equ	0xFEE
  4742                           wreg	equ	0xFE8
  4743                           postdec1	equ	0xFE5
  4744                           fsr1l	equ	0xFE1
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           fsr2h	equ	0xFDA
  4749                           fsr2l	equ	0xFD9
  4750                           status	equ	0xFD8
  4751                           
  4752 ;; *************** function _scale *****************
  4753 ;; Defined at:
  4754 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  scl             1    wreg     char 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  scl             1    3[BANK0 ] char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  3   53[COMRAM] char 
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4768 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4769 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4771 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4772 ;;Total ram usage:        7 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    6
  4775 ;; This function calls:
  4776 ;;		___awdiv
  4777 ;;		___awmod
  4778 ;;		___ftmul
  4779 ;;		___wmul
  4780 ;; This function is called by:
  4781 ;;		_printf
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text18
  4786  0018F6                     __ptext18:
  4787                           	opt stack 0
  4788  0018F6                     _scale:
  4789                           	opt stack 23
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;incstack = 0
  4793                           ;scale@scl stored from wreg
  4794  0018F6  0100               	movlb	0	; () banked
  4795  0018F8  6F63               	movwf	scale@scl& (0+255),b
  4796                           
  4797                           ;doprnt.c: 428: if(scl < 0) {
  4798  0018FA  0100               	movlb	0	; () banked
  4799  0018FC  AF63               	btfss	scale@scl& (0+255),7,b
  4800  0018FE  D116               	goto	l5905
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;doprnt.c: 429: scl = -scl;
  4804  001900  0100               	movlb	0	; () banked
  4805  001902  6D63               	negf	scale@scl& (0+255),b
  4806                           
  4807                           ;doprnt.c: 430: if(scl>=110)
  4808  001904  0100               	movlb	0	; () banked
  4809  001906  5163               	movf	scale@scl& (0+255),w,b
  4810  001908  0A80               	xorlw	128
  4811  00190A  0F12               	addlw	-238
  4812  00190C  A0D8               	btfss	status,0,c
  4813  00190E  D09D               	goto	l5895
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4817  001910  0E00               	movlw	0
  4818  001912  6E24               	movwf	___wmul@multiplicand+1,c
  4819  001914  0E03               	movlw	3
  4820  001916  6E23               	movwf	___wmul@multiplicand,c
  4821  001918  0E00               	movlw	0
  4822  00191A  6E1C               	movwf	___awdiv@divisor+1,c
  4823  00191C  0E0A               	movlw	10
  4824  00191E  6E1B               	movwf	___awdiv@divisor,c
  4825  001920  0E00               	movlw	0
  4826  001922  6E16               	movwf	___awmod@divisor+1,c
  4827  001924  0E64               	movlw	100
  4828  001926  6E15               	movwf	___awmod@divisor,c
  4829  001928  0100               	movlb	0	; () banked
  4830  00192A  5163               	movf	scale@scl& (0+255),w,b
  4831  00192C  6E13               	movwf	___awmod@dividend,c
  4832  00192E  6A14               	clrf	___awmod@dividend+1,c
  4833  001930  BE13               	btfsc	___awmod@dividend,7,c
  4834  001932  0614               	decf	___awmod@dividend+1,f,c
  4835  001934  ECD7  F022         	call	___awmod	;wreg free
  4836  001938  C013  F019         	movff	?___awmod,___awdiv@dividend
  4837  00193C  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4838  001940  EC54  F022         	call	___awdiv	;wreg free
  4839  001944  0E09               	movlw	9
  4840  001946  2419               	addwf	?___awdiv,w,c
  4841  001948  6E21               	movwf	___wmul@multiplier,c
  4842  00194A  0E00               	movlw	0
  4843  00194C  201A               	addwfc	?___awdiv+1,w,c
  4844  00194E  6E22               	movwf	___wmul@multiplier+1,c
  4845  001950  EC28  F025         	call	___wmul	;wreg free
  4846  001954  0E50               	movlw	low __npowers_
  4847  001956  2421               	addwf	?___wmul,w,c
  4848  001958  6EF6               	movwf	tblptrl,c
  4849  00195A  0E0F               	movlw	high __npowers_
  4850  00195C  2022               	addwfc	?___wmul+1,w,c
  4851  00195E  6EF7               	movwf	tblptrh,c
  4852  001960                     	if	1	;There are 3 active tblptr bytes
  4853  001960  6AF8               	clrf	tblptru,c
  4854  001962  0E00               	movlw	low (__mediumconst shr (0+16))
  4855  001964  22F8               	addwfc	tblptru,f,c
  4856  001966                     	endif
  4857  001966  0009               	tblrd		*+
  4858  001968  CFF5 F02A          	movff	tablat,___ftmul@f2
  4859  00196C  0009               	tblrd		*+
  4860  00196E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4861  001972  000A               	tblrd		*-
  4862  001974  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4863  001978  0E00               	movlw	0
  4864  00197A  6E1C               	movwf	___awdiv@divisor+1,c
  4865  00197C  0E64               	movlw	100
  4866  00197E  6E1B               	movwf	___awdiv@divisor,c
  4867  001980  0100               	movlb	0	; () banked
  4868  001982  5163               	movf	scale@scl& (0+255),w,b
  4869  001984  6E19               	movwf	___awdiv@dividend,c
  4870  001986  6A1A               	clrf	___awdiv@dividend+1,c
  4871  001988  BE19               	btfsc	___awdiv@dividend,7,c
  4872  00198A  061A               	decf	___awdiv@dividend+1,f,c
  4873  00198C  EC54  F022         	call	___awdiv	;wreg free
  4874  001990  0E12               	movlw	18
  4875  001992  2419               	addwf	?___awdiv,w,c
  4876  001994  6E21               	movwf	___wmul@multiplier,c
  4877  001996  0E00               	movlw	0
  4878  001998  201A               	addwfc	?___awdiv+1,w,c
  4879  00199A  6E22               	movwf	___wmul@multiplier+1,c
  4880  00199C  0E00               	movlw	0
  4881  00199E  6E24               	movwf	___wmul@multiplicand+1,c
  4882  0019A0  0E03               	movlw	3
  4883  0019A2  6E23               	movwf	___wmul@multiplicand,c
  4884  0019A4  EC28  F025         	call	___wmul	;wreg free
  4885  0019A8  0E50               	movlw	low __npowers_
  4886  0019AA  2421               	addwf	?___wmul,w,c
  4887  0019AC  6EF6               	movwf	tblptrl,c
  4888  0019AE  0E0F               	movlw	high __npowers_
  4889  0019B0  2022               	addwfc	?___wmul+1,w,c
  4890  0019B2  6EF7               	movwf	tblptrh,c
  4891  0019B4                     	if	1	;There are 3 active tblptr bytes
  4892  0019B4  6AF8               	clrf	tblptru,c
  4893  0019B6  0E00               	movlw	low (__mediumconst shr (0+16))
  4894  0019B8  22F8               	addwfc	tblptru,f,c
  4895  0019BA                     	endif
  4896  0019BA  0009               	tblrd		*+
  4897  0019BC  CFF5 F027          	movff	tablat,___ftmul@f1
  4898  0019C0  0009               	tblrd		*+
  4899  0019C2  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4900  0019C6  000A               	tblrd		*-
  4901  0019C8  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4902  0019CC  EC49  F01F         	call	___ftmul	;wreg free
  4903  0019D0  C027  F060         	movff	?___ftmul,_scale$2941
  4904  0019D4  C028  F061         	movff	?___ftmul+1,_scale$2941+1
  4905  0019D8  C029  F062         	movff	?___ftmul+2,_scale$2941+2
  4906                           
  4907                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4908  0019DC  C060  F027         	movff	_scale$2941,___ftmul@f1
  4909  0019E0  C061  F028         	movff	_scale$2941+1,___ftmul@f1+1
  4910  0019E4  C062  F029         	movff	_scale$2941+2,___ftmul@f1+2
  4911  0019E8  0E00               	movlw	0
  4912  0019EA  6E24               	movwf	___wmul@multiplicand+1,c
  4913  0019EC  0E03               	movlw	3
  4914  0019EE  6E23               	movwf	___wmul@multiplicand,c
  4915  0019F0  0E00               	movlw	0
  4916  0019F2  6E16               	movwf	___awmod@divisor+1,c
  4917  0019F4  0E0A               	movlw	10
  4918  0019F6  6E15               	movwf	___awmod@divisor,c
  4919  0019F8  0100               	movlb	0	; () banked
  4920  0019FA  5163               	movf	scale@scl& (0+255),w,b
  4921  0019FC  6E13               	movwf	___awmod@dividend,c
  4922  0019FE  6A14               	clrf	___awmod@dividend+1,c
  4923  001A00  BE13               	btfsc	___awmod@dividend,7,c
  4924  001A02  0614               	decf	___awmod@dividend+1,f,c
  4925  001A04  ECD7  F022         	call	___awmod	;wreg free
  4926  001A08  C013  F021         	movff	?___awmod,___wmul@multiplier
  4927  001A0C  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4928  001A10  EC28  F025         	call	___wmul	;wreg free
  4929  001A14  0E50               	movlw	low __npowers_
  4930  001A16  2421               	addwf	?___wmul,w,c
  4931  001A18  6EF6               	movwf	tblptrl,c
  4932  001A1A  0E0F               	movlw	high __npowers_
  4933  001A1C  2022               	addwfc	?___wmul+1,w,c
  4934  001A1E  6EF7               	movwf	tblptrh,c
  4935  001A20                     	if	1	;There are 3 active tblptr bytes
  4936  001A20  6AF8               	clrf	tblptru,c
  4937  001A22  0E00               	movlw	low (__mediumconst shr (0+16))
  4938  001A24  22F8               	addwfc	tblptru,f,c
  4939  001A26                     	endif
  4940  001A26  0009               	tblrd		*+
  4941  001A28  CFF5 F02A          	movff	tablat,___ftmul@f2
  4942  001A2C  0009               	tblrd		*+
  4943  001A2E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4944  001A32  000A               	tblrd		*-
  4945  001A34  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4946  001A38  EC49  F01F         	call	___ftmul	;wreg free
  4947  001A3C  C027  F036         	movff	?___ftmul,?_scale
  4948  001A40  C028  F037         	movff	?___ftmul+1,?_scale+1
  4949  001A44  C029  F038         	movff	?___ftmul+2,?_scale+2
  4950  001A48  0012               	return	
  4951  001A4A                     l5895:
  4952                           
  4953                           ;doprnt.c: 432: else if(scl > 10)
  4954  001A4A  0100               	movlb	0	; () banked
  4955  001A4C  5163               	movf	scale@scl& (0+255),w,b
  4956  001A4E  0A80               	xorlw	128
  4957  001A50  0F75               	addlw	-139
  4958  001A52  A0D8               	btfss	status,0,c
  4959  001A54  D055               	goto	l5901
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4963  001A56  0E00               	movlw	0
  4964  001A58  6E1C               	movwf	___awdiv@divisor+1,c
  4965  001A5A  0E0A               	movlw	10
  4966  001A5C  6E1B               	movwf	___awdiv@divisor,c
  4967  001A5E  0100               	movlb	0	; () banked
  4968  001A60  5163               	movf	scale@scl& (0+255),w,b
  4969  001A62  6E19               	movwf	___awdiv@dividend,c
  4970  001A64  6A1A               	clrf	___awdiv@dividend+1,c
  4971  001A66  BE19               	btfsc	___awdiv@dividend,7,c
  4972  001A68  061A               	decf	___awdiv@dividend+1,f,c
  4973  001A6A  EC54  F022         	call	___awdiv	;wreg free
  4974  001A6E  0E09               	movlw	9
  4975  001A70  2419               	addwf	?___awdiv,w,c
  4976  001A72  6E21               	movwf	___wmul@multiplier,c
  4977  001A74  0E00               	movlw	0
  4978  001A76  201A               	addwfc	?___awdiv+1,w,c
  4979  001A78  6E22               	movwf	___wmul@multiplier+1,c
  4980  001A7A  0E00               	movlw	0
  4981  001A7C  6E24               	movwf	___wmul@multiplicand+1,c
  4982  001A7E  0E03               	movlw	3
  4983  001A80  6E23               	movwf	___wmul@multiplicand,c
  4984  001A82  EC28  F025         	call	___wmul	;wreg free
  4985  001A86  0E50               	movlw	low __npowers_
  4986  001A88  2421               	addwf	?___wmul,w,c
  4987  001A8A  6EF6               	movwf	tblptrl,c
  4988  001A8C  0E0F               	movlw	high __npowers_
  4989  001A8E  2022               	addwfc	?___wmul+1,w,c
  4990  001A90  6EF7               	movwf	tblptrh,c
  4991  001A92                     	if	1	;There are 3 active tblptr bytes
  4992  001A92  6AF8               	clrf	tblptru,c
  4993  001A94  0E00               	movlw	low (__mediumconst shr (0+16))
  4994  001A96  22F8               	addwfc	tblptru,f,c
  4995  001A98                     	endif
  4996  001A98  0009               	tblrd		*+
  4997  001A9A  CFF5 F027          	movff	tablat,___ftmul@f1
  4998  001A9E  0009               	tblrd		*+
  4999  001AA0  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5000  001AA4  000A               	tblrd		*-
  5001  001AA6  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5002  001AAA  0E00               	movlw	0
  5003  001AAC  6E24               	movwf	___wmul@multiplicand+1,c
  5004  001AAE  0E03               	movlw	3
  5005  001AB0  6E23               	movwf	___wmul@multiplicand,c
  5006  001AB2  0E00               	movlw	0
  5007  001AB4  6E16               	movwf	___awmod@divisor+1,c
  5008  001AB6  0E0A               	movlw	10
  5009  001AB8  6E15               	movwf	___awmod@divisor,c
  5010  001ABA  0100               	movlb	0	; () banked
  5011  001ABC  5163               	movf	scale@scl& (0+255),w,b
  5012  001ABE  6E13               	movwf	___awmod@dividend,c
  5013  001AC0  6A14               	clrf	___awmod@dividend+1,c
  5014  001AC2  BE13               	btfsc	___awmod@dividend,7,c
  5015  001AC4  0614               	decf	___awmod@dividend+1,f,c
  5016  001AC6  ECD7  F022         	call	___awmod	;wreg free
  5017  001ACA  C013  F021         	movff	?___awmod,___wmul@multiplier
  5018  001ACE  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5019  001AD2  EC28  F025         	call	___wmul	;wreg free
  5020  001AD6  0E50               	movlw	low __npowers_
  5021  001AD8  2421               	addwf	?___wmul,w,c
  5022  001ADA  6EF6               	movwf	tblptrl,c
  5023  001ADC  0E0F               	movlw	high __npowers_
  5024  001ADE  2022               	addwfc	?___wmul+1,w,c
  5025  001AE0  6EF7               	movwf	tblptrh,c
  5026  001AE2                     	if	1	;There are 3 active tblptr bytes
  5027  001AE2  6AF8               	clrf	tblptru,c
  5028  001AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  5029  001AE6  22F8               	addwfc	tblptru,f,c
  5030  001AE8                     	endif
  5031  001AE8  0009               	tblrd		*+
  5032  001AEA  CFF5 F02A          	movff	tablat,___ftmul@f2
  5033  001AEE  0009               	tblrd		*+
  5034  001AF0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5035  001AF4  000A               	tblrd		*-
  5036  001AF6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5037  001AFA  EC49  F01F         	call	___ftmul	;wreg free
  5038  001AFE  D79E               	goto	L3
  5039  001B00                     l5901:
  5040                           
  5041                           ;doprnt.c: 434: return _npowers_[scl];
  5042  001B00  0100               	movlb	0	; () banked
  5043  001B02  5163               	movf	scale@scl& (0+255),w,b
  5044  001B04  0D03               	mullw	3
  5045  001B06  0E50               	movlw	low __npowers_
  5046  001B08  24F3               	addwf	prodl,w,c
  5047  001B0A  6EF6               	movwf	tblptrl,c
  5048  001B0C  0E0F               	movlw	high __npowers_
  5049  001B0E  20F4               	addwfc	prodh,w,c
  5050  001B10  6EF7               	movwf	tblptrh,c
  5051  001B12                     	if	1	;There are 3 active tblptr bytes
  5052  001B12  6AF8               	clrf	tblptru,c
  5053  001B14  0E00               	movlw	low (__mediumconst shr (0+16))
  5054  001B16  22F8               	addwfc	tblptru,f,c
  5055  001B18                     	endif
  5056  001B18  0009               	tblrd		*+
  5057  001B1A  CFF5 F036          	movff	tablat,?_scale
  5058  001B1E  0009               	tblrd		*+
  5059  001B20  CFF5 F037          	movff	tablat,?_scale+1
  5060  001B24  000A               	tblrd		*-
  5061  001B26  CFF5 F038          	movff	tablat,?_scale+2
  5062                           
  5063                           ; BSR set to: 0
  5064  001B2A  0012               	return	
  5065  001B2C                     l5905:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;doprnt.c: 435: }
  5069                           ;doprnt.c: 436: if(scl>=110)
  5070  001B2C  0100               	movlb	0	; () banked
  5071  001B2E  5163               	movf	scale@scl& (0+255),w,b
  5072  001B30  0A80               	xorlw	128
  5073  001B32  0F12               	addlw	-238
  5074  001B34  A0D8               	btfss	status,0,c
  5075  001B36  D09D               	goto	l5913
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5079  001B38  0E00               	movlw	0
  5080  001B3A  6E24               	movwf	___wmul@multiplicand+1,c
  5081  001B3C  0E03               	movlw	3
  5082  001B3E  6E23               	movwf	___wmul@multiplicand,c
  5083  001B40  0E00               	movlw	0
  5084  001B42  6E1C               	movwf	___awdiv@divisor+1,c
  5085  001B44  0E0A               	movlw	10
  5086  001B46  6E1B               	movwf	___awdiv@divisor,c
  5087  001B48  0E00               	movlw	0
  5088  001B4A  6E16               	movwf	___awmod@divisor+1,c
  5089  001B4C  0E64               	movlw	100
  5090  001B4E  6E15               	movwf	___awmod@divisor,c
  5091  001B50  0100               	movlb	0	; () banked
  5092  001B52  5163               	movf	scale@scl& (0+255),w,b
  5093  001B54  6E13               	movwf	___awmod@dividend,c
  5094  001B56  6A14               	clrf	___awmod@dividend+1,c
  5095  001B58  BE13               	btfsc	___awmod@dividend,7,c
  5096  001B5A  0614               	decf	___awmod@dividend+1,f,c
  5097  001B5C  ECD7  F022         	call	___awmod	;wreg free
  5098  001B60  C013  F019         	movff	?___awmod,___awdiv@dividend
  5099  001B64  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  5100  001B68  EC54  F022         	call	___awdiv	;wreg free
  5101  001B6C  0E09               	movlw	9
  5102  001B6E  2419               	addwf	?___awdiv,w,c
  5103  001B70  6E21               	movwf	___wmul@multiplier,c
  5104  001B72  0E00               	movlw	0
  5105  001B74  201A               	addwfc	?___awdiv+1,w,c
  5106  001B76  6E22               	movwf	___wmul@multiplier+1,c
  5107  001B78  EC28  F025         	call	___wmul	;wreg free
  5108  001B7C  0E29               	movlw	low __powers_
  5109  001B7E  2421               	addwf	?___wmul,w,c
  5110  001B80  6EF6               	movwf	tblptrl,c
  5111  001B82  0E0F               	movlw	high __powers_
  5112  001B84  2022               	addwfc	?___wmul+1,w,c
  5113  001B86  6EF7               	movwf	tblptrh,c
  5114  001B88                     	if	1	;There are 3 active tblptr bytes
  5115  001B88  6AF8               	clrf	tblptru,c
  5116  001B8A  0E00               	movlw	low (__mediumconst shr (0+16))
  5117  001B8C  22F8               	addwfc	tblptru,f,c
  5118  001B8E                     	endif
  5119  001B8E  0009               	tblrd		*+
  5120  001B90  CFF5 F02A          	movff	tablat,___ftmul@f2
  5121  001B94  0009               	tblrd		*+
  5122  001B96  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5123  001B9A  000A               	tblrd		*-
  5124  001B9C  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5125  001BA0  0E00               	movlw	0
  5126  001BA2  6E1C               	movwf	___awdiv@divisor+1,c
  5127  001BA4  0E64               	movlw	100
  5128  001BA6  6E1B               	movwf	___awdiv@divisor,c
  5129  001BA8  0100               	movlb	0	; () banked
  5130  001BAA  5163               	movf	scale@scl& (0+255),w,b
  5131  001BAC  6E19               	movwf	___awdiv@dividend,c
  5132  001BAE  6A1A               	clrf	___awdiv@dividend+1,c
  5133  001BB0  BE19               	btfsc	___awdiv@dividend,7,c
  5134  001BB2  061A               	decf	___awdiv@dividend+1,f,c
  5135  001BB4  EC54  F022         	call	___awdiv	;wreg free
  5136  001BB8  0E12               	movlw	18
  5137  001BBA  2419               	addwf	?___awdiv,w,c
  5138  001BBC  6E21               	movwf	___wmul@multiplier,c
  5139  001BBE  0E00               	movlw	0
  5140  001BC0  201A               	addwfc	?___awdiv+1,w,c
  5141  001BC2  6E22               	movwf	___wmul@multiplier+1,c
  5142  001BC4  0E00               	movlw	0
  5143  001BC6  6E24               	movwf	___wmul@multiplicand+1,c
  5144  001BC8  0E03               	movlw	3
  5145  001BCA  6E23               	movwf	___wmul@multiplicand,c
  5146  001BCC  EC28  F025         	call	___wmul	;wreg free
  5147  001BD0  0E29               	movlw	low __powers_
  5148  001BD2  2421               	addwf	?___wmul,w,c
  5149  001BD4  6EF6               	movwf	tblptrl,c
  5150  001BD6  0E0F               	movlw	high __powers_
  5151  001BD8  2022               	addwfc	?___wmul+1,w,c
  5152  001BDA  6EF7               	movwf	tblptrh,c
  5153  001BDC                     	if	1	;There are 3 active tblptr bytes
  5154  001BDC  6AF8               	clrf	tblptru,c
  5155  001BDE  0E00               	movlw	low (__mediumconst shr (0+16))
  5156  001BE0  22F8               	addwfc	tblptru,f,c
  5157  001BE2                     	endif
  5158  001BE2  0009               	tblrd		*+
  5159  001BE4  CFF5 F027          	movff	tablat,___ftmul@f1
  5160  001BE8  0009               	tblrd		*+
  5161  001BEA  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5162  001BEE  000A               	tblrd		*-
  5163  001BF0  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5164  001BF4  EC49  F01F         	call	___ftmul	;wreg free
  5165  001BF8  C027  F060         	movff	?___ftmul,_scale$2941
  5166  001BFC  C028  F061         	movff	?___ftmul+1,_scale$2941+1
  5167  001C00  C029  F062         	movff	?___ftmul+2,_scale$2941+2
  5168                           
  5169                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5170  001C04  C060  F027         	movff	_scale$2941,___ftmul@f1
  5171  001C08  C061  F028         	movff	_scale$2941+1,___ftmul@f1+1
  5172  001C0C  C062  F029         	movff	_scale$2941+2,___ftmul@f1+2
  5173  001C10  0E00               	movlw	0
  5174  001C12  6E24               	movwf	___wmul@multiplicand+1,c
  5175  001C14  0E03               	movlw	3
  5176  001C16  6E23               	movwf	___wmul@multiplicand,c
  5177  001C18  0E00               	movlw	0
  5178  001C1A  6E16               	movwf	___awmod@divisor+1,c
  5179  001C1C  0E0A               	movlw	10
  5180  001C1E  6E15               	movwf	___awmod@divisor,c
  5181  001C20  0100               	movlb	0	; () banked
  5182  001C22  5163               	movf	scale@scl& (0+255),w,b
  5183  001C24  6E13               	movwf	___awmod@dividend,c
  5184  001C26  6A14               	clrf	___awmod@dividend+1,c
  5185  001C28  BE13               	btfsc	___awmod@dividend,7,c
  5186  001C2A  0614               	decf	___awmod@dividend+1,f,c
  5187  001C2C  ECD7  F022         	call	___awmod	;wreg free
  5188  001C30  C013  F021         	movff	?___awmod,___wmul@multiplier
  5189  001C34  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5190  001C38  EC28  F025         	call	___wmul	;wreg free
  5191  001C3C  0E29               	movlw	low __powers_
  5192  001C3E  2421               	addwf	?___wmul,w,c
  5193  001C40  6EF6               	movwf	tblptrl,c
  5194  001C42  0E0F               	movlw	high __powers_
  5195  001C44  2022               	addwfc	?___wmul+1,w,c
  5196  001C46  6EF7               	movwf	tblptrh,c
  5197  001C48                     	if	1	;There are 3 active tblptr bytes
  5198  001C48  6AF8               	clrf	tblptru,c
  5199  001C4A  0E00               	movlw	low (__mediumconst shr (0+16))
  5200  001C4C  22F8               	addwfc	tblptru,f,c
  5201  001C4E                     	endif
  5202  001C4E  0009               	tblrd		*+
  5203  001C50  CFF5 F02A          	movff	tablat,___ftmul@f2
  5204  001C54  0009               	tblrd		*+
  5205  001C56  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5206  001C5A  000A               	tblrd		*-
  5207  001C5C  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5208  001C60  EC49  F01F         	call	___ftmul	;wreg free
  5209  001C64  C027  F036         	movff	?___ftmul,?_scale
  5210  001C68  C028  F037         	movff	?___ftmul+1,?_scale+1
  5211  001C6C  C029  F038         	movff	?___ftmul+2,?_scale+2
  5212  001C70  0012               	return	
  5213  001C72                     l5913:
  5214                           
  5215                           ;doprnt.c: 438: else if(scl > 10)
  5216  001C72  0100               	movlb	0	; () banked
  5217  001C74  5163               	movf	scale@scl& (0+255),w,b
  5218  001C76  0A80               	xorlw	128
  5219  001C78  0F75               	addlw	-139
  5220  001C7A  A0D8               	btfss	status,0,c
  5221  001C7C  D055               	goto	l5919
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5225  001C7E  0E00               	movlw	0
  5226  001C80  6E1C               	movwf	___awdiv@divisor+1,c
  5227  001C82  0E0A               	movlw	10
  5228  001C84  6E1B               	movwf	___awdiv@divisor,c
  5229  001C86  0100               	movlb	0	; () banked
  5230  001C88  5163               	movf	scale@scl& (0+255),w,b
  5231  001C8A  6E19               	movwf	___awdiv@dividend,c
  5232  001C8C  6A1A               	clrf	___awdiv@dividend+1,c
  5233  001C8E  BE19               	btfsc	___awdiv@dividend,7,c
  5234  001C90  061A               	decf	___awdiv@dividend+1,f,c
  5235  001C92  EC54  F022         	call	___awdiv	;wreg free
  5236  001C96  0E09               	movlw	9
  5237  001C98  2419               	addwf	?___awdiv,w,c
  5238  001C9A  6E21               	movwf	___wmul@multiplier,c
  5239  001C9C  0E00               	movlw	0
  5240  001C9E  201A               	addwfc	?___awdiv+1,w,c
  5241  001CA0  6E22               	movwf	___wmul@multiplier+1,c
  5242  001CA2  0E00               	movlw	0
  5243  001CA4  6E24               	movwf	___wmul@multiplicand+1,c
  5244  001CA6  0E03               	movlw	3
  5245  001CA8  6E23               	movwf	___wmul@multiplicand,c
  5246  001CAA  EC28  F025         	call	___wmul	;wreg free
  5247  001CAE  0E29               	movlw	low __powers_
  5248  001CB0  2421               	addwf	?___wmul,w,c
  5249  001CB2  6EF6               	movwf	tblptrl,c
  5250  001CB4  0E0F               	movlw	high __powers_
  5251  001CB6  2022               	addwfc	?___wmul+1,w,c
  5252  001CB8  6EF7               	movwf	tblptrh,c
  5253  001CBA                     	if	1	;There are 3 active tblptr bytes
  5254  001CBA  6AF8               	clrf	tblptru,c
  5255  001CBC  0E00               	movlw	low (__mediumconst shr (0+16))
  5256  001CBE  22F8               	addwfc	tblptru,f,c
  5257  001CC0                     	endif
  5258  001CC0  0009               	tblrd		*+
  5259  001CC2  CFF5 F027          	movff	tablat,___ftmul@f1
  5260  001CC6  0009               	tblrd		*+
  5261  001CC8  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5262  001CCC  000A               	tblrd		*-
  5263  001CCE  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5264  001CD2  0E00               	movlw	0
  5265  001CD4  6E24               	movwf	___wmul@multiplicand+1,c
  5266  001CD6  0E03               	movlw	3
  5267  001CD8  6E23               	movwf	___wmul@multiplicand,c
  5268  001CDA  0E00               	movlw	0
  5269  001CDC  6E16               	movwf	___awmod@divisor+1,c
  5270  001CDE  0E0A               	movlw	10
  5271  001CE0  6E15               	movwf	___awmod@divisor,c
  5272  001CE2  0100               	movlb	0	; () banked
  5273  001CE4  5163               	movf	scale@scl& (0+255),w,b
  5274  001CE6  6E13               	movwf	___awmod@dividend,c
  5275  001CE8  6A14               	clrf	___awmod@dividend+1,c
  5276  001CEA  BE13               	btfsc	___awmod@dividend,7,c
  5277  001CEC  0614               	decf	___awmod@dividend+1,f,c
  5278  001CEE  ECD7  F022         	call	___awmod	;wreg free
  5279  001CF2  C013  F021         	movff	?___awmod,___wmul@multiplier
  5280  001CF6  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5281  001CFA  EC28  F025         	call	___wmul	;wreg free
  5282  001CFE  0E29               	movlw	low __powers_
  5283  001D00  2421               	addwf	?___wmul,w,c
  5284  001D02  6EF6               	movwf	tblptrl,c
  5285  001D04  0E0F               	movlw	high __powers_
  5286  001D06  2022               	addwfc	?___wmul+1,w,c
  5287  001D08  6EF7               	movwf	tblptrh,c
  5288  001D0A                     	if	1	;There are 3 active tblptr bytes
  5289  001D0A  6AF8               	clrf	tblptru,c
  5290  001D0C  0E00               	movlw	low (__mediumconst shr (0+16))
  5291  001D0E  22F8               	addwfc	tblptru,f,c
  5292  001D10                     	endif
  5293  001D10  0009               	tblrd		*+
  5294  001D12  CFF5 F02A          	movff	tablat,___ftmul@f2
  5295  001D16  0009               	tblrd		*+
  5296  001D18  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5297  001D1C  000A               	tblrd		*-
  5298  001D1E  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5299  001D22  EC49  F01F         	call	___ftmul	;wreg free
  5300  001D26  D79E               	goto	L4
  5301  001D28                     l5919:
  5302                           
  5303                           ;doprnt.c: 440: return _powers_[scl];
  5304  001D28  0100               	movlb	0	; () banked
  5305  001D2A  5163               	movf	scale@scl& (0+255),w,b
  5306  001D2C  0D03               	mullw	3
  5307  001D2E  0E29               	movlw	low __powers_
  5308  001D30  24F3               	addwf	prodl,w,c
  5309  001D32  6EF6               	movwf	tblptrl,c
  5310  001D34  0E0F               	movlw	high __powers_
  5311  001D36  20F4               	addwfc	prodh,w,c
  5312  001D38  6EF7               	movwf	tblptrh,c
  5313  001D3A                     	if	1	;There are 3 active tblptr bytes
  5314  001D3A  6AF8               	clrf	tblptru,c
  5315  001D3C  0E00               	movlw	low (__mediumconst shr (0+16))
  5316  001D3E  22F8               	addwfc	tblptru,f,c
  5317  001D40                     	endif
  5318  001D40  0009               	tblrd		*+
  5319  001D42  CFF5 F036          	movff	tablat,?_scale
  5320  001D46  0009               	tblrd		*+
  5321  001D48  CFF5 F037          	movff	tablat,?_scale+1
  5322  001D4C  000A               	tblrd		*-
  5323  001D4E  CFF5 F038          	movff	tablat,?_scale+2
  5324  001D52  0012               	return	
  5325  001D54                     __end_of_scale:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           postdec1	equ	0xFE5
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _putch *****************
  5345 ;; Defined at:
  5346 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  txData          1    wreg     unsigned char 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  txData          1   19[COMRAM] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      void 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5363 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5364 ;;Total ram usage:        1 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    5
  5367 ;; This function calls:
  5368 ;;		_EUSART1_Write
  5369 ;; This function is called by:
  5370 ;;		_printf
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text19
  5375  004C7A                     __ptext19:
  5376                           	opt stack 0
  5377  004C7A                     _putch:
  5378                           	opt stack 24
  5379                           
  5380                           ;incstack = 0
  5381                           ;putch@txData stored from wreg
  5382  004C7A  6E14               	movwf	putch@txData,c
  5383                           
  5384                           ;eusart1.c: 112: EUSART1_Write(txData);
  5385  004C7C  5014               	movf	putch@txData,w,c
  5386  004C7E  EC19  F026         	call	_EUSART1_Write
  5387  004C82  0012               	return		;funcret
  5388  004C84                     __end_of_putch:
  5389                           	opt stack 0
  5390                           tblptru	equ	0xFF8
  5391                           tblptrh	equ	0xFF7
  5392                           tblptrl	equ	0xFF6
  5393                           tablat	equ	0xFF5
  5394                           prodh	equ	0xFF4
  5395                           prodl	equ	0xFF3
  5396                           postinc0	equ	0xFEE
  5397                           wreg	equ	0xFE8
  5398                           postdec1	equ	0xFE5
  5399                           fsr1l	equ	0xFE1
  5400                           indf2	equ	0xFDF
  5401                           postinc2	equ	0xFDE
  5402                           postdec2	equ	0xFDD
  5403                           fsr2h	equ	0xFDA
  5404                           fsr2l	equ	0xFD9
  5405                           status	equ	0xFD8
  5406                           
  5407 ;; *************** function _EUSART1_Write *****************
  5408 ;; Defined at:
  5409 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;  txData          1    wreg     unsigned char 
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;  txData          1   18[COMRAM] unsigned char 
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      void 
  5416 ;; Registers used:
  5417 ;;		wreg
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5427 ;;Total ram usage:        1 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    4
  5430 ;; This function calls:
  5431 ;;		Nothing
  5432 ;; This function is called by:
  5433 ;;		_putch
  5434 ;;		_main
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           	psect	text20
  5439  004C32                     __ptext20:
  5440                           	opt stack 0
  5441  004C32                     _EUSART1_Write:
  5442                           	opt stack 24
  5443                           
  5444                           ;incstack = 0
  5445                           ;EUSART1_Write@txData stored from wreg
  5446  004C32  6E13               	movwf	EUSART1_Write@txData,c
  5447  004C34                     l401:
  5448  004C34  010E               	movlb	14	; () banked
  5449  004C36  A9CD               	btfss	205,4,b	;volatile
  5450  004C38  D7FD               	goto	l401
  5451                           
  5452                           ; BSR set to: 14
  5453                           ;eusart1.c: 100: }
  5454                           ;eusart1.c: 102: TX1REG = txData;
  5455                           
  5456                           ; BSR set to: 14
  5457  004C3A  C013  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
  5458                           
  5459                           ; BSR set to: 14
  5460  004C3E  0012               	return		;funcret
  5461  004C40                     __end_of_EUSART1_Write:
  5462                           	opt stack 0
  5463                           tblptru	equ	0xFF8
  5464                           tblptrh	equ	0xFF7
  5465                           tblptrl	equ	0xFF6
  5466                           tablat	equ	0xFF5
  5467                           prodh	equ	0xFF4
  5468                           prodl	equ	0xFF3
  5469                           postinc0	equ	0xFEE
  5470                           wreg	equ	0xFE8
  5471                           postdec1	equ	0xFE5
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _isdigit *****************
  5481 ;; Defined at:
  5482 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  c               1    wreg     unsigned char 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  c               1   20[COMRAM] unsigned char 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;		None               void
  5489 ;; Registers used:
  5490 ;;		wreg, status,2, status,0
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5497 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5498 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5499 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5500 ;;Total ram usage:        3 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    4
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_printf
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           	psect	text21
  5511  004B40                     __ptext21:
  5512                           	opt stack 0
  5513  004B40                     _isdigit:
  5514                           	opt stack 25
  5515                           
  5516                           ; BSR set to: 14
  5517                           ;incstack = 0
  5518                           ;isdigit@c stored from wreg
  5519  004B40  6E15               	movwf	isdigit@c,c
  5520  004B42  0E00               	movlw	0
  5521  004B44  6E14               	movwf	_isdigit$2464,c
  5522  004B46  0E3A               	movlw	58
  5523  004B48  6015               	cpfslt	isdigit@c,c
  5524  004B4A  D005               	goto	l5931
  5525  004B4C  0E2F               	movlw	47
  5526  004B4E  6415               	cpfsgt	isdigit@c,c
  5527  004B50  D002               	goto	l5931
  5528  004B52  0E01               	movlw	1
  5529  004B54  6E14               	movwf	_isdigit$2464,c
  5530  004B56                     l5931:
  5531  004B56  C014  F013         	movff	_isdigit$2464,??_isdigit
  5532  004B5A  3013               	rrcf	??_isdigit,w,c
  5533  004B5C  0012               	return	
  5534  004B5E                     __end_of_isdigit:
  5535                           	opt stack 0
  5536                           tblptru	equ	0xFF8
  5537                           tblptrh	equ	0xFF7
  5538                           tblptrl	equ	0xFF6
  5539                           tablat	equ	0xFF5
  5540                           prodh	equ	0xFF4
  5541                           prodl	equ	0xFF3
  5542                           postinc0	equ	0xFEE
  5543                           wreg	equ	0xFE8
  5544                           postdec1	equ	0xFE5
  5545                           fsr1l	equ	0xFE1
  5546                           indf2	equ	0xFDF
  5547                           postinc2	equ	0xFDE
  5548                           postdec2	equ	0xFDD
  5549                           fsr2h	equ	0xFDA
  5550                           fsr2l	equ	0xFD9
  5551                           status	equ	0xFD8
  5552                           
  5553 ;; *************** function _fround *****************
  5554 ;; Defined at:
  5555 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;  prec            1    wreg     unsigned char 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  prec            1    6[BANK0 ] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  3   53[COMRAM] unsigned char 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5569 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5570 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5572 ;;      Totals:         3       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5573 ;;Total ram usage:       10 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    6
  5576 ;; This function calls:
  5577 ;;		___awdiv
  5578 ;;		___awmod
  5579 ;;		___ftmul
  5580 ;;		___wmul
  5581 ;; This function is called by:
  5582 ;;		_printf
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           	psect	text22
  5587  002994                     __ptext22:
  5588                           	opt stack 0
  5589  002994                     _fround:
  5590                           	opt stack 23
  5591                           
  5592                           ;incstack = 0
  5593                           ;fround@prec stored from wreg
  5594  002994  0100               	movlb	0	; () banked
  5595  002996  6F66               	movwf	fround@prec& (0+255),b
  5596                           
  5597                           ;doprnt.c: 413: if(prec>=110)
  5598  002998  0E6D               	movlw	109
  5599  00299A  0100               	movlb	0	; () banked
  5600  00299C  6566               	cpfsgt	fround@prec& (0+255),b
  5601  00299E  D0A8               	goto	l5873
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5605  0029A0  0E00               	movlw	0
  5606  0029A2  6E24               	movwf	___wmul@multiplicand+1,c
  5607  0029A4  0E03               	movlw	3
  5608  0029A6  6E23               	movwf	___wmul@multiplicand,c
  5609  0029A8  0E00               	movlw	0
  5610  0029AA  6E1C               	movwf	___awdiv@divisor+1,c
  5611  0029AC  0E0A               	movlw	10
  5612  0029AE  6E1B               	movwf	___awdiv@divisor,c
  5613  0029B0  0E00               	movlw	0
  5614  0029B2  6E16               	movwf	___awmod@divisor+1,c
  5615  0029B4  0E64               	movlw	100
  5616  0029B6  6E15               	movwf	___awmod@divisor,c
  5617  0029B8  C066  F013         	movff	fround@prec,___awmod@dividend
  5618  0029BC  6A14               	clrf	___awmod@dividend+1,c
  5619  0029BE  ECD7  F022         	call	___awmod	;wreg free
  5620  0029C2  C013  F019         	movff	?___awmod,___awdiv@dividend
  5621  0029C6  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  5622  0029CA  EC54  F022         	call	___awdiv	;wreg free
  5623  0029CE  0E09               	movlw	9
  5624  0029D0  2419               	addwf	?___awdiv,w,c
  5625  0029D2  6E21               	movwf	___wmul@multiplier,c
  5626  0029D4  0E00               	movlw	0
  5627  0029D6  201A               	addwfc	?___awdiv+1,w,c
  5628  0029D8  6E22               	movwf	___wmul@multiplier+1,c
  5629  0029DA  EC28  F025         	call	___wmul	;wreg free
  5630  0029DE  0E50               	movlw	low __npowers_
  5631  0029E0  2421               	addwf	?___wmul,w,c
  5632  0029E2  6EF6               	movwf	tblptrl,c
  5633  0029E4  0E0F               	movlw	high __npowers_
  5634  0029E6  2022               	addwfc	?___wmul+1,w,c
  5635  0029E8  6EF7               	movwf	tblptrh,c
  5636  0029EA                     	if	1	;There are 3 active tblptr bytes
  5637  0029EA  6AF8               	clrf	tblptru,c
  5638  0029EC  0E00               	movlw	low (__mediumconst shr (0+16))
  5639  0029EE  22F8               	addwfc	tblptru,f,c
  5640  0029F0                     	endif
  5641  0029F0  0009               	tblrd		*+
  5642  0029F2  CFF5 F02A          	movff	tablat,___ftmul@f2
  5643  0029F6  0009               	tblrd		*+
  5644  0029F8  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5645  0029FC  000A               	tblrd		*-
  5646  0029FE  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5647  002A02  0E00               	movlw	0
  5648  002A04  6E1C               	movwf	___awdiv@divisor+1,c
  5649  002A06  0E64               	movlw	100
  5650  002A08  6E1B               	movwf	___awdiv@divisor,c
  5651  002A0A  C066  F019         	movff	fround@prec,___awdiv@dividend
  5652  002A0E  6A1A               	clrf	___awdiv@dividend+1,c
  5653  002A10  EC54  F022         	call	___awdiv	;wreg free
  5654  002A14  0E12               	movlw	18
  5655  002A16  2419               	addwf	?___awdiv,w,c
  5656  002A18  6E21               	movwf	___wmul@multiplier,c
  5657  002A1A  0E00               	movlw	0
  5658  002A1C  201A               	addwfc	?___awdiv+1,w,c
  5659  002A1E  6E22               	movwf	___wmul@multiplier+1,c
  5660  002A20  0E00               	movlw	0
  5661  002A22  6E24               	movwf	___wmul@multiplicand+1,c
  5662  002A24  0E03               	movlw	3
  5663  002A26  6E23               	movwf	___wmul@multiplicand,c
  5664  002A28  EC28  F025         	call	___wmul	;wreg free
  5665  002A2C  0E50               	movlw	low __npowers_
  5666  002A2E  2421               	addwf	?___wmul,w,c
  5667  002A30  6EF6               	movwf	tblptrl,c
  5668  002A32  0E0F               	movlw	high __npowers_
  5669  002A34  2022               	addwfc	?___wmul+1,w,c
  5670  002A36  6EF7               	movwf	tblptrh,c
  5671  002A38                     	if	1	;There are 3 active tblptr bytes
  5672  002A38  6AF8               	clrf	tblptru,c
  5673  002A3A  0E00               	movlw	low (__mediumconst shr (0+16))
  5674  002A3C  22F8               	addwfc	tblptru,f,c
  5675  002A3E                     	endif
  5676  002A3E  0009               	tblrd		*+
  5677  002A40  CFF5 F027          	movff	tablat,___ftmul@f1
  5678  002A44  0009               	tblrd		*+
  5679  002A46  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5680  002A4A  000A               	tblrd		*-
  5681  002A4C  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5682  002A50  EC49  F01F         	call	___ftmul	;wreg free
  5683  002A54  C027  F063         	movff	?___ftmul,_fround$2939
  5684  002A58  C028  F064         	movff	?___ftmul+1,_fround$2939+1
  5685  002A5C  C029  F065         	movff	?___ftmul+2,_fround$2939+2
  5686                           
  5687                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5688  002A60  0E00               	movlw	0
  5689  002A62  6E24               	movwf	___wmul@multiplicand+1,c
  5690  002A64  0E03               	movlw	3
  5691  002A66  6E23               	movwf	___wmul@multiplicand,c
  5692  002A68  0E00               	movlw	0
  5693  002A6A  6E16               	movwf	___awmod@divisor+1,c
  5694  002A6C  0E0A               	movlw	10
  5695  002A6E  6E15               	movwf	___awmod@divisor,c
  5696  002A70  C066  F013         	movff	fround@prec,___awmod@dividend
  5697  002A74  6A14               	clrf	___awmod@dividend+1,c
  5698  002A76  ECD7  F022         	call	___awmod	;wreg free
  5699  002A7A  C013  F021         	movff	?___awmod,___wmul@multiplier
  5700  002A7E  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5701  002A82  EC28  F025         	call	___wmul	;wreg free
  5702  002A86  0E50               	movlw	low __npowers_
  5703  002A88  2421               	addwf	?___wmul,w,c
  5704  002A8A  6EF6               	movwf	tblptrl,c
  5705  002A8C  0E0F               	movlw	high __npowers_
  5706  002A8E  2022               	addwfc	?___wmul+1,w,c
  5707  002A90  6EF7               	movwf	tblptrh,c
  5708  002A92                     	if	1	;There are 3 active tblptr bytes
  5709  002A92  6AF8               	clrf	tblptru,c
  5710  002A94  0E00               	movlw	low (__mediumconst shr (0+16))
  5711  002A96  22F8               	addwfc	tblptru,f,c
  5712  002A98                     	endif
  5713  002A98  0009               	tblrd		*+
  5714  002A9A  CFF5 F02A          	movff	tablat,___ftmul@f2
  5715  002A9E  0009               	tblrd		*+
  5716  002AA0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5717  002AA4  000A               	tblrd		*-
  5718  002AA6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5719  002AAA  C063  F027         	movff	_fround$2939,___ftmul@f1
  5720  002AAE  C064  F028         	movff	_fround$2939+1,___ftmul@f1+1
  5721  002AB2  C065  F029         	movff	_fround$2939+2,___ftmul@f1+2
  5722  002AB6  EC49  F01F         	call	___ftmul	;wreg free
  5723  002ABA  C027  F060         	movff	?___ftmul,_fround$2940
  5724  002ABE  C028  F061         	movff	?___ftmul+1,_fround$2940+1
  5725  002AC2  C029  F062         	movff	?___ftmul+2,_fround$2940+2
  5726                           
  5727                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5728  002AC6  C060  F027         	movff	_fround$2940,___ftmul@f1
  5729  002ACA  C061  F028         	movff	_fround$2940+1,___ftmul@f1+1
  5730  002ACE  C062  F029         	movff	_fround$2940+2,___ftmul@f1+2
  5731  002AD2  0E00               	movlw	0
  5732  002AD4  6E2A               	movwf	___ftmul@f2,c
  5733  002AD6  0E00               	movlw	0
  5734  002AD8  6E2B               	movwf	___ftmul@f2+1,c
  5735  002ADA  0E3F               	movlw	63
  5736  002ADC  6E2C               	movwf	___ftmul@f2+2,c
  5737  002ADE  EC49  F01F         	call	___ftmul	;wreg free
  5738  002AE2  C027  F036         	movff	?___ftmul,?_fround
  5739  002AE6  C028  F037         	movff	?___ftmul+1,?_fround+1
  5740  002AEA  C029  F038         	movff	?___ftmul+2,?_fround+2
  5741  002AEE  0012               	return	
  5742  002AF0                     l5873:
  5743                           
  5744                           ;doprnt.c: 415: else if(prec > 10)
  5745  002AF0  0E0A               	movlw	10
  5746  002AF2  0100               	movlb	0	; () banked
  5747  002AF4  6566               	cpfsgt	fround@prec& (0+255),b
  5748  002AF6  D063               	goto	l5881
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5752  002AF8  0E00               	movlw	0
  5753  002AFA  6E24               	movwf	___wmul@multiplicand+1,c
  5754  002AFC  0E03               	movlw	3
  5755  002AFE  6E23               	movwf	___wmul@multiplicand,c
  5756  002B00  0E00               	movlw	0
  5757  002B02  6E16               	movwf	___awmod@divisor+1,c
  5758  002B04  0E0A               	movlw	10
  5759  002B06  6E15               	movwf	___awmod@divisor,c
  5760  002B08  C066  F013         	movff	fround@prec,___awmod@dividend
  5761  002B0C  6A14               	clrf	___awmod@dividend+1,c
  5762  002B0E  ECD7  F022         	call	___awmod	;wreg free
  5763  002B12  C013  F021         	movff	?___awmod,___wmul@multiplier
  5764  002B16  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5765  002B1A  EC28  F025         	call	___wmul	;wreg free
  5766  002B1E  0E50               	movlw	low __npowers_
  5767  002B20  2421               	addwf	?___wmul,w,c
  5768  002B22  6EF6               	movwf	tblptrl,c
  5769  002B24  0E0F               	movlw	high __npowers_
  5770  002B26  2022               	addwfc	?___wmul+1,w,c
  5771  002B28  6EF7               	movwf	tblptrh,c
  5772  002B2A                     	if	1	;There are 3 active tblptr bytes
  5773  002B2A  6AF8               	clrf	tblptru,c
  5774  002B2C  0E00               	movlw	low (__mediumconst shr (0+16))
  5775  002B2E  22F8               	addwfc	tblptru,f,c
  5776  002B30                     	endif
  5777  002B30  0009               	tblrd		*+
  5778  002B32  CFF5 F02A          	movff	tablat,___ftmul@f2
  5779  002B36  0009               	tblrd		*+
  5780  002B38  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5781  002B3C  000A               	tblrd		*-
  5782  002B3E  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5783  002B42  0E00               	movlw	0
  5784  002B44  6E1C               	movwf	___awdiv@divisor+1,c
  5785  002B46  0E0A               	movlw	10
  5786  002B48  6E1B               	movwf	___awdiv@divisor,c
  5787  002B4A  C066  F019         	movff	fround@prec,___awdiv@dividend
  5788  002B4E  6A1A               	clrf	___awdiv@dividend+1,c
  5789  002B50  EC54  F022         	call	___awdiv	;wreg free
  5790  002B54  0E09               	movlw	9
  5791  002B56  2419               	addwf	?___awdiv,w,c
  5792  002B58  6E21               	movwf	___wmul@multiplier,c
  5793  002B5A  0E00               	movlw	0
  5794  002B5C  201A               	addwfc	?___awdiv+1,w,c
  5795  002B5E  6E22               	movwf	___wmul@multiplier+1,c
  5796  002B60  0E00               	movlw	0
  5797  002B62  6E24               	movwf	___wmul@multiplicand+1,c
  5798  002B64  0E03               	movlw	3
  5799  002B66  6E23               	movwf	___wmul@multiplicand,c
  5800  002B68  EC28  F025         	call	___wmul	;wreg free
  5801  002B6C  0E50               	movlw	low __npowers_
  5802  002B6E  2421               	addwf	?___wmul,w,c
  5803  002B70  6EF6               	movwf	tblptrl,c
  5804  002B72  0E0F               	movlw	high __npowers_
  5805  002B74  2022               	addwfc	?___wmul+1,w,c
  5806  002B76  6EF7               	movwf	tblptrh,c
  5807  002B78                     	if	1	;There are 3 active tblptr bytes
  5808  002B78  6AF8               	clrf	tblptru,c
  5809  002B7A  0E00               	movlw	low (__mediumconst shr (0+16))
  5810  002B7C  22F8               	addwfc	tblptru,f,c
  5811  002B7E                     	endif
  5812  002B7E  0009               	tblrd		*+
  5813  002B80  CFF5 F027          	movff	tablat,___ftmul@f1
  5814  002B84  0009               	tblrd		*+
  5815  002B86  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5816  002B8A  000A               	tblrd		*-
  5817  002B8C  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5818  002B90  EC49  F01F         	call	___ftmul	;wreg free
  5819  002B94  C027  F063         	movff	?___ftmul,_fround$2939
  5820  002B98  C028  F064         	movff	?___ftmul+1,_fround$2939+1
  5821  002B9C  C029  F065         	movff	?___ftmul+2,_fround$2939+2
  5822                           
  5823                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5824  002BA0  C063  F027         	movff	_fround$2939,___ftmul@f1
  5825  002BA4  C064  F028         	movff	_fround$2939+1,___ftmul@f1+1
  5826  002BA8  C065  F029         	movff	_fround$2939+2,___ftmul@f1+2
  5827  002BAC  0E00               	movlw	0
  5828  002BAE  6E2A               	movwf	___ftmul@f2,c
  5829  002BB0  0E00               	movlw	0
  5830  002BB2  6E2B               	movwf	___ftmul@f2+1,c
  5831  002BB4  0E3F               	movlw	63
  5832  002BB6  6E2C               	movwf	___ftmul@f2+2,c
  5833  002BB8  EC49  F01F         	call	___ftmul	;wreg free
  5834  002BBC  D792               	goto	L5
  5835  002BBE                     l5881:
  5836                           
  5837                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5838  002BBE  0100               	movlb	0	; () banked
  5839  002BC0  5166               	movf	fround@prec& (0+255),w,b
  5840  002BC2  0D03               	mullw	3
  5841  002BC4  0E50               	movlw	low __npowers_
  5842  002BC6  24F3               	addwf	prodl,w,c
  5843  002BC8  6EF6               	movwf	tblptrl,c
  5844  002BCA  0E0F               	movlw	high __npowers_
  5845  002BCC  20F4               	addwfc	prodh,w,c
  5846  002BCE  6EF7               	movwf	tblptrh,c
  5847  002BD0                     	if	1	;There are 3 active tblptr bytes
  5848  002BD0  6AF8               	clrf	tblptru,c
  5849  002BD2  0E00               	movlw	low (__mediumconst shr (0+16))
  5850  002BD4  22F8               	addwfc	tblptru,f,c
  5851  002BD6                     	endif
  5852  002BD6  0009               	tblrd		*+
  5853  002BD8  CFF5 F027          	movff	tablat,___ftmul@f1
  5854  002BDC  0009               	tblrd		*+
  5855  002BDE  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5856  002BE2  000A               	tblrd		*-
  5857  002BE4  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5858  002BE8  0E00               	movlw	0
  5859  002BEA  6E2A               	movwf	___ftmul@f2,c
  5860  002BEC  0E00               	movlw	0
  5861  002BEE  6E2B               	movwf	___ftmul@f2+1,c
  5862  002BF0  0E3F               	movlw	63
  5863  002BF2  6E2C               	movwf	___ftmul@f2+2,c
  5864  002BF4  EC49  F01F         	call	___ftmul	;wreg free
  5865  002BF8  C027  F036         	movff	?___ftmul,?_fround
  5866  002BFC  C028  F037         	movff	?___ftmul+1,?_fround+1
  5867  002C00  C029  F038         	movff	?___ftmul+2,?_fround+2
  5868  002C04  0012               	return	
  5869  002C06                     __end_of_fround:
  5870                           	opt stack 0
  5871                           tblptru	equ	0xFF8
  5872                           tblptrh	equ	0xFF7
  5873                           tblptrl	equ	0xFF6
  5874                           tablat	equ	0xFF5
  5875                           prodh	equ	0xFF4
  5876                           prodl	equ	0xFF3
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           postdec1	equ	0xFE5
  5880                           fsr1l	equ	0xFE1
  5881                           indf2	equ	0xFDF
  5882                           postinc2	equ	0xFDE
  5883                           postdec2	equ	0xFDD
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function ___awmod *****************
  5889 ;; Defined at:
  5890 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  dividend        2   18[COMRAM] int 
  5893 ;;  divisor         2   20[COMRAM] int 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  sign            1   23[COMRAM] unsigned char 
  5896 ;;  counter         1   22[COMRAM] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  2   18[COMRAM] int 
  5899 ;; Registers used:
  5900 ;;		wreg, status,2, status,0
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5909 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5910 ;;Total ram usage:        6 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    4
  5913 ;; This function calls:
  5914 ;;		Nothing
  5915 ;; This function is called by:
  5916 ;;		_fround
  5917 ;;		_scale
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           	psect	text23
  5922  0045AE                     __ptext23:
  5923                           	opt stack 0
  5924  0045AE                     ___awmod:
  5925                           	opt stack 24
  5926                           
  5927                           ;incstack = 0
  5928  0045AE  0E00               	movlw	0
  5929  0045B0  6E18               	movwf	___awmod@sign,c
  5930  0045B2  AE14               	btfss	___awmod@dividend+1,7,c
  5931  0045B4  D006               	goto	l5579
  5932  0045B6  6C13               	negf	___awmod@dividend,c
  5933  0045B8  1E14               	comf	___awmod@dividend+1,f,c
  5934  0045BA  B0D8               	btfsc	status,0,c
  5935  0045BC  2A14               	incf	___awmod@dividend+1,f,c
  5936  0045BE  0E01               	movlw	1
  5937  0045C0  6E18               	movwf	___awmod@sign,c
  5938  0045C2                     l5579:
  5939  0045C2  AE16               	btfss	___awmod@divisor+1,7,c
  5940  0045C4  D004               	goto	l5583
  5941  0045C6  6C15               	negf	___awmod@divisor,c
  5942  0045C8  1E16               	comf	___awmod@divisor+1,f,c
  5943  0045CA  B0D8               	btfsc	status,0,c
  5944  0045CC  2A16               	incf	___awmod@divisor+1,f,c
  5945  0045CE                     l5583:
  5946  0045CE  5015               	movf	___awmod@divisor,w,c
  5947  0045D0  1016               	iorwf	___awmod@divisor+1,w,c
  5948  0045D2  B4D8               	btfsc	status,2,c
  5949  0045D4  D018               	goto	l5599
  5950  0045D6  0E01               	movlw	1
  5951  0045D8  6E17               	movwf	___awmod@counter,c
  5952  0045DA  D004               	goto	l5589
  5953  0045DC                     l5587:
  5954  0045DC  90D8               	bcf	status,0,c
  5955  0045DE  3615               	rlcf	___awmod@divisor,f,c
  5956  0045E0  3616               	rlcf	___awmod@divisor+1,f,c
  5957  0045E2  2A17               	incf	___awmod@counter,f,c
  5958  0045E4                     l5589:
  5959  0045E4  AE16               	btfss	___awmod@divisor+1,7,c
  5960  0045E6  D7FA               	goto	l5587
  5961  0045E8                     l5591:
  5962  0045E8  5015               	movf	___awmod@divisor,w,c
  5963  0045EA  5C13               	subwf	___awmod@dividend,w,c
  5964  0045EC  5016               	movf	___awmod@divisor+1,w,c
  5965  0045EE  5814               	subwfb	___awmod@dividend+1,w,c
  5966  0045F0  A0D8               	btfss	status,0,c
  5967  0045F2  D004               	goto	l5595
  5968  0045F4  5015               	movf	___awmod@divisor,w,c
  5969  0045F6  5E13               	subwf	___awmod@dividend,f,c
  5970  0045F8  5016               	movf	___awmod@divisor+1,w,c
  5971  0045FA  5A14               	subwfb	___awmod@dividend+1,f,c
  5972  0045FC                     l5595:
  5973  0045FC  90D8               	bcf	status,0,c
  5974  0045FE  3216               	rrcf	___awmod@divisor+1,f,c
  5975  004600  3215               	rrcf	___awmod@divisor,f,c
  5976  004602  2E17               	decfsz	___awmod@counter,f,c
  5977  004604  D7F1               	goto	l5591
  5978  004606                     l5599:
  5979  004606  5018               	movf	___awmod@sign,w,c
  5980  004608  B4D8               	btfsc	status,2,c
  5981  00460A  D004               	goto	l5603
  5982  00460C  6C13               	negf	___awmod@dividend,c
  5983  00460E  1E14               	comf	___awmod@dividend+1,f,c
  5984  004610  B0D8               	btfsc	status,0,c
  5985  004612  2A14               	incf	___awmod@dividend+1,f,c
  5986  004614                     l5603:
  5987  004614  C013  F013         	movff	___awmod@dividend,?___awmod
  5988  004618  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  5989  00461C  0012               	return	
  5990  00461E                     __end_of___awmod:
  5991                           	opt stack 0
  5992                           tblptru	equ	0xFF8
  5993                           tblptrh	equ	0xFF7
  5994                           tblptrl	equ	0xFF6
  5995                           tablat	equ	0xFF5
  5996                           prodh	equ	0xFF4
  5997                           prodl	equ	0xFF3
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           postdec1	equ	0xFE5
  6001                           fsr1l	equ	0xFE1
  6002                           indf2	equ	0xFDF
  6003                           postinc2	equ	0xFDE
  6004                           postdec2	equ	0xFDD
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function ___awdiv *****************
  6010 ;; Defined at:
  6011 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;  dividend        2   24[COMRAM] int 
  6014 ;;  divisor         2   26[COMRAM] int 
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;  quotient        2   30[COMRAM] int 
  6017 ;;  sign            1   29[COMRAM] unsigned char 
  6018 ;;  counter         1   28[COMRAM] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  2   24[COMRAM] int 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, status,0
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6029 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6031 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6032 ;;Total ram usage:        8 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    4
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_fround
  6039 ;;		_scale
  6040 ;;		_printf
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text24
  6045  0044A8                     __ptext24:
  6046                           	opt stack 0
  6047  0044A8                     ___awdiv:
  6048                           	opt stack 24
  6049                           
  6050                           ;incstack = 0
  6051  0044A8  0E00               	movlw	0
  6052  0044AA  6E1E               	movwf	___awdiv@sign,c
  6053  0044AC  AE1C               	btfss	___awdiv@divisor+1,7,c
  6054  0044AE  D006               	goto	l5535
  6055  0044B0  6C1B               	negf	___awdiv@divisor,c
  6056  0044B2  1E1C               	comf	___awdiv@divisor+1,f,c
  6057  0044B4  B0D8               	btfsc	status,0,c
  6058  0044B6  2A1C               	incf	___awdiv@divisor+1,f,c
  6059  0044B8  0E01               	movlw	1
  6060  0044BA  6E1E               	movwf	___awdiv@sign,c
  6061  0044BC                     l5535:
  6062  0044BC  AE1A               	btfss	___awdiv@dividend+1,7,c
  6063  0044BE  D006               	goto	l5541
  6064  0044C0  6C19               	negf	___awdiv@dividend,c
  6065  0044C2  1E1A               	comf	___awdiv@dividend+1,f,c
  6066  0044C4  B0D8               	btfsc	status,0,c
  6067  0044C6  2A1A               	incf	___awdiv@dividend+1,f,c
  6068  0044C8  0E01               	movlw	1
  6069  0044CA  1A1E               	xorwf	___awdiv@sign,f,c
  6070  0044CC                     l5541:
  6071  0044CC  0E00               	movlw	0
  6072  0044CE  6E20               	movwf	___awdiv@quotient+1,c
  6073  0044D0  0E00               	movlw	0
  6074  0044D2  6E1F               	movwf	___awdiv@quotient,c
  6075  0044D4  501B               	movf	___awdiv@divisor,w,c
  6076  0044D6  101C               	iorwf	___awdiv@divisor+1,w,c
  6077  0044D8  B4D8               	btfsc	status,2,c
  6078  0044DA  D01C               	goto	l5563
  6079  0044DC  0E01               	movlw	1
  6080  0044DE  6E1D               	movwf	___awdiv@counter,c
  6081  0044E0  D004               	goto	l5549
  6082  0044E2                     l5547:
  6083  0044E2  90D8               	bcf	status,0,c
  6084  0044E4  361B               	rlcf	___awdiv@divisor,f,c
  6085  0044E6  361C               	rlcf	___awdiv@divisor+1,f,c
  6086  0044E8  2A1D               	incf	___awdiv@counter,f,c
  6087  0044EA                     l5549:
  6088  0044EA  AE1C               	btfss	___awdiv@divisor+1,7,c
  6089  0044EC  D7FA               	goto	l5547
  6090  0044EE                     l5551:
  6091  0044EE  90D8               	bcf	status,0,c
  6092  0044F0  361F               	rlcf	___awdiv@quotient,f,c
  6093  0044F2  3620               	rlcf	___awdiv@quotient+1,f,c
  6094  0044F4  501B               	movf	___awdiv@divisor,w,c
  6095  0044F6  5C19               	subwf	___awdiv@dividend,w,c
  6096  0044F8  501C               	movf	___awdiv@divisor+1,w,c
  6097  0044FA  581A               	subwfb	___awdiv@dividend+1,w,c
  6098  0044FC  A0D8               	btfss	status,0,c
  6099  0044FE  D005               	goto	l5559
  6100  004500  501B               	movf	___awdiv@divisor,w,c
  6101  004502  5E19               	subwf	___awdiv@dividend,f,c
  6102  004504  501C               	movf	___awdiv@divisor+1,w,c
  6103  004506  5A1A               	subwfb	___awdiv@dividend+1,f,c
  6104  004508  801F               	bsf	___awdiv@quotient,0,c
  6105  00450A                     l5559:
  6106  00450A  90D8               	bcf	status,0,c
  6107  00450C  321C               	rrcf	___awdiv@divisor+1,f,c
  6108  00450E  321B               	rrcf	___awdiv@divisor,f,c
  6109  004510  2E1D               	decfsz	___awdiv@counter,f,c
  6110  004512  D7ED               	goto	l5551
  6111  004514                     l5563:
  6112  004514  501E               	movf	___awdiv@sign,w,c
  6113  004516  B4D8               	btfsc	status,2,c
  6114  004518  D004               	goto	l5567
  6115  00451A  6C1F               	negf	___awdiv@quotient,c
  6116  00451C  1E20               	comf	___awdiv@quotient+1,f,c
  6117  00451E  B0D8               	btfsc	status,0,c
  6118  004520  2A20               	incf	___awdiv@quotient+1,f,c
  6119  004522                     l5567:
  6120  004522  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  6121  004526  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  6122  00452A  0012               	return	
  6123  00452C                     __end_of___awdiv:
  6124                           	opt stack 0
  6125                           tblptru	equ	0xFF8
  6126                           tblptrh	equ	0xFF7
  6127                           tblptrl	equ	0xFF6
  6128                           tablat	equ	0xFF5
  6129                           prodh	equ	0xFF4
  6130                           prodl	equ	0xFF3
  6131                           postinc0	equ	0xFEE
  6132                           wreg	equ	0xFE8
  6133                           postdec1	equ	0xFE5
  6134                           fsr1l	equ	0xFE1
  6135                           indf2	equ	0xFDF
  6136                           postinc2	equ	0xFDE
  6137                           postdec2	equ	0xFDD
  6138                           fsr2h	equ	0xFDA
  6139                           fsr2l	equ	0xFD9
  6140                           status	equ	0xFD8
  6141                           
  6142 ;; *************** function __tdiv_to_l_ *****************
  6143 ;; Defined at:
  6144 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;  f1              3   18[COMRAM] float 
  6147 ;;  f2              3   21[COMRAM] float 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  quot            4   27[COMRAM] unsigned long 
  6150 ;;  exp1            1   32[COMRAM] unsigned char 
  6151 ;;  cntr            1   31[COMRAM] unsigned char 
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  4   18[COMRAM] unsigned long 
  6154 ;; Registers used:
  6155 ;;		wreg, status,2, status,0
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6161 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6162 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6163 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6164 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6165 ;;Total ram usage:       15 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; Hardware stack levels required when called:    4
  6168 ;; This function calls:
  6169 ;;		Nothing
  6170 ;; This function is called by:
  6171 ;;		_printf
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           	psect	text25
  6176  0037E6                     __ptext25:
  6177                           	opt stack 0
  6178  0037E6                     __tdiv_to_l_:
  6179                           	opt stack 25
  6180                           
  6181                           ;incstack = 0
  6182  0037E6  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6183  0037EA  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6184  0037EC  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6185  0037EE  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  6186  0037F0  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6187  0037F2  E301               	bnc	u5281
  6188  0037F4  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6189  0037F6                     u5281:
  6190  0037F6  5019               	movf	??__tdiv_to_l_,w,c
  6191  0037F8  6E21               	movwf	__tdiv_to_l_@exp1,c
  6192  0037FA  5021               	movf	__tdiv_to_l_@exp1,w,c
  6193  0037FC  A4D8               	btfss	status,2,c
  6194  0037FE  D009               	goto	l5941
  6195  003800  0E00               	movlw	0
  6196  003802  6E13               	movwf	?__tdiv_to_l_,c
  6197  003804  0E00               	movlw	0
  6198  003806  6E14               	movwf	?__tdiv_to_l_+1,c
  6199  003808  0E00               	movlw	0
  6200  00380A  6E15               	movwf	?__tdiv_to_l_+2,c
  6201  00380C  0E00               	movlw	0
  6202  00380E  6E16               	movwf	?__tdiv_to_l_+3,c
  6203  003810  0012               	return	
  6204  003812                     l5941:
  6205  003812  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6206  003816  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6207  003818  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6208  00381A  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  6209  00381C  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6210  00381E  E301               	bnc	u5301
  6211  003820  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6212  003822                     u5301:
  6213  003822  5019               	movf	??__tdiv_to_l_,w,c
  6214  003824  6E20               	movwf	__tdiv_to_l_@cntr,c
  6215  003826  5020               	movf	__tdiv_to_l_@cntr,w,c
  6216  003828  A4D8               	btfss	status,2,c
  6217  00382A  D009               	goto	l5947
  6218  00382C  0E00               	movlw	0
  6219  00382E  6E13               	movwf	?__tdiv_to_l_,c
  6220  003830  0E00               	movlw	0
  6221  003832  6E14               	movwf	?__tdiv_to_l_+1,c
  6222  003834  0E00               	movlw	0
  6223  003836  6E15               	movwf	?__tdiv_to_l_+2,c
  6224  003838  0E00               	movlw	0
  6225  00383A  6E16               	movwf	?__tdiv_to_l_+3,c
  6226  00383C  0012               	return	
  6227  00383E                     l5947:
  6228  00383E  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  6229  003840  0EFF               	movlw	255
  6230  003842  1613               	andwf	__tdiv_to_l_@f1,f,c
  6231  003844  0EFF               	movlw	255
  6232  003846  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  6233  003848  0E00               	movlw	0
  6234  00384A  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  6235  00384C  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  6236  00384E  0EFF               	movlw	255
  6237  003850  1616               	andwf	__tdiv_to_l_@f2,f,c
  6238  003852  0EFF               	movlw	255
  6239  003854  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  6240  003856  0E00               	movlw	0
  6241  003858  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  6242  00385A  0E00               	movlw	0
  6243  00385C  6E1C               	movwf	__tdiv_to_l_@quot,c
  6244  00385E  0E00               	movlw	0
  6245  003860  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  6246  003862  0E00               	movlw	0
  6247  003864  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  6248  003866  0E00               	movlw	0
  6249  003868  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  6250  00386A  0E7F               	movlw	127
  6251  00386C  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  6252  00386E  5020               	movf	__tdiv_to_l_@cntr,w,c
  6253  003870  0F98               	addlw	152
  6254  003872  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  6255  003874  0E18               	movlw	24
  6256  003876  6E20               	movwf	__tdiv_to_l_@cntr,c
  6257  003878                     l1457:
  6258  003878  90D8               	bcf	status,0,c
  6259  00387A  361C               	rlcf	__tdiv_to_l_@quot,f,c
  6260  00387C  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  6261  00387E  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  6262  003880  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  6263  003882  5016               	movf	__tdiv_to_l_@f2,w,c
  6264  003884  5C13               	subwf	__tdiv_to_l_@f1,w,c
  6265  003886  5017               	movf	__tdiv_to_l_@f2+1,w,c
  6266  003888  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  6267  00388A  5018               	movf	__tdiv_to_l_@f2+2,w,c
  6268  00388C  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  6269  00388E  A0D8               	btfss	status,0,c
  6270  003890  D007               	goto	l1458
  6271  003892  5016               	movf	__tdiv_to_l_@f2,w,c
  6272  003894  5E13               	subwf	__tdiv_to_l_@f1,f,c
  6273  003896  5017               	movf	__tdiv_to_l_@f2+1,w,c
  6274  003898  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  6275  00389A  5018               	movf	__tdiv_to_l_@f2+2,w,c
  6276  00389C  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  6277  00389E  801C               	bsf	__tdiv_to_l_@quot,0,c
  6278  0038A0                     l1458:
  6279  0038A0  90D8               	bcf	status,0,c
  6280  0038A2  3613               	rlcf	__tdiv_to_l_@f1,f,c
  6281  0038A4  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  6282  0038A6  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  6283  0038A8  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  6284  0038AA  D7E6               	goto	l1457
  6285  0038AC  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  6286  0038AE  D016               	goto	l5981
  6287  0038B0  5021               	movf	__tdiv_to_l_@exp1,w,c
  6288  0038B2  0A80               	xorlw	128
  6289  0038B4  0F97               	addlw	151
  6290  0038B6  B0D8               	btfsc	status,0,c
  6291  0038B8  D009               	goto	l5977
  6292  0038BA  0E00               	movlw	0
  6293  0038BC  6E13               	movwf	?__tdiv_to_l_,c
  6294  0038BE  0E00               	movlw	0
  6295  0038C0  6E14               	movwf	?__tdiv_to_l_+1,c
  6296  0038C2  0E00               	movlw	0
  6297  0038C4  6E15               	movwf	?__tdiv_to_l_+2,c
  6298  0038C6  0E00               	movlw	0
  6299  0038C8  6E16               	movwf	?__tdiv_to_l_+3,c
  6300  0038CA  0012               	return	
  6301  0038CC                     l5977:
  6302  0038CC  90D8               	bcf	status,0,c
  6303  0038CE  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  6304  0038D0  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  6305  0038D2  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  6306  0038D4  321C               	rrcf	__tdiv_to_l_@quot,f,c
  6307  0038D6  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  6308  0038D8  D7F9               	goto	l5977
  6309  0038DA  D015               	goto	l1464
  6310  0038DC                     l5981:
  6311  0038DC  0E17               	movlw	23
  6312  0038DE  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  6313  0038E0  D00F               	goto	l5989
  6314  0038E2  0E00               	movlw	0
  6315  0038E4  6E13               	movwf	?__tdiv_to_l_,c
  6316  0038E6  0E00               	movlw	0
  6317  0038E8  6E14               	movwf	?__tdiv_to_l_+1,c
  6318  0038EA  0E00               	movlw	0
  6319  0038EC  6E15               	movwf	?__tdiv_to_l_+2,c
  6320  0038EE  0E00               	movlw	0
  6321  0038F0  6E16               	movwf	?__tdiv_to_l_+3,c
  6322  0038F2  0012               	return	
  6323  0038F4                     l5987:
  6324  0038F4  90D8               	bcf	status,0,c
  6325  0038F6  361C               	rlcf	__tdiv_to_l_@quot,f,c
  6326  0038F8  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  6327  0038FA  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  6328  0038FC  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  6329  0038FE  0621               	decf	__tdiv_to_l_@exp1,f,c
  6330  003900                     l5989:
  6331  003900  5021               	movf	__tdiv_to_l_@exp1,w,c
  6332  003902  A4D8               	btfss	status,2,c
  6333  003904  D7F7               	goto	l5987
  6334  003906                     l1464:
  6335  003906  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6336  00390A  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6337  00390E  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6338  003912  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6339  003916  0012               	return		;funcret
  6340  003918                     __end_of__tdiv_to_l_:
  6341                           	opt stack 0
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           prodh	equ	0xFF4
  6347                           prodl	equ	0xFF3
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           postdec1	equ	0xFE5
  6351                           fsr1l	equ	0xFE1
  6352                           indf2	equ	0xFDF
  6353                           postinc2	equ	0xFDE
  6354                           postdec2	equ	0xFDD
  6355                           fsr2h	equ	0xFDA
  6356                           fsr2l	equ	0xFD9
  6357                           status	equ	0xFD8
  6358                           
  6359 ;; *************** function __div_to_l_ *****************
  6360 ;; Defined at:
  6361 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  f1              3   18[COMRAM] unsigned long 
  6364 ;;  f2              3   21[COMRAM] unsigned long 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  quot            4   24[COMRAM] unsigned long 
  6367 ;;  exp1            1   29[COMRAM] unsigned char 
  6368 ;;  cntr            1   28[COMRAM] unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  4   18[COMRAM] unsigned long 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6378 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6379 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6381 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6382 ;;Total ram usage:       12 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    4
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_printf
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text26
  6393  003918                     __ptext26:
  6394                           	opt stack 0
  6395  003918                     __div_to_l_:
  6396                           	opt stack 25
  6397                           
  6398                           ;incstack = 0
  6399  003918  3415               	rlcf	__div_to_l_@f1+2,w,c
  6400  00391A  3416               	rlcf	__div_to_l_@f1+3,w,c
  6401  00391C  6E1E               	movwf	__div_to_l_@exp1,c
  6402  00391E  501E               	movf	__div_to_l_@exp1,w,c
  6403  003920  A4D8               	btfss	status,2,c
  6404  003922  D009               	goto	l5997
  6405  003924  0E00               	movlw	0
  6406  003926  6E13               	movwf	?__div_to_l_,c
  6407  003928  0E00               	movlw	0
  6408  00392A  6E14               	movwf	?__div_to_l_+1,c
  6409  00392C  0E00               	movlw	0
  6410  00392E  6E15               	movwf	?__div_to_l_+2,c
  6411  003930  0E00               	movlw	0
  6412  003932  6E16               	movwf	?__div_to_l_+3,c
  6413  003934  0012               	return	
  6414  003936                     l5997:
  6415  003936  3418               	rlcf	__div_to_l_@f2+2,w,c
  6416  003938  3419               	rlcf	__div_to_l_@f2+3,w,c
  6417  00393A  6E1D               	movwf	__div_to_l_@cntr,c
  6418  00393C  501D               	movf	__div_to_l_@cntr,w,c
  6419  00393E  A4D8               	btfss	status,2,c
  6420  003940  D009               	goto	l6003
  6421  003942  0E00               	movlw	0
  6422  003944  6E13               	movwf	?__div_to_l_,c
  6423  003946  0E00               	movlw	0
  6424  003948  6E14               	movwf	?__div_to_l_+1,c
  6425  00394A  0E00               	movlw	0
  6426  00394C  6E15               	movwf	?__div_to_l_+2,c
  6427  00394E  0E00               	movlw	0
  6428  003950  6E16               	movwf	?__div_to_l_+3,c
  6429  003952  0012               	return	
  6430  003954                     l6003:
  6431  003954  8E15               	bsf	__div_to_l_@f1+2,7,c
  6432  003956  0EFF               	movlw	255
  6433  003958  1613               	andwf	__div_to_l_@f1,f,c
  6434  00395A  0EFF               	movlw	255
  6435  00395C  1614               	andwf	__div_to_l_@f1+1,f,c
  6436  00395E  0EFF               	movlw	255
  6437  003960  1615               	andwf	__div_to_l_@f1+2,f,c
  6438  003962  0E00               	movlw	0
  6439  003964  1616               	andwf	__div_to_l_@f1+3,f,c
  6440  003966  8E18               	bsf	__div_to_l_@f2+2,7,c
  6441  003968  0EFF               	movlw	255
  6442  00396A  1616               	andwf	__div_to_l_@f2,f,c
  6443  00396C  0EFF               	movlw	255
  6444  00396E  1617               	andwf	__div_to_l_@f2+1,f,c
  6445  003970  0EFF               	movlw	255
  6446  003972  1618               	andwf	__div_to_l_@f2+2,f,c
  6447  003974  0E00               	movlw	0
  6448  003976  1619               	andwf	__div_to_l_@f2+3,f,c
  6449  003978  0E00               	movlw	0
  6450  00397A  6E19               	movwf	__div_to_l_@quot,c
  6451  00397C  0E00               	movlw	0
  6452  00397E  6E1A               	movwf	__div_to_l_@quot+1,c
  6453  003980  0E00               	movlw	0
  6454  003982  6E1B               	movwf	__div_to_l_@quot+2,c
  6455  003984  0E00               	movlw	0
  6456  003986  6E1C               	movwf	__div_to_l_@quot+3,c
  6457  003988  0E7F               	movlw	127
  6458  00398A  5E1E               	subwf	__div_to_l_@exp1,f,c
  6459  00398C  501D               	movf	__div_to_l_@cntr,w,c
  6460  00398E  0FA0               	addlw	160
  6461  003990  5E1E               	subwf	__div_to_l_@exp1,f,c
  6462  003992  0E20               	movlw	32
  6463  003994  6E1D               	movwf	__div_to_l_@cntr,c
  6464  003996                     l6017:
  6465  003996  90D8               	bcf	status,0,c
  6466  003998  3619               	rlcf	__div_to_l_@quot,f,c
  6467  00399A  361A               	rlcf	__div_to_l_@quot+1,f,c
  6468  00399C  361B               	rlcf	__div_to_l_@quot+2,f,c
  6469  00399E  361C               	rlcf	__div_to_l_@quot+3,f,c
  6470  0039A0  5016               	movf	__div_to_l_@f2,w,c
  6471  0039A2  5C13               	subwf	__div_to_l_@f1,w,c
  6472  0039A4  5017               	movf	__div_to_l_@f2+1,w,c
  6473  0039A6  5814               	subwfb	__div_to_l_@f1+1,w,c
  6474  0039A8  5018               	movf	__div_to_l_@f2+2,w,c
  6475  0039AA  5815               	subwfb	__div_to_l_@f1+2,w,c
  6476  0039AC  5019               	movf	__div_to_l_@f2+3,w,c
  6477  0039AE  5816               	subwfb	__div_to_l_@f1+3,w,c
  6478  0039B0  A0D8               	btfss	status,0,c
  6479  0039B2  D009               	goto	l6025
  6480  0039B4  5016               	movf	__div_to_l_@f2,w,c
  6481  0039B6  5E13               	subwf	__div_to_l_@f1,f,c
  6482  0039B8  5017               	movf	__div_to_l_@f2+1,w,c
  6483  0039BA  5A14               	subwfb	__div_to_l_@f1+1,f,c
  6484  0039BC  5018               	movf	__div_to_l_@f2+2,w,c
  6485  0039BE  5A15               	subwfb	__div_to_l_@f1+2,f,c
  6486  0039C0  5019               	movf	__div_to_l_@f2+3,w,c
  6487  0039C2  5A16               	subwfb	__div_to_l_@f1+3,f,c
  6488  0039C4  8019               	bsf	__div_to_l_@quot,0,c
  6489  0039C6                     l6025:
  6490  0039C6  90D8               	bcf	status,0,c
  6491  0039C8  3613               	rlcf	__div_to_l_@f1,f,c
  6492  0039CA  3614               	rlcf	__div_to_l_@f1+1,f,c
  6493  0039CC  3615               	rlcf	__div_to_l_@f1+2,f,c
  6494  0039CE  3616               	rlcf	__div_to_l_@f1+3,f,c
  6495  0039D0  2E1D               	decfsz	__div_to_l_@cntr,f,c
  6496  0039D2  D7E1               	goto	l6017
  6497  0039D4  AE1E               	btfss	__div_to_l_@exp1,7,c
  6498  0039D6  D016               	goto	l6041
  6499  0039D8  501E               	movf	__div_to_l_@exp1,w,c
  6500  0039DA  0A80               	xorlw	128
  6501  0039DC  0F9F               	addlw	159
  6502  0039DE  B0D8               	btfsc	status,0,c
  6503  0039E0  D009               	goto	l6037
  6504  0039E2  0E00               	movlw	0
  6505  0039E4  6E13               	movwf	?__div_to_l_,c
  6506  0039E6  0E00               	movlw	0
  6507  0039E8  6E14               	movwf	?__div_to_l_+1,c
  6508  0039EA  0E00               	movlw	0
  6509  0039EC  6E15               	movwf	?__div_to_l_+2,c
  6510  0039EE  0E00               	movlw	0
  6511  0039F0  6E16               	movwf	?__div_to_l_+3,c
  6512  0039F2  0012               	return	
  6513  0039F4                     l6037:
  6514  0039F4  90D8               	bcf	status,0,c
  6515  0039F6  321C               	rrcf	__div_to_l_@quot+3,f,c
  6516  0039F8  321B               	rrcf	__div_to_l_@quot+2,f,c
  6517  0039FA  321A               	rrcf	__div_to_l_@quot+1,f,c
  6518  0039FC  3219               	rrcf	__div_to_l_@quot,f,c
  6519  0039FE  3E1E               	incfsz	__div_to_l_@exp1,f,c
  6520  003A00  D7F9               	goto	l6037
  6521  003A02  D015               	goto	l1360
  6522  003A04                     l6041:
  6523  003A04  0E1F               	movlw	31
  6524  003A06  641E               	cpfsgt	__div_to_l_@exp1,c
  6525  003A08  D00F               	goto	l6049
  6526  003A0A  0E00               	movlw	0
  6527  003A0C  6E13               	movwf	?__div_to_l_,c
  6528  003A0E  0E00               	movlw	0
  6529  003A10  6E14               	movwf	?__div_to_l_+1,c
  6530  003A12  0E00               	movlw	0
  6531  003A14  6E15               	movwf	?__div_to_l_+2,c
  6532  003A16  0E00               	movlw	0
  6533  003A18  6E16               	movwf	?__div_to_l_+3,c
  6534  003A1A  0012               	return	
  6535  003A1C                     l6047:
  6536  003A1C  90D8               	bcf	status,0,c
  6537  003A1E  3619               	rlcf	__div_to_l_@quot,f,c
  6538  003A20  361A               	rlcf	__div_to_l_@quot+1,f,c
  6539  003A22  361B               	rlcf	__div_to_l_@quot+2,f,c
  6540  003A24  361C               	rlcf	__div_to_l_@quot+3,f,c
  6541  003A26  061E               	decf	__div_to_l_@exp1,f,c
  6542  003A28                     l6049:
  6543  003A28  501E               	movf	__div_to_l_@exp1,w,c
  6544  003A2A  A4D8               	btfss	status,2,c
  6545  003A2C  D7F7               	goto	l6047
  6546  003A2E                     l1360:
  6547  003A2E  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  6548  003A32  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6549  003A36  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6550  003A3A  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6551  003A3E  0012               	return		;funcret
  6552  003A40                     __end_of__div_to_l_:
  6553                           	opt stack 0
  6554                           tblptru	equ	0xFF8
  6555                           tblptrh	equ	0xFF7
  6556                           tblptrl	equ	0xFF6
  6557                           tablat	equ	0xFF5
  6558                           prodh	equ	0xFF4
  6559                           prodl	equ	0xFF3
  6560                           postinc0	equ	0xFEE
  6561                           wreg	equ	0xFE8
  6562                           postdec1	equ	0xFE5
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           fsr2h	equ	0xFDA
  6568                           fsr2l	equ	0xFD9
  6569                           status	equ	0xFD8
  6570                           
  6571 ;; *************** function ___lltoft *****************
  6572 ;; Defined at:
  6573 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  c               4   26[COMRAM] unsigned long 
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;  exp             1   34[COMRAM] unsigned char 
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  3   26[COMRAM] float 
  6580 ;; Registers used:
  6581 ;;		wreg, status,2, status,0, cstack
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6589 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6590 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6591 ;;Total ram usage:        9 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    5
  6594 ;; This function calls:
  6595 ;;		___ftpack
  6596 ;; This function is called by:
  6597 ;;		_printf
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text27
  6602  004684                     __ptext27:
  6603                           	opt stack 0
  6604  004684                     ___lltoft:
  6605                           	opt stack 24
  6606                           
  6607                           ;incstack = 0
  6608  004684  0E8E               	movlw	142
  6609  004686  6E23               	movwf	___lltoft@exp,c
  6610  004688  D006               	goto	l6093
  6611  00468A                     l6091:
  6612  00468A  90D8               	bcf	status,0,c
  6613  00468C  321E               	rrcf	___lltoft@c+3,f,c
  6614  00468E  321D               	rrcf	___lltoft@c+2,f,c
  6615  004690  321C               	rrcf	___lltoft@c+1,f,c
  6616  004692  321B               	rrcf	___lltoft@c,f,c
  6617  004694  2A23               	incf	___lltoft@exp,f,c
  6618  004696                     l6093:
  6619  004696  0E00               	movlw	0
  6620  004698  141B               	andwf	___lltoft@c,w,c
  6621  00469A  6E1F               	movwf	??___lltoft& (0+255),c
  6622  00469C  0E00               	movlw	0
  6623  00469E  141C               	andwf	___lltoft@c+1,w,c
  6624  0046A0  6E20               	movwf	(??___lltoft+1)& (0+255),c
  6625  0046A2  0E00               	movlw	0
  6626  0046A4  141D               	andwf	___lltoft@c+2,w,c
  6627  0046A6  6E21               	movwf	(??___lltoft+2)& (0+255),c
  6628  0046A8  0EFF               	movlw	255
  6629  0046AA  141E               	andwf	___lltoft@c+3,w,c
  6630  0046AC  6E22               	movwf	(??___lltoft+3)& (0+255),c
  6631  0046AE  501F               	movf	??___lltoft,w,c
  6632  0046B0  1020               	iorwf	??___lltoft+1,w,c
  6633  0046B2  1021               	iorwf	??___lltoft+2,w,c
  6634  0046B4  1022               	iorwf	??___lltoft+3,w,c
  6635  0046B6  A4D8               	btfss	status,2,c
  6636  0046B8  D7E8               	goto	l6091
  6637  0046BA  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  6638  0046BE  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  6639  0046C2  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  6640  0046C6  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  6641  0046CA  0E00               	movlw	0
  6642  0046CC  6E17               	movwf	___ftpack@sign,c
  6643  0046CE  EC14  F021         	call	___ftpack	;wreg free
  6644  0046D2  C013  F01B         	movff	?___ftpack,?___lltoft
  6645  0046D6  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  6646  0046DA  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  6647  0046DE  0012               	return	
  6648  0046E0                     __end_of___lltoft:
  6649                           	opt stack 0
  6650                           tblptru	equ	0xFF8
  6651                           tblptrh	equ	0xFF7
  6652                           tblptrl	equ	0xFF6
  6653                           tablat	equ	0xFF5
  6654                           prodh	equ	0xFF4
  6655                           prodl	equ	0xFF3
  6656                           postinc0	equ	0xFEE
  6657                           wreg	equ	0xFE8
  6658                           postdec1	equ	0xFE5
  6659                           fsr1l	equ	0xFE1
  6660                           indf2	equ	0xFDF
  6661                           postinc2	equ	0xFDE
  6662                           postdec2	equ	0xFDD
  6663                           fsr2h	equ	0xFDA
  6664                           fsr2l	equ	0xFD9
  6665                           status	equ	0xFD8
  6666                           
  6667 ;; *************** function ___llmod *****************
  6668 ;; Defined at:
  6669 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  dividend        4   31[COMRAM] unsigned long 
  6672 ;;  divisor         4   35[COMRAM] unsigned long 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  counter         1   39[COMRAM] unsigned char 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  4   31[COMRAM] unsigned long 
  6677 ;; Registers used:
  6678 ;;		wreg, status,2, status,0
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6684 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6687 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6688 ;;Total ram usage:        9 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    4
  6691 ;; This function calls:
  6692 ;;		Nothing
  6693 ;; This function is called by:
  6694 ;;		_printf
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           	psect	text28
  6699  00461E                     __ptext28:
  6700                           	opt stack 0
  6701  00461E                     ___llmod:
  6702                           	opt stack 25
  6703                           
  6704                           ;incstack = 0
  6705  00461E  5024               	movf	___llmod@divisor,w,c
  6706  004620  1025               	iorwf	___llmod@divisor+1,w,c
  6707  004622  1026               	iorwf	___llmod@divisor+2,w,c
  6708  004624  1027               	iorwf	___llmod@divisor+3,w,c
  6709  004626  B4D8               	btfsc	status,2,c
  6710  004628  D024               	goto	l1549
  6711  00462A  0E01               	movlw	1
  6712  00462C  6E28               	movwf	___llmod@counter,c
  6713  00462E  D006               	goto	l6079
  6714  004630                     l6077:
  6715  004630  90D8               	bcf	status,0,c
  6716  004632  3624               	rlcf	___llmod@divisor,f,c
  6717  004634  3625               	rlcf	___llmod@divisor+1,f,c
  6718  004636  3626               	rlcf	___llmod@divisor+2,f,c
  6719  004638  3627               	rlcf	___llmod@divisor+3,f,c
  6720  00463A  2A28               	incf	___llmod@counter,f,c
  6721  00463C                     l6079:
  6722  00463C  AE27               	btfss	___llmod@divisor+3,7,c
  6723  00463E  D7F8               	goto	l6077
  6724  004640                     l6081:
  6725  004640  5024               	movf	___llmod@divisor,w,c
  6726  004642  5C20               	subwf	___llmod@dividend,w,c
  6727  004644  5025               	movf	___llmod@divisor+1,w,c
  6728  004646  5821               	subwfb	___llmod@dividend+1,w,c
  6729  004648  5026               	movf	___llmod@divisor+2,w,c
  6730  00464A  5822               	subwfb	___llmod@dividend+2,w,c
  6731  00464C  5027               	movf	___llmod@divisor+3,w,c
  6732  00464E  5823               	subwfb	___llmod@dividend+3,w,c
  6733  004650  A0D8               	btfss	status,0,c
  6734  004652  D008               	goto	l6085
  6735  004654  5024               	movf	___llmod@divisor,w,c
  6736  004656  5E20               	subwf	___llmod@dividend,f,c
  6737  004658  5025               	movf	___llmod@divisor+1,w,c
  6738  00465A  5A21               	subwfb	___llmod@dividend+1,f,c
  6739  00465C  5026               	movf	___llmod@divisor+2,w,c
  6740  00465E  5A22               	subwfb	___llmod@dividend+2,f,c
  6741  004660  5027               	movf	___llmod@divisor+3,w,c
  6742  004662  5A23               	subwfb	___llmod@dividend+3,f,c
  6743  004664                     l6085:
  6744  004664  90D8               	bcf	status,0,c
  6745  004666  3227               	rrcf	___llmod@divisor+3,f,c
  6746  004668  3226               	rrcf	___llmod@divisor+2,f,c
  6747  00466A  3225               	rrcf	___llmod@divisor+1,f,c
  6748  00466C  3224               	rrcf	___llmod@divisor,f,c
  6749  00466E  2E28               	decfsz	___llmod@counter,f,c
  6750  004670  D7E7               	goto	l6081
  6751  004672                     l1549:
  6752  004672  C020  F020         	movff	___llmod@dividend,?___llmod
  6753  004676  C021  F021         	movff	___llmod@dividend+1,?___llmod+1
  6754  00467A  C022  F022         	movff	___llmod@dividend+2,?___llmod+2
  6755  00467E  C023  F023         	movff	___llmod@dividend+3,?___llmod+3
  6756  004682  0012               	return		;funcret
  6757  004684                     __end_of___llmod:
  6758                           	opt stack 0
  6759                           tblptru	equ	0xFF8
  6760                           tblptrh	equ	0xFF7
  6761                           tblptrl	equ	0xFF6
  6762                           tablat	equ	0xFF5
  6763                           prodh	equ	0xFF4
  6764                           prodl	equ	0xFF3
  6765                           postinc0	equ	0xFEE
  6766                           wreg	equ	0xFE8
  6767                           postdec1	equ	0xFE5
  6768                           fsr1l	equ	0xFE1
  6769                           indf2	equ	0xFDF
  6770                           postinc2	equ	0xFDE
  6771                           postdec2	equ	0xFDD
  6772                           fsr2h	equ	0xFDA
  6773                           fsr2l	equ	0xFD9
  6774                           status	equ	0xFD8
  6775                           
  6776 ;; *************** function ___lldiv *****************
  6777 ;; Defined at:
  6778 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;  dividend        4   18[COMRAM] unsigned long 
  6781 ;;  divisor         4   22[COMRAM] unsigned long 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  quotient        4   26[COMRAM] unsigned long 
  6784 ;;  counter         1   30[COMRAM] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  4   18[COMRAM] unsigned long 
  6787 ;; Registers used:
  6788 ;;		wreg, status,2, status,0
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6794 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6795 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6797 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6798 ;;Total ram usage:       13 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    4
  6801 ;; This function calls:
  6802 ;;		Nothing
  6803 ;; This function is called by:
  6804 ;;		_printf
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text29
  6809  00452C                     __ptext29:
  6810                           	opt stack 0
  6811  00452C                     ___lldiv:
  6812                           	opt stack 25
  6813                           
  6814                           ;incstack = 0
  6815  00452C  0E00               	movlw	0
  6816  00452E  6E1B               	movwf	___lldiv@quotient,c
  6817  004530  0E00               	movlw	0
  6818  004532  6E1C               	movwf	___lldiv@quotient+1,c
  6819  004534  0E00               	movlw	0
  6820  004536  6E1D               	movwf	___lldiv@quotient+2,c
  6821  004538  0E00               	movlw	0
  6822  00453A  6E1E               	movwf	___lldiv@quotient+3,c
  6823  00453C  5017               	movf	___lldiv@divisor,w,c
  6824  00453E  1018               	iorwf	___lldiv@divisor+1,w,c
  6825  004540  1019               	iorwf	___lldiv@divisor+2,w,c
  6826  004542  101A               	iorwf	___lldiv@divisor+3,w,c
  6827  004544  B4D8               	btfsc	status,2,c
  6828  004546  D02A               	goto	l1539
  6829  004548  0E01               	movlw	1
  6830  00454A  6E1F               	movwf	___lldiv@counter,c
  6831  00454C  D006               	goto	l6059
  6832  00454E                     l6057:
  6833  00454E  90D8               	bcf	status,0,c
  6834  004550  3617               	rlcf	___lldiv@divisor,f,c
  6835  004552  3618               	rlcf	___lldiv@divisor+1,f,c
  6836  004554  3619               	rlcf	___lldiv@divisor+2,f,c
  6837  004556  361A               	rlcf	___lldiv@divisor+3,f,c
  6838  004558  2A1F               	incf	___lldiv@counter,f,c
  6839  00455A                     l6059:
  6840  00455A  AE1A               	btfss	___lldiv@divisor+3,7,c
  6841  00455C  D7F8               	goto	l6057
  6842  00455E                     l6061:
  6843  00455E  90D8               	bcf	status,0,c
  6844  004560  361B               	rlcf	___lldiv@quotient,f,c
  6845  004562  361C               	rlcf	___lldiv@quotient+1,f,c
  6846  004564  361D               	rlcf	___lldiv@quotient+2,f,c
  6847  004566  361E               	rlcf	___lldiv@quotient+3,f,c
  6848  004568  5017               	movf	___lldiv@divisor,w,c
  6849  00456A  5C13               	subwf	___lldiv@dividend,w,c
  6850  00456C  5018               	movf	___lldiv@divisor+1,w,c
  6851  00456E  5814               	subwfb	___lldiv@dividend+1,w,c
  6852  004570  5019               	movf	___lldiv@divisor+2,w,c
  6853  004572  5815               	subwfb	___lldiv@dividend+2,w,c
  6854  004574  501A               	movf	___lldiv@divisor+3,w,c
  6855  004576  5816               	subwfb	___lldiv@dividend+3,w,c
  6856  004578  A0D8               	btfss	status,0,c
  6857  00457A  D009               	goto	l6069
  6858  00457C  5017               	movf	___lldiv@divisor,w,c
  6859  00457E  5E13               	subwf	___lldiv@dividend,f,c
  6860  004580  5018               	movf	___lldiv@divisor+1,w,c
  6861  004582  5A14               	subwfb	___lldiv@dividend+1,f,c
  6862  004584  5019               	movf	___lldiv@divisor+2,w,c
  6863  004586  5A15               	subwfb	___lldiv@dividend+2,f,c
  6864  004588  501A               	movf	___lldiv@divisor+3,w,c
  6865  00458A  5A16               	subwfb	___lldiv@dividend+3,f,c
  6866  00458C  801B               	bsf	___lldiv@quotient,0,c
  6867  00458E                     l6069:
  6868  00458E  90D8               	bcf	status,0,c
  6869  004590  321A               	rrcf	___lldiv@divisor+3,f,c
  6870  004592  3219               	rrcf	___lldiv@divisor+2,f,c
  6871  004594  3218               	rrcf	___lldiv@divisor+1,f,c
  6872  004596  3217               	rrcf	___lldiv@divisor,f,c
  6873  004598  2E1F               	decfsz	___lldiv@counter,f,c
  6874  00459A  D7E1               	goto	l6061
  6875  00459C                     l1539:
  6876  00459C  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  6877  0045A0  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  6878  0045A4  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  6879  0045A8  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  6880  0045AC  0012               	return		;funcret
  6881  0045AE                     __end_of___lldiv:
  6882                           	opt stack 0
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           postinc0	equ	0xFEE
  6890                           wreg	equ	0xFE8
  6891                           postdec1	equ	0xFE5
  6892                           fsr1l	equ	0xFE1
  6893                           indf2	equ	0xFDF
  6894                           postinc2	equ	0xFDE
  6895                           postdec2	equ	0xFDD
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function _pid_Init *****************
  6901 ;; Defined at:
  6902 ;;		line 8 in file "pid.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;		None
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, status,2
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6920 ;;Total ram usage:        0 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    4
  6923 ;; This function calls:
  6924 ;;		Nothing
  6925 ;; This function is called by:
  6926 ;;		_main
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text30
  6931  003C84                     __ptext30:
  6932                           	opt stack 0
  6933  003C84                     _pid_Init:
  6934                           	opt stack 26
  6935                           
  6936                           ;pid.c: 9: rollkp = 0;
  6937                           
  6938                           ;incstack = 0
  6939  003C84  0E00               	movlw	0
  6940  003C86  0100               	movlb	0	; () banked
  6941  003C88  6FD7               	movwf	_rollkp& (0+255),b
  6942  003C8A  0E00               	movlw	0
  6943  003C8C  0100               	movlb	0	; () banked
  6944  003C8E  6FD8               	movwf	(_rollkp+1)& (0+255),b
  6945  003C90  0E00               	movlw	0
  6946  003C92  0100               	movlb	0	; () banked
  6947  003C94  6FD9               	movwf	(_rollkp+2)& (0+255),b
  6948                           
  6949                           ;pid.c: 10: rollki = 0;
  6950  003C96  0E00               	movlw	0
  6951  003C98  0100               	movlb	0	; () banked
  6952  003C9A  6FD4               	movwf	_rollki& (0+255),b
  6953  003C9C  0E00               	movlw	0
  6954  003C9E  0100               	movlb	0	; () banked
  6955  003CA0  6FD5               	movwf	(_rollki+1)& (0+255),b
  6956  003CA2  0E00               	movlw	0
  6957  003CA4  0100               	movlb	0	; () banked
  6958  003CA6  6FD6               	movwf	(_rollki+2)& (0+255),b
  6959                           
  6960                           ;pid.c: 11: rollkd = 0;
  6961  003CA8  0E00               	movlw	0
  6962  003CAA  0100               	movlb	0	; () banked
  6963  003CAC  6FD1               	movwf	_rollkd& (0+255),b
  6964  003CAE  0E00               	movlw	0
  6965  003CB0  0100               	movlb	0	; () banked
  6966  003CB2  6FD2               	movwf	(_rollkd+1)& (0+255),b
  6967  003CB4  0E00               	movlw	0
  6968  003CB6  0100               	movlb	0	; () banked
  6969  003CB8  6FD3               	movwf	(_rollkd+2)& (0+255),b
  6970                           
  6971                           ;pid.c: 12: rollPreviousError = 0;
  6972  003CBA  0E00               	movlw	0
  6973  003CBC  0100               	movlb	0	; () banked
  6974  003CBE  6FCE               	movwf	_rollPreviousError& (0+255),b
  6975  003CC0  0E00               	movlw	0
  6976  003CC2  0100               	movlb	0	; () banked
  6977  003CC4  6FCF               	movwf	(_rollPreviousError+1)& (0+255),b
  6978  003CC6  0E00               	movlw	0
  6979  003CC8  0100               	movlb	0	; () banked
  6980  003CCA  6FD0               	movwf	(_rollPreviousError+2)& (0+255),b
  6981                           
  6982                           ;pid.c: 13: rollIntegral = 0;
  6983  003CCC  0E00               	movlw	0
  6984  003CCE  0100               	movlb	0	; () banked
  6985  003CD0  6FCB               	movwf	_rollIntegral& (0+255),b
  6986  003CD2  0E00               	movlw	0
  6987  003CD4  0100               	movlb	0	; () banked
  6988  003CD6  6FCC               	movwf	(_rollIntegral+1)& (0+255),b
  6989  003CD8  0E00               	movlw	0
  6990  003CDA  0100               	movlb	0	; () banked
  6991  003CDC  6FCD               	movwf	(_rollIntegral+2)& (0+255),b
  6992                           
  6993                           ;pid.c: 15: pitchkp = 0;
  6994  003CDE  0E00               	movlw	0
  6995  003CE0  0101               	movlb	1	; () banked
  6996  003CE2  6F24               	movwf	_pitchkp& (0+255),b
  6997  003CE4  0E00               	movlw	0
  6998  003CE6  0101               	movlb	1	; () banked
  6999  003CE8  6F25               	movwf	(_pitchkp+1)& (0+255),b
  7000  003CEA  0E00               	movlw	0
  7001  003CEC  0101               	movlb	1	; () banked
  7002  003CEE  6F26               	movwf	(_pitchkp+2)& (0+255),b
  7003                           
  7004                           ;pid.c: 16: pitchki = 0;
  7005  003CF0  0E00               	movlw	0
  7006  003CF2  0101               	movlb	1	; () banked
  7007  003CF4  6F21               	movwf	_pitchki& (0+255),b
  7008  003CF6  0E00               	movlw	0
  7009  003CF8  0101               	movlb	1	; () banked
  7010  003CFA  6F22               	movwf	(_pitchki+1)& (0+255),b
  7011  003CFC  0E00               	movlw	0
  7012  003CFE  0101               	movlb	1	; () banked
  7013  003D00  6F23               	movwf	(_pitchki+2)& (0+255),b
  7014                           
  7015                           ;pid.c: 17: pitchkd = 0;
  7016  003D02  0E00               	movlw	0
  7017  003D04  0101               	movlb	1	; () banked
  7018  003D06  6F1E               	movwf	_pitchkd& (0+255),b
  7019  003D08  0E00               	movlw	0
  7020  003D0A  0101               	movlb	1	; () banked
  7021  003D0C  6F1F               	movwf	(_pitchkd+1)& (0+255),b
  7022  003D0E  0E00               	movlw	0
  7023  003D10  0101               	movlb	1	; () banked
  7024  003D12  6F20               	movwf	(_pitchkd+2)& (0+255),b
  7025                           
  7026                           ;pid.c: 18: pitchPreviousError = 0;
  7027  003D14  0E00               	movlw	0
  7028  003D16  0101               	movlb	1	; () banked
  7029  003D18  6F1B               	movwf	_pitchPreviousError& (0+255),b
  7030  003D1A  0E00               	movlw	0
  7031  003D1C  0101               	movlb	1	; () banked
  7032  003D1E  6F1C               	movwf	(_pitchPreviousError+1)& (0+255),b
  7033  003D20  0E00               	movlw	0
  7034  003D22  0101               	movlb	1	; () banked
  7035  003D24  6F1D               	movwf	(_pitchPreviousError+2)& (0+255),b
  7036                           
  7037                           ;pid.c: 19: pitchIntegral = 0;
  7038  003D26  0E00               	movlw	0
  7039  003D28  0101               	movlb	1	; () banked
  7040  003D2A  6F18               	movwf	_pitchIntegral& (0+255),b
  7041  003D2C  0E00               	movlw	0
  7042  003D2E  0101               	movlb	1	; () banked
  7043  003D30  6F19               	movwf	(_pitchIntegral+1)& (0+255),b
  7044  003D32  0E00               	movlw	0
  7045  003D34  0101               	movlb	1	; () banked
  7046  003D36  6F1A               	movwf	(_pitchIntegral+2)& (0+255),b
  7047                           
  7048                           ;pid.c: 21: yawkp = 0;
  7049  003D38  0E00               	movlw	0
  7050  003D3A  0101               	movlb	1	; () banked
  7051  003D3C  6F15               	movwf	_yawkp& (0+255),b
  7052  003D3E  0E00               	movlw	0
  7053  003D40  0101               	movlb	1	; () banked
  7054  003D42  6F16               	movwf	(_yawkp+1)& (0+255),b
  7055  003D44  0E00               	movlw	0
  7056  003D46  0101               	movlb	1	; () banked
  7057  003D48  6F17               	movwf	(_yawkp+2)& (0+255),b
  7058                           
  7059                           ;pid.c: 22: yawki = 0;
  7060  003D4A  0E00               	movlw	0
  7061  003D4C  0101               	movlb	1	; () banked
  7062  003D4E  6F12               	movwf	_yawki& (0+255),b
  7063  003D50  0E00               	movlw	0
  7064  003D52  0101               	movlb	1	; () banked
  7065  003D54  6F13               	movwf	(_yawki+1)& (0+255),b
  7066  003D56  0E00               	movlw	0
  7067  003D58  0101               	movlb	1	; () banked
  7068  003D5A  6F14               	movwf	(_yawki+2)& (0+255),b
  7069                           
  7070                           ;pid.c: 23: yawkd = 0;
  7071  003D5C  0E00               	movlw	0
  7072  003D5E  0101               	movlb	1	; () banked
  7073  003D60  6F0F               	movwf	_yawkd& (0+255),b
  7074  003D62  0E00               	movlw	0
  7075  003D64  0101               	movlb	1	; () banked
  7076  003D66  6F10               	movwf	(_yawkd+1)& (0+255),b
  7077  003D68  0E00               	movlw	0
  7078  003D6A  0101               	movlb	1	; () banked
  7079  003D6C  6F11               	movwf	(_yawkd+2)& (0+255),b
  7080                           
  7081                           ;pid.c: 24: yawPreviousError = 0;
  7082  003D6E  0E00               	movlw	0
  7083  003D70  0101               	movlb	1	; () banked
  7084  003D72  6F0C               	movwf	_yawPreviousError& (0+255),b
  7085  003D74  0E00               	movlw	0
  7086  003D76  0101               	movlb	1	; () banked
  7087  003D78  6F0D               	movwf	(_yawPreviousError+1)& (0+255),b
  7088  003D7A  0E00               	movlw	0
  7089  003D7C  0101               	movlb	1	; () banked
  7090  003D7E  6F0E               	movwf	(_yawPreviousError+2)& (0+255),b
  7091                           
  7092                           ;pid.c: 25: yawIntegral = 0;
  7093  003D80  0E00               	movlw	0
  7094  003D82  0101               	movlb	1	; () banked
  7095  003D84  6F09               	movwf	_yawIntegral& (0+255),b
  7096  003D86  0E00               	movlw	0
  7097  003D88  0101               	movlb	1	; () banked
  7098  003D8A  6F0A               	movwf	(_yawIntegral+1)& (0+255),b
  7099  003D8C  0E00               	movlw	0
  7100  003D8E  0101               	movlb	1	; () banked
  7101  003D90  6F0B               	movwf	(_yawIntegral+2)& (0+255),b
  7102                           
  7103                           ; BSR set to: 1
  7104  003D92  0012               	return		;funcret
  7105  003D94                     __end_of_pid_Init:
  7106                           	opt stack 0
  7107                           tblptru	equ	0xFF8
  7108                           tblptrh	equ	0xFF7
  7109                           tblptrl	equ	0xFF6
  7110                           tablat	equ	0xFF5
  7111                           prodh	equ	0xFF4
  7112                           prodl	equ	0xFF3
  7113                           postinc0	equ	0xFEE
  7114                           wreg	equ	0xFE8
  7115                           postdec1	equ	0xFE5
  7116                           fsr1l	equ	0xFE1
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function _pid *****************
  7125 ;; Defined at:
  7126 ;;		line 28 in file "pid.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  desiredRoll     3   46[BANK0 ] float 
  7129 ;;  desiredPitch    3   49[BANK0 ] float 
  7130 ;;  desiredYaw      3   52[BANK0 ] float 
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;		None
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  1    wreg      void 
  7135 ;; Registers used:
  7136 ;;		wreg, status,2, status,0, cstack
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7142 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7144 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7145 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7146 ;;Total ram usage:       11 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; Hardware stack levels required when called:    7
  7149 ;; This function calls:
  7150 ;;		_pitchPid
  7151 ;;		_rollPid
  7152 ;;		_yawPid
  7153 ;; This function is called by:
  7154 ;;		_main
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           	psect	text31
  7159  003B66                     __ptext31:
  7160                           	opt stack 0
  7161  003B66                     _pid:
  7162                           	opt stack 23
  7163                           
  7164                           ;pid.c: 30: rollPid( desiredRoll );
  7165                           
  7166                           ; BSR set to: 1
  7167                           ;incstack = 0
  7168  003B66  C08E  F082         	movff	pid@desiredRoll,rollPid@desiredRoll
  7169  003B6A  C08F  F083         	movff	pid@desiredRoll+1,rollPid@desiredRoll+1
  7170  003B6E  C090  F084         	movff	pid@desiredRoll+2,rollPid@desiredRoll+2
  7171  003B72  ECF8  F019         	call	_rollPid	;wreg free
  7172                           
  7173                           ;pid.c: 31: pitchPid( desiredPitch );
  7174  003B76  C091  F013         	movff	pid@desiredPitch,pitchPid@desiredPitch
  7175  003B7A  C092  F014         	movff	pid@desiredPitch+1,pitchPid@desiredPitch+1
  7176  003B7E  C093  F015         	movff	pid@desiredPitch+2,pitchPid@desiredPitch+2
  7177  003B82  EC59  F026         	call	_pitchPid	;wreg free
  7178                           
  7179                           ;pid.c: 32: yawPid( desiredYaw );
  7180  003B86  C094  F013         	movff	pid@desiredYaw,yawPid@desiredYaw
  7181  003B8A  C095  F014         	movff	pid@desiredYaw+1,yawPid@desiredYaw+1
  7182  003B8E  C096  F015         	movff	pid@desiredYaw+2,yawPid@desiredYaw+2
  7183  003B92  EC58  F026         	call	_yawPid	;wreg free
  7184                           
  7185                           ;pid.c: 35: extern int throttle;
  7186                           ;pid.c: 36: throttle1 = throttle - rollAdj;
  7187  003B96  C0E8  F097         	movff	_rollAdj,??_pid
  7188  003B9A  C0E9  F098         	movff	_rollAdj+1,??_pid+1
  7189  003B9E  0100               	movlb	0	; () banked
  7190  003BA0  1F97               	comf	??_pid& (0+255),f,b
  7191  003BA2  1F98               	comf	(??_pid+1)& (0+255),f,b
  7192  003BA4  4B97               	infsnz	??_pid& (0+255),f,b
  7193  003BA6  2B98               	incf	(??_pid+1)& (0+255),f,b
  7194  003BA8  0100               	movlb	0	; () banked
  7195  003BAA  51DC               	movf	_throttle& (0+255),w,b
  7196  003BAC  0100               	movlb	0	; () banked
  7197  003BAE  2597               	addwf	??_pid& (0+255),w,b
  7198  003BB0  6E44               	movwf	_throttle1,c
  7199  003BB2  0100               	movlb	0	; () banked
  7200  003BB4  51DD               	movf	(_throttle+1)& (0+255),w,b
  7201  003BB6  0100               	movlb	0	; () banked
  7202  003BB8  2198               	addwfc	(??_pid+1)& (0+255),w,b
  7203  003BBA  6E45               	movwf	_throttle1+1,c
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;pid.c: 37: throttle2 = throttle + rollAdj;
  7207  003BBC  0100               	movlb	0	; () banked
  7208  003BBE  51E8               	movf	_rollAdj& (0+255),w,b
  7209  003BC0  0100               	movlb	0	; () banked
  7210  003BC2  25DC               	addwf	_throttle& (0+255),w,b
  7211  003BC4  6E42               	movwf	_throttle2,c
  7212  003BC6  0100               	movlb	0	; () banked
  7213  003BC8  51E9               	movf	(_rollAdj+1)& (0+255),w,b
  7214  003BCA  0100               	movlb	0	; () banked
  7215  003BCC  21DD               	addwfc	(_throttle+1)& (0+255),w,b
  7216  003BCE  6E43               	movwf	_throttle2+1,c
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;pid.c: 38: throttle3 = throttle + rollAdj;
  7220  003BD0  0100               	movlb	0	; () banked
  7221  003BD2  51E8               	movf	_rollAdj& (0+255),w,b
  7222  003BD4  0100               	movlb	0	; () banked
  7223  003BD6  25DC               	addwf	_throttle& (0+255),w,b
  7224  003BD8  0100               	movlb	0	; () banked
  7225  003BDA  6FE2               	movwf	_throttle3& (0+255),b
  7226  003BDC  0100               	movlb	0	; () banked
  7227  003BDE  51E9               	movf	(_rollAdj+1)& (0+255),w,b
  7228  003BE0  0100               	movlb	0	; () banked
  7229  003BE2  21DD               	addwfc	(_throttle+1)& (0+255),w,b
  7230  003BE4  0100               	movlb	0	; () banked
  7231  003BE6  6FE3               	movwf	(_throttle3+1)& (0+255),b
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;pid.c: 39: throttle4 = throttle - rollAdj;
  7235  003BE8  C0E8  F097         	movff	_rollAdj,??_pid
  7236  003BEC  C0E9  F098         	movff	_rollAdj+1,??_pid+1
  7237  003BF0  0100               	movlb	0	; () banked
  7238  003BF2  1F97               	comf	??_pid& (0+255),f,b
  7239  003BF4  1F98               	comf	(??_pid+1)& (0+255),f,b
  7240  003BF6  4B97               	infsnz	??_pid& (0+255),f,b
  7241  003BF8  2B98               	incf	(??_pid+1)& (0+255),f,b
  7242  003BFA  0100               	movlb	0	; () banked
  7243  003BFC  51DC               	movf	_throttle& (0+255),w,b
  7244  003BFE  0100               	movlb	0	; () banked
  7245  003C00  2597               	addwf	??_pid& (0+255),w,b
  7246  003C02  0100               	movlb	0	; () banked
  7247  003C04  6FE0               	movwf	_throttle4& (0+255),b
  7248  003C06  0100               	movlb	0	; () banked
  7249  003C08  51DD               	movf	(_throttle+1)& (0+255),w,b
  7250  003C0A  0100               	movlb	0	; () banked
  7251  003C0C  2198               	addwfc	(??_pid+1)& (0+255),w,b
  7252  003C0E  0100               	movlb	0	; () banked
  7253  003C10  6FE1               	movwf	(_throttle4+1)& (0+255),b
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;pid.c: 42: if ( throttle1 < 0 ) {
  7257  003C12  AE45               	btfss	_throttle1+1,7,c
  7258  003C14  D009               	goto	l6223
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;pid.c: 43: throttle1 = 0;
  7262  003C16  0E00               	movlw	0
  7263  003C18  6E45               	movwf	_throttle1+1,c
  7264  003C1A  0E00               	movlw	0
  7265  003C1C  6E44               	movwf	_throttle1,c
  7266                           
  7267                           ;pid.c: 44: throttle4 = 0;
  7268  003C1E  0E00               	movlw	0
  7269  003C20  0100               	movlb	0	; () banked
  7270  003C22  6FE1               	movwf	(_throttle4+1)& (0+255),b
  7271  003C24  0E00               	movlw	0
  7272  003C26  6FE0               	movwf	_throttle4& (0+255),b
  7273  003C28                     l6223:
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;pid.c: 45: }
  7277                           ;pid.c: 46: if ( throttle1 > 300 ) {
  7278  003C28  BE45               	btfsc	_throttle1+1,7,c
  7279  003C2A  D00F               	goto	l6227
  7280  003C2C  0E2D               	movlw	45
  7281  003C2E  5C44               	subwf	_throttle1,w,c
  7282  003C30  0E01               	movlw	1
  7283  003C32  5845               	subwfb	_throttle1+1,w,c
  7284  003C34  A0D8               	btfss	status,0,c
  7285  003C36  D009               	goto	l6227
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;pid.c: 47: throttle1 = 300;
  7289  003C38  0E01               	movlw	1
  7290  003C3A  6E45               	movwf	_throttle1+1,c
  7291  003C3C  0E2C               	movlw	44
  7292  003C3E  6E44               	movwf	_throttle1,c
  7293                           
  7294                           ;pid.c: 48: throttle4 = 300;
  7295  003C40  0E01               	movlw	1
  7296  003C42  0100               	movlb	0	; () banked
  7297  003C44  6FE1               	movwf	(_throttle4+1)& (0+255),b
  7298  003C46  0E2C               	movlw	44
  7299  003C48  6FE0               	movwf	_throttle4& (0+255),b
  7300  003C4A                     l6227:
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;pid.c: 49: }
  7304                           ;pid.c: 51: if ( throttle2 < 0 ) {
  7305  003C4A  AE43               	btfss	_throttle2+1,7,c
  7306  003C4C  D009               	goto	l6231
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;pid.c: 52: throttle2 = 0;
  7310  003C4E  0E00               	movlw	0
  7311  003C50  6E43               	movwf	_throttle2+1,c
  7312  003C52  0E00               	movlw	0
  7313  003C54  6E42               	movwf	_throttle2,c
  7314                           
  7315                           ;pid.c: 53: throttle3 = 0;
  7316  003C56  0E00               	movlw	0
  7317  003C58  0100               	movlb	0	; () banked
  7318  003C5A  6FE3               	movwf	(_throttle3+1)& (0+255),b
  7319  003C5C  0E00               	movlw	0
  7320  003C5E  6FE2               	movwf	_throttle3& (0+255),b
  7321  003C60                     l6231:
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;pid.c: 54: }
  7325                           ;pid.c: 55: if ( throttle2 > 300 ) {
  7326  003C60  BE43               	btfsc	_throttle2+1,7,c
  7327  003C62  0012               	return	
  7328  003C64  0E2D               	movlw	45
  7329  003C66  5C42               	subwf	_throttle2,w,c
  7330  003C68  0E01               	movlw	1
  7331  003C6A  5843               	subwfb	_throttle2+1,w,c
  7332  003C6C  A0D8               	btfss	status,0,c
  7333  003C6E  0012               	return	
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;pid.c: 56: throttle2 = 300;
  7337  003C70  0E01               	movlw	1
  7338  003C72  6E43               	movwf	_throttle2+1,c
  7339  003C74  0E2C               	movlw	44
  7340  003C76  6E42               	movwf	_throttle2,c
  7341                           
  7342                           ;pid.c: 57: throttle3 = 300;
  7343  003C78  0E01               	movlw	1
  7344  003C7A  0100               	movlb	0	; () banked
  7345  003C7C  6FE3               	movwf	(_throttle3+1)& (0+255),b
  7346  003C7E  0E2C               	movlw	44
  7347  003C80  6FE2               	movwf	_throttle3& (0+255),b
  7348  003C82  0012               	return	
  7349  003C84                     __end_of_pid:
  7350                           	opt stack 0
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodh	equ	0xFF4
  7356                           prodl	equ	0xFF3
  7357                           postinc0	equ	0xFEE
  7358                           wreg	equ	0xFE8
  7359                           postdec1	equ	0xFE5
  7360                           fsr1l	equ	0xFE1
  7361                           indf2	equ	0xFDF
  7362                           postinc2	equ	0xFDE
  7363                           postdec2	equ	0xFDD
  7364                           fsr2h	equ	0xFDA
  7365                           fsr2l	equ	0xFD9
  7366                           status	equ	0xFD8
  7367                           
  7368 ;; *************** function _yawPid *****************
  7369 ;; Defined at:
  7370 ;;		line 82 in file "pid.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  desiredYaw      3   18[COMRAM] float 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;		None
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      void 
  7377 ;; Registers used:
  7378 ;;		None
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7384 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7387 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7388 ;;Total ram usage:        3 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    4
  7391 ;; This function calls:
  7392 ;;		Nothing
  7393 ;; This function is called by:
  7394 ;;		_pid
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text32
  7399  004CB0                     __ptext32:
  7400                           	opt stack 0
  7401  004CB0                     _yawPid:
  7402                           	opt stack 25
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;incstack = 0
  7406  004CB0  0012               	return		;funcret
  7407  004CB2                     __end_of_yawPid:
  7408                           	opt stack 0
  7409                           tblptru	equ	0xFF8
  7410                           tblptrh	equ	0xFF7
  7411                           tblptrl	equ	0xFF6
  7412                           tablat	equ	0xFF5
  7413                           prodh	equ	0xFF4
  7414                           prodl	equ	0xFF3
  7415                           postinc0	equ	0xFEE
  7416                           wreg	equ	0xFE8
  7417                           postdec1	equ	0xFE5
  7418                           fsr1l	equ	0xFE1
  7419                           indf2	equ	0xFDF
  7420                           postinc2	equ	0xFDE
  7421                           postdec2	equ	0xFDD
  7422                           fsr2h	equ	0xFDA
  7423                           fsr2l	equ	0xFD9
  7424                           status	equ	0xFD8
  7425                           
  7426 ;; *************** function _rollPid *****************
  7427 ;; Defined at:
  7428 ;;		line 61 in file "pid.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  desiredRoll     3   34[BANK0 ] float 
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;  rollError       3   43[BANK0 ] float 
  7433 ;;  changeInErro    3   37[BANK0 ] float 
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      void 
  7436 ;; Registers used:
  7437 ;;		wreg, status,2, status,0, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7443 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7444 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7446 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7447 ;;Total ram usage:       12 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    6
  7450 ;; This function calls:
  7451 ;;		___ftadd
  7452 ;;		___ftmul
  7453 ;;		___ftneg
  7454 ;;		___fttol
  7455 ;; This function is called by:
  7456 ;;		_pid
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           	psect	text33
  7461  0033F0                     __ptext33:
  7462                           	opt stack 0
  7463  0033F0                     _rollPid:
  7464                           	opt stack 23
  7465                           
  7466                           ;pid.c: 63: float rollError;
  7467                           ;pid.c: 64: float changeInError;
  7468                           ;pid.c: 67: rollError = desiredRoll - roll;
  7469                           
  7470                           ;incstack = 0
  7471  0033F0  C0B6  F036         	movff	_roll,___ftneg@f1
  7472  0033F4  C0B7  F037         	movff	_roll+1,___ftneg@f1+1
  7473  0033F8  C0B8  F038         	movff	_roll+2,___ftneg@f1+2
  7474  0033FC  EC4E  F025         	call	___ftneg	;wreg free
  7475  003400  C036  F067         	movff	?___ftneg,___ftadd@f1
  7476  003404  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  7477  003408  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  7478  00340C  C082  F06A         	movff	rollPid@desiredRoll,___ftadd@f2
  7479  003410  C083  F06B         	movff	rollPid@desiredRoll+1,___ftadd@f2+1
  7480  003414  C084  F06C         	movff	rollPid@desiredRoll+2,___ftadd@f2+2
  7481  003418  EC03  F016         	call	___ftadd	;wreg free
  7482  00341C  C067  F08B         	movff	?___ftadd,rollPid@rollError
  7483  003420  C068  F08C         	movff	?___ftadd+1,rollPid@rollError+1
  7484  003424  C069  F08D         	movff	?___ftadd+2,rollPid@rollError+2
  7485                           
  7486                           ;pid.c: 68: changeInError = rollPreviousError - rollError;
  7487  003428  C08B  F036         	movff	rollPid@rollError,___ftneg@f1
  7488  00342C  C08C  F037         	movff	rollPid@rollError+1,___ftneg@f1+1
  7489  003430  C08D  F038         	movff	rollPid@rollError+2,___ftneg@f1+2
  7490  003434  EC4E  F025         	call	___ftneg	;wreg free
  7491  003438  C036  F067         	movff	?___ftneg,___ftadd@f1
  7492  00343C  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  7493  003440  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  7494  003444  C0CE  F06A         	movff	_rollPreviousError,___ftadd@f2
  7495  003448  C0CF  F06B         	movff	_rollPreviousError+1,___ftadd@f2+1
  7496  00344C  C0D0  F06C         	movff	_rollPreviousError+2,___ftadd@f2+2
  7497  003450  EC03  F016         	call	___ftadd	;wreg free
  7498  003454  C067  F085         	movff	?___ftadd,rollPid@changeInError
  7499  003458  C068  F086         	movff	?___ftadd+1,rollPid@changeInError+1
  7500  00345C  C069  F087         	movff	?___ftadd+2,rollPid@changeInError+2
  7501                           
  7502                           ;pid.c: 69: rollIntegral += rollError;
  7503  003460  C0CB  F067         	movff	_rollIntegral,___ftadd@f1
  7504  003464  C0CC  F068         	movff	_rollIntegral+1,___ftadd@f1+1
  7505  003468  C0CD  F069         	movff	_rollIntegral+2,___ftadd@f1+2
  7506  00346C  C08B  F06A         	movff	rollPid@rollError,___ftadd@f2
  7507  003470  C08C  F06B         	movff	rollPid@rollError+1,___ftadd@f2+1
  7508  003474  C08D  F06C         	movff	rollPid@rollError+2,___ftadd@f2+2
  7509  003478  EC03  F016         	call	___ftadd	;wreg free
  7510  00347C  C067  F0CB         	movff	?___ftadd,_rollIntegral
  7511  003480  C068  F0CC         	movff	?___ftadd+1,_rollIntegral+1
  7512  003484  C069  F0CD         	movff	?___ftadd+2,_rollIntegral+2
  7513                           
  7514                           ;pid.c: 72: rollAdj = (int)((rollkp*rollError) - (rollkd*changeInError) + (rollki * roll
      +                          Integral));
  7515  003488  C0CB  F02A         	movff	_rollIntegral,___ftmul@f2
  7516  00348C  C0CC  F02B         	movff	_rollIntegral+1,___ftmul@f2+1
  7517  003490  C0CD  F02C         	movff	_rollIntegral+2,___ftmul@f2+2
  7518  003494  C0D4  F027         	movff	_rollki,___ftmul@f1
  7519  003498  C0D5  F028         	movff	_rollki+1,___ftmul@f1+1
  7520  00349C  C0D6  F029         	movff	_rollki+2,___ftmul@f1+2
  7521  0034A0  EC49  F01F         	call	___ftmul	;wreg free
  7522  0034A4  C027  F06A         	movff	?___ftmul,___ftadd@f2
  7523  0034A8  C028  F06B         	movff	?___ftmul+1,___ftadd@f2+1
  7524  0034AC  C029  F06C         	movff	?___ftmul+2,___ftadd@f2+2
  7525  0034B0  C08B  F02A         	movff	rollPid@rollError,___ftmul@f2
  7526  0034B4  C08C  F02B         	movff	rollPid@rollError+1,___ftmul@f2+1
  7527  0034B8  C08D  F02C         	movff	rollPid@rollError+2,___ftmul@f2+2
  7528  0034BC  C0D7  F027         	movff	_rollkp,___ftmul@f1
  7529  0034C0  C0D8  F028         	movff	_rollkp+1,___ftmul@f1+1
  7530  0034C4  C0D9  F029         	movff	_rollkp+2,___ftmul@f1+2
  7531  0034C8  EC49  F01F         	call	___ftmul	;wreg free
  7532  0034CC  C027  F067         	movff	?___ftmul,___ftadd@f1
  7533  0034D0  C028  F068         	movff	?___ftmul+1,___ftadd@f1+1
  7534  0034D4  C029  F069         	movff	?___ftmul+2,___ftadd@f1+2
  7535  0034D8  EC03  F016         	call	___ftadd	;wreg free
  7536  0034DC  C067  F088         	movff	?___ftadd,_rollPid$2937
  7537  0034E0  C068  F089         	movff	?___ftadd+1,_rollPid$2937+1
  7538  0034E4  C069  F08A         	movff	?___ftadd+2,_rollPid$2937+2
  7539                           
  7540                           ;pid.c: 72: rollAdj = (int)((rollkp*rollError) - (rollkd*changeInError) + (rollki * roll
      +                          Integral));
  7541  0034E8  C085  F02A         	movff	rollPid@changeInError,___ftmul@f2
  7542  0034EC  C086  F02B         	movff	rollPid@changeInError+1,___ftmul@f2+1
  7543  0034F0  C087  F02C         	movff	rollPid@changeInError+2,___ftmul@f2+2
  7544  0034F4  C0D1  F027         	movff	_rollkd,___ftmul@f1
  7545  0034F8  C0D2  F028         	movff	_rollkd+1,___ftmul@f1+1
  7546  0034FC  C0D3  F029         	movff	_rollkd+2,___ftmul@f1+2
  7547  003500  EC49  F01F         	call	___ftmul	;wreg free
  7548  003504  C027  F036         	movff	?___ftmul,___ftneg@f1
  7549  003508  C028  F037         	movff	?___ftmul+1,___ftneg@f1+1
  7550  00350C  C029  F038         	movff	?___ftmul+2,___ftneg@f1+2
  7551  003510  EC4E  F025         	call	___ftneg	;wreg free
  7552  003514  C036  F06A         	movff	?___ftneg,___ftadd@f2
  7553  003518  C037  F06B         	movff	?___ftneg+1,___ftadd@f2+1
  7554  00351C  C038  F06C         	movff	?___ftneg+2,___ftadd@f2+2
  7555  003520  C088  F067         	movff	_rollPid$2937,___ftadd@f1
  7556  003524  C089  F068         	movff	_rollPid$2937+1,___ftadd@f1+1
  7557  003528  C08A  F069         	movff	_rollPid$2937+2,___ftadd@f1+2
  7558  00352C  EC03  F016         	call	___ftadd	;wreg free
  7559  003530  C067  F073         	movff	?___ftadd,___fttol@f1
  7560  003534  C068  F074         	movff	?___ftadd+1,___fttol@f1+1
  7561  003538  C069  F075         	movff	?___ftadd+2,___fttol@f1+2
  7562  00353C  EC51  F01B         	call	___fttol	;wreg free
  7563  003540  C073  F0E8         	movff	?___fttol,_rollAdj
  7564  003544  C074  F0E9         	movff	?___fttol+1,_rollAdj+1
  7565                           
  7566                           ;pid.c: 75: rollPreviousError = rollError;
  7567  003548  C08B  F0CE         	movff	rollPid@rollError,_rollPreviousError
  7568  00354C  C08C  F0CF         	movff	rollPid@rollError+1,_rollPreviousError+1
  7569  003550  C08D  F0D0         	movff	rollPid@rollError+2,_rollPreviousError+2
  7570  003554  0012               	return		;funcret
  7571  003556                     __end_of_rollPid:
  7572                           	opt stack 0
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           postdec1	equ	0xFE5
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function ___fttol *****************
  7591 ;; Defined at:
  7592 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  f1              3   19[BANK0 ] float 
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  lval            4   29[BANK0 ] unsigned long 
  7597 ;;  exp1            1   33[BANK0 ] unsigned char 
  7598 ;;  sign1           1   28[BANK0 ] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  4   19[BANK0 ] long 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2, status,0
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7608 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7609 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7610 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7611 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7612 ;;Total ram usage:       15 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    4
  7615 ;; This function calls:
  7616 ;;		Nothing
  7617 ;; This function is called by:
  7618 ;;		_main
  7619 ;;		_rollPid
  7620 ;;		_printf
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text34
  7625  0036A2                     __ptext34:
  7626                           	opt stack 0
  7627  0036A2                     ___fttol:
  7628                           	opt stack 25
  7629                           
  7630                           ;incstack = 0
  7631  0036A2  C075  F077         	movff	___fttol@f1+2,??___fttol
  7632  0036A6  0100               	movlb	0	; () banked
  7633  0036A8  6B78               	clrf	(??___fttol+1)& (0+255),b
  7634  0036AA  6B79               	clrf	(??___fttol+2)& (0+255),b
  7635  0036AC  0100               	movlb	0	; () banked
  7636  0036AE  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7637  0036B0  0100               	movlb	0	; () banked
  7638  0036B2  3777               	rlcf	??___fttol& (0+255),f,b
  7639  0036B4  E301               	bnc	u4971
  7640  0036B6  8178               	bsf	(??___fttol+1)& (0+255),0,b
  7641  0036B8                     u4971:
  7642  0036B8  0100               	movlb	0	; () banked
  7643  0036BA  5177               	movf	??___fttol& (0+255),w,b
  7644  0036BC  0100               	movlb	0	; () banked
  7645  0036BE  6F81               	movwf	___fttol@exp1& (0+255),b
  7646  0036C0  0100               	movlb	0	; () banked
  7647  0036C2  5181               	movf	___fttol@exp1& (0+255),w,b
  7648  0036C4  A4D8               	btfss	status,2,c
  7649  0036C6  D00A               	goto	l5625
  7650                           
  7651                           ; BSR set to: 0
  7652  0036C8  0E00               	movlw	0
  7653  0036CA  0100               	movlb	0	; () banked
  7654  0036CC  6F73               	movwf	?___fttol& (0+255),b
  7655  0036CE  0E00               	movlw	0
  7656  0036D0  6F74               	movwf	(?___fttol+1)& (0+255),b
  7657  0036D2  0E00               	movlw	0
  7658  0036D4  6F75               	movwf	(?___fttol+2)& (0+255),b
  7659  0036D6  0E00               	movlw	0
  7660  0036D8  6F76               	movwf	(?___fttol+3)& (0+255),b
  7661                           
  7662                           ; BSR set to: 0
  7663  0036DA  0012               	return	
  7664  0036DC                     l5625:
  7665                           
  7666                           ; BSR set to: 0
  7667  0036DC  0E17               	movlw	23
  7668  0036DE  0100               	movlb	0	; () banked
  7669  0036E0  6F77               	movwf	??___fttol& (0+255),b
  7670  0036E2  C073  F078         	movff	___fttol@f1,??___fttol+1
  7671  0036E6  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  7672  0036EA  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  7673  0036EE  0100               	movlb	0	; () banked
  7674  0036F0  2977               	incf	??___fttol& (0+255),w,b
  7675  0036F2  0100               	movlb	0	; () banked
  7676  0036F4  6F7B               	movwf	(??___fttol+4)& (0+255),b
  7677  0036F6  D005               	goto	u4990
  7678  0036F8                     u4995:
  7679  0036F8  0100               	movlb	0	; () banked
  7680  0036FA  90D8               	bcf	status,0,c
  7681  0036FC  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  7682  0036FE  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  7683  003700  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  7684  003702                     u4990:
  7685  003702  0100               	movlb	0	; () banked
  7686  003704  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  7687  003706  D7F8               	goto	u4995
  7688  003708  0100               	movlb	0	; () banked
  7689  00370A  5178               	movf	(??___fttol+1)& (0+255),w,b
  7690  00370C  0100               	movlb	0	; () banked
  7691  00370E  6F7C               	movwf	___fttol@sign1& (0+255),b
  7692                           
  7693                           ; BSR set to: 0
  7694  003710  0100               	movlb	0	; () banked
  7695  003712  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  7696                           
  7697                           ; BSR set to: 0
  7698  003714  0EFF               	movlw	255
  7699  003716  0100               	movlb	0	; () banked
  7700  003718  1773               	andwf	___fttol@f1& (0+255),f,b
  7701  00371A  0EFF               	movlw	255
  7702  00371C  0100               	movlb	0	; () banked
  7703  00371E  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  7704  003720  0E00               	movlw	0
  7705  003722  0100               	movlb	0	; () banked
  7706  003724  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  7707                           
  7708                           ; BSR set to: 0
  7709  003726  0100               	movlb	0	; () banked
  7710  003728  5173               	movf	___fttol@f1& (0+255),w,b
  7711  00372A  0100               	movlb	0	; () banked
  7712  00372C  6F7D               	movwf	___fttol@lval& (0+255),b
  7713  00372E  0100               	movlb	0	; () banked
  7714  003730  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  7715  003732  0100               	movlb	0	; () banked
  7716  003734  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  7717  003736  0100               	movlb	0	; () banked
  7718  003738  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  7719  00373A  0100               	movlb	0	; () banked
  7720  00373C  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  7721  00373E  0100               	movlb	0	; () banked
  7722  003740  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  7723                           
  7724                           ; BSR set to: 0
  7725  003742  0E8E               	movlw	142
  7726  003744  0100               	movlb	0	; () banked
  7727  003746  5F81               	subwf	___fttol@exp1& (0+255),f,b
  7728                           
  7729                           ; BSR set to: 0
  7730  003748  0100               	movlb	0	; () banked
  7731  00374A  AF81               	btfss	___fttol@exp1& (0+255),7,b
  7732  00374C  D01A               	goto	l5647
  7733                           
  7734                           ; BSR set to: 0
  7735  00374E  0100               	movlb	0	; () banked
  7736  003750  5181               	movf	___fttol@exp1& (0+255),w,b
  7737  003752  0A80               	xorlw	128
  7738  003754  0F8F               	addlw	143
  7739  003756  B0D8               	btfsc	status,0,c
  7740  003758  D00A               	goto	l5643
  7741                           
  7742                           ; BSR set to: 0
  7743  00375A  0E00               	movlw	0
  7744  00375C  0100               	movlb	0	; () banked
  7745  00375E  6F73               	movwf	?___fttol& (0+255),b
  7746  003760  0E00               	movlw	0
  7747  003762  6F74               	movwf	(?___fttol+1)& (0+255),b
  7748  003764  0E00               	movlw	0
  7749  003766  6F75               	movwf	(?___fttol+2)& (0+255),b
  7750  003768  0E00               	movlw	0
  7751  00376A  6F76               	movwf	(?___fttol+3)& (0+255),b
  7752                           
  7753                           ; BSR set to: 0
  7754  00376C  0012               	return	
  7755  00376E                     l5643:
  7756                           
  7757                           ; BSR set to: 0
  7758  00376E  0100               	movlb	0	; () banked
  7759  003770  90D8               	bcf	status,0,c
  7760  003772  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7761  003774  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7762  003776  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7763  003778  337D               	rrcf	___fttol@lval& (0+255),f,b
  7764                           
  7765                           ; BSR set to: 0
  7766  00377A  0100               	movlb	0	; () banked
  7767  00377C  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  7768  00377E  D7F7               	goto	l5643
  7769                           
  7770                           ; BSR set to: 0
  7771  003780  D01B               	goto	l5657
  7772  003782                     l5647:
  7773                           
  7774                           ; BSR set to: 0
  7775  003782  0E17               	movlw	23
  7776  003784  0100               	movlb	0	; () banked
  7777  003786  6581               	cpfsgt	___fttol@exp1& (0+255),b
  7778  003788  D012               	goto	l5655
  7779                           
  7780                           ; BSR set to: 0
  7781  00378A  0E00               	movlw	0
  7782  00378C  0100               	movlb	0	; () banked
  7783  00378E  6F73               	movwf	?___fttol& (0+255),b
  7784  003790  0E00               	movlw	0
  7785  003792  6F74               	movwf	(?___fttol+1)& (0+255),b
  7786  003794  0E00               	movlw	0
  7787  003796  6F75               	movwf	(?___fttol+2)& (0+255),b
  7788  003798  0E00               	movlw	0
  7789  00379A  6F76               	movwf	(?___fttol+3)& (0+255),b
  7790                           
  7791                           ; BSR set to: 0
  7792  00379C  0012               	return	
  7793  00379E                     l5653:
  7794                           
  7795                           ; BSR set to: 0
  7796  00379E  0100               	movlb	0	; () banked
  7797  0037A0  90D8               	bcf	status,0,c
  7798  0037A2  377D               	rlcf	___fttol@lval& (0+255),f,b
  7799  0037A4  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7800  0037A6  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7801  0037A8  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7802  0037AA  0100               	movlb	0	; () banked
  7803  0037AC  0781               	decf	___fttol@exp1& (0+255),f,b
  7804  0037AE                     l5655:
  7805                           
  7806                           ; BSR set to: 0
  7807  0037AE  0100               	movlb	0	; () banked
  7808  0037B0  5181               	movf	___fttol@exp1& (0+255),w,b
  7809  0037B2  0100               	movlb	0	; () banked
  7810  0037B4  A4D8               	btfss	status,2,c
  7811  0037B6  D7F3               	goto	l5653
  7812  0037B8                     l5657:
  7813                           
  7814                           ; BSR set to: 0
  7815  0037B8  0100               	movlb	0	; () banked
  7816  0037BA  517C               	movf	___fttol@sign1& (0+255),w,b
  7817  0037BC  0100               	movlb	0	; () banked
  7818  0037BE  B4D8               	btfsc	status,2,c
  7819  0037C0  D009               	goto	l5661
  7820                           
  7821                           ; BSR set to: 0
  7822  0037C2  0100               	movlb	0	; () banked
  7823  0037C4  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  7824  0037C6  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  7825  0037C8  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  7826  0037CA  6D7D               	negf	___fttol@lval& (0+255),b
  7827  0037CC  0E00               	movlw	0
  7828  0037CE  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7829  0037D0  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7830  0037D2  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7831  0037D4                     l5661:
  7832                           
  7833                           ; BSR set to: 0
  7834  0037D4  C07D  F073         	movff	___fttol@lval,?___fttol
  7835  0037D8  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  7836  0037DC  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  7837  0037E0  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  7838  0037E4  0012               	return	
  7839  0037E6                     __end_of___fttol:
  7840                           	opt stack 0
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           prodh	equ	0xFF4
  7846                           prodl	equ	0xFF3
  7847                           postinc0	equ	0xFEE
  7848                           wreg	equ	0xFE8
  7849                           postdec1	equ	0xFE5
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function _pitchPid *****************
  7859 ;; Defined at:
  7860 ;;		line 78 in file "pid.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  desiredPitch    3   18[COMRAM] float 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		None
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7874 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7877 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7878 ;;Total ram usage:        3 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    4
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_pid
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text35
  7889  004CB2                     __ptext35:
  7890                           	opt stack 0
  7891  004CB2                     _pitchPid:
  7892                           	opt stack 25
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;incstack = 0
  7896  004CB2  0012               	return		;funcret
  7897  004CB4                     __end_of_pitchPid:
  7898                           	opt stack 0
  7899                           tblptru	equ	0xFF8
  7900                           tblptrh	equ	0xFF7
  7901                           tblptrl	equ	0xFF6
  7902                           tablat	equ	0xFF5
  7903                           prodh	equ	0xFF4
  7904                           prodl	equ	0xFF3
  7905                           postinc0	equ	0xFEE
  7906                           wreg	equ	0xFE8
  7907                           postdec1	equ	0xFE5
  7908                           fsr1l	equ	0xFE1
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           fsr2h	equ	0xFDA
  7913                           fsr2l	equ	0xFD9
  7914                           status	equ	0xFD8
  7915                           
  7916 ;; *************** function _kalman_Init *****************
  7917 ;; Defined at:
  7918 ;;		line 14 in file "kalman.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;		None
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;		None
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  1    wreg      void 
  7925 ;; Registers used:
  7926 ;;		wreg, status,2
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7936 ;;Total ram usage:        0 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    4
  7939 ;; This function calls:
  7940 ;;		Nothing
  7941 ;; This function is called by:
  7942 ;;		_main
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           	psect	text36
  7947  003262                     __ptext36:
  7948                           	opt stack 0
  7949  003262                     _kalman_Init:
  7950                           	opt stack 26
  7951                           
  7952                           ;kalman.c: 17: axState.x = ax;
  7953                           
  7954                           ;incstack = 0
  7955  003262  C0C8  F178         	movff	_ax,_axState+6
  7956  003266  C0C9  F179         	movff	_ax+1,_axState+7
  7957  00326A  C0CA  F17A         	movff	_ax+2,_axState+8
  7958                           
  7959                           ;kalman.c: 18: axState.p = 1;
  7960  00326E  0E00               	movlw	0
  7961  003270  0101               	movlb	1	; () banked
  7962  003272  6F7B               	movwf	(_axState+9)& (0+255),b
  7963  003274  0E80               	movlw	128
  7964  003276  0101               	movlb	1	; () banked
  7965  003278  6F7C               	movwf	(_axState+10)& (0+255),b
  7966  00327A  0E3F               	movlw	63
  7967  00327C  0101               	movlb	1	; () banked
  7968  00327E  6F7D               	movwf	(_axState+11)& (0+255),b
  7969                           
  7970                           ;kalman.c: 19: axState.q = .1;
  7971  003280  0ECD               	movlw	205
  7972  003282  0101               	movlb	1	; () banked
  7973  003284  6F72               	movwf	_axState& (0+255),b
  7974  003286  0ECC               	movlw	204
  7975  003288  0101               	movlb	1	; () banked
  7976  00328A  6F73               	movwf	(_axState+1)& (0+255),b
  7977  00328C  0E3D               	movlw	61
  7978  00328E  0101               	movlb	1	; () banked
  7979  003290  6F74               	movwf	(_axState+2)& (0+255),b
  7980                           
  7981                           ;kalman.c: 20: axState.r = 7.5;
  7982  003292  0E00               	movlw	0
  7983  003294  0101               	movlb	1	; () banked
  7984  003296  6F75               	movwf	(_axState+3)& (0+255),b
  7985  003298  0EF0               	movlw	240
  7986  00329A  0101               	movlb	1	; () banked
  7987  00329C  6F76               	movwf	(_axState+4)& (0+255),b
  7988  00329E  0E40               	movlw	64
  7989  0032A0  0101               	movlb	1	; () banked
  7990  0032A2  6F77               	movwf	(_axState+5)& (0+255),b
  7991                           
  7992                           ; BSR set to: 1
  7993                           ;kalman.c: 22: ayState.x = ay;
  7994  0032A4  C0C5  F169         	movff	_ay,_ayState+6
  7995  0032A8  C0C6  F16A         	movff	_ay+1,_ayState+7
  7996  0032AC  C0C7  F16B         	movff	_ay+2,_ayState+8
  7997                           
  7998                           ;kalman.c: 23: ayState.p = 1;
  7999  0032B0  0E00               	movlw	0
  8000  0032B2  0101               	movlb	1	; () banked
  8001  0032B4  6F6C               	movwf	(_ayState+9)& (0+255),b
  8002  0032B6  0E80               	movlw	128
  8003  0032B8  0101               	movlb	1	; () banked
  8004  0032BA  6F6D               	movwf	(_ayState+10)& (0+255),b
  8005  0032BC  0E3F               	movlw	63
  8006  0032BE  0101               	movlb	1	; () banked
  8007  0032C0  6F6E               	movwf	(_ayState+11)& (0+255),b
  8008                           
  8009                           ;kalman.c: 24: ayState.q = .1;
  8010  0032C2  0ECD               	movlw	205
  8011  0032C4  0101               	movlb	1	; () banked
  8012  0032C6  6F63               	movwf	_ayState& (0+255),b
  8013  0032C8  0ECC               	movlw	204
  8014  0032CA  0101               	movlb	1	; () banked
  8015  0032CC  6F64               	movwf	(_ayState+1)& (0+255),b
  8016  0032CE  0E3D               	movlw	61
  8017  0032D0  0101               	movlb	1	; () banked
  8018  0032D2  6F65               	movwf	(_ayState+2)& (0+255),b
  8019                           
  8020                           ;kalman.c: 25: ayState.r = 7.5;
  8021  0032D4  0E00               	movlw	0
  8022  0032D6  0101               	movlb	1	; () banked
  8023  0032D8  6F66               	movwf	(_ayState+3)& (0+255),b
  8024  0032DA  0EF0               	movlw	240
  8025  0032DC  0101               	movlb	1	; () banked
  8026  0032DE  6F67               	movwf	(_ayState+4)& (0+255),b
  8027  0032E0  0E40               	movlw	64
  8028  0032E2  0101               	movlb	1	; () banked
  8029  0032E4  6F68               	movwf	(_ayState+5)& (0+255),b
  8030                           
  8031                           ; BSR set to: 1
  8032                           ;kalman.c: 27: azState.x = az;
  8033  0032E6  C0C2  F15A         	movff	_az,_azState+6
  8034  0032EA  C0C3  F15B         	movff	_az+1,_azState+7
  8035  0032EE  C0C4  F15C         	movff	_az+2,_azState+8
  8036                           
  8037                           ;kalman.c: 28: azState.p =1;
  8038  0032F2  0E00               	movlw	0
  8039  0032F4  0101               	movlb	1	; () banked
  8040  0032F6  6F5D               	movwf	(_azState+9)& (0+255),b
  8041  0032F8  0E80               	movlw	128
  8042  0032FA  0101               	movlb	1	; () banked
  8043  0032FC  6F5E               	movwf	(_azState+10)& (0+255),b
  8044  0032FE  0E3F               	movlw	63
  8045  003300  0101               	movlb	1	; () banked
  8046  003302  6F5F               	movwf	(_azState+11)& (0+255),b
  8047                           
  8048                           ;kalman.c: 29: azState.q = .1;
  8049  003304  0ECD               	movlw	205
  8050  003306  0101               	movlb	1	; () banked
  8051  003308  6F54               	movwf	_azState& (0+255),b
  8052  00330A  0ECC               	movlw	204
  8053  00330C  0101               	movlb	1	; () banked
  8054  00330E  6F55               	movwf	(_azState+1)& (0+255),b
  8055  003310  0E3D               	movlw	61
  8056  003312  0101               	movlb	1	; () banked
  8057  003314  6F56               	movwf	(_azState+2)& (0+255),b
  8058                           
  8059                           ;kalman.c: 30: azState.r = 7.5;
  8060  003316  0E00               	movlw	0
  8061  003318  0101               	movlb	1	; () banked
  8062  00331A  6F57               	movwf	(_azState+3)& (0+255),b
  8063  00331C  0EF0               	movlw	240
  8064  00331E  0101               	movlb	1	; () banked
  8065  003320  6F58               	movwf	(_azState+4)& (0+255),b
  8066  003322  0E40               	movlw	64
  8067  003324  0101               	movlb	1	; () banked
  8068  003326  6F59               	movwf	(_azState+5)& (0+255),b
  8069                           
  8070                           ; BSR set to: 1
  8071                           ;kalman.c: 33: gxState.x = gx;
  8072  003328  C0BF  F14B         	movff	_gx,_gxState+6
  8073  00332C  C0C0  F14C         	movff	_gx+1,_gxState+7
  8074  003330  C0C1  F14D         	movff	_gx+2,_gxState+8
  8075                           
  8076                           ;kalman.c: 34: gxState.p = 1;
  8077  003334  0E00               	movlw	0
  8078  003336  0101               	movlb	1	; () banked
  8079  003338  6F4E               	movwf	(_gxState+9)& (0+255),b
  8080  00333A  0E80               	movlw	128
  8081  00333C  0101               	movlb	1	; () banked
  8082  00333E  6F4F               	movwf	(_gxState+10)& (0+255),b
  8083  003340  0E3F               	movlw	63
  8084  003342  0101               	movlb	1	; () banked
  8085  003344  6F50               	movwf	(_gxState+11)& (0+255),b
  8086                           
  8087                           ;kalman.c: 35: gxState.q = .75;
  8088  003346  0E00               	movlw	0
  8089  003348  0101               	movlb	1	; () banked
  8090  00334A  6F45               	movwf	_gxState& (0+255),b
  8091  00334C  0E40               	movlw	64
  8092  00334E  0101               	movlb	1	; () banked
  8093  003350  6F46               	movwf	(_gxState+1)& (0+255),b
  8094  003352  0E3F               	movlw	63
  8095  003354  0101               	movlb	1	; () banked
  8096  003356  6F47               	movwf	(_gxState+2)& (0+255),b
  8097                           
  8098                           ;kalman.c: 36: gxState.r = 5;
  8099  003358  0E00               	movlw	0
  8100  00335A  0101               	movlb	1	; () banked
  8101  00335C  6F48               	movwf	(_gxState+3)& (0+255),b
  8102  00335E  0EA0               	movlw	160
  8103  003360  0101               	movlb	1	; () banked
  8104  003362  6F49               	movwf	(_gxState+4)& (0+255),b
  8105  003364  0E40               	movlw	64
  8106  003366  0101               	movlb	1	; () banked
  8107  003368  6F4A               	movwf	(_gxState+5)& (0+255),b
  8108                           
  8109                           ; BSR set to: 1
  8110                           ;kalman.c: 38: gyState.x = gy;
  8111  00336A  C0BC  F13C         	movff	_gy,_gyState+6
  8112  00336E  C0BD  F13D         	movff	_gy+1,_gyState+7
  8113  003372  C0BE  F13E         	movff	_gy+2,_gyState+8
  8114                           
  8115                           ;kalman.c: 39: gyState.p = 1;
  8116  003376  0E00               	movlw	0
  8117  003378  0101               	movlb	1	; () banked
  8118  00337A  6F3F               	movwf	(_gyState+9)& (0+255),b
  8119  00337C  0E80               	movlw	128
  8120  00337E  0101               	movlb	1	; () banked
  8121  003380  6F40               	movwf	(_gyState+10)& (0+255),b
  8122  003382  0E3F               	movlw	63
  8123  003384  0101               	movlb	1	; () banked
  8124  003386  6F41               	movwf	(_gyState+11)& (0+255),b
  8125                           
  8126                           ;kalman.c: 40: gyState.q = .75;
  8127  003388  0E00               	movlw	0
  8128  00338A  0101               	movlb	1	; () banked
  8129  00338C  6F36               	movwf	_gyState& (0+255),b
  8130  00338E  0E40               	movlw	64
  8131  003390  0101               	movlb	1	; () banked
  8132  003392  6F37               	movwf	(_gyState+1)& (0+255),b
  8133  003394  0E3F               	movlw	63
  8134  003396  0101               	movlb	1	; () banked
  8135  003398  6F38               	movwf	(_gyState+2)& (0+255),b
  8136                           
  8137                           ;kalman.c: 41: gyState.r = 5;
  8138  00339A  0E00               	movlw	0
  8139  00339C  0101               	movlb	1	; () banked
  8140  00339E  6F39               	movwf	(_gyState+3)& (0+255),b
  8141  0033A0  0EA0               	movlw	160
  8142  0033A2  0101               	movlb	1	; () banked
  8143  0033A4  6F3A               	movwf	(_gyState+4)& (0+255),b
  8144  0033A6  0E40               	movlw	64
  8145  0033A8  0101               	movlb	1	; () banked
  8146  0033AA  6F3B               	movwf	(_gyState+5)& (0+255),b
  8147                           
  8148                           ; BSR set to: 1
  8149                           ;kalman.c: 43: gzState.x = gz;
  8150  0033AC  C0B9  F12D         	movff	_gz,_gzState+6
  8151  0033B0  C0BA  F12E         	movff	_gz+1,_gzState+7
  8152  0033B4  C0BB  F12F         	movff	_gz+2,_gzState+8
  8153                           
  8154                           ;kalman.c: 44: gzState.p = 1;
  8155  0033B8  0E00               	movlw	0
  8156  0033BA  0101               	movlb	1	; () banked
  8157  0033BC  6F30               	movwf	(_gzState+9)& (0+255),b
  8158  0033BE  0E80               	movlw	128
  8159  0033C0  0101               	movlb	1	; () banked
  8160  0033C2  6F31               	movwf	(_gzState+10)& (0+255),b
  8161  0033C4  0E3F               	movlw	63
  8162  0033C6  0101               	movlb	1	; () banked
  8163  0033C8  6F32               	movwf	(_gzState+11)& (0+255),b
  8164                           
  8165                           ;kalman.c: 45: gzState.q = .75;
  8166  0033CA  0E00               	movlw	0
  8167  0033CC  0101               	movlb	1	; () banked
  8168  0033CE  6F27               	movwf	_gzState& (0+255),b
  8169  0033D0  0E40               	movlw	64
  8170  0033D2  0101               	movlb	1	; () banked
  8171  0033D4  6F28               	movwf	(_gzState+1)& (0+255),b
  8172  0033D6  0E3F               	movlw	63
  8173  0033D8  0101               	movlb	1	; () banked
  8174  0033DA  6F29               	movwf	(_gzState+2)& (0+255),b
  8175                           
  8176                           ;kalman.c: 46: gzState.r = 5;
  8177  0033DC  0E00               	movlw	0
  8178  0033DE  0101               	movlb	1	; () banked
  8179  0033E0  6F2A               	movwf	(_gzState+3)& (0+255),b
  8180  0033E2  0EA0               	movlw	160
  8181  0033E4  0101               	movlb	1	; () banked
  8182  0033E6  6F2B               	movwf	(_gzState+4)& (0+255),b
  8183  0033E8  0E40               	movlw	64
  8184  0033EA  0101               	movlb	1	; () banked
  8185  0033EC  6F2C               	movwf	(_gzState+5)& (0+255),b
  8186                           
  8187                           ; BSR set to: 1
  8188  0033EE  0012               	return		;funcret
  8189  0033F0                     __end_of_kalman_Init:
  8190                           	opt stack 0
  8191                           tblptru	equ	0xFF8
  8192                           tblptrh	equ	0xFF7
  8193                           tblptrl	equ	0xFF6
  8194                           tablat	equ	0xFF5
  8195                           prodh	equ	0xFF4
  8196                           prodl	equ	0xFF3
  8197                           postinc0	equ	0xFEE
  8198                           wreg	equ	0xFE8
  8199                           postdec1	equ	0xFE5
  8200                           fsr1l	equ	0xFE1
  8201                           indf2	equ	0xFDF
  8202                           postinc2	equ	0xFDE
  8203                           postdec2	equ	0xFDD
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8
  8207                           
  8208 ;; *************** function _interrupt_Init *****************
  8209 ;; Defined at:
  8210 ;;		line 79 in file "main.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;		None
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;		None
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      void 
  8217 ;; Registers used:
  8218 ;;		None
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8228 ;;Total ram usage:        0 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    4
  8231 ;; This function calls:
  8232 ;;		Nothing
  8233 ;; This function is called by:
  8234 ;;		_main
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           	psect	text37
  8239  004C9A                     __ptext37:
  8240                           	opt stack 0
  8241  004C9A                     _interrupt_Init:
  8242                           	opt stack 26
  8243                           
  8244                           ;main.c: 81: INTCONbits.GIE = 1;
  8245                           
  8246                           ; BSR set to: 1
  8247                           ;incstack = 0
  8248  004C9A  8EF2               	bsf	intcon,7,c	;volatile
  8249                           
  8250                           ;main.c: 84: INTCONbits.PEIE = 1;
  8251  004C9C  8CF2               	bsf	intcon,6,c	;volatile
  8252  004C9E  0012               	return		;funcret
  8253  004CA0                     __end_of_interrupt_Init:
  8254                           	opt stack 0
  8255                           tblptru	equ	0xFF8
  8256                           tblptrh	equ	0xFF7
  8257                           tblptrl	equ	0xFF6
  8258                           tablat	equ	0xFF5
  8259                           prodh	equ	0xFF4
  8260                           prodl	equ	0xFF3
  8261                           intcon	equ	0xFF2
  8262                           postinc0	equ	0xFEE
  8263                           wreg	equ	0xFE8
  8264                           postdec1	equ	0xFE5
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function _filterData *****************
  8274 ;; Defined at:
  8275 ;;		line 61 in file "kalman.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;		None
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;		None
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  1    wreg      void 
  8282 ;; Registers used:
  8283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8284 ;; Tracked objects:
  8285 ;;		On entry : 0/0
  8286 ;;		On exit  : 0/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8293 ;;Total ram usage:        0 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    7
  8296 ;; This function calls:
  8297 ;;		_kalmanUpdate
  8298 ;; This function is called by:
  8299 ;;		_main
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text38
  8304  003F86                     __ptext38:
  8305                           	opt stack 0
  8306  003F86                     _filterData:
  8307                           	opt stack 23
  8308                           
  8309                           ;kalman.c: 62: kalmanUpdate(&axState, ax);
  8310                           
  8311                           ;incstack = 0
  8312  003F86  0E72               	movlw	low _axState
  8313  003F88  0100               	movlb	0	; () banked
  8314  003F8A  6F82               	movwf	kalmanUpdate@state& (0+255),b
  8315  003F8C  0E01               	movlw	high _axState
  8316  003F8E  0100               	movlb	0	; () banked
  8317  003F90  6F83               	movwf	(kalmanUpdate@state+1)& (0+255),b
  8318  003F92  C0C8  F084         	movff	_ax,kalmanUpdate@measurement
  8319  003F96  C0C9  F085         	movff	_ax+1,kalmanUpdate@measurement+1
  8320  003F9A  C0CA  F086         	movff	_ax+2,kalmanUpdate@measurement+2
  8321  003F9E  EC37  F017         	call	_kalmanUpdate	;wreg free
  8322                           
  8323                           ;kalman.c: 63: kalmanUpdate(&ayState, ay);
  8324  003FA2  0E63               	movlw	low _ayState
  8325  003FA4  0100               	movlb	0	; () banked
  8326  003FA6  6F82               	movwf	kalmanUpdate@state& (0+255),b
  8327  003FA8  0E01               	movlw	high _ayState
  8328  003FAA  0100               	movlb	0	; () banked
  8329  003FAC  6F83               	movwf	(kalmanUpdate@state+1)& (0+255),b
  8330  003FAE  C0C5  F084         	movff	_ay,kalmanUpdate@measurement
  8331  003FB2  C0C6  F085         	movff	_ay+1,kalmanUpdate@measurement+1
  8332  003FB6  C0C7  F086         	movff	_ay+2,kalmanUpdate@measurement+2
  8333  003FBA  EC37  F017         	call	_kalmanUpdate	;wreg free
  8334                           
  8335                           ;kalman.c: 64: kalmanUpdate(&azState, az);
  8336  003FBE  0E54               	movlw	low _azState
  8337  003FC0  0100               	movlb	0	; () banked
  8338  003FC2  6F82               	movwf	kalmanUpdate@state& (0+255),b
  8339  003FC4  0E01               	movlw	high _azState
  8340  003FC6  0100               	movlb	0	; () banked
  8341  003FC8  6F83               	movwf	(kalmanUpdate@state+1)& (0+255),b
  8342  003FCA  C0C2  F084         	movff	_az,kalmanUpdate@measurement
  8343  003FCE  C0C3  F085         	movff	_az+1,kalmanUpdate@measurement+1
  8344  003FD2  C0C4  F086         	movff	_az+2,kalmanUpdate@measurement+2
  8345  003FD6  EC37  F017         	call	_kalmanUpdate	;wreg free
  8346                           
  8347                           ;kalman.c: 65: kalmanUpdate(&gxState, gx);
  8348  003FDA  0E45               	movlw	low _gxState
  8349  003FDC  0100               	movlb	0	; () banked
  8350  003FDE  6F82               	movwf	kalmanUpdate@state& (0+255),b
  8351  003FE0  0E01               	movlw	high _gxState
  8352  003FE2  0100               	movlb	0	; () banked
  8353  003FE4  6F83               	movwf	(kalmanUpdate@state+1)& (0+255),b
  8354  003FE6  C0BF  F084         	movff	_gx,kalmanUpdate@measurement
  8355  003FEA  C0C0  F085         	movff	_gx+1,kalmanUpdate@measurement+1
  8356  003FEE  C0C1  F086         	movff	_gx+2,kalmanUpdate@measurement+2
  8357  003FF2  EC37  F017         	call	_kalmanUpdate	;wreg free
  8358                           
  8359                           ;kalman.c: 66: kalmanUpdate(&gyState, gy);
  8360  003FF6  0E36               	movlw	low _gyState
  8361  003FF8  0100               	movlb	0	; () banked
  8362  003FFA  6F82               	movwf	kalmanUpdate@state& (0+255),b
  8363  003FFC  0E01               	movlw	high _gyState
  8364  003FFE  0100               	movlb	0	; () banked
  8365  004000  6F83               	movwf	(kalmanUpdate@state+1)& (0+255),b
  8366  004002  C0BC  F084         	movff	_gy,kalmanUpdate@measurement
  8367  004006  C0BD  F085         	movff	_gy+1,kalmanUpdate@measurement+1
  8368  00400A  C0BE  F086         	movff	_gy+2,kalmanUpdate@measurement+2
  8369  00400E  EC37  F017         	call	_kalmanUpdate	;wreg free
  8370                           
  8371                           ;kalman.c: 67: kalmanUpdate(&gzState, gz);
  8372  004012  0E27               	movlw	low _gzState
  8373  004014  0100               	movlb	0	; () banked
  8374  004016  6F82               	movwf	kalmanUpdate@state& (0+255),b
  8375  004018  0E01               	movlw	high _gzState
  8376  00401A  0100               	movlb	0	; () banked
  8377  00401C  6F83               	movwf	(kalmanUpdate@state+1)& (0+255),b
  8378  00401E  C0B9  F084         	movff	_gz,kalmanUpdate@measurement
  8379  004022  C0BA  F085         	movff	_gz+1,kalmanUpdate@measurement+1
  8380  004026  C0BB  F086         	movff	_gz+2,kalmanUpdate@measurement+2
  8381  00402A  EC37  F017         	call	_kalmanUpdate	;wreg free
  8382                           
  8383                           ;kalman.c: 69: ax = axState.x;
  8384  00402E  C178  F0C8         	movff	_axState+6,_ax
  8385  004032  C179  F0C9         	movff	_axState+7,_ax+1
  8386  004036  C17A  F0CA         	movff	_axState+8,_ax+2
  8387                           
  8388                           ;kalman.c: 70: ay = ayState.x;
  8389  00403A  C169  F0C5         	movff	_ayState+6,_ay
  8390  00403E  C16A  F0C6         	movff	_ayState+7,_ay+1
  8391  004042  C16B  F0C7         	movff	_ayState+8,_ay+2
  8392                           
  8393                           ;kalman.c: 71: az = azState.x;
  8394  004046  C15A  F0C2         	movff	_azState+6,_az
  8395  00404A  C15B  F0C3         	movff	_azState+7,_az+1
  8396  00404E  C15C  F0C4         	movff	_azState+8,_az+2
  8397                           
  8398                           ;kalman.c: 73: gx = gxState.x;
  8399  004052  C14B  F0BF         	movff	_gxState+6,_gx
  8400  004056  C14C  F0C0         	movff	_gxState+7,_gx+1
  8401  00405A  C14D  F0C1         	movff	_gxState+8,_gx+2
  8402                           
  8403                           ;kalman.c: 74: gy = gyState.x;
  8404  00405E  C13C  F0BC         	movff	_gyState+6,_gy
  8405  004062  C13D  F0BD         	movff	_gyState+7,_gy+1
  8406  004066  C13E  F0BE         	movff	_gyState+8,_gy+2
  8407                           
  8408                           ;kalman.c: 75: gz = gzState.x;
  8409  00406A  C12D  F0B9         	movff	_gzState+6,_gz
  8410  00406E  C12E  F0BA         	movff	_gzState+7,_gz+1
  8411  004072  C12F  F0BB         	movff	_gzState+8,_gz+2
  8412  004076  0012               	return		;funcret
  8413  004078                     __end_of_filterData:
  8414                           	opt stack 0
  8415                           tblptru	equ	0xFF8
  8416                           tblptrh	equ	0xFF7
  8417                           tblptrl	equ	0xFF6
  8418                           tablat	equ	0xFF5
  8419                           prodh	equ	0xFF4
  8420                           prodl	equ	0xFF3
  8421                           intcon	equ	0xFF2
  8422                           postinc0	equ	0xFEE
  8423                           wreg	equ	0xFE8
  8424                           postdec1	equ	0xFE5
  8425                           fsr1l	equ	0xFE1
  8426                           indf2	equ	0xFDF
  8427                           postinc2	equ	0xFDE
  8428                           postdec2	equ	0xFDD
  8429                           fsr2h	equ	0xFDA
  8430                           fsr2l	equ	0xFD9
  8431                           status	equ	0xFD8
  8432                           
  8433 ;; *************** function _kalmanUpdate *****************
  8434 ;; Defined at:
  8435 ;;		line 50 in file "kalman.c"
  8436 ;; Parameters:    Size  Location     Type
  8437 ;;  state           2   34[BANK0 ] PTR struct .
  8438 ;;		 -> gzState(15), gyState(15), gxState(15), azState(15), 
  8439 ;;		 -> ayState(15), axState(15), 
  8440 ;;  measurement     3   36[BANK0 ] float 
  8441 ;; Auto vars:     Size  Location     Type
  8442 ;;		None
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  1    wreg      void 
  8445 ;; Registers used:
  8446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8452 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8453 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8455 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8456 ;;Total ram usage:        8 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    6
  8459 ;; This function calls:
  8460 ;;		___ftadd
  8461 ;;		___ftdiv
  8462 ;;		___ftmul
  8463 ;;		___ftneg
  8464 ;; This function is called by:
  8465 ;;		_filterData
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           	psect	text39
  8470  002E6E                     __ptext39:
  8471                           	opt stack 0
  8472  002E6E                     _kalmanUpdate:
  8473                           	opt stack 23
  8474                           
  8475                           ;kalman.c: 53: state->p = state->p + state->q;
  8476                           
  8477                           ;incstack = 0
  8478  002E6E  0100               	movlb	0	; () banked
  8479  002E70  EE20 F009          	lfsr	2,9
  8480  002E74  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8481  002E76  26D9               	addwf	fsr2l,f,c
  8482  002E78  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8483  002E7A  22DA               	addwfc	fsr2h,f,c
  8484  002E7C  CFDE F067          	movff	postinc2,___ftadd@f1
  8485  002E80  CFDE F068          	movff	postinc2,___ftadd@f1+1
  8486  002E84  CFDD F069          	movff	postdec2,___ftadd@f1+2
  8487  002E88  C082  FFD9         	movff	kalmanUpdate@state,fsr2l
  8488  002E8C  C083  FFDA         	movff	kalmanUpdate@state+1,fsr2h
  8489  002E90  CFDE F06A          	movff	postinc2,___ftadd@f2
  8490  002E94  CFDE F06B          	movff	postinc2,___ftadd@f2+1
  8491  002E98  CFDD F06C          	movff	postdec2,___ftadd@f2+2
  8492  002E9C  EC03  F016         	call	___ftadd	;wreg free
  8493  002EA0  0100               	movlb	0	; () banked
  8494  002EA2  EE20 F009          	lfsr	2,9
  8495  002EA6  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8496  002EA8  26D9               	addwf	fsr2l,f,c
  8497  002EAA  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8498  002EAC  22DA               	addwfc	fsr2h,f,c
  8499  002EAE  C067  FFDE         	movff	?___ftadd,postinc2
  8500  002EB2  C068  FFDE         	movff	?___ftadd+1,postinc2
  8501  002EB6  C069  FFDE         	movff	?___ftadd+2,postinc2
  8502                           
  8503                           ;kalman.c: 56: state->k = state->p / (state->p + state->r);
  8504  002EBA  0100               	movlb	0	; () banked
  8505  002EBC  EE20 F009          	lfsr	2,9
  8506  002EC0  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8507  002EC2  26D9               	addwf	fsr2l,f,c
  8508  002EC4  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8509  002EC6  22DA               	addwfc	fsr2h,f,c
  8510  002EC8  CFDE F073          	movff	postinc2,___ftdiv@f1
  8511  002ECC  CFDE F074          	movff	postinc2,___ftdiv@f1+1
  8512  002ED0  CFDD F075          	movff	postdec2,___ftdiv@f1+2
  8513  002ED4  0100               	movlb	0	; () banked
  8514  002ED6  EE20 F003          	lfsr	2,3
  8515  002EDA  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8516  002EDC  26D9               	addwf	fsr2l,f,c
  8517  002EDE  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8518  002EE0  22DA               	addwfc	fsr2h,f,c
  8519  002EE2  CFDE F06A          	movff	postinc2,___ftadd@f2
  8520  002EE6  CFDE F06B          	movff	postinc2,___ftadd@f2+1
  8521  002EEA  CFDD F06C          	movff	postdec2,___ftadd@f2+2
  8522  002EEE  0100               	movlb	0	; () banked
  8523  002EF0  EE20 F009          	lfsr	2,9
  8524  002EF4  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8525  002EF6  26D9               	addwf	fsr2l,f,c
  8526  002EF8  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8527  002EFA  22DA               	addwfc	fsr2h,f,c
  8528  002EFC  CFDE F067          	movff	postinc2,___ftadd@f1
  8529  002F00  CFDE F068          	movff	postinc2,___ftadd@f1+1
  8530  002F04  CFDD F069          	movff	postdec2,___ftadd@f1+2
  8531  002F08  EC03  F016         	call	___ftadd	;wreg free
  8532  002F0C  C067  F076         	movff	?___ftadd,___ftdiv@f2
  8533  002F10  C068  F077         	movff	?___ftadd+1,___ftdiv@f2+1
  8534  002F14  C069  F078         	movff	?___ftadd+2,___ftdiv@f2+2
  8535  002F18  ECAB  F01A         	call	___ftdiv	;wreg free
  8536  002F1C  0100               	movlb	0	; () banked
  8537  002F1E  EE20 F00C          	lfsr	2,12
  8538  002F22  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8539  002F24  26D9               	addwf	fsr2l,f,c
  8540  002F26  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8541  002F28  22DA               	addwfc	fsr2h,f,c
  8542  002F2A  C073  FFDE         	movff	?___ftdiv,postinc2
  8543  002F2E  C074  FFDE         	movff	?___ftdiv+1,postinc2
  8544  002F32  C075  FFDE         	movff	?___ftdiv+2,postinc2
  8545                           
  8546                           ;kalman.c: 57: state->x = state->x + state->k * (measurement - state->x);
  8547  002F36  0100               	movlb	0	; () banked
  8548  002F38  EE20 F00C          	lfsr	2,12
  8549  002F3C  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8550  002F3E  26D9               	addwf	fsr2l,f,c
  8551  002F40  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8552  002F42  22DA               	addwfc	fsr2h,f,c
  8553  002F44  CFDE F02A          	movff	postinc2,___ftmul@f2
  8554  002F48  CFDE F02B          	movff	postinc2,___ftmul@f2+1
  8555  002F4C  CFDD F02C          	movff	postdec2,___ftmul@f2+2
  8556  002F50  C084  F06A         	movff	kalmanUpdate@measurement,___ftadd@f2
  8557  002F54  C085  F06B         	movff	kalmanUpdate@measurement+1,___ftadd@f2+1
  8558  002F58  C086  F06C         	movff	kalmanUpdate@measurement+2,___ftadd@f2+2
  8559  002F5C  0100               	movlb	0	; () banked
  8560  002F5E  EE20 F006          	lfsr	2,6
  8561  002F62  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8562  002F64  26D9               	addwf	fsr2l,f,c
  8563  002F66  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8564  002F68  22DA               	addwfc	fsr2h,f,c
  8565  002F6A  CFDE F036          	movff	postinc2,___ftneg@f1
  8566  002F6E  CFDE F037          	movff	postinc2,___ftneg@f1+1
  8567  002F72  CFDD F038          	movff	postdec2,___ftneg@f1+2
  8568  002F76  EC4E  F025         	call	___ftneg	;wreg free
  8569  002F7A  C036  F067         	movff	?___ftneg,___ftadd@f1
  8570  002F7E  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  8571  002F82  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  8572  002F86  EC03  F016         	call	___ftadd	;wreg free
  8573  002F8A  C067  F027         	movff	?___ftadd,___ftmul@f1
  8574  002F8E  C068  F028         	movff	?___ftadd+1,___ftmul@f1+1
  8575  002F92  C069  F029         	movff	?___ftadd+2,___ftmul@f1+2
  8576  002F96  EC49  F01F         	call	___ftmul	;wreg free
  8577  002F9A  C027  F087         	movff	?___ftmul,_kalmanUpdate$2938
  8578  002F9E  C028  F088         	movff	?___ftmul+1,_kalmanUpdate$2938+1
  8579  002FA2  C029  F089         	movff	?___ftmul+2,_kalmanUpdate$2938+2
  8580                           
  8581                           ;kalman.c: 57: state->x = state->x + state->k * (measurement - state->x);
  8582  002FA6  C087  F067         	movff	_kalmanUpdate$2938,___ftadd@f1
  8583  002FAA  C088  F068         	movff	_kalmanUpdate$2938+1,___ftadd@f1+1
  8584  002FAE  C089  F069         	movff	_kalmanUpdate$2938+2,___ftadd@f1+2
  8585  002FB2  0100               	movlb	0	; () banked
  8586  002FB4  EE20 F006          	lfsr	2,6
  8587  002FB8  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8588  002FBA  26D9               	addwf	fsr2l,f,c
  8589  002FBC  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8590  002FBE  22DA               	addwfc	fsr2h,f,c
  8591  002FC0  CFDE F06A          	movff	postinc2,___ftadd@f2
  8592  002FC4  CFDE F06B          	movff	postinc2,___ftadd@f2+1
  8593  002FC8  CFDD F06C          	movff	postdec2,___ftadd@f2+2
  8594  002FCC  EC03  F016         	call	___ftadd	;wreg free
  8595  002FD0  0100               	movlb	0	; () banked
  8596  002FD2  EE20 F006          	lfsr	2,6
  8597  002FD6  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8598  002FD8  26D9               	addwf	fsr2l,f,c
  8599  002FDA  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8600  002FDC  22DA               	addwfc	fsr2h,f,c
  8601  002FDE  C067  FFDE         	movff	?___ftadd,postinc2
  8602  002FE2  C068  FFDE         	movff	?___ftadd+1,postinc2
  8603  002FE6  C069  FFDE         	movff	?___ftadd+2,postinc2
  8604                           
  8605                           ;kalman.c: 58: state->p = (1 - state->k) * state->p;
  8606  002FEA  0E00               	movlw	0
  8607  002FEC  0100               	movlb	0	; () banked
  8608  002FEE  6F6A               	movwf	___ftadd@f2& (0+255),b
  8609  002FF0  0E80               	movlw	128
  8610  002FF2  0100               	movlb	0	; () banked
  8611  002FF4  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  8612  002FF6  0E3F               	movlw	63
  8613  002FF8  0100               	movlb	0	; () banked
  8614  002FFA  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  8615  002FFC  0100               	movlb	0	; () banked
  8616  002FFE  EE20 F00C          	lfsr	2,12
  8617  003002  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8618  003004  26D9               	addwf	fsr2l,f,c
  8619  003006  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8620  003008  22DA               	addwfc	fsr2h,f,c
  8621  00300A  CFDE F036          	movff	postinc2,___ftneg@f1
  8622  00300E  CFDE F037          	movff	postinc2,___ftneg@f1+1
  8623  003012  CFDD F038          	movff	postdec2,___ftneg@f1+2
  8624  003016  EC4E  F025         	call	___ftneg	;wreg free
  8625  00301A  C036  F067         	movff	?___ftneg,___ftadd@f1
  8626  00301E  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  8627  003022  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  8628  003026  EC03  F016         	call	___ftadd	;wreg free
  8629  00302A  C067  F027         	movff	?___ftadd,___ftmul@f1
  8630  00302E  C068  F028         	movff	?___ftadd+1,___ftmul@f1+1
  8631  003032  C069  F029         	movff	?___ftadd+2,___ftmul@f1+2
  8632  003036  0100               	movlb	0	; () banked
  8633  003038  EE20 F009          	lfsr	2,9
  8634  00303C  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8635  00303E  26D9               	addwf	fsr2l,f,c
  8636  003040  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8637  003042  22DA               	addwfc	fsr2h,f,c
  8638  003044  CFDE F02A          	movff	postinc2,___ftmul@f2
  8639  003048  CFDE F02B          	movff	postinc2,___ftmul@f2+1
  8640  00304C  CFDD F02C          	movff	postdec2,___ftmul@f2+2
  8641  003050  EC49  F01F         	call	___ftmul	;wreg free
  8642  003054  0100               	movlb	0	; () banked
  8643  003056  EE20 F009          	lfsr	2,9
  8644  00305A  5182               	movf	kalmanUpdate@state& (0+255),w,b
  8645  00305C  26D9               	addwf	fsr2l,f,c
  8646  00305E  5183               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8647  003060  22DA               	addwfc	fsr2h,f,c
  8648  003062  C027  FFDE         	movff	?___ftmul,postinc2
  8649  003066  C028  FFDE         	movff	?___ftmul+1,postinc2
  8650  00306A  C029  FFDE         	movff	?___ftmul+2,postinc2
  8651                           
  8652                           ; BSR set to: 0
  8653  00306E  0012               	return		;funcret
  8654  003070                     __end_of_kalmanUpdate:
  8655                           	opt stack 0
  8656                           tblptru	equ	0xFF8
  8657                           tblptrh	equ	0xFF7
  8658                           tblptrl	equ	0xFF6
  8659                           tablat	equ	0xFF5
  8660                           prodh	equ	0xFF4
  8661                           prodl	equ	0xFF3
  8662                           intcon	equ	0xFF2
  8663                           postinc0	equ	0xFEE
  8664                           wreg	equ	0xFE8
  8665                           postdec1	equ	0xFE5
  8666                           fsr1l	equ	0xFE1
  8667                           indf2	equ	0xFDF
  8668                           postinc2	equ	0xFDE
  8669                           postdec2	equ	0xFDD
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           
  8674 ;; *************** function _computeRollPitch *****************
  8675 ;; Defined at:
  8676 ;;		line 14 in file "calculations.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;		None
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;  dt              3    0[BANK1 ] float 
  8681 ;;  tmr0val         2   24[BANK1 ] unsigned int 
  8682 ;; Return value:  Size  Location     Type
  8683 ;;                  1    wreg      void 
  8684 ;; Registers used:
  8685 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8692 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8694 ;;      Totals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8695 ;;Total ram usage:       26 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    9
  8698 ;; This function calls:
  8699 ;;		_TMR0_Read16bitTimer
  8700 ;;		_TMR0_StartTimer
  8701 ;;		_TMR0_StopTimer
  8702 ;;		_TMR0_Write16bitTimer
  8703 ;;		___ftadd
  8704 ;;		___ftmul
  8705 ;;		___ftneg
  8706 ;;		___ftsub
  8707 ;;		___lwtoft
  8708 ;;		_atan2
  8709 ;;		_fastatan2
  8710 ;; This function is called by:
  8711 ;;		_main
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text40
  8716  0023F0                     __ptext40:
  8717                           	opt stack 0
  8718  0023F0                     _computeRollPitch:
  8719                           	opt stack 21
  8720                           
  8721                           ;calculations.c: 16: TMR0_StopTimer();
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;incstack = 0
  8725  0023F0  EC52  F026         	call	_TMR0_StopTimer	;wreg free
  8726                           
  8727                           ;calculations.c: 17: uint16_t tmr0val = TMR0_Read16bitTimer();
  8728  0023F4  ECAF  F025         	call	_TMR0_Read16bitTimer	;wreg free
  8729  0023F8  C013  F1A5         	movff	?_TMR0_Read16bitTimer,computeRollPitch@tmr0val
  8730  0023FC  C014  F1A6         	movff	?_TMR0_Read16bitTimer+1,computeRollPitch@tmr0val+1
  8731                           
  8732                           ;calculations.c: 18: float dt = ((float)tmr0val) * .0000001666667;
  8733  002400  C1A5  F01B         	movff	computeRollPitch@tmr0val,___lwtoft@c
  8734  002404  C1A6  F01C         	movff	computeRollPitch@tmr0val+1,___lwtoft@c+1
  8735  002408  EC60  F025         	call	___lwtoft	;wreg free
  8736  00240C  C01B  F027         	movff	?___lwtoft,___ftmul@f1
  8737  002410  C01C  F028         	movff	?___lwtoft+1,___ftmul@f1+1
  8738  002414  C01D  F029         	movff	?___lwtoft+2,___ftmul@f1+2
  8739  002418  0EF5               	movlw	245
  8740  00241A  6E2A               	movwf	___ftmul@f2,c
  8741  00241C  0E32               	movlw	50
  8742  00241E  6E2B               	movwf	___ftmul@f2+1,c
  8743  002420  0E34               	movlw	52
  8744  002422  6E2C               	movwf	___ftmul@f2+2,c
  8745  002424  EC49  F01F         	call	___ftmul	;wreg free
  8746  002428  C027  F18D         	movff	?___ftmul,computeRollPitch@dt
  8747  00242C  C028  F18E         	movff	?___ftmul+1,computeRollPitch@dt+1
  8748  002430  C029  F18F         	movff	?___ftmul+2,computeRollPitch@dt+2
  8749                           
  8750                           ;calculations.c: 21: TMR0_Write16bitTimer(0);
  8751  002434  0E00               	movlw	0
  8752  002436  6E14               	movwf	TMR0_Write16bitTimer@timerVal+1,c
  8753  002438  0E00               	movlw	0
  8754  00243A  6E13               	movwf	TMR0_Write16bitTimer@timerVal,c
  8755  00243C  EC42  F026         	call	_TMR0_Write16bitTimer	;wreg free
  8756                           
  8757                           ;calculations.c: 22: TMR0_StartTimer();
  8758  002440  EC56  F026         	call	_TMR0_StartTimer	;wreg free
  8759                           
  8760                           ;calculations.c: 25: rollAcc = rollAcc * (accelAlpha) + fastatan2(-ay, az)*(1-accelAlpha
      +                          );
  8761  002444  C0C5  F036         	movff	_ay,___ftneg@f1
  8762  002448  C0C6  F037         	movff	_ay+1,___ftneg@f1+1
  8763  00244C  C0C7  F038         	movff	_ay+2,___ftneg@f1+2
  8764  002450  EC4E  F025         	call	___ftneg	;wreg free
  8765  002454  C036  F190         	movff	?___ftneg,_computeRollPitch$2927
  8766  002458  C037  F191         	movff	?___ftneg+1,_computeRollPitch$2927+1
  8767  00245C  C038  F192         	movff	?___ftneg+2,_computeRollPitch$2927+2
  8768                           
  8769                           ;calculations.c: 25: rollAcc = rollAcc * (accelAlpha) + fastatan2(-ay, az)*(1-accelAlpha
      +                          );
  8770  002460  C0C2  F085         	movff	_az,fastatan2@y
  8771  002464  C0C3  F086         	movff	_az+1,fastatan2@y+1
  8772  002468  C0C4  F087         	movff	_az+2,fastatan2@y+2
  8773  00246C  C190  F082         	movff	_computeRollPitch$2927,fastatan2@x
  8774  002470  C191  F083         	movff	_computeRollPitch$2927+1,fastatan2@x+1
  8775  002474  C192  F084         	movff	_computeRollPitch$2927+2,fastatan2@x+2
  8776  002478  EC56  F010         	call	_fastatan2	;wreg free
  8777  00247C  C082  F193         	movff	?_fastatan2,_computeRollPitch$2928
  8778  002480  C083  F194         	movff	?_fastatan2+1,_computeRollPitch$2928+1
  8779  002484  C084  F195         	movff	?_fastatan2+2,_computeRollPitch$2928+2
  8780                           
  8781                           ;calculations.c: 25: rollAcc = rollAcc * (accelAlpha) + fastatan2(-ay, az)*(1-accelAlpha
      +                          );
  8782  002488  C193  F02A         	movff	_computeRollPitch$2928,___ftmul@f2
  8783  00248C  C194  F02B         	movff	_computeRollPitch$2928+1,___ftmul@f2+1
  8784  002490  C195  F02C         	movff	_computeRollPitch$2928+2,___ftmul@f2+2
  8785  002494  0E00               	movlw	0
  8786  002496  0100               	movlb	0	; () banked
  8787  002498  6F6A               	movwf	___ftadd@f2& (0+255),b
  8788  00249A  0E80               	movlw	128
  8789  00249C  0100               	movlb	0	; () banked
  8790  00249E  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  8791  0024A0  0E3F               	movlw	63
  8792  0024A2  0100               	movlb	0	; () banked
  8793  0024A4  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  8794  0024A6  C0F7  F036         	movff	_accelAlpha,___ftneg@f1
  8795  0024AA  C0F8  F037         	movff	_accelAlpha+1,___ftneg@f1+1
  8796  0024AE  C0F9  F038         	movff	_accelAlpha+2,___ftneg@f1+2
  8797  0024B2  EC4E  F025         	call	___ftneg	;wreg free
  8798  0024B6  C036  F067         	movff	?___ftneg,___ftadd@f1
  8799  0024BA  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  8800  0024BE  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  8801  0024C2  EC03  F016         	call	___ftadd	;wreg free
  8802  0024C6  C067  F027         	movff	?___ftadd,___ftmul@f1
  8803  0024CA  C068  F028         	movff	?___ftadd+1,___ftmul@f1+1
  8804  0024CE  C069  F029         	movff	?___ftadd+2,___ftmul@f1+2
  8805  0024D2  EC49  F01F         	call	___ftmul	;wreg free
  8806  0024D6  C027  F196         	movff	?___ftmul,_computeRollPitch$2929
  8807  0024DA  C028  F197         	movff	?___ftmul+1,_computeRollPitch$2929+1
  8808  0024DE  C029  F198         	movff	?___ftmul+2,_computeRollPitch$2929+2
  8809                           
  8810                           ;calculations.c: 25: rollAcc = rollAcc * (accelAlpha) + fastatan2(-ay, az)*(1-accelAlpha
      +                          );
  8811  0024E2  C0F7  F02A         	movff	_accelAlpha,___ftmul@f2
  8812  0024E6  C0F8  F02B         	movff	_accelAlpha+1,___ftmul@f2+1
  8813  0024EA  C0F9  F02C         	movff	_accelAlpha+2,___ftmul@f2+2
  8814  0024EE  C0B3  F027         	movff	_rollAcc,___ftmul@f1
  8815  0024F2  C0B4  F028         	movff	_rollAcc+1,___ftmul@f1+1
  8816  0024F6  C0B5  F029         	movff	_rollAcc+2,___ftmul@f1+2
  8817  0024FA  EC49  F01F         	call	___ftmul	;wreg free
  8818  0024FE  C027  F067         	movff	?___ftmul,___ftadd@f1
  8819  002502  C028  F068         	movff	?___ftmul+1,___ftadd@f1+1
  8820  002506  C029  F069         	movff	?___ftmul+2,___ftadd@f1+2
  8821  00250A  C196  F06A         	movff	_computeRollPitch$2929,___ftadd@f2
  8822  00250E  C197  F06B         	movff	_computeRollPitch$2929+1,___ftadd@f2+1
  8823  002512  C198  F06C         	movff	_computeRollPitch$2929+2,___ftadd@f2+2
  8824  002516  EC03  F016         	call	___ftadd	;wreg free
  8825  00251A  C067  F0B3         	movff	?___ftadd,_rollAcc
  8826  00251E  C068  F0B4         	movff	?___ftadd+1,_rollAcc+1
  8827  002522  C069  F0B5         	movff	?___ftadd+2,_rollAcc+2
  8828                           
  8829                           ;calculations.c: 26: roll -= (gx*.0175) * dt;
  8830  002526  C18D  F02A         	movff	computeRollPitch@dt,___ftmul@f2
  8831  00252A  C18E  F02B         	movff	computeRollPitch@dt+1,___ftmul@f2+1
  8832  00252E  C18F  F02C         	movff	computeRollPitch@dt+2,___ftmul@f2+2
  8833  002532  C0BF  F027         	movff	_gx,___ftmul@f1
  8834  002536  C0C0  F028         	movff	_gx+1,___ftmul@f1+1
  8835  00253A  C0C1  F029         	movff	_gx+2,___ftmul@f1+2
  8836  00253E  EC49  F01F         	call	___ftmul	;wreg free
  8837  002542  C027  F199         	movff	?___ftmul,_computeRollPitch$2930
  8838  002546  C028  F19A         	movff	?___ftmul+1,_computeRollPitch$2930+1
  8839  00254A  C029  F19B         	movff	?___ftmul+2,_computeRollPitch$2930+2
  8840                           
  8841                           ;calculations.c: 26: roll -= (gx*.0175) * dt;
  8842  00254E  C0B6  F073         	movff	_roll,___ftsub@f1
  8843  002552  C0B7  F074         	movff	_roll+1,___ftsub@f1+1
  8844  002556  C0B8  F075         	movff	_roll+2,___ftsub@f1+2
  8845  00255A  0E5C               	movlw	92
  8846  00255C  6E2A               	movwf	___ftmul@f2,c
  8847  00255E  0E8F               	movlw	143
  8848  002560  6E2B               	movwf	___ftmul@f2+1,c
  8849  002562  0E3C               	movlw	60
  8850  002564  6E2C               	movwf	___ftmul@f2+2,c
  8851  002566  C199  F027         	movff	_computeRollPitch$2930,___ftmul@f1
  8852  00256A  C19A  F028         	movff	_computeRollPitch$2930+1,___ftmul@f1+1
  8853  00256E  C19B  F029         	movff	_computeRollPitch$2930+2,___ftmul@f1+2
  8854  002572  EC49  F01F         	call	___ftmul	;wreg free
  8855  002576  C027  F076         	movff	?___ftmul,___ftsub@f2
  8856  00257A  C028  F077         	movff	?___ftmul+1,___ftsub@f2+1
  8857  00257E  C029  F078         	movff	?___ftmul+2,___ftsub@f2+2
  8858  002582  EC99  F023         	call	___ftsub	;wreg free
  8859  002586  C073  F0B6         	movff	?___ftsub,_roll
  8860  00258A  C074  F0B7         	movff	?___ftsub+1,_roll+1
  8861  00258E  C075  F0B8         	movff	?___ftsub+2,_roll+2
  8862                           
  8863                           ;calculations.c: 29: pitchAcc = atan2(-ay, az)*(1-accelAlpha);
  8864  002592  C0C5  F036         	movff	_ay,___ftneg@f1
  8865  002596  C0C6  F037         	movff	_ay+1,___ftneg@f1+1
  8866  00259A  C0C7  F038         	movff	_ay+2,___ftneg@f1+2
  8867  00259E  EC4E  F025         	call	___ftneg	;wreg free
  8868  0025A2  C036  F19C         	movff	?___ftneg,_computeRollPitch$2931
  8869  0025A6  C037  F19D         	movff	?___ftneg+1,_computeRollPitch$2931+1
  8870  0025AA  C038  F19E         	movff	?___ftneg+2,_computeRollPitch$2931+2
  8871                           
  8872                           ;calculations.c: 29: pitchAcc = atan2(-ay, az)*(1-accelAlpha);
  8873  0025AE  C0C2  F095         	movff	_az,atan2@x
  8874  0025B2  C0C3  F096         	movff	_az+1,atan2@x+1
  8875  0025B6  C0C4  F097         	movff	_az+2,atan2@x+2
  8876  0025BA  C19C  F092         	movff	_computeRollPitch$2931,atan2@y
  8877  0025BE  C19D  F093         	movff	_computeRollPitch$2931+1,atan2@y+1
  8878  0025C2  C19E  F094         	movff	_computeRollPitch$2931+2,atan2@y+2
  8879  0025C6  EC6F  F013         	call	_atan2	;wreg free
  8880  0025CA  C092  F19F         	movff	?_atan2,_computeRollPitch$2932
  8881  0025CE  C093  F1A0         	movff	?_atan2+1,_computeRollPitch$2932+1
  8882  0025D2  C094  F1A1         	movff	?_atan2+2,_computeRollPitch$2932+2
  8883                           
  8884                           ;calculations.c: 29: pitchAcc = atan2(-ay, az)*(1-accelAlpha);
  8885  0025D6  0E00               	movlw	0
  8886  0025D8  0100               	movlb	0	; () banked
  8887  0025DA  6F6A               	movwf	___ftadd@f2& (0+255),b
  8888  0025DC  0E80               	movlw	128
  8889  0025DE  0100               	movlb	0	; () banked
  8890  0025E0  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  8891  0025E2  0E3F               	movlw	63
  8892  0025E4  0100               	movlb	0	; () banked
  8893  0025E6  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  8894  0025E8  C0F7  F036         	movff	_accelAlpha,___ftneg@f1
  8895  0025EC  C0F8  F037         	movff	_accelAlpha+1,___ftneg@f1+1
  8896  0025F0  C0F9  F038         	movff	_accelAlpha+2,___ftneg@f1+2
  8897  0025F4  EC4E  F025         	call	___ftneg	;wreg free
  8898  0025F8  C036  F067         	movff	?___ftneg,___ftadd@f1
  8899  0025FC  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  8900  002600  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  8901  002604  EC03  F016         	call	___ftadd	;wreg free
  8902  002608  C067  F027         	movff	?___ftadd,___ftmul@f1
  8903  00260C  C068  F028         	movff	?___ftadd+1,___ftmul@f1+1
  8904  002610  C069  F029         	movff	?___ftadd+2,___ftmul@f1+2
  8905  002614  C19F  F02A         	movff	_computeRollPitch$2932,___ftmul@f2
  8906  002618  C1A0  F02B         	movff	_computeRollPitch$2932+1,___ftmul@f2+1
  8907  00261C  C1A1  F02C         	movff	_computeRollPitch$2932+2,___ftmul@f2+2
  8908  002620  EC49  F01F         	call	___ftmul	;wreg free
  8909  002624  C027  F100         	movff	?___ftmul,_pitchAcc
  8910  002628  C028  F101         	movff	?___ftmul+1,_pitchAcc+1
  8911  00262C  C029  F102         	movff	?___ftmul+2,_pitchAcc+2
  8912                           
  8913                           ;calculations.c: 31: if (accCounter >= 10) {
  8914  002630  0E09               	movlw	9
  8915  002632  0100               	movlb	0	; () banked
  8916  002634  65EC               	cpfsgt	_accCounter& (0+255),b
  8917  002636  0012               	return	
  8918                           
  8919                           ; BSR set to: 0
  8920                           ;calculations.c: 32: accCounter = 0;
  8921  002638  0E00               	movlw	0
  8922  00263A  0100               	movlb	0	; () banked
  8923  00263C  6FEC               	movwf	_accCounter& (0+255),b
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;calculations.c: 33: roll = roll*gyroAlpha + rollAcc*(1-gyroAlpha);
  8927  00263E  C0B3  F02A         	movff	_rollAcc,___ftmul@f2
  8928  002642  C0B4  F02B         	movff	_rollAcc+1,___ftmul@f2+1
  8929  002646  C0B5  F02C         	movff	_rollAcc+2,___ftmul@f2+2
  8930  00264A  0E00               	movlw	0
  8931  00264C  0100               	movlb	0	; () banked
  8932  00264E  6F6A               	movwf	___ftadd@f2& (0+255),b
  8933  002650  0E80               	movlw	128
  8934  002652  0100               	movlb	0	; () banked
  8935  002654  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  8936  002656  0E3F               	movlw	63
  8937  002658  0100               	movlb	0	; () banked
  8938  00265A  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  8939  00265C  C0F4  F036         	movff	_gyroAlpha,___ftneg@f1
  8940  002660  C0F5  F037         	movff	_gyroAlpha+1,___ftneg@f1+1
  8941  002664  C0F6  F038         	movff	_gyroAlpha+2,___ftneg@f1+2
  8942  002668  EC4E  F025         	call	___ftneg	;wreg free
  8943  00266C  C036  F067         	movff	?___ftneg,___ftadd@f1
  8944  002670  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  8945  002674  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  8946  002678  EC03  F016         	call	___ftadd	;wreg free
  8947  00267C  C067  F027         	movff	?___ftadd,___ftmul@f1
  8948  002680  C068  F028         	movff	?___ftadd+1,___ftmul@f1+1
  8949  002684  C069  F029         	movff	?___ftadd+2,___ftmul@f1+2
  8950  002688  EC49  F01F         	call	___ftmul	;wreg free
  8951  00268C  C027  F1A2         	movff	?___ftmul,_computeRollPitch$2933
  8952  002690  C028  F1A3         	movff	?___ftmul+1,_computeRollPitch$2933+1
  8953  002694  C029  F1A4         	movff	?___ftmul+2,_computeRollPitch$2933+2
  8954                           
  8955                           ;calculations.c: 33: roll = roll*gyroAlpha + rollAcc*(1-gyroAlpha);
  8956  002698  C0F4  F02A         	movff	_gyroAlpha,___ftmul@f2
  8957  00269C  C0F5  F02B         	movff	_gyroAlpha+1,___ftmul@f2+1
  8958  0026A0  C0F6  F02C         	movff	_gyroAlpha+2,___ftmul@f2+2
  8959  0026A4  C0B6  F027         	movff	_roll,___ftmul@f1
  8960  0026A8  C0B7  F028         	movff	_roll+1,___ftmul@f1+1
  8961  0026AC  C0B8  F029         	movff	_roll+2,___ftmul@f1+2
  8962  0026B0  EC49  F01F         	call	___ftmul	;wreg free
  8963  0026B4  C027  F067         	movff	?___ftmul,___ftadd@f1
  8964  0026B8  C028  F068         	movff	?___ftmul+1,___ftadd@f1+1
  8965  0026BC  C029  F069         	movff	?___ftmul+2,___ftadd@f1+2
  8966  0026C0  C1A2  F06A         	movff	_computeRollPitch$2933,___ftadd@f2
  8967  0026C4  C1A3  F06B         	movff	_computeRollPitch$2933+1,___ftadd@f2+1
  8968  0026C8  C1A4  F06C         	movff	_computeRollPitch$2933+2,___ftadd@f2+2
  8969  0026CC  EC03  F016         	call	___ftadd	;wreg free
  8970  0026D0  C067  F0B6         	movff	?___ftadd,_roll
  8971  0026D4  C068  F0B7         	movff	?___ftadd+1,_roll+1
  8972  0026D8  C069  F0B8         	movff	?___ftadd+2,_roll+2
  8973  0026DC  0012               	return	
  8974  0026DE                     __end_of_computeRollPitch:
  8975                           	opt stack 0
  8976                           tblptru	equ	0xFF8
  8977                           tblptrh	equ	0xFF7
  8978                           tblptrl	equ	0xFF6
  8979                           tablat	equ	0xFF5
  8980                           prodh	equ	0xFF4
  8981                           prodl	equ	0xFF3
  8982                           intcon	equ	0xFF2
  8983                           postinc0	equ	0xFEE
  8984                           wreg	equ	0xFE8
  8985                           postdec1	equ	0xFE5
  8986                           fsr1l	equ	0xFE1
  8987                           indf2	equ	0xFDF
  8988                           postinc2	equ	0xFDE
  8989                           postdec2	equ	0xFDD
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8
  8993                           
  8994 ;; *************** function _fastatan2 *****************
  8995 ;; Defined at:
  8996 ;;		line 37 in file "calculations.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  x               3   34[BANK0 ] float 
  8999 ;;  y               3   37[BANK0 ] float 
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;  r               3   55[BANK0 ] float 
  9002 ;;  a               3   52[BANK0 ] float 
  9003 ;;  s               3   49[BANK0 ] float 
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  3   34[BANK0 ] float 
  9006 ;; Registers used:
  9007 ;;		wreg, status,2, status,0, cstack
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9013 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9014 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9016 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9017 ;;Total ram usage:       24 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    6
  9020 ;; This function calls:
  9021 ;;		___ftadd
  9022 ;;		___ftdiv
  9023 ;;		___ftge
  9024 ;;		___ftmul
  9025 ;;		___ftneg
  9026 ;;		_fabs
  9027 ;;		_maximum
  9028 ;;		_minimum
  9029 ;; This function is called by:
  9030 ;;		_computeRollPitch
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           	psect	text41
  9035  0020AC                     __ptext41:
  9036                           	opt stack 0
  9037  0020AC                     _fastatan2:
  9038                           	opt stack 23
  9039                           
  9040                           ;calculations.c: 38: float a;
  9041                           ;calculations.c: 39: float s;
  9042                           ;calculations.c: 40: float r;
  9043                           ;calculations.c: 42: a = minimum( fabs(x), fabs(y) ) / maximum( fabs(x), fabs(y) );
  9044                           
  9045                           ;incstack = 0
  9046  0020AC  C085  F060         	movff	fastatan2@y,fabs@d
  9047  0020B0  C086  F061         	movff	fastatan2@y+1,fabs@d+1
  9048  0020B4  C087  F062         	movff	fastatan2@y+2,fabs@d+2
  9049  0020B8  EC6C  F024         	call	_fabs	;wreg free
  9050  0020BC  C060  F06F         	movff	?_fabs,minimum@y
  9051  0020C0  C061  F070         	movff	?_fabs+1,minimum@y+1
  9052  0020C4  C062  F071         	movff	?_fabs+2,minimum@y+2
  9053  0020C8  C082  F060         	movff	fastatan2@x,fabs@d
  9054  0020CC  C083  F061         	movff	fastatan2@x+1,fabs@d+1
  9055  0020D0  C084  F062         	movff	fastatan2@x+2,fabs@d+2
  9056  0020D4  EC6C  F024         	call	_fabs	;wreg free
  9057  0020D8  C060  F06C         	movff	?_fabs,minimum@x
  9058  0020DC  C061  F06D         	movff	?_fabs+1,minimum@x+1
  9059  0020E0  C062  F06E         	movff	?_fabs+2,minimum@x+2
  9060  0020E4  ECBF  F023         	call	_minimum	;wreg free
  9061  0020E8  C06C  F073         	movff	?_minimum,___ftdiv@f1
  9062  0020EC  C06D  F074         	movff	?_minimum+1,___ftdiv@f1+1
  9063  0020F0  C06E  F075         	movff	?_minimum+2,___ftdiv@f1+2
  9064  0020F4  C085  F060         	movff	fastatan2@y,fabs@d
  9065  0020F8  C086  F061         	movff	fastatan2@y+1,fabs@d+1
  9066  0020FC  C087  F062         	movff	fastatan2@y+2,fabs@d+2
  9067  002100  EC6C  F024         	call	_fabs	;wreg free
  9068  002104  C060  F06F         	movff	?_fabs,maximum@y
  9069  002108  C061  F070         	movff	?_fabs+1,maximum@y+1
  9070  00210C  C062  F071         	movff	?_fabs+2,maximum@y+2
  9071  002110  C082  F060         	movff	fastatan2@x,fabs@d
  9072  002114  C083  F061         	movff	fastatan2@x+1,fabs@d+1
  9073  002118  C084  F062         	movff	fastatan2@x+2,fabs@d+2
  9074  00211C  EC6C  F024         	call	_fabs	;wreg free
  9075  002120  C060  F06C         	movff	?_fabs,maximum@x
  9076  002124  C061  F06D         	movff	?_fabs+1,maximum@x+1
  9077  002128  C062  F06E         	movff	?_fabs+2,maximum@x+2
  9078  00212C  ECDE  F023         	call	_maximum	;wreg free
  9079  002130  C06C  F076         	movff	?_maximum,___ftdiv@f2
  9080  002134  C06D  F077         	movff	?_maximum+1,___ftdiv@f2+1
  9081  002138  C06E  F078         	movff	?_maximum+2,___ftdiv@f2+2
  9082  00213C  ECAB  F01A         	call	___ftdiv	;wreg free
  9083  002140  C073  F094         	movff	?___ftdiv,fastatan2@a
  9084  002144  C074  F095         	movff	?___ftdiv+1,fastatan2@a+1
  9085  002148  C075  F096         	movff	?___ftdiv+2,fastatan2@a+2
  9086                           
  9087                           ;calculations.c: 43: s = a*a;
  9088  00214C  C094  F027         	movff	fastatan2@a,___ftmul@f1
  9089  002150  C095  F028         	movff	fastatan2@a+1,___ftmul@f1+1
  9090  002154  C096  F029         	movff	fastatan2@a+2,___ftmul@f1+2
  9091  002158  C094  F02A         	movff	fastatan2@a,___ftmul@f2
  9092  00215C  C095  F02B         	movff	fastatan2@a+1,___ftmul@f2+1
  9093  002160  C096  F02C         	movff	fastatan2@a+2,___ftmul@f2+2
  9094  002164  EC49  F01F         	call	___ftmul	;wreg free
  9095  002168  C027  F091         	movff	?___ftmul,fastatan2@s
  9096  00216C  C028  F092         	movff	?___ftmul+1,fastatan2@s+1
  9097  002170  C029  F093         	movff	?___ftmul+2,fastatan2@s+2
  9098                           
  9099                           ;calculations.c: 44: r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + 
      +                          a;
  9100  002174  0E23               	movlw	35
  9101  002176  0100               	movlb	0	; () banked
  9102  002178  6F6A               	movwf	___ftadd@f2& (0+255),b
  9103  00217A  0E23               	movlw	35
  9104  00217C  0100               	movlb	0	; () banked
  9105  00217E  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  9106  002180  0E3E               	movlw	62
  9107  002182  0100               	movlb	0	; () banked
  9108  002184  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  9109  002186  0E73               	movlw	115
  9110  002188  6E2A               	movwf	___ftmul@f2,c
  9111  00218A  0E3E               	movlw	62
  9112  00218C  6E2B               	movwf	___ftmul@f2+1,c
  9113  00218E  0EBD               	movlw	189
  9114  002190  6E2C               	movwf	___ftmul@f2+2,c
  9115  002192  C091  F027         	movff	fastatan2@s,___ftmul@f1
  9116  002196  C092  F028         	movff	fastatan2@s+1,___ftmul@f1+1
  9117  00219A  C093  F029         	movff	fastatan2@s+2,___ftmul@f1+2
  9118  00219E  EC49  F01F         	call	___ftmul	;wreg free
  9119  0021A2  C027  F067         	movff	?___ftmul,___ftadd@f1
  9120  0021A6  C028  F068         	movff	?___ftmul+1,___ftadd@f1+1
  9121  0021AA  C029  F069         	movff	?___ftmul+2,___ftadd@f1+2
  9122  0021AE  EC03  F016         	call	___ftadd	;wreg free
  9123  0021B2  C067  F088         	movff	?___ftadd,_fastatan2$2934
  9124  0021B6  C068  F089         	movff	?___ftadd+1,_fastatan2$2934+1
  9125  0021BA  C069  F08A         	movff	?___ftadd+2,_fastatan2$2934+2
  9126                           
  9127                           ;calculations.c: 44: r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + 
      +                          a;
  9128  0021BE  0EBE               	movlw	190
  9129  0021C0  0100               	movlb	0	; () banked
  9130  0021C2  6F6A               	movwf	___ftadd@f2& (0+255),b
  9131  0021C4  0EA7               	movlw	167
  9132  0021C6  0100               	movlb	0	; () banked
  9133  0021C8  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  9134  0021CA  0EBE               	movlw	190
  9135  0021CC  0100               	movlb	0	; () banked
  9136  0021CE  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  9137  0021D0  C091  F02A         	movff	fastatan2@s,___ftmul@f2
  9138  0021D4  C092  F02B         	movff	fastatan2@s+1,___ftmul@f2+1
  9139  0021D8  C093  F02C         	movff	fastatan2@s+2,___ftmul@f2+2
  9140  0021DC  C088  F027         	movff	_fastatan2$2934,___ftmul@f1
  9141  0021E0  C089  F028         	movff	_fastatan2$2934+1,___ftmul@f1+1
  9142  0021E4  C08A  F029         	movff	_fastatan2$2934+2,___ftmul@f1+2
  9143  0021E8  EC49  F01F         	call	___ftmul	;wreg free
  9144  0021EC  C027  F067         	movff	?___ftmul,___ftadd@f1
  9145  0021F0  C028  F068         	movff	?___ftmul+1,___ftadd@f1+1
  9146  0021F4  C029  F069         	movff	?___ftmul+2,___ftadd@f1+2
  9147  0021F8  EC03  F016         	call	___ftadd	;wreg free
  9148  0021FC  C067  F08B         	movff	?___ftadd,_fastatan2$2935
  9149  002200  C068  F08C         	movff	?___ftadd+1,_fastatan2$2935+1
  9150  002204  C069  F08D         	movff	?___ftadd+2,_fastatan2$2935+2
  9151                           
  9152                           ;calculations.c: 44: r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + 
      +                          a;
  9153  002208  C091  F02A         	movff	fastatan2@s,___ftmul@f2
  9154  00220C  C092  F02B         	movff	fastatan2@s+1,___ftmul@f2+1
  9155  002210  C093  F02C         	movff	fastatan2@s+2,___ftmul@f2+2
  9156  002214  C08B  F027         	movff	_fastatan2$2935,___ftmul@f1
  9157  002218  C08C  F028         	movff	_fastatan2$2935+1,___ftmul@f1+1
  9158  00221C  C08D  F029         	movff	_fastatan2$2935+2,___ftmul@f1+2
  9159  002220  EC49  F01F         	call	___ftmul	;wreg free
  9160  002224  C027  F08E         	movff	?___ftmul,_fastatan2$2936
  9161  002228  C028  F08F         	movff	?___ftmul+1,_fastatan2$2936+1
  9162  00222C  C029  F090         	movff	?___ftmul+2,_fastatan2$2936+2
  9163                           
  9164                           ;calculations.c: 44: r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + 
      +                          a;
  9165  002230  C094  F02A         	movff	fastatan2@a,___ftmul@f2
  9166  002234  C095  F02B         	movff	fastatan2@a+1,___ftmul@f2+1
  9167  002238  C096  F02C         	movff	fastatan2@a+2,___ftmul@f2+2
  9168  00223C  C08E  F027         	movff	_fastatan2$2936,___ftmul@f1
  9169  002240  C08F  F028         	movff	_fastatan2$2936+1,___ftmul@f1+1
  9170  002244  C090  F029         	movff	_fastatan2$2936+2,___ftmul@f1+2
  9171  002248  EC49  F01F         	call	___ftmul	;wreg free
  9172  00224C  C027  F067         	movff	?___ftmul,___ftadd@f1
  9173  002250  C028  F068         	movff	?___ftmul+1,___ftadd@f1+1
  9174  002254  C029  F069         	movff	?___ftmul+2,___ftadd@f1+2
  9175  002258  C094  F06A         	movff	fastatan2@a,___ftadd@f2
  9176  00225C  C095  F06B         	movff	fastatan2@a+1,___ftadd@f2+1
  9177  002260  C096  F06C         	movff	fastatan2@a+2,___ftadd@f2+2
  9178  002264  EC03  F016         	call	___ftadd	;wreg free
  9179  002268  C067  F097         	movff	?___ftadd,fastatan2@r
  9180  00226C  C068  F098         	movff	?___ftadd+1,fastatan2@r+1
  9181  002270  C069  F099         	movff	?___ftadd+2,fastatan2@r+2
  9182                           
  9183                           ;calculations.c: 46: if ( fabs(y) > fabs(x) ) {
  9184  002274  C082  F060         	movff	fastatan2@x,fabs@d
  9185  002278  C083  F061         	movff	fastatan2@x+1,fabs@d+1
  9186  00227C  C084  F062         	movff	fastatan2@x+2,fabs@d+2
  9187  002280  EC6C  F024         	call	_fabs	;wreg free
  9188  002284  C060  F063         	movff	?_fabs,___ftge@ff1
  9189  002288  C061  F064         	movff	?_fabs+1,___ftge@ff1+1
  9190  00228C  C062  F065         	movff	?_fabs+2,___ftge@ff1+2
  9191  002290  C085  F060         	movff	fastatan2@y,fabs@d
  9192  002294  C086  F061         	movff	fastatan2@y+1,fabs@d+1
  9193  002298  C087  F062         	movff	fastatan2@y+2,fabs@d+2
  9194  00229C  EC6C  F024         	call	_fabs	;wreg free
  9195  0022A0  C060  F066         	movff	?_fabs,___ftge@ff2
  9196  0022A4  C061  F067         	movff	?_fabs+1,___ftge@ff2+1
  9197  0022A8  C062  F068         	movff	?_fabs+2,___ftge@ff2+2
  9198  0022AC  ECB0  F020         	call	___ftge	;wreg free
  9199  0022B0  0100               	movlb	0	; () banked
  9200  0022B2  B0D8               	btfsc	status,0,c
  9201  0022B4  D01F               	goto	l5777
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;calculations.c: 47: r = 1.57079637 - r;
  9205  0022B6  C097  F036         	movff	fastatan2@r,___ftneg@f1
  9206  0022BA  C098  F037         	movff	fastatan2@r+1,___ftneg@f1+1
  9207  0022BE  C099  F038         	movff	fastatan2@r+2,___ftneg@f1+2
  9208  0022C2  EC4E  F025         	call	___ftneg	;wreg free
  9209  0022C6  C036  F067         	movff	?___ftneg,___ftadd@f1
  9210  0022CA  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  9211  0022CE  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  9212  0022D2  0E10               	movlw	16
  9213  0022D4  0100               	movlb	0	; () banked
  9214  0022D6  6F6A               	movwf	___ftadd@f2& (0+255),b
  9215  0022D8  0EC9               	movlw	201
  9216  0022DA  0100               	movlb	0	; () banked
  9217  0022DC  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  9218  0022DE  0E3F               	movlw	63
  9219  0022E0  0100               	movlb	0	; () banked
  9220  0022E2  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  9221  0022E4  EC03  F016         	call	___ftadd	;wreg free
  9222  0022E8  C067  F097         	movff	?___ftadd,fastatan2@r
  9223  0022EC  C068  F098         	movff	?___ftadd+1,fastatan2@r+1
  9224  0022F0  C069  F099         	movff	?___ftadd+2,fastatan2@r+2
  9225  0022F4                     l5777:
  9226                           
  9227                           ;calculations.c: 48: }
  9228                           ;calculations.c: 49: if ( x < 0 ) {
  9229  0022F4  0100               	movlb	0	; () banked
  9230  0022F6  AF84               	btfss	(fastatan2@x+2)& (0+255),7,b
  9231  0022F8  D01F               	goto	l5781
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;calculations.c: 50: r = 3.14159274 - r;
  9235  0022FA  C097  F036         	movff	fastatan2@r,___ftneg@f1
  9236  0022FE  C098  F037         	movff	fastatan2@r+1,___ftneg@f1+1
  9237  002302  C099  F038         	movff	fastatan2@r+2,___ftneg@f1+2
  9238  002306  EC4E  F025         	call	___ftneg	;wreg free
  9239  00230A  C036  F067         	movff	?___ftneg,___ftadd@f1
  9240  00230E  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  9241  002312  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  9242  002316  0E10               	movlw	16
  9243  002318  0100               	movlb	0	; () banked
  9244  00231A  6F6A               	movwf	___ftadd@f2& (0+255),b
  9245  00231C  0E49               	movlw	73
  9246  00231E  0100               	movlb	0	; () banked
  9247  002320  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  9248  002322  0E40               	movlw	64
  9249  002324  0100               	movlb	0	; () banked
  9250  002326  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  9251  002328  EC03  F016         	call	___ftadd	;wreg free
  9252  00232C  C067  F097         	movff	?___ftadd,fastatan2@r
  9253  002330  C068  F098         	movff	?___ftadd+1,fastatan2@r+1
  9254  002334  C069  F099         	movff	?___ftadd+2,fastatan2@r+2
  9255  002338                     l5781:
  9256                           
  9257                           ;calculations.c: 51: }
  9258                           ;calculations.c: 52: if ( y < 0 ) {
  9259  002338  0100               	movlb	0	; () banked
  9260  00233A  AF87               	btfss	(fastatan2@y+2)& (0+255),7,b
  9261  00233C  D00E               	goto	l832
  9262                           
  9263                           ; BSR set to: 0
  9264                           ;calculations.c: 53: r = -r;
  9265  00233E  C097  F036         	movff	fastatan2@r,___ftneg@f1
  9266  002342  C098  F037         	movff	fastatan2@r+1,___ftneg@f1+1
  9267  002346  C099  F038         	movff	fastatan2@r+2,___ftneg@f1+2
  9268  00234A  EC4E  F025         	call	___ftneg	;wreg free
  9269  00234E  C036  F097         	movff	?___ftneg,fastatan2@r
  9270  002352  C037  F098         	movff	?___ftneg+1,fastatan2@r+1
  9271  002356  C038  F099         	movff	?___ftneg+2,fastatan2@r+2
  9272  00235A                     l832:
  9273                           
  9274                           ;calculations.c: 54: }
  9275                           ;calculations.c: 56: r = (r * 180.0)/3.14159;
  9276  00235A  0E00               	movlw	0
  9277  00235C  6E2A               	movwf	___ftmul@f2,c
  9278  00235E  0E34               	movlw	52
  9279  002360  6E2B               	movwf	___ftmul@f2+1,c
  9280  002362  0E43               	movlw	67
  9281  002364  6E2C               	movwf	___ftmul@f2+2,c
  9282  002366  C097  F027         	movff	fastatan2@r,___ftmul@f1
  9283  00236A  C098  F028         	movff	fastatan2@r+1,___ftmul@f1+1
  9284  00236E  C099  F029         	movff	fastatan2@r+2,___ftmul@f1+2
  9285  002372  EC49  F01F         	call	___ftmul	;wreg free
  9286  002376  C027  F073         	movff	?___ftmul,___ftdiv@f1
  9287  00237A  C028  F074         	movff	?___ftmul+1,___ftdiv@f1+1
  9288  00237E  C029  F075         	movff	?___ftmul+2,___ftdiv@f1+2
  9289  002382  0E10               	movlw	16
  9290  002384  0100               	movlb	0	; () banked
  9291  002386  6F76               	movwf	___ftdiv@f2& (0+255),b
  9292  002388  0E49               	movlw	73
  9293  00238A  0100               	movlb	0	; () banked
  9294  00238C  6F77               	movwf	(___ftdiv@f2+1)& (0+255),b
  9295  00238E  0E40               	movlw	64
  9296  002390  0100               	movlb	0	; () banked
  9297  002392  6F78               	movwf	(___ftdiv@f2+2)& (0+255),b
  9298  002394  ECAB  F01A         	call	___ftdiv	;wreg free
  9299  002398  C073  F097         	movff	?___ftdiv,fastatan2@r
  9300  00239C  C074  F098         	movff	?___ftdiv+1,fastatan2@r+1
  9301  0023A0  C075  F099         	movff	?___ftdiv+2,fastatan2@r+2
  9302                           
  9303                           ;calculations.c: 57: r = -r + 90;
  9304  0023A4  C097  F036         	movff	fastatan2@r,___ftneg@f1
  9305  0023A8  C098  F037         	movff	fastatan2@r+1,___ftneg@f1+1
  9306  0023AC  C099  F038         	movff	fastatan2@r+2,___ftneg@f1+2
  9307  0023B0  EC4E  F025         	call	___ftneg	;wreg free
  9308  0023B4  C036  F067         	movff	?___ftneg,___ftadd@f1
  9309  0023B8  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
  9310  0023BC  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
  9311  0023C0  0E00               	movlw	0
  9312  0023C2  0100               	movlb	0	; () banked
  9313  0023C4  6F6A               	movwf	___ftadd@f2& (0+255),b
  9314  0023C6  0EB4               	movlw	180
  9315  0023C8  0100               	movlb	0	; () banked
  9316  0023CA  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  9317  0023CC  0E42               	movlw	66
  9318  0023CE  0100               	movlb	0	; () banked
  9319  0023D0  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  9320  0023D2  EC03  F016         	call	___ftadd	;wreg free
  9321  0023D6  C067  F097         	movff	?___ftadd,fastatan2@r
  9322  0023DA  C068  F098         	movff	?___ftadd+1,fastatan2@r+1
  9323  0023DE  C069  F099         	movff	?___ftadd+2,fastatan2@r+2
  9324                           
  9325                           ;calculations.c: 59: return r;
  9326  0023E2  C097  F082         	movff	fastatan2@r,?_fastatan2
  9327  0023E6  C098  F083         	movff	fastatan2@r+1,?_fastatan2+1
  9328  0023EA  C099  F084         	movff	fastatan2@r+2,?_fastatan2+2
  9329  0023EE  0012               	return	
  9330  0023F0                     __end_of_fastatan2:
  9331                           	opt stack 0
  9332                           tblptru	equ	0xFF8
  9333                           tblptrh	equ	0xFF7
  9334                           tblptrl	equ	0xFF6
  9335                           tablat	equ	0xFF5
  9336                           prodh	equ	0xFF4
  9337                           prodl	equ	0xFF3
  9338                           intcon	equ	0xFF2
  9339                           postinc0	equ	0xFEE
  9340                           wreg	equ	0xFE8
  9341                           postdec1	equ	0xFE5
  9342                           fsr1l	equ	0xFE1
  9343                           indf2	equ	0xFDF
  9344                           postinc2	equ	0xFDE
  9345                           postdec2	equ	0xFDD
  9346                           fsr2h	equ	0xFDA
  9347                           fsr2l	equ	0xFD9
  9348                           status	equ	0xFD8
  9349                           
  9350 ;; *************** function _minimum *****************
  9351 ;; Defined at:
  9352 ;;		line 70 in file "calculations.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;  x               3   12[BANK0 ] float 
  9355 ;;  y               3   15[BANK0 ] float 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;		None
  9358 ;; Return value:  Size  Location     Type
  9359 ;;                  3   12[BANK0 ] float 
  9360 ;; Registers used:
  9361 ;;		wreg, status,2, status,0, cstack
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9367 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9370 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9371 ;;Total ram usage:        6 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    5
  9374 ;; This function calls:
  9375 ;;		___ftge
  9376 ;; This function is called by:
  9377 ;;		_fastatan2
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           	psect	text42
  9382  00477E                     __ptext42:
  9383                           	opt stack 0
  9384  00477E                     _minimum:
  9385                           	opt stack 23
  9386                           
  9387                           ;calculations.c: 71: if ( x < y ) {
  9388                           
  9389                           ;incstack = 0
  9390  00477E  C06C  F063         	movff	minimum@x,___ftge@ff1
  9391  004782  C06D  F064         	movff	minimum@x+1,___ftge@ff1+1
  9392  004786  C06E  F065         	movff	minimum@x+2,___ftge@ff1+2
  9393  00478A  C06F  F066         	movff	minimum@y,___ftge@ff2
  9394  00478E  C070  F067         	movff	minimum@y+1,___ftge@ff2+1
  9395  004792  C071  F068         	movff	minimum@y+2,___ftge@ff2+2
  9396  004796  ECB0  F020         	call	___ftge	;wreg free
  9397  00479A  0100               	movlb	0	; () banked
  9398  00479C  B0D8               	btfsc	status,0,c
  9399  00479E  D007               	goto	l841
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;calculations.c: 72: return x;
  9403  0047A0  C06C  F06C         	movff	minimum@x,?_minimum
  9404  0047A4  C06D  F06D         	movff	minimum@x+1,?_minimum+1
  9405  0047A8  C06E  F06E         	movff	minimum@x+2,?_minimum+2
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;calculations.c: 73: } else {
  9409  0047AC  0012               	return	
  9410  0047AE                     l841:
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;calculations.c: 74: return y;
  9414  0047AE  C06F  F06C         	movff	minimum@y,?_minimum
  9415  0047B2  C070  F06D         	movff	minimum@y+1,?_minimum+1
  9416  0047B6  C071  F06E         	movff	minimum@y+2,?_minimum+2
  9417  0047BA  0012               	return	
  9418  0047BC                     __end_of_minimum:
  9419                           	opt stack 0
  9420                           tblptru	equ	0xFF8
  9421                           tblptrh	equ	0xFF7
  9422                           tblptrl	equ	0xFF6
  9423                           tablat	equ	0xFF5
  9424                           prodh	equ	0xFF4
  9425                           prodl	equ	0xFF3
  9426                           intcon	equ	0xFF2
  9427                           postinc0	equ	0xFEE
  9428                           wreg	equ	0xFE8
  9429                           postdec1	equ	0xFE5
  9430                           fsr1l	equ	0xFE1
  9431                           indf2	equ	0xFDF
  9432                           postinc2	equ	0xFDE
  9433                           postdec2	equ	0xFDD
  9434                           fsr2h	equ	0xFDA
  9435                           fsr2l	equ	0xFD9
  9436                           status	equ	0xFD8
  9437                           
  9438 ;; *************** function _maximum *****************
  9439 ;; Defined at:
  9440 ;;		line 62 in file "calculations.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;  x               3   12[BANK0 ] float 
  9443 ;;  y               3   15[BANK0 ] float 
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;		None
  9446 ;; Return value:  Size  Location     Type
  9447 ;;                  3   12[BANK0 ] float 
  9448 ;; Registers used:
  9449 ;;		wreg, status,2, status,0, cstack
  9450 ;; Tracked objects:
  9451 ;;		On entry : 0/0
  9452 ;;		On exit  : 0/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9455 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9458 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9459 ;;Total ram usage:        6 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:    5
  9462 ;; This function calls:
  9463 ;;		___ftge
  9464 ;; This function is called by:
  9465 ;;		_fastatan2
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           	psect	text43
  9470  0047BC                     __ptext43:
  9471                           	opt stack 0
  9472  0047BC                     _maximum:
  9473                           	opt stack 23
  9474                           
  9475                           ;calculations.c: 63: if ( x > y ) {
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;incstack = 0
  9479  0047BC  C06F  F063         	movff	maximum@y,___ftge@ff1
  9480  0047C0  C070  F064         	movff	maximum@y+1,___ftge@ff1+1
  9481  0047C4  C071  F065         	movff	maximum@y+2,___ftge@ff1+2
  9482  0047C8  C06C  F066         	movff	maximum@x,___ftge@ff2
  9483  0047CC  C06D  F067         	movff	maximum@x+1,___ftge@ff2+1
  9484  0047D0  C06E  F068         	movff	maximum@x+2,___ftge@ff2+2
  9485  0047D4  ECB0  F020         	call	___ftge	;wreg free
  9486  0047D8  0100               	movlb	0	; () banked
  9487  0047DA  B0D8               	btfsc	status,0,c
  9488  0047DC  D007               	goto	l836
  9489                           
  9490                           ; BSR set to: 0
  9491                           ;calculations.c: 64: return x;
  9492  0047DE  C06C  F06C         	movff	maximum@x,?_maximum
  9493  0047E2  C06D  F06D         	movff	maximum@x+1,?_maximum+1
  9494  0047E6  C06E  F06E         	movff	maximum@x+2,?_maximum+2
  9495                           
  9496                           ; BSR set to: 0
  9497                           ;calculations.c: 65: } else {
  9498  0047EA  0012               	return	
  9499  0047EC                     l836:
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;calculations.c: 66: return y;
  9503  0047EC  C06F  F06C         	movff	maximum@y,?_maximum
  9504  0047F0  C070  F06D         	movff	maximum@y+1,?_maximum+1
  9505  0047F4  C071  F06E         	movff	maximum@y+2,?_maximum+2
  9506  0047F8  0012               	return	
  9507  0047FA                     __end_of_maximum:
  9508                           	opt stack 0
  9509                           tblptru	equ	0xFF8
  9510                           tblptrh	equ	0xFF7
  9511                           tblptrl	equ	0xFF6
  9512                           tablat	equ	0xFF5
  9513                           prodh	equ	0xFF4
  9514                           prodl	equ	0xFF3
  9515                           intcon	equ	0xFF2
  9516                           postinc0	equ	0xFEE
  9517                           wreg	equ	0xFE8
  9518                           postdec1	equ	0xFE5
  9519                           fsr1l	equ	0xFE1
  9520                           indf2	equ	0xFDF
  9521                           postinc2	equ	0xFDE
  9522                           postdec2	equ	0xFDD
  9523                           fsr2h	equ	0xFDA
  9524                           fsr2l	equ	0xFD9
  9525                           status	equ	0xFD8
  9526                           
  9527 ;; *************** function _atan2 *****************
  9528 ;; Defined at:
  9529 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\atan2.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;  y               3   50[BANK0 ] float 
  9532 ;;  x               3   53[BANK0 ] float 
  9533 ;; Auto vars:     Size  Location     Type
  9534 ;;  v               3   62[BANK0 ] float 
  9535 ;; Return value:  Size  Location     Type
  9536 ;;                  3   50[BANK0 ] float 
  9537 ;; Registers used:
  9538 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9539 ;; Tracked objects:
  9540 ;;		On entry : 0/0
  9541 ;;		On exit  : 0/0
  9542 ;;		Unchanged: 0/0
  9543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9544 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9545 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9547 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9548 ;;Total ram usage:       15 bytes
  9549 ;; Hardware stack levels used:    1
  9550 ;; Hardware stack levels required when called:    8
  9551 ;; This function calls:
  9552 ;;		___ftadd
  9553 ;;		___ftdiv
  9554 ;;		___ftge
  9555 ;;		___ftneg
  9556 ;;		___ftsub
  9557 ;;		_atan
  9558 ;;		_fabs
  9559 ;; This function is called by:
  9560 ;;		_computeRollPitch
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           	psect	text44
  9565  0026DE                     __ptext44:
  9566                           	opt stack 0
  9567  0026DE                     _atan2:
  9568                           	opt stack 21
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;incstack = 0
  9572  0026DE  0100               	movlb	0	; () banked
  9573  0026E0  5195               	movf	atan2@x& (0+255),w,b
  9574  0026E2  0100               	movlb	0	; () banked
  9575  0026E4  1196               	iorwf	(atan2@x+1)& (0+255),w,b
  9576  0026E6  0100               	movlb	0	; () banked
  9577  0026E8  1197               	iorwf	(atan2@x+2)& (0+255),w,b
  9578  0026EA  A4D8               	btfss	status,2,c
  9579  0026EC  D03D               	goto	l5809
  9580                           
  9581                           ; BSR set to: 0
  9582  0026EE  0100               	movlb	0	; () banked
  9583  0026F0  5192               	movf	atan2@y& (0+255),w,b
  9584  0026F2  0100               	movlb	0	; () banked
  9585  0026F4  1193               	iorwf	(atan2@y+1)& (0+255),w,b
  9586  0026F6  0100               	movlb	0	; () banked
  9587  0026F8  1194               	iorwf	(atan2@y+2)& (0+255),w,b
  9588  0026FA  A4D8               	btfss	status,2,c
  9589  0026FC  D00F               	goto	l5797
  9590                           
  9591                           ; BSR set to: 0
  9592  0026FE  0E00               	movlw	0
  9593  002700  0100               	movlb	0	; () banked
  9594  002702  6FDB               	movwf	(_errno+1)& (0+255),b
  9595  002704  0E21               	movlw	33
  9596  002706  6FDA               	movwf	_errno& (0+255),b
  9597  002708  0E00               	movlw	0
  9598  00270A  0100               	movlb	0	; () banked
  9599  00270C  6F92               	movwf	?_atan2& (0+255),b
  9600  00270E  0E00               	movlw	0
  9601  002710  0100               	movlb	0	; () banked
  9602  002712  6F93               	movwf	(?_atan2+1)& (0+255),b
  9603  002714  0E00               	movlw	0
  9604  002716  0100               	movlb	0	; () banked
  9605  002718  6F94               	movwf	(?_atan2+2)& (0+255),b
  9606                           
  9607                           ; BSR set to: 0
  9608  00271A  0012               	return	
  9609  00271C                     l5797:
  9610                           
  9611                           ; BSR set to: 0
  9612  00271C  0E00               	movlw	0
  9613  00271E  0100               	movlb	0	; () banked
  9614  002720  6F63               	movwf	___ftge@ff1& (0+255),b
  9615  002722  0E00               	movlw	0
  9616  002724  0100               	movlb	0	; () banked
  9617  002726  6F64               	movwf	(___ftge@ff1+1)& (0+255),b
  9618  002728  0E00               	movlw	0
  9619  00272A  0100               	movlb	0	; () banked
  9620  00272C  6F65               	movwf	(___ftge@ff1+2)& (0+255),b
  9621  00272E  C092  F066         	movff	atan2@y,___ftge@ff2
  9622  002732  C093  F067         	movff	atan2@y+1,___ftge@ff2+1
  9623  002736  C094  F068         	movff	atan2@y+2,___ftge@ff2+2
  9624  00273A  ECB0  F020         	call	___ftge	;wreg free
  9625  00273E  0100               	movlb	0	; () banked
  9626  002740  B0D8               	btfsc	status,0,c
  9627  002742  D00A               	goto	l5805
  9628                           
  9629                           ; BSR set to: 0
  9630  002744  0E10               	movlw	16
  9631  002746  0100               	movlb	0	; () banked
  9632  002748  6F92               	movwf	?_atan2& (0+255),b
  9633  00274A  0EC9               	movlw	201
  9634  00274C  0100               	movlb	0	; () banked
  9635  00274E  6F93               	movwf	(?_atan2+1)& (0+255),b
  9636  002750  0E3F               	movlw	63
  9637  002752  0100               	movlb	0	; () banked
  9638  002754  6F94               	movwf	(?_atan2+2)& (0+255),b
  9639                           
  9640                           ; BSR set to: 0
  9641  002756  0012               	return	
  9642  002758                     l5805:
  9643                           
  9644                           ; BSR set to: 0
  9645  002758  0E10               	movlw	16
  9646  00275A  0100               	movlb	0	; () banked
  9647  00275C  6F92               	movwf	?_atan2& (0+255),b
  9648  00275E  0EC9               	movlw	201
  9649  002760  0100               	movlb	0	; () banked
  9650  002762  6F93               	movwf	(?_atan2+1)& (0+255),b
  9651  002764  0EBF               	movlw	191
  9652  002766  D7F5               	goto	L6
  9653  002768                     l5809:
  9654                           
  9655                           ; BSR set to: 0
  9656  002768  0100               	movlb	0	; () banked
  9657  00276A  5192               	movf	atan2@y& (0+255),w,b
  9658  00276C  0100               	movlb	0	; () banked
  9659  00276E  1193               	iorwf	(atan2@y+1)& (0+255),w,b
  9660  002770  0100               	movlb	0	; () banked
  9661  002772  1194               	iorwf	(atan2@y+2)& (0+255),w,b
  9662  002774  A4D8               	btfss	status,2,c
  9663  002776  D026               	goto	l5823
  9664                           
  9665                           ; BSR set to: 0
  9666  002778  0E00               	movlw	0
  9667  00277A  0100               	movlb	0	; () banked
  9668  00277C  6F63               	movwf	___ftge@ff1& (0+255),b
  9669  00277E  0E00               	movlw	0
  9670  002780  0100               	movlb	0	; () banked
  9671  002782  6F64               	movwf	(___ftge@ff1+1)& (0+255),b
  9672  002784  0E00               	movlw	0
  9673  002786  0100               	movlb	0	; () banked
  9674  002788  6F65               	movwf	(___ftge@ff1+2)& (0+255),b
  9675  00278A  C095  F066         	movff	atan2@x,___ftge@ff2
  9676  00278E  C096  F067         	movff	atan2@x+1,___ftge@ff2+1
  9677  002792  C097  F068         	movff	atan2@x+2,___ftge@ff2+2
  9678  002796  ECB0  F020         	call	___ftge	;wreg free
  9679  00279A  0100               	movlb	0	; () banked
  9680  00279C  B0D8               	btfsc	status,0,c
  9681  00279E  D00A               	goto	l5819
  9682                           
  9683                           ; BSR set to: 0
  9684  0027A0  0E00               	movlw	0
  9685  0027A2  0100               	movlb	0	; () banked
  9686  0027A4  6F92               	movwf	?_atan2& (0+255),b
  9687  0027A6  0E00               	movlw	0
  9688  0027A8  0100               	movlb	0	; () banked
  9689  0027AA  6F93               	movwf	(?_atan2+1)& (0+255),b
  9690  0027AC  0E00               	movlw	0
  9691  0027AE  0100               	movlb	0	; () banked
  9692  0027B0  6F94               	movwf	(?_atan2+2)& (0+255),b
  9693                           
  9694                           ; BSR set to: 0
  9695  0027B2  0012               	return	
  9696  0027B4                     l5819:
  9697                           
  9698                           ; BSR set to: 0
  9699  0027B4  0E10               	movlw	16
  9700  0027B6  0100               	movlb	0	; () banked
  9701  0027B8  6F92               	movwf	?_atan2& (0+255),b
  9702  0027BA  0E49               	movlw	73
  9703  0027BC  0100               	movlb	0	; () banked
  9704  0027BE  6F93               	movwf	(?_atan2+1)& (0+255),b
  9705  0027C0  0E40               	movlw	64
  9706  0027C2  D7F5               	goto	L7
  9707  0027C4                     l5823:
  9708                           
  9709                           ; BSR set to: 0
  9710  0027C4  C095  F060         	movff	atan2@x,fabs@d
  9711  0027C8  C096  F061         	movff	atan2@x+1,fabs@d+1
  9712  0027CC  C097  F062         	movff	atan2@x+2,fabs@d+2
  9713  0027D0  EC6C  F024         	call	_fabs	;wreg free
  9714  0027D4  C060  F063         	movff	?_fabs,___ftge@ff1
  9715  0027D8  C061  F064         	movff	?_fabs+1,___ftge@ff1+1
  9716  0027DC  C062  F065         	movff	?_fabs+2,___ftge@ff1+2
  9717  0027E0  C092  F060         	movff	atan2@y,fabs@d
  9718  0027E4  C093  F061         	movff	atan2@y+1,fabs@d+1
  9719  0027E8  C094  F062         	movff	atan2@y+2,fabs@d+2
  9720  0027EC  EC6C  F024         	call	_fabs	;wreg free
  9721  0027F0  C060  F066         	movff	?_fabs,___ftge@ff2
  9722  0027F4  C061  F067         	movff	?_fabs+1,___ftge@ff2+1
  9723  0027F8  C062  F068         	movff	?_fabs+2,___ftge@ff2+2
  9724  0027FC  ECB0  F020         	call	___ftge	;wreg free
  9725  002800  0100               	movlb	0	; () banked
  9726  002802  A0D8               	btfss	status,0,c
  9727  002804  D05E               	goto	l5841
  9728                           
  9729                           ; BSR set to: 0
  9730  002806  C092  F073         	movff	atan2@y,___ftdiv@f1
  9731  00280A  C093  F074         	movff	atan2@y+1,___ftdiv@f1+1
  9732  00280E  C094  F075         	movff	atan2@y+2,___ftdiv@f1+2
  9733  002812  C095  F076         	movff	atan2@x,___ftdiv@f2
  9734  002816  C096  F077         	movff	atan2@x+1,___ftdiv@f2+1
  9735  00281A  C097  F078         	movff	atan2@x+2,___ftdiv@f2+2
  9736  00281E  ECAB  F01A         	call	___ftdiv	;wreg free
  9737  002822  C073  F09B         	movff	?___ftdiv,_atan2$2943
  9738  002826  C074  F09C         	movff	?___ftdiv+1,_atan2$2943+1
  9739  00282A  C075  F09D         	movff	?___ftdiv+2,_atan2$2943+2
  9740  00282E  C09B  F082         	movff	_atan2$2943,atan@f
  9741  002832  C09C  F083         	movff	_atan2$2943+1,atan@f+1
  9742  002836  C09D  F084         	movff	_atan2$2943+2,atan@f+2
  9743  00283A  EC38  F018         	call	_atan	;wreg free
  9744  00283E  C082  F09E         	movff	?_atan,atan2@v
  9745  002842  C083  F09F         	movff	?_atan+1,atan2@v+1
  9746  002846  C084  F0A0         	movff	?_atan+2,atan2@v+2
  9747  00284A  0100               	movlb	0	; () banked
  9748  00284C  AF97               	btfss	(atan2@x+2)& (0+255),7,b
  9749  00284E  D032               	goto	l5837
  9750                           
  9751                           ; BSR set to: 0
  9752  002850  0100               	movlb	0	; () banked
  9753  002852  BF94               	btfsc	(atan2@y+2)& (0+255),7,b
  9754  002854  D018               	goto	l5835
  9755                           
  9756                           ; BSR set to: 0
  9757  002856  C09E  F067         	movff	atan2@v,___ftadd@f1
  9758  00285A  C09F  F068         	movff	atan2@v+1,___ftadd@f1+1
  9759  00285E  C0A0  F069         	movff	atan2@v+2,___ftadd@f1+2
  9760  002862  0E10               	movlw	16
  9761  002864  0100               	movlb	0	; () banked
  9762  002866  6F6A               	movwf	___ftadd@f2& (0+255),b
  9763  002868  0E49               	movlw	73
  9764  00286A  0100               	movlb	0	; () banked
  9765  00286C  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  9766  00286E  0E40               	movlw	64
  9767  002870  0100               	movlb	0	; () banked
  9768  002872  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  9769  002874  EC03  F016         	call	___ftadd	;wreg free
  9770  002878  C067  F09E         	movff	?___ftadd,atan2@v
  9771  00287C  C068  F09F         	movff	?___ftadd+1,atan2@v+1
  9772  002880  C069  F0A0         	movff	?___ftadd+2,atan2@v+2
  9773  002884  D017               	goto	l5837
  9774  002886                     l5835:
  9775  002886  C09E  F073         	movff	atan2@v,___ftsub@f1
  9776  00288A  C09F  F074         	movff	atan2@v+1,___ftsub@f1+1
  9777  00288E  C0A0  F075         	movff	atan2@v+2,___ftsub@f1+2
  9778  002892  0E10               	movlw	16
  9779  002894  0100               	movlb	0	; () banked
  9780  002896  6F76               	movwf	___ftsub@f2& (0+255),b
  9781  002898  0E49               	movlw	73
  9782  00289A  0100               	movlb	0	; () banked
  9783  00289C  6F77               	movwf	(___ftsub@f2+1)& (0+255),b
  9784  00289E  0E40               	movlw	64
  9785  0028A0  0100               	movlb	0	; () banked
  9786  0028A2  6F78               	movwf	(___ftsub@f2+2)& (0+255),b
  9787  0028A4  EC99  F023         	call	___ftsub	;wreg free
  9788  0028A8  C073  F09E         	movff	?___ftsub,atan2@v
  9789  0028AC  C074  F09F         	movff	?___ftsub+1,atan2@v+1
  9790  0028B0  C075  F0A0         	movff	?___ftsub+2,atan2@v+2
  9791  0028B4                     l5837:
  9792  0028B4  C09E  F092         	movff	atan2@v,?_atan2
  9793  0028B8  C09F  F093         	movff	atan2@v+1,?_atan2+1
  9794  0028BC  C0A0  F094         	movff	atan2@v+2,?_atan2+2
  9795  0028C0  0012               	return	
  9796  0028C2                     l5841:
  9797  0028C2  C092  F076         	movff	atan2@y,___ftdiv@f2
  9798  0028C6  C093  F077         	movff	atan2@y+1,___ftdiv@f2+1
  9799  0028CA  C094  F078         	movff	atan2@y+2,___ftdiv@f2+2
  9800  0028CE  C095  F073         	movff	atan2@x,___ftdiv@f1
  9801  0028D2  C096  F074         	movff	atan2@x+1,___ftdiv@f1+1
  9802  0028D6  C097  F075         	movff	atan2@x+2,___ftdiv@f1+2
  9803  0028DA  ECAB  F01A         	call	___ftdiv	;wreg free
  9804  0028DE  C073  F09B         	movff	?___ftdiv,_atan2$2943
  9805  0028E2  C074  F09C         	movff	?___ftdiv+1,_atan2$2943+1
  9806  0028E6  C075  F09D         	movff	?___ftdiv+2,_atan2$2943+2
  9807  0028EA  C09B  F082         	movff	_atan2$2943,atan@f
  9808  0028EE  C09C  F083         	movff	_atan2$2943+1,atan@f+1
  9809  0028F2  C09D  F084         	movff	_atan2$2943+2,atan@f+2
  9810  0028F6  EC38  F018         	call	_atan	;wreg free
  9811  0028FA  C082  F098         	movff	?_atan,_atan2$2944
  9812  0028FE  C083  F099         	movff	?_atan+1,_atan2$2944+1
  9813  002902  C084  F09A         	movff	?_atan+2,_atan2$2944+2
  9814  002906  C098  F036         	movff	_atan2$2944,___ftneg@f1
  9815  00290A  C099  F037         	movff	_atan2$2944+1,___ftneg@f1+1
  9816  00290E  C09A  F038         	movff	_atan2$2944+2,___ftneg@f1+2
  9817  002912  EC4E  F025         	call	___ftneg	;wreg free
  9818  002916  C036  F09E         	movff	?___ftneg,atan2@v
  9819  00291A  C037  F09F         	movff	?___ftneg+1,atan2@v+1
  9820  00291E  C038  F0A0         	movff	?___ftneg+2,atan2@v+2
  9821  002922  0100               	movlb	0	; () banked
  9822  002924  AF94               	btfss	(atan2@y+2)& (0+255),7,b
  9823  002926  D018               	goto	l5851
  9824                           
  9825                           ; BSR set to: 0
  9826  002928  C09E  F073         	movff	atan2@v,___ftsub@f1
  9827  00292C  C09F  F074         	movff	atan2@v+1,___ftsub@f1+1
  9828  002930  C0A0  F075         	movff	atan2@v+2,___ftsub@f1+2
  9829  002934  0E10               	movlw	16
  9830  002936  0100               	movlb	0	; () banked
  9831  002938  6F76               	movwf	___ftsub@f2& (0+255),b
  9832  00293A  0EC9               	movlw	201
  9833  00293C  0100               	movlb	0	; () banked
  9834  00293E  6F77               	movwf	(___ftsub@f2+1)& (0+255),b
  9835  002940  0E3F               	movlw	63
  9836  002942  0100               	movlb	0	; () banked
  9837  002944  6F78               	movwf	(___ftsub@f2+2)& (0+255),b
  9838  002946  EC99  F023         	call	___ftsub	;wreg free
  9839  00294A  C073  F09E         	movff	?___ftsub,atan2@v
  9840  00294E  C074  F09F         	movff	?___ftsub+1,atan2@v+1
  9841  002952  C075  F0A0         	movff	?___ftsub+2,atan2@v+2
  9842  002956  D017               	goto	l5853
  9843  002958                     l5851:
  9844  002958  C09E  F067         	movff	atan2@v,___ftadd@f1
  9845  00295C  C09F  F068         	movff	atan2@v+1,___ftadd@f1+1
  9846  002960  C0A0  F069         	movff	atan2@v+2,___ftadd@f1+2
  9847  002964  0E10               	movlw	16
  9848  002966  0100               	movlb	0	; () banked
  9849  002968  6F6A               	movwf	___ftadd@f2& (0+255),b
  9850  00296A  0EC9               	movlw	201
  9851  00296C  0100               	movlb	0	; () banked
  9852  00296E  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
  9853  002970  0E3F               	movlw	63
  9854  002972  0100               	movlb	0	; () banked
  9855  002974  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
  9856  002976  EC03  F016         	call	___ftadd	;wreg free
  9857  00297A  C067  F09E         	movff	?___ftadd,atan2@v
  9858  00297E  C068  F09F         	movff	?___ftadd+1,atan2@v+1
  9859  002982  C069  F0A0         	movff	?___ftadd+2,atan2@v+2
  9860  002986                     l5853:
  9861  002986  C09E  F092         	movff	atan2@v,?_atan2
  9862  00298A  C09F  F093         	movff	atan2@v+1,?_atan2+1
  9863  00298E  C0A0  F094         	movff	atan2@v+2,?_atan2+2
  9864  002992  0012               	return	
  9865  002994                     __end_of_atan2:
  9866                           	opt stack 0
  9867                           tblptru	equ	0xFF8
  9868                           tblptrh	equ	0xFF7
  9869                           tblptrl	equ	0xFF6
  9870                           tablat	equ	0xFF5
  9871                           prodh	equ	0xFF4
  9872                           prodl	equ	0xFF3
  9873                           intcon	equ	0xFF2
  9874                           postinc0	equ	0xFEE
  9875                           wreg	equ	0xFE8
  9876                           postdec1	equ	0xFE5
  9877                           fsr1l	equ	0xFE1
  9878                           indf2	equ	0xFDF
  9879                           postinc2	equ	0xFDE
  9880                           postdec2	equ	0xFDD
  9881                           fsr2h	equ	0xFDA
  9882                           fsr2l	equ	0xFD9
  9883                           status	equ	0xFD8
  9884                           
  9885 ;; *************** function _atan *****************
  9886 ;; Defined at:
  9887 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\atan.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  f               3   34[BANK0 ] float 
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;  val             3   47[BANK0 ] float 
  9892 ;;  val_squared     3   44[BANK0 ] float 
  9893 ;;  x               3   40[BANK0 ] float 
  9894 ;;  y               3   37[BANK0 ] float 
  9895 ;;  recip           1   43[BANK0 ] unsigned char 
  9896 ;; Return value:  Size  Location     Type
  9897 ;;                  3   34[BANK0 ] unsigned char 
  9898 ;; Registers used:
  9899 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9905 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9906 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9908 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9909 ;;Total ram usage:       16 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:    7
  9912 ;; This function calls:
  9913 ;;		___ftadd
  9914 ;;		___ftdiv
  9915 ;;		___ftge
  9916 ;;		___ftmul
  9917 ;;		___ftneg
  9918 ;;		_eval_poly
  9919 ;;		_fabs
  9920 ;; This function is called by:
  9921 ;;		_atan2
  9922 ;; This function uses a non-reentrant model
  9923 ;;
  9924                           
  9925                           	psect	text45
  9926  003070                     __ptext45:
  9927                           	opt stack 0
  9928  003070                     _atan:
  9929                           	opt stack 21
  9930                           
  9931                           ;incstack = 0
  9932  003070  C082  F060         	movff	atan@f,fabs@d
  9933  003074  C083  F061         	movff	atan@f+1,fabs@d+1
  9934  003078  C084  F062         	movff	atan@f+2,fabs@d+2
  9935  00307C  EC6C  F024         	call	_fabs	;wreg free
  9936  003080  C060  F08F         	movff	?_fabs,atan@val
  9937  003084  C061  F090         	movff	?_fabs+1,atan@val+1
  9938  003088  C062  F091         	movff	?_fabs+2,atan@val+2
  9939  00308C  0100               	movlb	0	; () banked
  9940  00308E  518F               	movf	atan@val& (0+255),w,b
  9941  003090  0100               	movlb	0	; () banked
  9942  003092  1190               	iorwf	(atan@val+1)& (0+255),w,b
  9943  003094  0100               	movlb	0	; () banked
  9944  003096  1191               	iorwf	(atan@val+2)& (0+255),w,b
  9945  003098  A4D8               	btfss	status,2,c
  9946  00309A  D00A               	goto	l5507
  9947                           
  9948                           ; BSR set to: 0
  9949  00309C  0E00               	movlw	0
  9950  00309E  0100               	movlb	0	; () banked
  9951  0030A0  6F82               	movwf	?_atan& (0+255),b
  9952  0030A2  0E00               	movlw	0
  9953  0030A4  0100               	movlb	0	; () banked
  9954  0030A6  6F83               	movwf	(?_atan+1)& (0+255),b
  9955  0030A8  0E00               	movlw	0
  9956  0030AA  0100               	movlb	0	; () banked
  9957  0030AC  6F84               	movwf	(?_atan+2)& (0+255),b
  9958                           
  9959                           ; BSR set to: 0
  9960  0030AE  0012               	return	
  9961  0030B0                     l5507:
  9962                           
  9963                           ; BSR set to: 0
  9964  0030B0  0E00               	movlw	0
  9965  0030B2  0100               	movlb	0	; () banked
  9966  0030B4  6F63               	movwf	___ftge@ff1& (0+255),b
  9967  0030B6  0E80               	movlw	128
  9968  0030B8  0100               	movlb	0	; () banked
  9969  0030BA  6F64               	movwf	(___ftge@ff1+1)& (0+255),b
  9970  0030BC  0E3F               	movlw	63
  9971  0030BE  0100               	movlb	0	; () banked
  9972  0030C0  6F65               	movwf	(___ftge@ff1+2)& (0+255),b
  9973  0030C2  C08F  F066         	movff	atan@val,___ftge@ff2
  9974  0030C6  C090  F067         	movff	atan@val+1,___ftge@ff2+1
  9975  0030CA  C091  F068         	movff	atan@val+2,___ftge@ff2+2
  9976  0030CE  ECB0  F020         	call	___ftge	;wreg free
  9977  0030D2  0100               	movlb	0	; () banked
  9978  0030D4  B0D8               	btfsc	status,0,c
  9979  0030D6  D002               	goto	u4790
  9980  0030D8  0E01               	movlw	1
  9981  0030DA  D001               	goto	u4800
  9982  0030DC                     u4790:
  9983  0030DC  0E00               	movlw	0
  9984  0030DE                     u4800:
  9985  0030DE  0100               	movlb	0	; () banked
  9986  0030E0  6F8B               	movwf	atan@recip& (0+255),b
  9987  0030E2  0100               	movlb	0	; () banked
  9988  0030E4  518B               	movf	atan@recip& (0+255),w,b
  9989  0030E6  B4D8               	btfsc	status,2,c
  9990  0030E8  D017               	goto	l1770
  9991                           
  9992                           ; BSR set to: 0
  9993  0030EA  0E00               	movlw	0
  9994  0030EC  0100               	movlb	0	; () banked
  9995  0030EE  6F73               	movwf	___ftdiv@f1& (0+255),b
  9996  0030F0  0E80               	movlw	128
  9997  0030F2  0100               	movlb	0	; () banked
  9998  0030F4  6F74               	movwf	(___ftdiv@f1+1)& (0+255),b
  9999  0030F6  0E3F               	movlw	63
 10000  0030F8  0100               	movlb	0	; () banked
 10001  0030FA  6F75               	movwf	(___ftdiv@f1+2)& (0+255),b
 10002  0030FC  C08F  F076         	movff	atan@val,___ftdiv@f2
 10003  003100  C090  F077         	movff	atan@val+1,___ftdiv@f2+1
 10004  003104  C091  F078         	movff	atan@val+2,___ftdiv@f2+2
 10005  003108  ECAB  F01A         	call	___ftdiv	;wreg free
 10006  00310C  C073  F08F         	movff	?___ftdiv,atan@val
 10007  003110  C074  F090         	movff	?___ftdiv+1,atan@val+1
 10008  003114  C075  F091         	movff	?___ftdiv+2,atan@val+2
 10009  003118                     l1770:
 10010  003118  C08F  F027         	movff	atan@val,___ftmul@f1
 10011  00311C  C090  F028         	movff	atan@val+1,___ftmul@f1+1
 10012  003120  C091  F029         	movff	atan@val+2,___ftmul@f1+2
 10013  003124  C08F  F02A         	movff	atan@val,___ftmul@f2
 10014  003128  C090  F02B         	movff	atan@val+1,___ftmul@f2+1
 10015  00312C  C091  F02C         	movff	atan@val+2,___ftmul@f2+2
 10016  003130  EC49  F01F         	call	___ftmul	;wreg free
 10017  003134  C027  F08C         	movff	?___ftmul,atan@val_squared
 10018  003138  C028  F08D         	movff	?___ftmul+1,atan@val_squared+1
 10019  00313C  C029  F08E         	movff	?___ftmul+2,atan@val_squared+2
 10020  003140  C08C  F073         	movff	atan@val_squared,eval_poly@x
 10021  003144  C08D  F074         	movff	atan@val_squared+1,eval_poly@x+1
 10022  003148  C08E  F075         	movff	atan@val_squared+2,eval_poly@x+2
 10023  00314C  0E89               	movlw	low atan@coeff_b
 10024  00314E  0100               	movlb	0	; () banked
 10025  003150  6F76               	movwf	eval_poly@d& (0+255),b
 10026  003152  0E0F               	movlw	high atan@coeff_b
 10027  003154  0100               	movlb	0	; () banked
 10028  003156  6F77               	movwf	(eval_poly@d+1)& (0+255),b
 10029  003158  0E00               	movlw	0
 10030  00315A  0100               	movlb	0	; () banked
 10031  00315C  6F79               	movwf	(eval_poly@n+1)& (0+255),b
 10032  00315E  0E04               	movlw	4
 10033  003160  6F78               	movwf	eval_poly@n& (0+255),b
 10034  003162  EC3C  F020         	call	_eval_poly	;wreg free
 10035  003166  C073  F085         	movff	?_eval_poly,atan@y
 10036  00316A  C074  F086         	movff	?_eval_poly+1,atan@y+1
 10037  00316E  C075  F087         	movff	?_eval_poly+2,atan@y+2
 10038  003172  C08C  F073         	movff	atan@val_squared,eval_poly@x
 10039  003176  C08D  F074         	movff	atan@val_squared+1,eval_poly@x+1
 10040  00317A  C08E  F075         	movff	atan@val_squared+2,eval_poly@x+2
 10041  00317E  0E77               	movlw	low atan@coeff_a
 10042  003180  0100               	movlb	0	; () banked
 10043  003182  6F76               	movwf	eval_poly@d& (0+255),b
 10044  003184  0E0F               	movlw	high atan@coeff_a
 10045  003186  0100               	movlb	0	; () banked
 10046  003188  6F77               	movwf	(eval_poly@d+1)& (0+255),b
 10047  00318A  0E00               	movlw	0
 10048  00318C  0100               	movlb	0	; () banked
 10049  00318E  6F79               	movwf	(eval_poly@n+1)& (0+255),b
 10050  003190  0E05               	movlw	5
 10051  003192  6F78               	movwf	eval_poly@n& (0+255),b
 10052  003194  EC3C  F020         	call	_eval_poly	;wreg free
 10053  003198  C073  F088         	movff	?_eval_poly,atan@x
 10054  00319C  C074  F089         	movff	?_eval_poly+1,atan@x+1
 10055  0031A0  C075  F08A         	movff	?_eval_poly+2,atan@x+2
 10056  0031A4  C08F  F027         	movff	atan@val,___ftmul@f1
 10057  0031A8  C090  F028         	movff	atan@val+1,___ftmul@f1+1
 10058  0031AC  C091  F029         	movff	atan@val+2,___ftmul@f1+2
 10059  0031B0  C085  F076         	movff	atan@y,___ftdiv@f2
 10060  0031B4  C086  F077         	movff	atan@y+1,___ftdiv@f2+1
 10061  0031B8  C087  F078         	movff	atan@y+2,___ftdiv@f2+2
 10062  0031BC  C088  F073         	movff	atan@x,___ftdiv@f1
 10063  0031C0  C089  F074         	movff	atan@x+1,___ftdiv@f1+1
 10064  0031C4  C08A  F075         	movff	atan@x+2,___ftdiv@f1+2
 10065  0031C8  ECAB  F01A         	call	___ftdiv	;wreg free
 10066  0031CC  C073  F02A         	movff	?___ftdiv,___ftmul@f2
 10067  0031D0  C074  F02B         	movff	?___ftdiv+1,___ftmul@f2+1
 10068  0031D4  C075  F02C         	movff	?___ftdiv+2,___ftmul@f2+2
 10069  0031D8  EC49  F01F         	call	___ftmul	;wreg free
 10070  0031DC  C027  F08F         	movff	?___ftmul,atan@val
 10071  0031E0  C028  F090         	movff	?___ftmul+1,atan@val+1
 10072  0031E4  C029  F091         	movff	?___ftmul+2,atan@val+2
 10073  0031E8  0100               	movlb	0	; () banked
 10074  0031EA  518B               	movf	atan@recip& (0+255),w,b
 10075  0031EC  0100               	movlb	0	; () banked
 10076  0031EE  B4D8               	btfsc	status,2,c
 10077  0031F0  D01F               	goto	l5519
 10078                           
 10079                           ; BSR set to: 0
 10080  0031F2  C08F  F036         	movff	atan@val,___ftneg@f1
 10081  0031F6  C090  F037         	movff	atan@val+1,___ftneg@f1+1
 10082  0031FA  C091  F038         	movff	atan@val+2,___ftneg@f1+2
 10083  0031FE  EC4E  F025         	call	___ftneg	;wreg free
 10084  003202  C036  F067         	movff	?___ftneg,___ftadd@f1
 10085  003206  C037  F068         	movff	?___ftneg+1,___ftadd@f1+1
 10086  00320A  C038  F069         	movff	?___ftneg+2,___ftadd@f1+2
 10087  00320E  0E10               	movlw	16
 10088  003210  0100               	movlb	0	; () banked
 10089  003212  6F6A               	movwf	___ftadd@f2& (0+255),b
 10090  003214  0EC9               	movlw	201
 10091  003216  0100               	movlb	0	; () banked
 10092  003218  6F6B               	movwf	(___ftadd@f2+1)& (0+255),b
 10093  00321A  0E3F               	movlw	63
 10094  00321C  0100               	movlb	0	; () banked
 10095  00321E  6F6C               	movwf	(___ftadd@f2+2)& (0+255),b
 10096  003220  EC03  F016         	call	___ftadd	;wreg free
 10097  003224  C067  F08F         	movff	?___ftadd,atan@val
 10098  003228  C068  F090         	movff	?___ftadd+1,atan@val+1
 10099  00322C  C069  F091         	movff	?___ftadd+2,atan@val+2
 10100  003230                     l5519:
 10101  003230  0100               	movlb	0	; () banked
 10102  003232  BF84               	btfsc	(atan@f+2)& (0+255),7,b
 10103  003234  D007               	goto	l5523
 10104                           
 10105                           ; BSR set to: 0
 10106  003236  C08F  F082         	movff	atan@val,?_atan
 10107  00323A  C090  F083         	movff	atan@val+1,?_atan+1
 10108  00323E  C091  F084         	movff	atan@val+2,?_atan+2
 10109  003242  0012               	return	
 10110  003244                     l5523:
 10111                           
 10112                           ; BSR set to: 0
 10113  003244  C08F  F036         	movff	atan@val,___ftneg@f1
 10114  003248  C090  F037         	movff	atan@val+1,___ftneg@f1+1
 10115  00324C  C091  F038         	movff	atan@val+2,___ftneg@f1+2
 10116  003250  EC4E  F025         	call	___ftneg	;wreg free
 10117  003254  C036  F082         	movff	?___ftneg,?_atan
 10118  003258  C037  F083         	movff	?___ftneg+1,?_atan+1
 10119  00325C  C038  F084         	movff	?___ftneg+2,?_atan+2
 10120  003260  0012               	return	
 10121  003262                     __end_of_atan:
 10122                           	opt stack 0
 10123                           tblptru	equ	0xFF8
 10124                           tblptrh	equ	0xFF7
 10125                           tblptrl	equ	0xFF6
 10126                           tablat	equ	0xFF5
 10127                           prodh	equ	0xFF4
 10128                           prodl	equ	0xFF3
 10129                           intcon	equ	0xFF2
 10130                           postinc0	equ	0xFEE
 10131                           wreg	equ	0xFE8
 10132                           postdec1	equ	0xFE5
 10133                           fsr1l	equ	0xFE1
 10134                           indf2	equ	0xFDF
 10135                           postinc2	equ	0xFDE
 10136                           postdec2	equ	0xFDD
 10137                           fsr2h	equ	0xFDA
 10138                           fsr2l	equ	0xFD9
 10139                           status	equ	0xFD8
 10140                           
 10141 ;; *************** function _fabs *****************
 10142 ;; Defined at:
 10143 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fabs.c"
 10144 ;; Parameters:    Size  Location     Type
 10145 ;;  d               3    0[BANK0 ] unsigned char 
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;		None
 10148 ;; Return value:  Size  Location     Type
 10149 ;;                  3    0[BANK0 ] unsigned char 
 10150 ;; Registers used:
 10151 ;;		wreg, status,2, status,0, cstack
 10152 ;; Tracked objects:
 10153 ;;		On entry : 0/0
 10154 ;;		On exit  : 0/0
 10155 ;;		Unchanged: 0/0
 10156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10157 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10160 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10161 ;;Total ram usage:        3 bytes
 10162 ;; Hardware stack levels used:    1
 10163 ;; Hardware stack levels required when called:    5
 10164 ;; This function calls:
 10165 ;;		___ftneg
 10166 ;; This function is called by:
 10167 ;;		_fastatan2
 10168 ;;		_atan2
 10169 ;;		_atan
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           	psect	text46
 10174  0048D8                     __ptext46:
 10175                           	opt stack 0
 10176  0048D8                     _fabs:
 10177                           	opt stack 23
 10178                           
 10179                           ;incstack = 0
 10180  0048D8  0100               	movlb	0	; () banked
 10181  0048DA  AF62               	btfss	(fabs@d+2)& (0+255),7,b
 10182  0048DC  D00F               	goto	l1346
 10183                           
 10184                           ; BSR set to: 0
 10185  0048DE  C060  F036         	movff	fabs@d,___ftneg@f1
 10186  0048E2  C061  F037         	movff	fabs@d+1,___ftneg@f1+1
 10187  0048E6  C062  F038         	movff	fabs@d+2,___ftneg@f1+2
 10188  0048EA  EC4E  F025         	call	___ftneg	;wreg free
 10189  0048EE  C036  F060         	movff	?___ftneg,?_fabs
 10190  0048F2  C037  F061         	movff	?___ftneg+1,?_fabs+1
 10191  0048F6  C038  F062         	movff	?___ftneg+2,?_fabs+2
 10192  0048FA  0012               	return	
 10193  0048FC                     l1346:
 10194                           
 10195                           ; BSR set to: 0
 10196  0048FC  C060  F060         	movff	fabs@d,?_fabs
 10197  004900  C061  F061         	movff	fabs@d+1,?_fabs+1
 10198  004904  C062  F062         	movff	fabs@d+2,?_fabs+2
 10199  004908  0012               	return		;funcret
 10200  00490A                     __end_of_fabs:
 10201                           	opt stack 0
 10202                           tblptru	equ	0xFF8
 10203                           tblptrh	equ	0xFF7
 10204                           tblptrl	equ	0xFF6
 10205                           tablat	equ	0xFF5
 10206                           prodh	equ	0xFF4
 10207                           prodl	equ	0xFF3
 10208                           intcon	equ	0xFF2
 10209                           postinc0	equ	0xFEE
 10210                           wreg	equ	0xFE8
 10211                           postdec1	equ	0xFE5
 10212                           fsr1l	equ	0xFE1
 10213                           indf2	equ	0xFDF
 10214                           postinc2	equ	0xFDE
 10215                           postdec2	equ	0xFDD
 10216                           fsr2h	equ	0xFDA
 10217                           fsr2l	equ	0xFD9
 10218                           status	equ	0xFD8
 10219                           
 10220 ;; *************** function ___ftneg *****************
 10221 ;; Defined at:
 10222 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
 10223 ;; Parameters:    Size  Location     Type
 10224 ;;  f1              3   53[COMRAM] float 
 10225 ;; Auto vars:     Size  Location     Type
 10226 ;;		None
 10227 ;; Return value:  Size  Location     Type
 10228 ;;                  3   53[COMRAM] float 
 10229 ;; Registers used:
 10230 ;;		wreg, status,2, status,0
 10231 ;; Tracked objects:
 10232 ;;		On entry : 0/0
 10233 ;;		On exit  : 0/0
 10234 ;;		Unchanged: 0/0
 10235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10236 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10239 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10240 ;;Total ram usage:        3 bytes
 10241 ;; Hardware stack levels used:    1
 10242 ;; Hardware stack levels required when called:    4
 10243 ;; This function calls:
 10244 ;;		Nothing
 10245 ;; This function is called by:
 10246 ;;		_computeRollPitch
 10247 ;;		_fastatan2
 10248 ;;		_rollPid
 10249 ;;		_kalmanUpdate
 10250 ;;		_printf
 10251 ;;		_atan2
 10252 ;;		_fabs
 10253 ;;		_atan
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           	psect	text47
 10258  004A9C                     __ptext47:
 10259                           	opt stack 0
 10260  004A9C                     ___ftneg:
 10261                           	opt stack 25
 10262                           
 10263                           ;incstack = 0
 10264  004A9C  5036               	movf	___ftneg@f1,w,c
 10265  004A9E  1037               	iorwf	___ftneg@f1+1,w,c
 10266  004AA0  1038               	iorwf	___ftneg@f1+2,w,c
 10267  004AA2  B4D8               	btfsc	status,2,c
 10268  004AA4  D006               	goto	l1489
 10269  004AA6  0E00               	movlw	0
 10270  004AA8  1A36               	xorwf	___ftneg@f1,f,c
 10271  004AAA  0E00               	movlw	0
 10272  004AAC  1A37               	xorwf	___ftneg@f1+1,f,c
 10273  004AAE  0E80               	movlw	128
 10274  004AB0  1A38               	xorwf	___ftneg@f1+2,f,c
 10275  004AB2                     l1489:
 10276  004AB2  C036  F036         	movff	___ftneg@f1,?___ftneg
 10277  004AB6  C037  F037         	movff	___ftneg@f1+1,?___ftneg+1
 10278  004ABA  C038  F038         	movff	___ftneg@f1+2,?___ftneg+2
 10279  004ABE  0012               	return		;funcret
 10280  004AC0                     __end_of___ftneg:
 10281                           	opt stack 0
 10282                           tblptru	equ	0xFF8
 10283                           tblptrh	equ	0xFF7
 10284                           tblptrl	equ	0xFF6
 10285                           tablat	equ	0xFF5
 10286                           prodh	equ	0xFF4
 10287                           prodl	equ	0xFF3
 10288                           intcon	equ	0xFF2
 10289                           postinc0	equ	0xFEE
 10290                           wreg	equ	0xFE8
 10291                           postdec1	equ	0xFE5
 10292                           fsr1l	equ	0xFE1
 10293                           indf2	equ	0xFDF
 10294                           postinc2	equ	0xFDE
 10295                           postdec2	equ	0xFDD
 10296                           fsr2h	equ	0xFDA
 10297                           fsr2l	equ	0xFD9
 10298                           status	equ	0xFD8
 10299                           
 10300 ;; *************** function _eval_poly *****************
 10301 ;; Defined at:
 10302 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\evalpoly.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;  x               3   19[BANK0 ] float 
 10305 ;;  d               2   22[BANK0 ] PTR const 
 10306 ;;		 -> atan@coeff_a(18), atan@coeff_b(15), 
 10307 ;;  n               2   24[BANK0 ] int 
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  res             3   28[BANK0 ] int 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  3   19[BANK0 ] int 
 10312 ;; Registers used:
 10313 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10319 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10320 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10321 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10322 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10323 ;;Total ram usage:       12 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; Hardware stack levels required when called:    6
 10326 ;; This function calls:
 10327 ;;		___ftadd
 10328 ;;		___ftmul
 10329 ;;		___wmul
 10330 ;; This function is called by:
 10331 ;;		_atan
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           	psect	text48
 10336  004078                     __ptext48:
 10337                           	opt stack 0
 10338  004078                     _eval_poly:
 10339                           	opt stack 21
 10340                           
 10341                           ;incstack = 0
 10342  004078  C078  F021         	movff	eval_poly@n,___wmul@multiplier
 10343  00407C  C079  F022         	movff	eval_poly@n+1,___wmul@multiplier+1
 10344  004080  0E00               	movlw	0
 10345  004082  6E24               	movwf	___wmul@multiplicand+1,c
 10346  004084  0E03               	movlw	3
 10347  004086  6E23               	movwf	___wmul@multiplicand,c
 10348  004088  EC28  F025         	call	___wmul	;wreg free
 10349  00408C  C076  F07A         	movff	eval_poly@d,??_eval_poly
 10350  004090  C077  F07B         	movff	eval_poly@d+1,??_eval_poly+1
 10351  004094  5021               	movf	?___wmul,w,c
 10352  004096  0100               	movlb	0	; () banked
 10353  004098  277A               	addwf	??_eval_poly& (0+255),f,b
 10354  00409A  5022               	movf	?___wmul+1,w,c
 10355  00409C  0100               	movlb	0	; () banked
 10356  00409E  237B               	addwfc	(??_eval_poly+1)& (0+255),f,b
 10357  0040A0  C07A  FFF6         	movff	??_eval_poly,tblptrl
 10358  0040A4  C07B  FFF7         	movff	??_eval_poly+1,tblptrh
 10359  0040A8                     	if	0	;tblptru may be non-zero
 10360  0040A8                     	endif
 10361  0040A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10362  0040A8  0E00               	movlw	low (__mediumconst shr (0+16))
 10363  0040AA  6EF8               	movwf	tblptru,c
 10364  0040AC                     	endif
 10365  0040AC  0009               	tblrd		*+
 10366  0040AE  CFF5 F07C          	movff	tablat,eval_poly@res
 10367  0040B2  0009               	tblrd		*+
 10368  0040B4  CFF5 F07D          	movff	tablat,eval_poly@res+1
 10369  0040B8  000A               	tblrd		*-
 10370  0040BA  CFF5 F07E          	movff	tablat,eval_poly@res+2
 10371  0040BE  D043               	goto	l5431
 10372  0040C0                     l5429:
 10373                           
 10374                           ; BSR set to: 0
 10375  0040C0  C07C  F02A         	movff	eval_poly@res,___ftmul@f2
 10376  0040C4  C07D  F02B         	movff	eval_poly@res+1,___ftmul@f2+1
 10377  0040C8  C07E  F02C         	movff	eval_poly@res+2,___ftmul@f2+2
 10378  0040CC  C073  F027         	movff	eval_poly@x,___ftmul@f1
 10379  0040D0  C074  F028         	movff	eval_poly@x+1,___ftmul@f1+1
 10380  0040D4  C075  F029         	movff	eval_poly@x+2,___ftmul@f1+2
 10381  0040D8  EC49  F01F         	call	___ftmul	;wreg free
 10382  0040DC  C027  F067         	movff	?___ftmul,___ftadd@f1
 10383  0040E0  C028  F068         	movff	?___ftmul+1,___ftadd@f1+1
 10384  0040E4  C029  F069         	movff	?___ftmul+2,___ftadd@f1+2
 10385  0040E8  0E00               	movlw	0
 10386  0040EA  6E24               	movwf	___wmul@multiplicand+1,c
 10387  0040EC  0E03               	movlw	3
 10388  0040EE  6E23               	movwf	___wmul@multiplicand,c
 10389  0040F0  0100               	movlb	0	; () banked
 10390  0040F2  0778               	decf	eval_poly@n& (0+255),f,b
 10391  0040F4  A0D8               	btfss	status,0,c
 10392  0040F6  0779               	decf	(eval_poly@n+1)& (0+255),f,b
 10393  0040F8  C078  F021         	movff	eval_poly@n,___wmul@multiplier
 10394  0040FC  C079  F022         	movff	eval_poly@n+1,___wmul@multiplier+1
 10395  004100  EC28  F025         	call	___wmul	;wreg free
 10396  004104  C076  F07A         	movff	eval_poly@d,??_eval_poly
 10397  004108  C077  F07B         	movff	eval_poly@d+1,??_eval_poly+1
 10398  00410C  5021               	movf	?___wmul,w,c
 10399  00410E  0100               	movlb	0	; () banked
 10400  004110  277A               	addwf	??_eval_poly& (0+255),f,b
 10401  004112  5022               	movf	?___wmul+1,w,c
 10402  004114  0100               	movlb	0	; () banked
 10403  004116  237B               	addwfc	(??_eval_poly+1)& (0+255),f,b
 10404  004118  C07A  FFF6         	movff	??_eval_poly,tblptrl
 10405  00411C  C07B  FFF7         	movff	??_eval_poly+1,tblptrh
 10406  004120                     	if	0	;tblptru may be non-zero
 10407  004120                     	endif
 10408  004120                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10409  004120  0E00               	movlw	low (__mediumconst shr (0+16))
 10410  004122  6EF8               	movwf	tblptru,c
 10411  004124                     	endif
 10412  004124  0009               	tblrd		*+
 10413  004126  CFF5 F06A          	movff	tablat,___ftadd@f2
 10414  00412A  0009               	tblrd		*+
 10415  00412C  CFF5 F06B          	movff	tablat,___ftadd@f2+1
 10416  004130  000A               	tblrd		*-
 10417  004132  CFF5 F06C          	movff	tablat,___ftadd@f2+2
 10418  004136  EC03  F016         	call	___ftadd	;wreg free
 10419  00413A  C067  F07C         	movff	?___ftadd,eval_poly@res
 10420  00413E  C068  F07D         	movff	?___ftadd+1,eval_poly@res+1
 10421  004142  C069  F07E         	movff	?___ftadd+2,eval_poly@res+2
 10422  004146                     l5431:
 10423  004146  0100               	movlb	0	; () banked
 10424  004148  5178               	movf	eval_poly@n& (0+255),w,b
 10425  00414A  0100               	movlb	0	; () banked
 10426  00414C  1179               	iorwf	(eval_poly@n+1)& (0+255),w,b
 10427  00414E  A4D8               	btfss	status,2,c
 10428  004150  D7B7               	goto	l5429
 10429                           
 10430                           ; BSR set to: 0
 10431  004152  C07C  F073         	movff	eval_poly@res,?_eval_poly
 10432  004156  C07D  F074         	movff	eval_poly@res+1,?_eval_poly+1
 10433  00415A  C07E  F075         	movff	eval_poly@res+2,?_eval_poly+2
 10434                           
 10435                           ; BSR set to: 0
 10436  00415E  0012               	return		;funcret
 10437  004160                     __end_of_eval_poly:
 10438                           	opt stack 0
 10439                           tblptru	equ	0xFF8
 10440                           tblptrh	equ	0xFF7
 10441                           tblptrl	equ	0xFF6
 10442                           tablat	equ	0xFF5
 10443                           prodh	equ	0xFF4
 10444                           prodl	equ	0xFF3
 10445                           intcon	equ	0xFF2
 10446                           postinc0	equ	0xFEE
 10447                           wreg	equ	0xFE8
 10448                           postdec1	equ	0xFE5
 10449                           fsr1l	equ	0xFE1
 10450                           indf2	equ	0xFDF
 10451                           postinc2	equ	0xFDE
 10452                           postdec2	equ	0xFDD
 10453                           fsr2h	equ	0xFDA
 10454                           fsr2l	equ	0xFD9
 10455                           status	equ	0xFD8
 10456                           
 10457 ;; *************** function ___wmul *****************
 10458 ;; Defined at:
 10459 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;  multiplier      2   32[COMRAM] unsigned int 
 10462 ;;  multiplicand    2   34[COMRAM] unsigned int 
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;  product         2   36[COMRAM] unsigned int 
 10465 ;; Return value:  Size  Location     Type
 10466 ;;                  2   32[COMRAM] unsigned int 
 10467 ;; Registers used:
 10468 ;;		wreg, status,2, status,0, prodl, prodh
 10469 ;; Tracked objects:
 10470 ;;		On entry : 0/0
 10471 ;;		On exit  : 0/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10477 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10478 ;;Total ram usage:        6 bytes
 10479 ;; Hardware stack levels used:    1
 10480 ;; Hardware stack levels required when called:    4
 10481 ;; This function calls:
 10482 ;;		Nothing
 10483 ;; This function is called by:
 10484 ;;		_fround
 10485 ;;		_scale
 10486 ;;		_printf
 10487 ;;		_eval_poly
 10488 ;; This function uses a non-reentrant model
 10489 ;;
 10490                           
 10491                           	psect	text49
 10492  004A50                     __ptext49:
 10493                           	opt stack 0
 10494  004A50                     ___wmul:
 10495                           	opt stack 24
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;incstack = 0
 10499  004A50  5021               	movf	___wmul@multiplier,w,c
 10500  004A52  0223               	mulwf	___wmul@multiplicand,c
 10501  004A54  CFF3 F025          	movff	prodl,___wmul@product
 10502  004A58  CFF4 F026          	movff	prodh,___wmul@product+1
 10503  004A5C  5021               	movf	___wmul@multiplier,w,c
 10504  004A5E  0224               	mulwf	___wmul@multiplicand+1,c
 10505  004A60  50F3               	movf	prodl,w,c
 10506  004A62  2626               	addwf	___wmul@product+1,f,c
 10507  004A64  5022               	movf	___wmul@multiplier+1,w,c
 10508  004A66  0223               	mulwf	___wmul@multiplicand,c
 10509  004A68  50F3               	movf	prodl,w,c
 10510  004A6A  2626               	addwf	___wmul@product+1,f,c
 10511  004A6C  C025  F021         	movff	___wmul@product,?___wmul
 10512  004A70  C026  F022         	movff	___wmul@product+1,?___wmul+1
 10513  004A74  0012               	return	
 10514  004A76                     __end_of___wmul:
 10515                           	opt stack 0
 10516                           tblptru	equ	0xFF8
 10517                           tblptrh	equ	0xFF7
 10518                           tblptrl	equ	0xFF6
 10519                           tablat	equ	0xFF5
 10520                           prodh	equ	0xFF4
 10521                           prodl	equ	0xFF3
 10522                           intcon	equ	0xFF2
 10523                           postinc0	equ	0xFEE
 10524                           wreg	equ	0xFE8
 10525                           postdec1	equ	0xFE5
 10526                           fsr1l	equ	0xFE1
 10527                           indf2	equ	0xFDF
 10528                           postinc2	equ	0xFDE
 10529                           postdec2	equ	0xFDD
 10530                           fsr2h	equ	0xFDA
 10531                           fsr2l	equ	0xFD9
 10532                           status	equ	0xFD8
 10533                           
 10534 ;; *************** function ___ftmul *****************
 10535 ;; Defined at:
 10536 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
 10537 ;; Parameters:    Size  Location     Type
 10538 ;;  f1              3   38[COMRAM] float 
 10539 ;;  f2              3   41[COMRAM] float 
 10540 ;; Auto vars:     Size  Location     Type
 10541 ;;  f3_as_produc    3   48[COMRAM] unsigned um
 10542 ;;  sign            1   52[COMRAM] unsigned char 
 10543 ;;  cntr            1   51[COMRAM] unsigned char 
 10544 ;;  exp             1   47[COMRAM] unsigned char 
 10545 ;; Return value:  Size  Location     Type
 10546 ;;                  3   38[COMRAM] float 
 10547 ;; Registers used:
 10548 ;;		wreg, status,2, status,0, cstack
 10549 ;; Tracked objects:
 10550 ;;		On entry : 0/0
 10551 ;;		On exit  : 0/0
 10552 ;;		Unchanged: 0/0
 10553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10554 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10555 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10556 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10557 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10558 ;;Total ram usage:       15 bytes
 10559 ;; Hardware stack levels used:    1
 10560 ;; Hardware stack levels required when called:    5
 10561 ;; This function calls:
 10562 ;;		___ftpack
 10563 ;; This function is called by:
 10564 ;;		_main
 10565 ;;		_computeRollPitch
 10566 ;;		_fastatan2
 10567 ;;		_rollPid
 10568 ;;		_kalmanUpdate
 10569 ;;		_fround
 10570 ;;		_scale
 10571 ;;		_printf
 10572 ;;		_atan
 10573 ;;		_eval_poly
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           	psect	text50
 10578  003E92                     __ptext50:
 10579                           	opt stack 0
 10580  003E92                     ___ftmul:
 10581                           	opt stack 23
 10582                           
 10583                           ;incstack = 0
 10584  003E92  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
 10585  003E96  6A2E               	clrf	(??___ftmul+1)& (0+255),c
 10586  003E98  6A2F               	clrf	(??___ftmul+2)& (0+255),c
 10587  003E9A  3428               	rlcf	___ftmul@f1+1,w,c
 10588  003E9C  362D               	rlcf	??___ftmul& (0+255),f,c
 10589  003E9E  E301               	bnc	u4541
 10590  003EA0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
 10591  003EA2                     u4541:
 10592  003EA2  502D               	movf	??___ftmul,w,c
 10593  003EA4  6E30               	movwf	___ftmul@exp,c
 10594  003EA6  5030               	movf	___ftmul@exp,w,c
 10595  003EA8  A4D8               	btfss	status,2,c
 10596  003EAA  D007               	goto	l5291
 10597  003EAC  0E00               	movlw	0
 10598  003EAE  6E27               	movwf	?___ftmul,c
 10599  003EB0  0E00               	movlw	0
 10600  003EB2  6E28               	movwf	?___ftmul+1,c
 10601  003EB4  0E00               	movlw	0
 10602  003EB6  6E29               	movwf	?___ftmul+2,c
 10603  003EB8  0012               	return	
 10604  003EBA                     l5291:
 10605  003EBA  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
 10606  003EBE  6A2E               	clrf	(??___ftmul+1)& (0+255),c
 10607  003EC0  6A2F               	clrf	(??___ftmul+2)& (0+255),c
 10608  003EC2  342B               	rlcf	___ftmul@f2+1,w,c
 10609  003EC4  362D               	rlcf	??___ftmul& (0+255),f,c
 10610  003EC6  E301               	bnc	u4561
 10611  003EC8  802E               	bsf	(??___ftmul+1)& (0+255),0,c
 10612  003ECA                     u4561:
 10613  003ECA  502D               	movf	??___ftmul,w,c
 10614  003ECC  6E35               	movwf	___ftmul@sign,c
 10615  003ECE  5035               	movf	___ftmul@sign,w,c
 10616  003ED0  A4D8               	btfss	status,2,c
 10617  003ED2  D007               	goto	l5297
 10618  003ED4  0E00               	movlw	0
 10619  003ED6  6E27               	movwf	?___ftmul,c
 10620  003ED8  0E00               	movlw	0
 10621  003EDA  6E28               	movwf	?___ftmul+1,c
 10622  003EDC  0E00               	movlw	0
 10623  003EDE  6E29               	movwf	?___ftmul+2,c
 10624  003EE0  0012               	return	
 10625  003EE2                     l5297:
 10626  003EE2  5035               	movf	___ftmul@sign,w,c
 10627  003EE4  0F7B               	addlw	123
 10628  003EE6  2630               	addwf	___ftmul@exp,f,c
 10629  003EE8  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
 10630  003EEC  502C               	movf	___ftmul@f2+2,w,c
 10631  003EEE  1A35               	xorwf	___ftmul@sign,f,c
 10632  003EF0  0E80               	movlw	128
 10633  003EF2  1635               	andwf	___ftmul@sign,f,c
 10634  003EF4  8E28               	bsf	___ftmul@f1+1,7,c
 10635  003EF6  8E2B               	bsf	___ftmul@f2+1,7,c
 10636  003EF8  0EFF               	movlw	255
 10637  003EFA  162A               	andwf	___ftmul@f2,f,c
 10638  003EFC  0EFF               	movlw	255
 10639  003EFE  162B               	andwf	___ftmul@f2+1,f,c
 10640  003F00  0E00               	movlw	0
 10641  003F02  162C               	andwf	___ftmul@f2+2,f,c
 10642  003F04  0E00               	movlw	0
 10643  003F06  6E31               	movwf	___ftmul@f3_as_product,c
 10644  003F08  0E00               	movlw	0
 10645  003F0A  6E32               	movwf	___ftmul@f3_as_product+1,c
 10646  003F0C  0E00               	movlw	0
 10647  003F0E  6E33               	movwf	___ftmul@f3_as_product+2,c
 10648  003F10  0E07               	movlw	7
 10649  003F12  6E34               	movwf	___ftmul@cntr,c
 10650  003F14                     l5311:
 10651  003F14  A027               	btfss	___ftmul@f1,0,c
 10652  003F16  D006               	goto	l5315
 10653  003F18  502A               	movf	___ftmul@f2,w,c
 10654  003F1A  2631               	addwf	___ftmul@f3_as_product,f,c
 10655  003F1C  502B               	movf	___ftmul@f2+1,w,c
 10656  003F1E  2232               	addwfc	___ftmul@f3_as_product+1,f,c
 10657  003F20  502C               	movf	___ftmul@f2+2,w,c
 10658  003F22  2233               	addwfc	___ftmul@f3_as_product+2,f,c
 10659  003F24                     l5315:
 10660  003F24  90D8               	bcf	status,0,c
 10661  003F26  3229               	rrcf	___ftmul@f1+2,f,c
 10662  003F28  3228               	rrcf	___ftmul@f1+1,f,c
 10663  003F2A  3227               	rrcf	___ftmul@f1,f,c
 10664  003F2C  90D8               	bcf	status,0,c
 10665  003F2E  362A               	rlcf	___ftmul@f2,f,c
 10666  003F30  362B               	rlcf	___ftmul@f2+1,f,c
 10667  003F32  362C               	rlcf	___ftmul@f2+2,f,c
 10668  003F34  2E34               	decfsz	___ftmul@cntr,f,c
 10669  003F36  D7EE               	goto	l5311
 10670  003F38  0E09               	movlw	9
 10671  003F3A  6E34               	movwf	___ftmul@cntr,c
 10672  003F3C                     l5321:
 10673  003F3C  A027               	btfss	___ftmul@f1,0,c
 10674  003F3E  D006               	goto	l5325
 10675  003F40  502A               	movf	___ftmul@f2,w,c
 10676  003F42  2631               	addwf	___ftmul@f3_as_product,f,c
 10677  003F44  502B               	movf	___ftmul@f2+1,w,c
 10678  003F46  2232               	addwfc	___ftmul@f3_as_product+1,f,c
 10679  003F48  502C               	movf	___ftmul@f2+2,w,c
 10680  003F4A  2233               	addwfc	___ftmul@f3_as_product+2,f,c
 10681  003F4C                     l5325:
 10682  003F4C  90D8               	bcf	status,0,c
 10683  003F4E  3229               	rrcf	___ftmul@f1+2,f,c
 10684  003F50  3228               	rrcf	___ftmul@f1+1,f,c
 10685  003F52  3227               	rrcf	___ftmul@f1,f,c
 10686  003F54  90D8               	bcf	status,0,c
 10687  003F56  3233               	rrcf	___ftmul@f3_as_product+2,f,c
 10688  003F58  3232               	rrcf	___ftmul@f3_as_product+1,f,c
 10689  003F5A  3231               	rrcf	___ftmul@f3_as_product,f,c
 10690  003F5C  2E34               	decfsz	___ftmul@cntr,f,c
 10691  003F5E  D7EE               	goto	l5321
 10692  003F60  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
 10693  003F64  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10694  003F68  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10695  003F6C  C030  F016         	movff	___ftmul@exp,___ftpack@exp
 10696  003F70  C035  F017         	movff	___ftmul@sign,___ftpack@sign
 10697  003F74  EC14  F021         	call	___ftpack	;wreg free
 10698  003F78  C013  F027         	movff	?___ftpack,?___ftmul
 10699  003F7C  C014  F028         	movff	?___ftpack+1,?___ftmul+1
 10700  003F80  C015  F029         	movff	?___ftpack+2,?___ftmul+2
 10701  003F84  0012               	return	
 10702  003F86                     __end_of___ftmul:
 10703                           	opt stack 0
 10704                           tblptru	equ	0xFF8
 10705                           tblptrh	equ	0xFF7
 10706                           tblptrl	equ	0xFF6
 10707                           tablat	equ	0xFF5
 10708                           prodh	equ	0xFF4
 10709                           prodl	equ	0xFF3
 10710                           intcon	equ	0xFF2
 10711                           postinc0	equ	0xFEE
 10712                           wreg	equ	0xFE8
 10713                           postdec1	equ	0xFE5
 10714                           fsr1l	equ	0xFE1
 10715                           indf2	equ	0xFDF
 10716                           postinc2	equ	0xFDE
 10717                           postdec2	equ	0xFDD
 10718                           fsr2h	equ	0xFDA
 10719                           fsr2l	equ	0xFD9
 10720                           status	equ	0xFD8
 10721                           
 10722 ;; *************** function ___ftge *****************
 10723 ;; Defined at:
 10724 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
 10725 ;; Parameters:    Size  Location     Type
 10726 ;;  ff1             3    3[BANK0 ] float 
 10727 ;;  ff2             3    6[BANK0 ] float 
 10728 ;; Auto vars:     Size  Location     Type
 10729 ;;		None
 10730 ;; Return value:  Size  Location     Type
 10731 ;;		None               void
 10732 ;; Registers used:
 10733 ;;		wreg, status,2, status,0
 10734 ;; Tracked objects:
 10735 ;;		On entry : 0/0
 10736 ;;		On exit  : 0/0
 10737 ;;		Unchanged: 0/0
 10738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10739 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10741 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10742 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10743 ;;Total ram usage:        9 bytes
 10744 ;; Hardware stack levels used:    1
 10745 ;; Hardware stack levels required when called:    4
 10746 ;; This function calls:
 10747 ;;		Nothing
 10748 ;; This function is called by:
 10749 ;;		_fastatan2
 10750 ;;		_maximum
 10751 ;;		_minimum
 10752 ;;		_printf
 10753 ;;		_atan2
 10754 ;;		_atan
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           	psect	text51
 10759  004160                     __ptext51:
 10760                           	opt stack 0
 10761  004160                     ___ftge:
 10762                           	opt stack 25
 10763                           
 10764                           ;incstack = 0
 10765  004160  0100               	movlb	0	; () banked
 10766  004162  AF65               	btfss	(___ftge@ff1+2)& (0+255),7,b
 10767  004164  D01D               	goto	l5413
 10768                           
 10769                           ; BSR set to: 0
 10770  004166  C063  F069         	movff	___ftge@ff1,??___ftge
 10771  00416A  C064  F06A         	movff	___ftge@ff1+1,??___ftge+1
 10772  00416E  C065  F06B         	movff	___ftge@ff1+2,??___ftge+2
 10773  004172  0100               	movlb	0	; () banked
 10774  004174  1F69               	comf	??___ftge& (0+255),f,b
 10775  004176  1F6A               	comf	(??___ftge+1)& (0+255),f,b
 10776  004178  1F6B               	comf	(??___ftge+2)& (0+255),f,b
 10777  00417A  2B69               	incf	??___ftge& (0+255),f,b
 10778  00417C  0E00               	movlw	0
 10779  00417E  236A               	addwfc	(??___ftge+1)& (0+255),f,b
 10780  004180  236B               	addwfc	(??___ftge+2)& (0+255),f,b
 10781  004182  0E00               	movlw	0
 10782  004184  0100               	movlb	0	; () banked
 10783  004186  2569               	addwf	??___ftge& (0+255),w,b
 10784  004188  0100               	movlb	0	; () banked
 10785  00418A  6F63               	movwf	___ftge@ff1& (0+255),b
 10786  00418C  0E00               	movlw	0
 10787  00418E  0100               	movlb	0	; () banked
 10788  004190  216A               	addwfc	(??___ftge+1)& (0+255),w,b
 10789  004192  0100               	movlb	0	; () banked
 10790  004194  6F64               	movwf	(___ftge@ff1+1)& (0+255),b
 10791  004196  0E80               	movlw	128
 10792  004198  0100               	movlb	0	; () banked
 10793  00419A  216B               	addwfc	(??___ftge+2)& (0+255),w,b
 10794  00419C  0100               	movlb	0	; () banked
 10795  00419E  6F65               	movwf	(___ftge@ff1+2)& (0+255),b
 10796  0041A0                     l5413:
 10797                           
 10798                           ; BSR set to: 0
 10799  0041A0  0100               	movlb	0	; () banked
 10800  0041A2  AF68               	btfss	(___ftge@ff2+2)& (0+255),7,b
 10801  0041A4  D01D               	goto	l5417
 10802                           
 10803                           ; BSR set to: 0
 10804  0041A6  C066  F069         	movff	___ftge@ff2,??___ftge
 10805  0041AA  C067  F06A         	movff	___ftge@ff2+1,??___ftge+1
 10806  0041AE  C068  F06B         	movff	___ftge@ff2+2,??___ftge+2
 10807  0041B2  0100               	movlb	0	; () banked
 10808  0041B4  1F69               	comf	??___ftge& (0+255),f,b
 10809  0041B6  1F6A               	comf	(??___ftge+1)& (0+255),f,b
 10810  0041B8  1F6B               	comf	(??___ftge+2)& (0+255),f,b
 10811  0041BA  2B69               	incf	??___ftge& (0+255),f,b
 10812  0041BC  0E00               	movlw	0
 10813  0041BE  236A               	addwfc	(??___ftge+1)& (0+255),f,b
 10814  0041C0  236B               	addwfc	(??___ftge+2)& (0+255),f,b
 10815  0041C2  0E00               	movlw	0
 10816  0041C4  0100               	movlb	0	; () banked
 10817  0041C6  2569               	addwf	??___ftge& (0+255),w,b
 10818  0041C8  0100               	movlb	0	; () banked
 10819  0041CA  6F66               	movwf	___ftge@ff2& (0+255),b
 10820  0041CC  0E00               	movlw	0
 10821  0041CE  0100               	movlb	0	; () banked
 10822  0041D0  216A               	addwfc	(??___ftge+1)& (0+255),w,b
 10823  0041D2  0100               	movlb	0	; () banked
 10824  0041D4  6F67               	movwf	(___ftge@ff2+1)& (0+255),b
 10825  0041D6  0E80               	movlw	128
 10826  0041D8  0100               	movlb	0	; () banked
 10827  0041DA  216B               	addwfc	(??___ftge+2)& (0+255),w,b
 10828  0041DC  0100               	movlb	0	; () banked
 10829  0041DE  6F68               	movwf	(___ftge@ff2+2)& (0+255),b
 10830  0041E0                     l5417:
 10831                           
 10832                           ; BSR set to: 0
 10833  0041E0  0E00               	movlw	0
 10834  0041E2  0100               	movlb	0	; () banked
 10835  0041E4  1B63               	xorwf	___ftge@ff1& (0+255),f,b
 10836  0041E6  0E00               	movlw	0
 10837  0041E8  0100               	movlb	0	; () banked
 10838  0041EA  1B64               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 10839  0041EC  0E80               	movlw	128
 10840  0041EE  0100               	movlb	0	; () banked
 10841  0041F0  1B65               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 10842                           
 10843                           ; BSR set to: 0
 10844  0041F2  0E00               	movlw	0
 10845  0041F4  0100               	movlb	0	; () banked
 10846  0041F6  1B66               	xorwf	___ftge@ff2& (0+255),f,b
 10847  0041F8  0E00               	movlw	0
 10848  0041FA  0100               	movlb	0	; () banked
 10849  0041FC  1B67               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 10850  0041FE  0E80               	movlw	128
 10851  004200  0100               	movlb	0	; () banked
 10852  004202  1B68               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 10853  004204  0100               	movlb	0	; () banked
 10854  004206  5166               	movf	___ftge@ff2& (0+255),w,b
 10855  004208  0100               	movlb	0	; () banked
 10856  00420A  5D63               	subwf	___ftge@ff1& (0+255),w,b
 10857  00420C  0100               	movlb	0	; () banked
 10858  00420E  5167               	movf	(___ftge@ff2+1)& (0+255),w,b
 10859  004210  0100               	movlb	0	; () banked
 10860  004212  5964               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 10861  004214  0100               	movlb	0	; () banked
 10862  004216  5168               	movf	(___ftge@ff2+2)& (0+255),w,b
 10863  004218  0100               	movlb	0	; () banked
 10864  00421A  5965               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 10865  00421C  B0D8               	btfsc	status,0,c
 10866  00421E  D002               	goto	l5423
 10867                           
 10868                           ; BSR set to: 0
 10869  004220  90D8               	bcf	status,0,c
 10870  004222  0012               	return	
 10871  004224                     l5423:
 10872                           
 10873                           ; BSR set to: 0
 10874  004224  80D8               	bsf	status,0,c
 10875                           
 10876                           ; BSR set to: 0
 10877  004226  0012               	return	
 10878  004228                     __end_of___ftge:
 10879                           	opt stack 0
 10880                           tblptru	equ	0xFF8
 10881                           tblptrh	equ	0xFF7
 10882                           tblptrl	equ	0xFF6
 10883                           tablat	equ	0xFF5
 10884                           prodh	equ	0xFF4
 10885                           prodl	equ	0xFF3
 10886                           intcon	equ	0xFF2
 10887                           postinc0	equ	0xFEE
 10888                           wreg	equ	0xFE8
 10889                           postdec1	equ	0xFE5
 10890                           fsr1l	equ	0xFE1
 10891                           indf2	equ	0xFDF
 10892                           postinc2	equ	0xFDE
 10893                           postdec2	equ	0xFDD
 10894                           fsr2h	equ	0xFDA
 10895                           fsr2l	equ	0xFD9
 10896                           status	equ	0xFD8
 10897                           
 10898 ;; *************** function ___ftdiv *****************
 10899 ;; Defined at:
 10900 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;  f1              3   19[BANK0 ] float 
 10903 ;;  f2              3   22[BANK0 ] float 
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;  f3              3   29[BANK0 ] float 
 10906 ;;  sign            1   33[BANK0 ] unsigned char 
 10907 ;;  exp             1   32[BANK0 ] unsigned char 
 10908 ;;  cntr            1   28[BANK0 ] unsigned char 
 10909 ;; Return value:  Size  Location     Type
 10910 ;;                  3   19[BANK0 ] float 
 10911 ;; Registers used:
 10912 ;;		wreg, status,2, status,0, cstack
 10913 ;; Tracked objects:
 10914 ;;		On entry : 0/0
 10915 ;;		On exit  : 0/0
 10916 ;;		Unchanged: 0/0
 10917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10918 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10919 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10920 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10921 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10922 ;;Total ram usage:       15 bytes
 10923 ;; Hardware stack levels used:    1
 10924 ;; Hardware stack levels required when called:    5
 10925 ;; This function calls:
 10926 ;;		___ftpack
 10927 ;; This function is called by:
 10928 ;;		_readAccel
 10929 ;;		_fastatan2
 10930 ;;		_kalmanUpdate
 10931 ;;		_atan2
 10932 ;;		_atan
 10933 ;; This function uses a non-reentrant model
 10934 ;;
 10935                           
 10936                           	psect	text52
 10937  003556                     __ptext52:
 10938                           	opt stack 0
 10939  003556                     ___ftdiv:
 10940                           	opt stack 23
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;incstack = 0
 10944  003556  C075  F079         	movff	___ftdiv@f1+2,??___ftdiv
 10945  00355A  0100               	movlb	0	; () banked
 10946  00355C  6B7A               	clrf	(??___ftdiv+1)& (0+255),b
 10947  00355E  6B7B               	clrf	(??___ftdiv+2)& (0+255),b
 10948  003560  0100               	movlb	0	; () banked
 10949  003562  3574               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10950  003564  0100               	movlb	0	; () banked
 10951  003566  3779               	rlcf	??___ftdiv& (0+255),f,b
 10952  003568  E301               	bnc	u4641
 10953  00356A  817A               	bsf	(??___ftdiv+1)& (0+255),0,b
 10954  00356C                     u4641:
 10955  00356C  0100               	movlb	0	; () banked
 10956  00356E  5179               	movf	??___ftdiv& (0+255),w,b
 10957  003570  0100               	movlb	0	; () banked
 10958  003572  6F80               	movwf	___ftdiv@exp& (0+255),b
 10959  003574  0100               	movlb	0	; () banked
 10960  003576  5180               	movf	___ftdiv@exp& (0+255),w,b
 10961  003578  A4D8               	btfss	status,2,c
 10962  00357A  D00A               	goto	l5369
 10963                           
 10964                           ; BSR set to: 0
 10965  00357C  0E00               	movlw	0
 10966  00357E  0100               	movlb	0	; () banked
 10967  003580  6F73               	movwf	?___ftdiv& (0+255),b
 10968  003582  0E00               	movlw	0
 10969  003584  0100               	movlb	0	; () banked
 10970  003586  6F74               	movwf	(?___ftdiv+1)& (0+255),b
 10971  003588  0E00               	movlw	0
 10972  00358A  0100               	movlb	0	; () banked
 10973  00358C  6F75               	movwf	(?___ftdiv+2)& (0+255),b
 10974                           
 10975                           ; BSR set to: 0
 10976  00358E  0012               	return	
 10977  003590                     l5369:
 10978                           
 10979                           ; BSR set to: 0
 10980  003590  C078  F079         	movff	___ftdiv@f2+2,??___ftdiv
 10981  003594  0100               	movlb	0	; () banked
 10982  003596  6B7A               	clrf	(??___ftdiv+1)& (0+255),b
 10983  003598  6B7B               	clrf	(??___ftdiv+2)& (0+255),b
 10984  00359A  0100               	movlb	0	; () banked
 10985  00359C  3577               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10986  00359E  0100               	movlb	0	; () banked
 10987  0035A0  3779               	rlcf	??___ftdiv& (0+255),f,b
 10988  0035A2  E301               	bnc	u4661
 10989  0035A4  817A               	bsf	(??___ftdiv+1)& (0+255),0,b
 10990  0035A6                     u4661:
 10991  0035A6  0100               	movlb	0	; () banked
 10992  0035A8  5179               	movf	??___ftdiv& (0+255),w,b
 10993  0035AA  0100               	movlb	0	; () banked
 10994  0035AC  6F81               	movwf	___ftdiv@sign& (0+255),b
 10995  0035AE  0100               	movlb	0	; () banked
 10996  0035B0  5181               	movf	___ftdiv@sign& (0+255),w,b
 10997  0035B2  A4D8               	btfss	status,2,c
 10998  0035B4  D00A               	goto	l5375
 10999                           
 11000                           ; BSR set to: 0
 11001  0035B6  0E00               	movlw	0
 11002  0035B8  0100               	movlb	0	; () banked
 11003  0035BA  6F73               	movwf	?___ftdiv& (0+255),b
 11004  0035BC  0E00               	movlw	0
 11005  0035BE  0100               	movlb	0	; () banked
 11006  0035C0  6F74               	movwf	(?___ftdiv+1)& (0+255),b
 11007  0035C2  0E00               	movlw	0
 11008  0035C4  0100               	movlb	0	; () banked
 11009  0035C6  6F75               	movwf	(?___ftdiv+2)& (0+255),b
 11010                           
 11011                           ; BSR set to: 0
 11012  0035C8  0012               	return	
 11013  0035CA                     l5375:
 11014                           
 11015                           ; BSR set to: 0
 11016  0035CA  0E00               	movlw	0
 11017  0035CC  0100               	movlb	0	; () banked
 11018  0035CE  6F7D               	movwf	___ftdiv@f3& (0+255),b
 11019  0035D0  0E00               	movlw	0
 11020  0035D2  0100               	movlb	0	; () banked
 11021  0035D4  6F7E               	movwf	(___ftdiv@f3+1)& (0+255),b
 11022  0035D6  0E00               	movlw	0
 11023  0035D8  0100               	movlb	0	; () banked
 11024  0035DA  6F7F               	movwf	(___ftdiv@f3+2)& (0+255),b
 11025                           
 11026                           ; BSR set to: 0
 11027  0035DC  0100               	movlb	0	; () banked
 11028  0035DE  5181               	movf	___ftdiv@sign& (0+255),w,b
 11029  0035E0  0F89               	addlw	137
 11030  0035E2  0100               	movlb	0	; () banked
 11031  0035E4  5F80               	subwf	___ftdiv@exp& (0+255),f,b
 11032                           
 11033                           ; BSR set to: 0
 11034  0035E6  C075  F081         	movff	___ftdiv@f1+2,___ftdiv@sign
 11035                           
 11036                           ; BSR set to: 0
 11037  0035EA  0100               	movlb	0	; () banked
 11038  0035EC  5178               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11039  0035EE  0100               	movlb	0	; () banked
 11040  0035F0  1B81               	xorwf	___ftdiv@sign& (0+255),f,b
 11041                           
 11042                           ; BSR set to: 0
 11043  0035F2  0E80               	movlw	128
 11044  0035F4  0100               	movlb	0	; () banked
 11045  0035F6  1781               	andwf	___ftdiv@sign& (0+255),f,b
 11046                           
 11047                           ; BSR set to: 0
 11048  0035F8  0100               	movlb	0	; () banked
 11049  0035FA  8F74               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 11050                           
 11051                           ; BSR set to: 0
 11052  0035FC  0EFF               	movlw	255
 11053  0035FE  0100               	movlb	0	; () banked
 11054  003600  1773               	andwf	___ftdiv@f1& (0+255),f,b
 11055  003602  0EFF               	movlw	255
 11056  003604  0100               	movlb	0	; () banked
 11057  003606  1774               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 11058  003608  0E00               	movlw	0
 11059  00360A  0100               	movlb	0	; () banked
 11060  00360C  1775               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 11061                           
 11062                           ; BSR set to: 0
 11063  00360E  0100               	movlb	0	; () banked
 11064  003610  8F77               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 11065                           
 11066                           ; BSR set to: 0
 11067  003612  0EFF               	movlw	255
 11068  003614  0100               	movlb	0	; () banked
 11069  003616  1776               	andwf	___ftdiv@f2& (0+255),f,b
 11070  003618  0EFF               	movlw	255
 11071  00361A  0100               	movlb	0	; () banked
 11072  00361C  1777               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 11073  00361E  0E00               	movlw	0
 11074  003620  0100               	movlb	0	; () banked
 11075  003622  1778               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 11076                           
 11077                           ; BSR set to: 0
 11078  003624  0E18               	movlw	24
 11079  003626  0100               	movlb	0	; () banked
 11080  003628  6F7C               	movwf	___ftdiv@cntr& (0+255),b
 11081  00362A                     l5395:
 11082                           
 11083                           ; BSR set to: 0
 11084  00362A  0100               	movlb	0	; () banked
 11085  00362C  90D8               	bcf	status,0,c
 11086  00362E  377D               	rlcf	___ftdiv@f3& (0+255),f,b
 11087  003630  377E               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 11088  003632  377F               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 11089                           
 11090                           ; BSR set to: 0
 11091  003634  0100               	movlb	0	; () banked
 11092  003636  5176               	movf	___ftdiv@f2& (0+255),w,b
 11093  003638  0100               	movlb	0	; () banked
 11094  00363A  5D73               	subwf	___ftdiv@f1& (0+255),w,b
 11095  00363C  0100               	movlb	0	; () banked
 11096  00363E  5177               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11097  003640  0100               	movlb	0	; () banked
 11098  003642  5974               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 11099  003644  0100               	movlb	0	; () banked
 11100  003646  5178               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11101  003648  0100               	movlb	0	; () banked
 11102  00364A  5975               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 11103  00364C  A0D8               	btfss	status,0,c
 11104  00364E  D00E               	goto	l1450
 11105                           
 11106                           ; BSR set to: 0
 11107  003650  0100               	movlb	0	; () banked
 11108  003652  5176               	movf	___ftdiv@f2& (0+255),w,b
 11109  003654  0100               	movlb	0	; () banked
 11110  003656  5F73               	subwf	___ftdiv@f1& (0+255),f,b
 11111  003658  0100               	movlb	0	; () banked
 11112  00365A  5177               	movf	(___ftdiv@f2+1)& (0+255),w,b
 11113  00365C  0100               	movlb	0	; () banked
 11114  00365E  5B74               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 11115  003660  0100               	movlb	0	; () banked
 11116  003662  5178               	movf	(___ftdiv@f2+2)& (0+255),w,b
 11117  003664  0100               	movlb	0	; () banked
 11118  003666  5B75               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 11119                           
 11120                           ; BSR set to: 0
 11121  003668  0100               	movlb	0	; () banked
 11122  00366A  817D               	bsf	___ftdiv@f3& (0+255),0,b
 11123  00366C                     l1450:
 11124                           
 11125                           ; BSR set to: 0
 11126  00366C  0100               	movlb	0	; () banked
 11127  00366E  90D8               	bcf	status,0,c
 11128  003670  3773               	rlcf	___ftdiv@f1& (0+255),f,b
 11129  003672  3774               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 11130  003674  3775               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 11131                           
 11132                           ; BSR set to: 0
 11133  003676  0100               	movlb	0	; () banked
 11134  003678  2F7C               	decfsz	___ftdiv@cntr& (0+255),f,b
 11135  00367A  D7D7               	goto	l5395
 11136                           
 11137                           ; BSR set to: 0
 11138                           
 11139                           ; BSR set to: 0
 11140  00367C  C07D  F013         	movff	___ftdiv@f3,___ftpack@arg
 11141  003680  C07E  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11142  003684  C07F  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11143  003688  C080  F016         	movff	___ftdiv@exp,___ftpack@exp
 11144  00368C  C081  F017         	movff	___ftdiv@sign,___ftpack@sign
 11145  003690  EC14  F021         	call	___ftpack	;wreg free
 11146  003694  C013  F073         	movff	?___ftpack,?___ftdiv
 11147  003698  C014  F074         	movff	?___ftpack+1,?___ftdiv+1
 11148  00369C  C015  F075         	movff	?___ftpack+2,?___ftdiv+2
 11149  0036A0  0012               	return	
 11150  0036A2                     __end_of___ftdiv:
 11151                           	opt stack 0
 11152                           tblptru	equ	0xFF8
 11153                           tblptrh	equ	0xFF7
 11154                           tblptrl	equ	0xFF6
 11155                           tablat	equ	0xFF5
 11156                           prodh	equ	0xFF4
 11157                           prodl	equ	0xFF3
 11158                           intcon	equ	0xFF2
 11159                           postinc0	equ	0xFEE
 11160                           wreg	equ	0xFE8
 11161                           postdec1	equ	0xFE5
 11162                           fsr1l	equ	0xFE1
 11163                           indf2	equ	0xFDF
 11164                           postinc2	equ	0xFDE
 11165                           postdec2	equ	0xFDD
 11166                           fsr2h	equ	0xFDA
 11167                           fsr2l	equ	0xFD9
 11168                           status	equ	0xFD8
 11169                           
 11170 ;; *************** function ___ftsub *****************
 11171 ;; Defined at:
 11172 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
 11173 ;; Parameters:    Size  Location     Type
 11174 ;;  f1              3   19[BANK0 ] float 
 11175 ;;  f2              3   22[BANK0 ] float 
 11176 ;; Auto vars:     Size  Location     Type
 11177 ;;		None
 11178 ;; Return value:  Size  Location     Type
 11179 ;;                  3   19[BANK0 ] float 
 11180 ;; Registers used:
 11181 ;;		wreg, status,2, status,0, cstack
 11182 ;; Tracked objects:
 11183 ;;		On entry : 0/0
 11184 ;;		On exit  : 0/0
 11185 ;;		Unchanged: 0/0
 11186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11187 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11190 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11191 ;;Total ram usage:        6 bytes
 11192 ;; Hardware stack levels used:    1
 11193 ;; Hardware stack levels required when called:    6
 11194 ;; This function calls:
 11195 ;;		___ftadd
 11196 ;; This function is called by:
 11197 ;;		_main
 11198 ;;		_computeRollPitch
 11199 ;;		_printf
 11200 ;;		_atan2
 11201 ;; This function uses a non-reentrant model
 11202 ;;
 11203                           
 11204                           	psect	text53
 11205  004732                     __ptext53:
 11206                           	opt stack 0
 11207  004732                     ___ftsub:
 11208                           	opt stack 23
 11209                           
 11210                           ;incstack = 0
 11211  004732  0100               	movlb	0	; () banked
 11212  004734  5176               	movf	___ftsub@f2& (0+255),w,b
 11213  004736  0100               	movlb	0	; () banked
 11214  004738  1177               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11215  00473A  0100               	movlb	0	; () banked
 11216  00473C  1178               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11217  00473E  B4D8               	btfsc	status,2,c
 11218  004740  D009               	goto	l5497
 11219                           
 11220                           ; BSR set to: 0
 11221  004742  0E00               	movlw	0
 11222  004744  0100               	movlb	0	; () banked
 11223  004746  1B76               	xorwf	___ftsub@f2& (0+255),f,b
 11224  004748  0E00               	movlw	0
 11225  00474A  0100               	movlb	0	; () banked
 11226  00474C  1B77               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11227  00474E  0E80               	movlw	128
 11228  004750  0100               	movlb	0	; () banked
 11229  004752  1B78               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11230  004754                     l5497:
 11231                           
 11232                           ; BSR set to: 0
 11233  004754  C073  F067         	movff	___ftsub@f1,___ftadd@f1
 11234  004758  C074  F068         	movff	___ftsub@f1+1,___ftadd@f1+1
 11235  00475C  C075  F069         	movff	___ftsub@f1+2,___ftadd@f1+2
 11236  004760  C076  F06A         	movff	___ftsub@f2,___ftadd@f2
 11237  004764  C077  F06B         	movff	___ftsub@f2+1,___ftadd@f2+1
 11238  004768  C078  F06C         	movff	___ftsub@f2+2,___ftadd@f2+2
 11239  00476C  EC03  F016         	call	___ftadd	;wreg free
 11240  004770  C067  F073         	movff	?___ftadd,?___ftsub
 11241  004774  C068  F074         	movff	?___ftadd+1,?___ftsub+1
 11242  004778  C069  F075         	movff	?___ftadd+2,?___ftsub+2
 11243  00477C  0012               	return	
 11244  00477E                     __end_of___ftsub:
 11245                           	opt stack 0
 11246                           tblptru	equ	0xFF8
 11247                           tblptrh	equ	0xFF7
 11248                           tblptrl	equ	0xFF6
 11249                           tablat	equ	0xFF5
 11250                           prodh	equ	0xFF4
 11251                           prodl	equ	0xFF3
 11252                           intcon	equ	0xFF2
 11253                           postinc0	equ	0xFEE
 11254                           wreg	equ	0xFE8
 11255                           postdec1	equ	0xFE5
 11256                           fsr1l	equ	0xFE1
 11257                           indf2	equ	0xFDF
 11258                           postinc2	equ	0xFDE
 11259                           postdec2	equ	0xFDD
 11260                           fsr2h	equ	0xFDA
 11261                           fsr2l	equ	0xFD9
 11262                           status	equ	0xFD8
 11263                           
 11264 ;; *************** function ___ftadd *****************
 11265 ;; Defined at:
 11266 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
 11267 ;; Parameters:    Size  Location     Type
 11268 ;;  f1              3    7[BANK0 ] float 
 11269 ;;  f2              3   10[BANK0 ] float 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  exp1            1   18[BANK0 ] unsigned char 
 11272 ;;  exp2            1   17[BANK0 ] unsigned char 
 11273 ;;  sign            1   16[BANK0 ] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  3    7[BANK0 ] float 
 11276 ;; Registers used:
 11277 ;;		wreg, status,2, status,0, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11283 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11284 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11285 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11286 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11287 ;;Total ram usage:       12 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    5
 11290 ;; This function calls:
 11291 ;;		___ftpack
 11292 ;; This function is called by:
 11293 ;;		_main
 11294 ;;		_computeRollPitch
 11295 ;;		_fastatan2
 11296 ;;		_rollPid
 11297 ;;		_kalmanUpdate
 11298 ;;		_printf
 11299 ;;		_atan2
 11300 ;;		___ftsub
 11301 ;;		_atan
 11302 ;;		_eval_poly
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text54
 11307  002C06                     __ptext54:
 11308                           	opt stack 0
 11309  002C06                     ___ftadd:
 11310                           	opt stack 23
 11311                           
 11312                           ;incstack = 0
 11313  002C06  C069  F06D         	movff	___ftadd@f1+2,??___ftadd
 11314  002C0A  0100               	movlb	0	; () banked
 11315  002C0C  6B6E               	clrf	(??___ftadd+1)& (0+255),b
 11316  002C0E  6B6F               	clrf	(??___ftadd+2)& (0+255),b
 11317  002C10  0100               	movlb	0	; () banked
 11318  002C12  3568               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 11319  002C14  0100               	movlb	0	; () banked
 11320  002C16  376D               	rlcf	??___ftadd& (0+255),f,b
 11321  002C18  E301               	bnc	u4331
 11322  002C1A  816E               	bsf	(??___ftadd+1)& (0+255),0,b
 11323  002C1C                     u4331:
 11324  002C1C  0100               	movlb	0	; () banked
 11325  002C1E  516D               	movf	??___ftadd& (0+255),w,b
 11326  002C20  0100               	movlb	0	; () banked
 11327  002C22  6F72               	movwf	___ftadd@exp1& (0+255),b
 11328  002C24  C06C  F06D         	movff	___ftadd@f2+2,??___ftadd
 11329  002C28  0100               	movlb	0	; () banked
 11330  002C2A  6B6E               	clrf	(??___ftadd+1)& (0+255),b
 11331  002C2C  6B6F               	clrf	(??___ftadd+2)& (0+255),b
 11332  002C2E  0100               	movlb	0	; () banked
 11333  002C30  356B               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 11334  002C32  0100               	movlb	0	; () banked
 11335  002C34  376D               	rlcf	??___ftadd& (0+255),f,b
 11336  002C36  E301               	bnc	u4341
 11337  002C38  816E               	bsf	(??___ftadd+1)& (0+255),0,b
 11338  002C3A                     u4341:
 11339  002C3A  0100               	movlb	0	; () banked
 11340  002C3C  516D               	movf	??___ftadd& (0+255),w,b
 11341  002C3E  0100               	movlb	0	; () banked
 11342  002C40  6F71               	movwf	___ftadd@exp2& (0+255),b
 11343                           
 11344                           ; BSR set to: 0
 11345  002C42  0100               	movlb	0	; () banked
 11346  002C44  5172               	movf	___ftadd@exp1& (0+255),w,b
 11347  002C46  0100               	movlb	0	; () banked
 11348  002C48  B4D8               	btfsc	status,2,c
 11349  002C4A  D011               	goto	l1415
 11350                           
 11351                           ; BSR set to: 0
 11352  002C4C  0100               	movlb	0	; () banked
 11353  002C4E  5171               	movf	___ftadd@exp2& (0+255),w,b
 11354  002C50  0100               	movlb	0	; () banked
 11355  002C52  5D72               	subwf	___ftadd@exp1& (0+255),w,b
 11356  002C54  B0D8               	btfsc	status,0,c
 11357  002C56  D012               	goto	l5223
 11358                           
 11359                           ; BSR set to: 0
 11360  002C58  0100               	movlb	0	; () banked
 11361  002C5A  5172               	movf	___ftadd@exp1& (0+255),w,b
 11362  002C5C  0800               	sublw	0
 11363  002C5E  0100               	movlb	0	; () banked
 11364  002C60  2571               	addwf	___ftadd@exp2& (0+255),w,b
 11365  002C62  0100               	movlb	0	; () banked
 11366  002C64  6F6D               	movwf	??___ftadd& (0+255),b
 11367  002C66  0E18               	movlw	24
 11368  002C68  0100               	movlb	0	; () banked
 11369  002C6A  656D               	cpfsgt	??___ftadd& (0+255),b
 11370  002C6C  D007               	goto	l5223
 11371  002C6E                     l1415:
 11372                           
 11373                           ; BSR set to: 0
 11374  002C6E  C06A  F067         	movff	___ftadd@f2,?___ftadd
 11375  002C72  C06B  F068         	movff	___ftadd@f2+1,?___ftadd+1
 11376  002C76  C06C  F069         	movff	___ftadd@f2+2,?___ftadd+2
 11377  002C7A  0012               	return	
 11378  002C7C                     l5223:
 11379                           
 11380                           ; BSR set to: 0
 11381  002C7C  0100               	movlb	0	; () banked
 11382  002C7E  5171               	movf	___ftadd@exp2& (0+255),w,b
 11383  002C80  0100               	movlb	0	; () banked
 11384  002C82  B4D8               	btfsc	status,2,c
 11385  002C84  D011               	goto	l1419
 11386                           
 11387                           ; BSR set to: 0
 11388  002C86  0100               	movlb	0	; () banked
 11389  002C88  5172               	movf	___ftadd@exp1& (0+255),w,b
 11390  002C8A  0100               	movlb	0	; () banked
 11391  002C8C  5D71               	subwf	___ftadd@exp2& (0+255),w,b
 11392  002C8E  B0D8               	btfsc	status,0,c
 11393  002C90  D012               	goto	l5229
 11394                           
 11395                           ; BSR set to: 0
 11396  002C92  0100               	movlb	0	; () banked
 11397  002C94  5171               	movf	___ftadd@exp2& (0+255),w,b
 11398  002C96  0800               	sublw	0
 11399  002C98  0100               	movlb	0	; () banked
 11400  002C9A  2572               	addwf	___ftadd@exp1& (0+255),w,b
 11401  002C9C  0100               	movlb	0	; () banked
 11402  002C9E  6F6D               	movwf	??___ftadd& (0+255),b
 11403  002CA0  0E18               	movlw	24
 11404  002CA2  0100               	movlb	0	; () banked
 11405  002CA4  656D               	cpfsgt	??___ftadd& (0+255),b
 11406  002CA6  D007               	goto	l5229
 11407  002CA8                     l1419:
 11408                           
 11409                           ; BSR set to: 0
 11410  002CA8  C067  F067         	movff	___ftadd@f1,?___ftadd
 11411  002CAC  C068  F068         	movff	___ftadd@f1+1,?___ftadd+1
 11412  002CB0  C069  F069         	movff	___ftadd@f1+2,?___ftadd+2
 11413  002CB4  0012               	return	
 11414  002CB6                     l5229:
 11415                           
 11416                           ; BSR set to: 0
 11417  002CB6  0E06               	movlw	6
 11418  002CB8  0100               	movlb	0	; () banked
 11419  002CBA  6F70               	movwf	___ftadd@sign& (0+255),b
 11420                           
 11421                           ; BSR set to: 0
 11422  002CBC  0100               	movlb	0	; () banked
 11423  002CBE  AF69               	btfss	(___ftadd@f1+2)& (0+255),7,b
 11424  002CC0  D002               	goto	l5235
 11425                           
 11426                           ; BSR set to: 0
 11427  002CC2  0100               	movlb	0	; () banked
 11428  002CC4  8F70               	bsf	___ftadd@sign& (0+255),7,b
 11429  002CC6                     l5235:
 11430                           
 11431                           ; BSR set to: 0
 11432  002CC6  0100               	movlb	0	; () banked
 11433  002CC8  AF6C               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11434  002CCA  D002               	goto	l1421
 11435                           
 11436                           ; BSR set to: 0
 11437  002CCC  0100               	movlb	0	; () banked
 11438  002CCE  8D70               	bsf	___ftadd@sign& (0+255),6,b
 11439  002CD0                     l1421:
 11440                           
 11441                           ; BSR set to: 0
 11442  002CD0  0100               	movlb	0	; () banked
 11443  002CD2  8F68               	bsf	(___ftadd@f1+1)& (0+255),7,b
 11444                           
 11445                           ; BSR set to: 0
 11446  002CD4  0EFF               	movlw	255
 11447  002CD6  0100               	movlb	0	; () banked
 11448  002CD8  1767               	andwf	___ftadd@f1& (0+255),f,b
 11449  002CDA  0EFF               	movlw	255
 11450  002CDC  0100               	movlb	0	; () banked
 11451  002CDE  1768               	andwf	(___ftadd@f1+1)& (0+255),f,b
 11452  002CE0  0E00               	movlw	0
 11453  002CE2  0100               	movlb	0	; () banked
 11454  002CE4  1769               	andwf	(___ftadd@f1+2)& (0+255),f,b
 11455  002CE6  0100               	movlb	0	; () banked
 11456  002CE8  8F6B               	bsf	(___ftadd@f2+1)& (0+255),7,b
 11457                           
 11458                           ; BSR set to: 0
 11459  002CEA  0EFF               	movlw	255
 11460  002CEC  0100               	movlb	0	; () banked
 11461  002CEE  176A               	andwf	___ftadd@f2& (0+255),f,b
 11462  002CF0  0EFF               	movlw	255
 11463  002CF2  0100               	movlb	0	; () banked
 11464  002CF4  176B               	andwf	(___ftadd@f2+1)& (0+255),f,b
 11465  002CF6  0E00               	movlw	0
 11466  002CF8  0100               	movlb	0	; () banked
 11467  002CFA  176C               	andwf	(___ftadd@f2+2)& (0+255),f,b
 11468                           
 11469                           ; BSR set to: 0
 11470  002CFC  0100               	movlb	0	; () banked
 11471  002CFE  5171               	movf	___ftadd@exp2& (0+255),w,b
 11472  002D00  0100               	movlb	0	; () banked
 11473  002D02  5D72               	subwf	___ftadd@exp1& (0+255),w,b
 11474  002D04  B0D8               	btfsc	status,0,c
 11475  002D06  D025               	goto	l5255
 11476  002D08                     l5245:
 11477                           
 11478                           ; BSR set to: 0
 11479  002D08  0100               	movlb	0	; () banked
 11480  002D0A  90D8               	bcf	status,0,c
 11481  002D0C  376A               	rlcf	___ftadd@f2& (0+255),f,b
 11482  002D0E  376B               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 11483  002D10  376C               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 11484  002D12  0100               	movlb	0	; () banked
 11485  002D14  0771               	decf	___ftadd@exp2& (0+255),f,b
 11486                           
 11487                           ; BSR set to: 0
 11488  002D16  0100               	movlb	0	; () banked
 11489  002D18  5172               	movf	___ftadd@exp1& (0+255),w,b
 11490  002D1A  0100               	movlb	0	; () banked
 11491  002D1C  1971               	xorwf	___ftadd@exp2& (0+255),w,b
 11492  002D1E  B4D8               	btfsc	status,2,c
 11493  002D20  D011               	goto	l5253
 11494                           
 11495                           ; BSR set to: 0
 11496  002D22  0100               	movlb	0	; () banked
 11497  002D24  0770               	decf	___ftadd@sign& (0+255),f,b
 11498  002D26  C070  F06D         	movff	___ftadd@sign,??___ftadd
 11499  002D2A  0E07               	movlw	7
 11500  002D2C  0100               	movlb	0	; () banked
 11501  002D2E  176D               	andwf	??___ftadd& (0+255),f,b
 11502  002D30  B4D8               	btfsc	status,2,c
 11503  002D32  D008               	goto	l5253
 11504  002D34  D7E9               	goto	l5245
 11505  002D36                     l5251:
 11506                           
 11507                           ; BSR set to: 0
 11508  002D36  0100               	movlb	0	; () banked
 11509  002D38  90D8               	bcf	status,0,c
 11510  002D3A  3369               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 11511  002D3C  3368               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 11512  002D3E  3367               	rrcf	___ftadd@f1& (0+255),f,b
 11513  002D40  0100               	movlb	0	; () banked
 11514  002D42  2B72               	incf	___ftadd@exp1& (0+255),f,b
 11515  002D44                     l5253:
 11516                           
 11517                           ; BSR set to: 0
 11518  002D44  0100               	movlb	0	; () banked
 11519  002D46  5171               	movf	___ftadd@exp2& (0+255),w,b
 11520  002D48  0100               	movlb	0	; () banked
 11521  002D4A  1972               	xorwf	___ftadd@exp1& (0+255),w,b
 11522  002D4C  B4D8               	btfsc	status,2,c
 11523  002D4E  D02B               	goto	l1430
 11524  002D50  D7F2               	goto	l5251
 11525  002D52                     l5255:
 11526                           
 11527                           ; BSR set to: 0
 11528  002D52  0100               	movlb	0	; () banked
 11529  002D54  5172               	movf	___ftadd@exp1& (0+255),w,b
 11530  002D56  0100               	movlb	0	; () banked
 11531  002D58  5D71               	subwf	___ftadd@exp2& (0+255),w,b
 11532  002D5A  B0D8               	btfsc	status,0,c
 11533  002D5C  D024               	goto	l1430
 11534  002D5E                     l5257:
 11535                           
 11536                           ; BSR set to: 0
 11537  002D5E  0100               	movlb	0	; () banked
 11538  002D60  90D8               	bcf	status,0,c
 11539  002D62  3767               	rlcf	___ftadd@f1& (0+255),f,b
 11540  002D64  3768               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 11541  002D66  3769               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 11542  002D68  0100               	movlb	0	; () banked
 11543  002D6A  0772               	decf	___ftadd@exp1& (0+255),f,b
 11544                           
 11545                           ; BSR set to: 0
 11546  002D6C  0100               	movlb	0	; () banked
 11547  002D6E  5172               	movf	___ftadd@exp1& (0+255),w,b
 11548  002D70  0100               	movlb	0	; () banked
 11549  002D72  1971               	xorwf	___ftadd@exp2& (0+255),w,b
 11550  002D74  B4D8               	btfsc	status,2,c
 11551  002D76  D011               	goto	l5265
 11552                           
 11553                           ; BSR set to: 0
 11554  002D78  0100               	movlb	0	; () banked
 11555  002D7A  0770               	decf	___ftadd@sign& (0+255),f,b
 11556  002D7C  C070  F06D         	movff	___ftadd@sign,??___ftadd
 11557  002D80  0E07               	movlw	7
 11558  002D82  0100               	movlb	0	; () banked
 11559  002D84  176D               	andwf	??___ftadd& (0+255),f,b
 11560  002D86  B4D8               	btfsc	status,2,c
 11561  002D88  D008               	goto	l5265
 11562  002D8A  D7E9               	goto	l5257
 11563  002D8C                     l5263:
 11564                           
 11565                           ; BSR set to: 0
 11566  002D8C  0100               	movlb	0	; () banked
 11567  002D8E  90D8               	bcf	status,0,c
 11568  002D90  336C               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 11569  002D92  336B               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 11570  002D94  336A               	rrcf	___ftadd@f2& (0+255),f,b
 11571  002D96  0100               	movlb	0	; () banked
 11572  002D98  2B71               	incf	___ftadd@exp2& (0+255),f,b
 11573  002D9A                     l5265:
 11574                           
 11575                           ; BSR set to: 0
 11576  002D9A  0100               	movlb	0	; () banked
 11577  002D9C  5171               	movf	___ftadd@exp2& (0+255),w,b
 11578  002D9E  0100               	movlb	0	; () banked
 11579  002DA0  1972               	xorwf	___ftadd@exp1& (0+255),w,b
 11580  002DA2  A4D8               	btfss	status,2,c
 11581  002DA4  D7F3               	goto	l5263
 11582  002DA6                     l1430:
 11583                           
 11584                           ; BSR set to: 0
 11585  002DA6  0100               	movlb	0	; () banked
 11586  002DA8  AF70               	btfss	___ftadd@sign& (0+255),7,b
 11587  002DAA  D012               	goto	l1439
 11588                           
 11589                           ; BSR set to: 0
 11590  002DAC  0EFF               	movlw	255
 11591  002DAE  0100               	movlb	0	; () banked
 11592  002DB0  1B67               	xorwf	___ftadd@f1& (0+255),f,b
 11593  002DB2  0EFF               	movlw	255
 11594  002DB4  0100               	movlb	0	; () banked
 11595  002DB6  1B68               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 11596  002DB8  0EFF               	movlw	255
 11597  002DBA  0100               	movlb	0	; () banked
 11598  002DBC  1B69               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 11599  002DBE  0E01               	movlw	1
 11600  002DC0  0100               	movlb	0	; () banked
 11601  002DC2  2767               	addwf	___ftadd@f1& (0+255),f,b
 11602  002DC4  0E00               	movlw	0
 11603  002DC6  0100               	movlb	0	; () banked
 11604  002DC8  2368               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 11605  002DCA  0E00               	movlw	0
 11606  002DCC  0100               	movlb	0	; () banked
 11607  002DCE  2369               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 11608  002DD0                     l1439:
 11609                           
 11610                           ; BSR set to: 0
 11611  002DD0  0100               	movlb	0	; () banked
 11612  002DD2  AD70               	btfss	___ftadd@sign& (0+255),6,b
 11613  002DD4  D012               	goto	l5271
 11614                           
 11615                           ; BSR set to: 0
 11616  002DD6  0EFF               	movlw	255
 11617  002DD8  0100               	movlb	0	; () banked
 11618  002DDA  1B6A               	xorwf	___ftadd@f2& (0+255),f,b
 11619  002DDC  0EFF               	movlw	255
 11620  002DDE  0100               	movlb	0	; () banked
 11621  002DE0  1B6B               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11622  002DE2  0EFF               	movlw	255
 11623  002DE4  0100               	movlb	0	; () banked
 11624  002DE6  1B6C               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11625  002DE8  0E01               	movlw	1
 11626  002DEA  0100               	movlb	0	; () banked
 11627  002DEC  276A               	addwf	___ftadd@f2& (0+255),f,b
 11628  002DEE  0E00               	movlw	0
 11629  002DF0  0100               	movlb	0	; () banked
 11630  002DF2  236B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11631  002DF4  0E00               	movlw	0
 11632  002DF6  0100               	movlb	0	; () banked
 11633  002DF8  236C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11634  002DFA                     l5271:
 11635                           
 11636                           ; BSR set to: 0
 11637  002DFA  0E00               	movlw	0
 11638  002DFC  0100               	movlb	0	; () banked
 11639  002DFE  6F70               	movwf	___ftadd@sign& (0+255),b
 11640                           
 11641                           ; BSR set to: 0
 11642  002E00  0100               	movlb	0	; () banked
 11643  002E02  5167               	movf	___ftadd@f1& (0+255),w,b
 11644  002E04  0100               	movlb	0	; () banked
 11645  002E06  276A               	addwf	___ftadd@f2& (0+255),f,b
 11646  002E08  0100               	movlb	0	; () banked
 11647  002E0A  5168               	movf	(___ftadd@f1+1)& (0+255),w,b
 11648  002E0C  0100               	movlb	0	; () banked
 11649  002E0E  236B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11650  002E10  0100               	movlb	0	; () banked
 11651  002E12  5169               	movf	(___ftadd@f1+2)& (0+255),w,b
 11652  002E14  0100               	movlb	0	; () banked
 11653  002E16  236C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11654                           
 11655                           ; BSR set to: 0
 11656  002E18  0100               	movlb	0	; () banked
 11657  002E1A  AF6C               	btfss	(___ftadd@f2+2)& (0+255),7,b
 11658  002E1C  D015               	goto	l5281
 11659                           
 11660                           ; BSR set to: 0
 11661  002E1E  0EFF               	movlw	255
 11662  002E20  0100               	movlb	0	; () banked
 11663  002E22  1B6A               	xorwf	___ftadd@f2& (0+255),f,b
 11664  002E24  0EFF               	movlw	255
 11665  002E26  0100               	movlb	0	; () banked
 11666  002E28  1B6B               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 11667  002E2A  0EFF               	movlw	255
 11668  002E2C  0100               	movlb	0	; () banked
 11669  002E2E  1B6C               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 11670  002E30  0E01               	movlw	1
 11671  002E32  0100               	movlb	0	; () banked
 11672  002E34  276A               	addwf	___ftadd@f2& (0+255),f,b
 11673  002E36  0E00               	movlw	0
 11674  002E38  0100               	movlb	0	; () banked
 11675  002E3A  236B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 11676  002E3C  0E00               	movlw	0
 11677  002E3E  0100               	movlb	0	; () banked
 11678  002E40  236C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 11679                           
 11680                           ; BSR set to: 0
 11681  002E42  0E01               	movlw	1
 11682  002E44  0100               	movlb	0	; () banked
 11683  002E46  6F70               	movwf	___ftadd@sign& (0+255),b
 11684  002E48                     l5281:
 11685                           
 11686                           ; BSR set to: 0
 11687  002E48  C06A  F013         	movff	___ftadd@f2,___ftpack@arg
 11688  002E4C  C06B  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
 11689  002E50  C06C  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
 11690  002E54  C072  F016         	movff	___ftadd@exp1,___ftpack@exp
 11691  002E58  C070  F017         	movff	___ftadd@sign,___ftpack@sign
 11692  002E5C  EC14  F021         	call	___ftpack	;wreg free
 11693  002E60  C013  F067         	movff	?___ftpack,?___ftadd
 11694  002E64  C014  F068         	movff	?___ftpack+1,?___ftadd+1
 11695  002E68  C015  F069         	movff	?___ftpack+2,?___ftadd+2
 11696  002E6C  0012               	return	
 11697  002E6E                     __end_of___ftadd:
 11698                           	opt stack 0
 11699                           tblptru	equ	0xFF8
 11700                           tblptrh	equ	0xFF7
 11701                           tblptrl	equ	0xFF6
 11702                           tablat	equ	0xFF5
 11703                           prodh	equ	0xFF4
 11704                           prodl	equ	0xFF3
 11705                           intcon	equ	0xFF2
 11706                           postinc0	equ	0xFEE
 11707                           wreg	equ	0xFE8
 11708                           postdec1	equ	0xFE5
 11709                           fsr1l	equ	0xFE1
 11710                           indf2	equ	0xFDF
 11711                           postinc2	equ	0xFDE
 11712                           postdec2	equ	0xFDD
 11713                           fsr2h	equ	0xFDA
 11714                           fsr2l	equ	0xFD9
 11715                           status	equ	0xFD8
 11716                           
 11717 ;; *************** function ___lwtoft *****************
 11718 ;; Defined at:
 11719 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
 11720 ;; Parameters:    Size  Location     Type
 11721 ;;  c               2   26[COMRAM] unsigned int 
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;		None
 11724 ;; Return value:  Size  Location     Type
 11725 ;;                  3   26[COMRAM] float 
 11726 ;; Registers used:
 11727 ;;		wreg, status,2, status,0, cstack
 11728 ;; Tracked objects:
 11729 ;;		On entry : 0/0
 11730 ;;		On exit  : 0/0
 11731 ;;		Unchanged: 0/0
 11732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11733 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11736 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11737 ;;Total ram usage:        3 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; Hardware stack levels required when called:    5
 11740 ;; This function calls:
 11741 ;;		___ftpack
 11742 ;; This function is called by:
 11743 ;;		_computeRollPitch
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           	psect	text55
 11748  004AC0                     __ptext55:
 11749                           	opt stack 0
 11750  004AC0                     ___lwtoft:
 11751                           	opt stack 24
 11752                           
 11753                           ;incstack = 0
 11754  004AC0  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
 11755  004AC4  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
 11756  004AC8  6A15               	clrf	___ftpack@arg+2,c
 11757  004ACA  0E8E               	movlw	142
 11758  004ACC  6E16               	movwf	___ftpack@exp,c
 11759  004ACE  0E00               	movlw	0
 11760  004AD0  6E17               	movwf	___ftpack@sign,c
 11761  004AD2  EC14  F021         	call	___ftpack	;wreg free
 11762  004AD6  C013  F01B         	movff	?___ftpack,?___lwtoft
 11763  004ADA  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
 11764  004ADE  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
 11765  004AE2  0012               	return	
 11766  004AE4                     __end_of___lwtoft:
 11767                           	opt stack 0
 11768                           tblptru	equ	0xFF8
 11769                           tblptrh	equ	0xFF7
 11770                           tblptrl	equ	0xFF6
 11771                           tablat	equ	0xFF5
 11772                           prodh	equ	0xFF4
 11773                           prodl	equ	0xFF3
 11774                           intcon	equ	0xFF2
 11775                           postinc0	equ	0xFEE
 11776                           wreg	equ	0xFE8
 11777                           postdec1	equ	0xFE5
 11778                           fsr1l	equ	0xFE1
 11779                           indf2	equ	0xFDF
 11780                           postinc2	equ	0xFDE
 11781                           postdec2	equ	0xFDD
 11782                           fsr2h	equ	0xFDA
 11783                           fsr2l	equ	0xFD9
 11784                           status	equ	0xFD8
 11785                           
 11786 ;; *************** function ___ftpack *****************
 11787 ;; Defined at:
 11788 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
 11789 ;; Parameters:    Size  Location     Type
 11790 ;;  arg             3   18[COMRAM] unsigned um
 11791 ;;  exp             1   21[COMRAM] unsigned char 
 11792 ;;  sign            1   22[COMRAM] unsigned char 
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;		None
 11795 ;; Return value:  Size  Location     Type
 11796 ;;                  3   18[COMRAM] float 
 11797 ;; Registers used:
 11798 ;;		wreg, status,2, status,0
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11804 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11806 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11807 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11808 ;;Total ram usage:        8 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:    4
 11811 ;; This function calls:
 11812 ;;		Nothing
 11813 ;; This function is called by:
 11814 ;;		___awtoft
 11815 ;;		___ftadd
 11816 ;;		___ftdiv
 11817 ;;		___ftmul
 11818 ;;		___lltoft
 11819 ;;		___lwtoft
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           	psect	text56
 11824  004228                     __ptext56:
 11825                           	opt stack 0
 11826  004228                     ___ftpack:
 11827                           	opt stack 23
 11828                           
 11829                           ;incstack = 0
 11830  004228  5016               	movf	___ftpack@exp,w,c
 11831  00422A  B4D8               	btfsc	status,2,c
 11832  00422C  D005               	goto	l5171
 11833  00422E  5013               	movf	___ftpack@arg,w,c
 11834  004230  1014               	iorwf	___ftpack@arg+1,w,c
 11835  004232  1015               	iorwf	___ftpack@arg+2,w,c
 11836  004234  A4D8               	btfss	status,2,c
 11837  004236  D00C               	goto	l5177
 11838  004238                     l5171:
 11839  004238  0E00               	movlw	0
 11840  00423A  6E13               	movwf	?___ftpack,c
 11841  00423C  0E00               	movlw	0
 11842  00423E  6E14               	movwf	?___ftpack+1,c
 11843  004240  0E00               	movlw	0
 11844  004242  6E15               	movwf	?___ftpack+2,c
 11845  004244  0012               	return	
 11846  004246                     l5175:
 11847  004246  2A16               	incf	___ftpack@exp,f,c
 11848  004248  90D8               	bcf	status,0,c
 11849  00424A  3215               	rrcf	___ftpack@arg+2,f,c
 11850  00424C  3214               	rrcf	___ftpack@arg+1,f,c
 11851  00424E  3213               	rrcf	___ftpack@arg,f,c
 11852  004250                     l5177:
 11853  004250  0E00               	movlw	0
 11854  004252  1413               	andwf	___ftpack@arg,w,c
 11855  004254  6E18               	movwf	??___ftpack& (0+255),c
 11856  004256  0E00               	movlw	0
 11857  004258  1414               	andwf	___ftpack@arg+1,w,c
 11858  00425A  6E19               	movwf	(??___ftpack+1)& (0+255),c
 11859  00425C  0EFE               	movlw	254
 11860  00425E  1415               	andwf	___ftpack@arg+2,w,c
 11861  004260  6E1A               	movwf	(??___ftpack+2)& (0+255),c
 11862  004262  5018               	movf	??___ftpack,w,c
 11863  004264  1019               	iorwf	??___ftpack+1,w,c
 11864  004266  101A               	iorwf	??___ftpack+2,w,c
 11865  004268  B4D8               	btfsc	status,2,c
 11866  00426A  D00C               	goto	l5183
 11867  00426C  D7EC               	goto	l5175
 11868  00426E                     l5179:
 11869  00426E  2A16               	incf	___ftpack@exp,f,c
 11870  004270  0E01               	movlw	1
 11871  004272  2613               	addwf	___ftpack@arg,f,c
 11872  004274  0E00               	movlw	0
 11873  004276  2214               	addwfc	___ftpack@arg+1,f,c
 11874  004278  0E00               	movlw	0
 11875  00427A  2215               	addwfc	___ftpack@arg+2,f,c
 11876  00427C  90D8               	bcf	status,0,c
 11877  00427E  3215               	rrcf	___ftpack@arg+2,f,c
 11878  004280  3214               	rrcf	___ftpack@arg+1,f,c
 11879  004282  3213               	rrcf	___ftpack@arg,f,c
 11880  004284                     l5183:
 11881  004284  0E00               	movlw	0
 11882  004286  1413               	andwf	___ftpack@arg,w,c
 11883  004288  6E18               	movwf	??___ftpack& (0+255),c
 11884  00428A  0E00               	movlw	0
 11885  00428C  1414               	andwf	___ftpack@arg+1,w,c
 11886  00428E  6E19               	movwf	(??___ftpack+1)& (0+255),c
 11887  004290  0EFF               	movlw	255
 11888  004292  1415               	andwf	___ftpack@arg+2,w,c
 11889  004294  6E1A               	movwf	(??___ftpack+2)& (0+255),c
 11890  004296  5018               	movf	??___ftpack,w,c
 11891  004298  1019               	iorwf	??___ftpack+1,w,c
 11892  00429A  101A               	iorwf	??___ftpack+2,w,c
 11893  00429C  B4D8               	btfsc	status,2,c
 11894  00429E  D006               	goto	l5187
 11895  0042A0  D7E6               	goto	l5179
 11896  0042A2                     l5185:
 11897  0042A2  0616               	decf	___ftpack@exp,f,c
 11898  0042A4  90D8               	bcf	status,0,c
 11899  0042A6  3613               	rlcf	___ftpack@arg,f,c
 11900  0042A8  3614               	rlcf	___ftpack@arg+1,f,c
 11901  0042AA  3615               	rlcf	___ftpack@arg+2,f,c
 11902  0042AC                     l5187:
 11903  0042AC  BE14               	btfsc	___ftpack@arg+1,7,c
 11904  0042AE  D003               	goto	l1392
 11905  0042B0  0E02               	movlw	2
 11906  0042B2  6016               	cpfslt	___ftpack@exp,c
 11907  0042B4  D7F6               	goto	l5185
 11908  0042B6                     l1392:
 11909  0042B6  A016               	btfss	___ftpack@exp,0,c
 11910  0042B8  9E14               	bcf	___ftpack@arg+1,7,c
 11911  0042BA  90D8               	bcf	status,0,c
 11912  0042BC  3216               	rrcf	___ftpack@exp,f,c
 11913  0042BE  5016               	movf	___ftpack@exp,w,c
 11914  0042C0  1215               	iorwf	___ftpack@arg+2,f,c
 11915  0042C2  5017               	movf	___ftpack@sign,w,c
 11916  0042C4  A4D8               	btfss	status,2,c
 11917  0042C6  8E15               	bsf	___ftpack@arg+2,7,c
 11918  0042C8  C013  F013         	movff	___ftpack@arg,?___ftpack
 11919  0042CC  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
 11920  0042D0  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
 11921  0042D4  0012               	return	
 11922  0042D6                     __end_of___ftpack:
 11923                           	opt stack 0
 11924                           tblptru	equ	0xFF8
 11925                           tblptrh	equ	0xFF7
 11926                           tblptrl	equ	0xFF6
 11927                           tablat	equ	0xFF5
 11928                           prodh	equ	0xFF4
 11929                           prodl	equ	0xFF3
 11930                           intcon	equ	0xFF2
 11931                           postinc0	equ	0xFEE
 11932                           wreg	equ	0xFE8
 11933                           postdec1	equ	0xFE5
 11934                           fsr1l	equ	0xFE1
 11935                           indf2	equ	0xFDF
 11936                           postinc2	equ	0xFDE
 11937                           postdec2	equ	0xFDD
 11938                           fsr2h	equ	0xFDA
 11939                           fsr2l	equ	0xFD9
 11940                           status	equ	0xFD8
 11941                           
 11942 ;; *************** function _TMR0_Write16bitTimer *****************
 11943 ;; Defined at:
 11944 ;;		line 116 in file "mcc_generated_files/tmr0.c"
 11945 ;; Parameters:    Size  Location     Type
 11946 ;;  timerVal        2   18[COMRAM] unsigned int 
 11947 ;; Auto vars:     Size  Location     Type
 11948 ;;		None
 11949 ;; Return value:  Size  Location     Type
 11950 ;;                  1    wreg      void 
 11951 ;; Registers used:
 11952 ;;		wreg, status,2
 11953 ;; Tracked objects:
 11954 ;;		On entry : 0/0
 11955 ;;		On exit  : 0/0
 11956 ;;		Unchanged: 0/0
 11957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11962 ;;Total ram usage:        2 bytes
 11963 ;; Hardware stack levels used:    1
 11964 ;; Hardware stack levels required when called:    4
 11965 ;; This function calls:
 11966 ;;		Nothing
 11967 ;; This function is called by:
 11968 ;;		_computeRollPitch
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text57
 11973  004C84                     __ptext57:
 11974                           	opt stack 0
 11975  004C84                     _TMR0_Write16bitTimer:
 11976                           	opt stack 25
 11977                           
 11978                           ;tmr0.c: 119: TMR0H = timerVal >> 8;
 11979                           
 11980                           ;incstack = 0
 11981  004C84  5014               	movf	TMR0_Write16bitTimer@timerVal+1,w,c
 11982  004C86  6ED4               	movwf	4052,c	;volatile
 11983                           
 11984                           ;tmr0.c: 120: TMR0L = (uint8_t) timerVal;
 11985  004C88  C013  FFD3         	movff	TMR0_Write16bitTimer@timerVal,4051	;volatile
 11986  004C8C  0012               	return		;funcret
 11987  004C8E                     __end_of_TMR0_Write16bitTimer:
 11988                           	opt stack 0
 11989                           tblptru	equ	0xFF8
 11990                           tblptrh	equ	0xFF7
 11991                           tblptrl	equ	0xFF6
 11992                           tablat	equ	0xFF5
 11993                           prodh	equ	0xFF4
 11994                           prodl	equ	0xFF3
 11995                           intcon	equ	0xFF2
 11996                           postinc0	equ	0xFEE
 11997                           wreg	equ	0xFE8
 11998                           postdec1	equ	0xFE5
 11999                           fsr1l	equ	0xFE1
 12000                           indf2	equ	0xFDF
 12001                           postinc2	equ	0xFDE
 12002                           postdec2	equ	0xFDD
 12003                           fsr2h	equ	0xFDA
 12004                           fsr2l	equ	0xFD9
 12005                           status	equ	0xFD8
 12006                           
 12007 ;; *************** function _TMR0_StopTimer *****************
 12008 ;; Defined at:
 12009 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 12010 ;; Parameters:    Size  Location     Type
 12011 ;;		None
 12012 ;; Auto vars:     Size  Location     Type
 12013 ;;		None
 12014 ;; Return value:  Size  Location     Type
 12015 ;;                  1    wreg      void 
 12016 ;; Registers used:
 12017 ;;		None
 12018 ;; Tracked objects:
 12019 ;;		On entry : 0/0
 12020 ;;		On exit  : 0/0
 12021 ;;		Unchanged: 0/0
 12022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12027 ;;Total ram usage:        0 bytes
 12028 ;; Hardware stack levels used:    1
 12029 ;; Hardware stack levels required when called:    4
 12030 ;; This function calls:
 12031 ;;		Nothing
 12032 ;; This function is called by:
 12033 ;;		_computeRollPitch
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           	psect	text58
 12038  004CA4                     __ptext58:
 12039                           	opt stack 0
 12040  004CA4                     _TMR0_StopTimer:
 12041                           	opt stack 25
 12042                           
 12043                           ;tmr0.c: 100: T0CON0bits.T0EN = 0;
 12044                           
 12045                           ;incstack = 0
 12046  004CA4  9ED5               	bcf	4053,7,c	;volatile
 12047  004CA6  0012               	return		;funcret
 12048  004CA8                     __end_of_TMR0_StopTimer:
 12049                           	opt stack 0
 12050                           tblptru	equ	0xFF8
 12051                           tblptrh	equ	0xFF7
 12052                           tblptrl	equ	0xFF6
 12053                           tablat	equ	0xFF5
 12054                           prodh	equ	0xFF4
 12055                           prodl	equ	0xFF3
 12056                           intcon	equ	0xFF2
 12057                           postinc0	equ	0xFEE
 12058                           wreg	equ	0xFE8
 12059                           postdec1	equ	0xFE5
 12060                           fsr1l	equ	0xFE1
 12061                           indf2	equ	0xFDF
 12062                           postinc2	equ	0xFDE
 12063                           postdec2	equ	0xFDD
 12064                           fsr2h	equ	0xFDA
 12065                           fsr2l	equ	0xFD9
 12066                           status	equ	0xFD8
 12067                           
 12068 ;; *************** function _TMR0_Read16bitTimer *****************
 12069 ;; Defined at:
 12070 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 12071 ;; Parameters:    Size  Location     Type
 12072 ;;		None
 12073 ;; Auto vars:     Size  Location     Type
 12074 ;;  readVal         2   22[COMRAM] unsigned int 
 12075 ;;  readValHigh     1   25[COMRAM] unsigned char 
 12076 ;;  readValLow      1   24[COMRAM] unsigned char 
 12077 ;; Return value:  Size  Location     Type
 12078 ;;                  2   18[COMRAM] unsigned int 
 12079 ;; Registers used:
 12080 ;;		wreg, status,2
 12081 ;; Tracked objects:
 12082 ;;		On entry : 0/0
 12083 ;;		On exit  : 0/0
 12084 ;;		Unchanged: 0/0
 12085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12086 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12087 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12089 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12090 ;;Total ram usage:        8 bytes
 12091 ;; Hardware stack levels used:    1
 12092 ;; Hardware stack levels required when called:    4
 12093 ;; This function calls:
 12094 ;;		Nothing
 12095 ;; This function is called by:
 12096 ;;		_computeRollPitch
 12097 ;; This function uses a non-reentrant model
 12098 ;;
 12099                           
 12100                           	psect	text59
 12101  004B5E                     __ptext59:
 12102                           	opt stack 0
 12103  004B5E                     _TMR0_Read16bitTimer:
 12104                           	opt stack 25
 12105                           
 12106                           ;tmr0.c: 105: uint16_t readVal;
 12107                           ;tmr0.c: 106: uint8_t readValLow;
 12108                           ;tmr0.c: 107: uint8_t readValHigh;
 12109                           ;tmr0.c: 109: readValLow = TMR0L;
 12110                           
 12111                           ;incstack = 0
 12112  004B5E  CFD3 F019          	movff	4051,TMR0_Read16bitTimer@readValLow	;volatile
 12113                           
 12114                           ;tmr0.c: 110: readValHigh = TMR0H;
 12115  004B62  CFD4 F01A          	movff	4052,TMR0_Read16bitTimer@readValHigh	;volatile
 12116                           
 12117                           ;tmr0.c: 111: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 12118  004B66  501A               	movf	TMR0_Read16bitTimer@readValHigh,w,c
 12119  004B68  6E15               	movwf	??_TMR0_Read16bitTimer& (0+255),c
 12120  004B6A  5019               	movf	TMR0_Read16bitTimer@readValLow,w,c
 12121  004B6C  6E17               	movwf	TMR0_Read16bitTimer@readVal,c
 12122  004B6E  C015  F018         	movff	??_TMR0_Read16bitTimer,TMR0_Read16bitTimer@readVal+1
 12123                           
 12124                           ;tmr0.c: 113: return readVal;
 12125  004B72  C017  F013         	movff	TMR0_Read16bitTimer@readVal,?_TMR0_Read16bitTimer
 12126  004B76  C018  F014         	movff	TMR0_Read16bitTimer@readVal+1,?_TMR0_Read16bitTimer+1
 12127  004B7A  0012               	return	
 12128  004B7C                     __end_of_TMR0_Read16bitTimer:
 12129                           	opt stack 0
 12130                           tblptru	equ	0xFF8
 12131                           tblptrh	equ	0xFF7
 12132                           tblptrl	equ	0xFF6
 12133                           tablat	equ	0xFF5
 12134                           prodh	equ	0xFF4
 12135                           prodl	equ	0xFF3
 12136                           intcon	equ	0xFF2
 12137                           postinc0	equ	0xFEE
 12138                           wreg	equ	0xFE8
 12139                           postdec1	equ	0xFE5
 12140                           fsr1l	equ	0xFE1
 12141                           indf2	equ	0xFDF
 12142                           postinc2	equ	0xFDE
 12143                           postdec2	equ	0xFDD
 12144                           fsr2h	equ	0xFDA
 12145                           fsr2l	equ	0xFD9
 12146                           status	equ	0xFD8
 12147                           
 12148 ;; *************** function _SYSTEM_Initialize *****************
 12149 ;; Defined at:
 12150 ;;		line 115 in file "mcc_generated_files/mcc.c"
 12151 ;; Parameters:    Size  Location     Type
 12152 ;;		None
 12153 ;; Auto vars:     Size  Location     Type
 12154 ;;		None
 12155 ;; Return value:  Size  Location     Type
 12156 ;;                  1    wreg      void 
 12157 ;; Registers used:
 12158 ;;		wreg, status,2, status,0, cstack
 12159 ;; Tracked objects:
 12160 ;;		On entry : 0/0
 12161 ;;		On exit  : 0/0
 12162 ;;		Unchanged: 0/0
 12163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12168 ;;Total ram usage:        0 bytes
 12169 ;; Hardware stack levels used:    1
 12170 ;; Hardware stack levels required when called:    6
 12171 ;; This function calls:
 12172 ;;		_EUSART1_Initialize
 12173 ;;		_I2C1_Initialize
 12174 ;;		_INTERRUPT_Initialize
 12175 ;;		_OSCILLATOR_Initialize
 12176 ;;		_PIN_MANAGER_Initialize
 12177 ;;		_PWM1_Initialize
 12178 ;;		_PWM2_Initialize
 12179 ;;		_PWM3_Initialize
 12180 ;;		_PWM4_Initialize
 12181 ;;		_TMR0_Initialize
 12182 ;;		_TMR2_Initialize
 12183 ;; This function is called by:
 12184 ;;		_main
 12185 ;; This function uses a non-reentrant model
 12186 ;;
 12187                           
 12188                           	psect	text60
 12189  00499E                     __ptext60:
 12190                           	opt stack 0
 12191  00499E                     _SYSTEM_Initialize:
 12192                           	opt stack 24
 12193                           
 12194                           ;mcc.c: 118: INTERRUPT_Initialize();
 12195                           
 12196                           ;incstack = 0
 12197  00499E  EC2D  F026         	call	_INTERRUPT_Initialize	;wreg free
 12198                           
 12199                           ;mcc.c: 119: PIN_MANAGER_Initialize();
 12200  0049A2  ECCA  F01E         	call	_PIN_MANAGER_Initialize	;wreg free
 12201                           
 12202                           ;mcc.c: 120: OSCILLATOR_Initialize();
 12203  0049A6  EC72  F025         	call	_OSCILLATOR_Initialize	;wreg free
 12204                           
 12205                           ;mcc.c: 121: I2C1_Initialize();
 12206  0049AA  EC35  F024         	call	_I2C1_Initialize	;wreg free
 12207                           
 12208                           ;mcc.c: 122: PWM1_Initialize();
 12209  0049AE  ECDF  F025         	call	_PWM1_Initialize	;wreg free
 12210                           
 12211                           ;mcc.c: 123: PWM2_Initialize();
 12212  0049B2  ECD4  F025         	call	_PWM2_Initialize	;wreg free
 12213                           
 12214                           ;mcc.c: 124: PWM4_Initialize();
 12215  0049B6  ECBE  F025         	call	_PWM4_Initialize	;wreg free
 12216                           
 12217                           ;mcc.c: 125: PWM3_Initialize();
 12218  0049BA  ECC9  F025         	call	_PWM3_Initialize	;wreg free
 12219                           
 12220                           ;mcc.c: 126: TMR2_Initialize();
 12221  0049BE  EC51  F024         	call	_TMR2_Initialize	;wreg free
 12222                           
 12223                           ;mcc.c: 127: TMR0_Initialize();
 12224  0049C2  ECB7  F024         	call	_TMR0_Initialize	;wreg free
 12225                           
 12226                           ;mcc.c: 128: EUSART1_Initialize();
 12227  0049C6  ECEA  F025         	call	_EUSART1_Initialize	;wreg free
 12228  0049CA  0012               	return		;funcret
 12229  0049CC                     __end_of_SYSTEM_Initialize:
 12230                           	opt stack 0
 12231                           tblptru	equ	0xFF8
 12232                           tblptrh	equ	0xFF7
 12233                           tblptrl	equ	0xFF6
 12234                           tablat	equ	0xFF5
 12235                           prodh	equ	0xFF4
 12236                           prodl	equ	0xFF3
 12237                           intcon	equ	0xFF2
 12238                           postinc0	equ	0xFEE
 12239                           wreg	equ	0xFE8
 12240                           postdec1	equ	0xFE5
 12241                           fsr1l	equ	0xFE1
 12242                           indf2	equ	0xFDF
 12243                           postinc2	equ	0xFDE
 12244                           postdec2	equ	0xFDD
 12245                           fsr2h	equ	0xFDA
 12246                           fsr2l	equ	0xFD9
 12247                           status	equ	0xFD8
 12248                           
 12249 ;; *************** function _TMR2_Initialize *****************
 12250 ;; Defined at:
 12251 ;;		line 69 in file "mcc_generated_files/tmr2.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;		None
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;		None
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  1    wreg      void 
 12258 ;; Registers used:
 12259 ;;		wreg, status,2, status,0, cstack
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12269 ;;Total ram usage:        0 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:    5
 12272 ;; This function calls:
 12273 ;;		_TMR2_SetInterruptHandler
 12274 ;;		_TMR2_Start
 12275 ;; This function is called by:
 12276 ;;		_SYSTEM_Initialize
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           	psect	text61
 12281  0048A2                     __ptext61:
 12282                           	opt stack 0
 12283  0048A2                     _TMR2_Initialize:
 12284                           	opt stack 24
 12285                           
 12286                           ;tmr2.c: 74: T2CON = 0x70;
 12287                           
 12288                           ;incstack = 0
 12289  0048A2  0E70               	movlw	112
 12290  0048A4  6EBD               	movwf	4029,c	;volatile
 12291                           
 12292                           ;tmr2.c: 77: T2CLKCON = 0x01;
 12293  0048A6  0E01               	movlw	1
 12294  0048A8  6EBF               	movwf	4031,c	;volatile
 12295                           
 12296                           ;tmr2.c: 80: T2HLT = 0x00;
 12297  0048AA  0E00               	movlw	0
 12298  0048AC  6EBE               	movwf	4030,c	;volatile
 12299                           
 12300                           ;tmr2.c: 83: T2RST = 0x0A;
 12301  0048AE  0E0A               	movlw	10
 12302  0048B0  6EC0               	movwf	4032,c	;volatile
 12303                           
 12304                           ;tmr2.c: 86: T2PR = 0xE9;
 12305  0048B2  0EE9               	movlw	233
 12306  0048B4  6EBC               	movwf	4028,c	;volatile
 12307                           
 12308                           ;tmr2.c: 89: T2TMR = 0x00;
 12309  0048B6  0E00               	movlw	0
 12310  0048B8  6EBB               	movwf	4027,c	;volatile
 12311                           
 12312                           ;tmr2.c: 92: PIR4bits.TMR2IF = 0;
 12313  0048BA  010E               	movlb	14	; () banked
 12314  0048BC  93CE               	bcf	206,1,b	;volatile
 12315                           
 12316                           ; BSR set to: 14
 12317                           ;tmr2.c: 95: PIE4bits.TMR2IE = 1;
 12318  0048BE  010E               	movlb	14	; () banked
 12319  0048C0  83C6               	bsf	198,1,b	;volatile
 12320                           
 12321                           ; BSR set to: 14
 12322                           ;tmr2.c: 98: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 12323  0048C2  0E82               	movlw	low _TMR2_DefaultInterruptHandler
 12324  0048C4  6E13               	movwf	TMR2_SetInterruptHandler@InterruptHandler,c
 12325  0048C6  0E43               	movlw	high _TMR2_DefaultInterruptHandler
 12326  0048C8  6E14               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1,c
 12327  0048CA  0E00               	movlw	low (_TMR2_DefaultInterruptHandler shr (0+16))
 12328  0048CC  6E15               	movwf	TMR2_SetInterruptHandler@InterruptHandler+2,c
 12329  0048CE  EC20  F026         	call	_TMR2_SetInterruptHandler	;wreg free
 12330                           
 12331                           ;tmr2.c: 101: TMR2_Start();
 12332  0048D2  EC54  F026         	call	_TMR2_Start	;wreg free
 12333  0048D6  0012               	return		;funcret
 12334  0048D8                     __end_of_TMR2_Initialize:
 12335                           	opt stack 0
 12336                           tblptru	equ	0xFF8
 12337                           tblptrh	equ	0xFF7
 12338                           tblptrl	equ	0xFF6
 12339                           tablat	equ	0xFF5
 12340                           prodh	equ	0xFF4
 12341                           prodl	equ	0xFF3
 12342                           intcon	equ	0xFF2
 12343                           postinc0	equ	0xFEE
 12344                           wreg	equ	0xFE8
 12345                           postdec1	equ	0xFE5
 12346                           fsr1l	equ	0xFE1
 12347                           indf2	equ	0xFDF
 12348                           postinc2	equ	0xFDE
 12349                           postdec2	equ	0xFDD
 12350                           fsr2h	equ	0xFDA
 12351                           fsr2l	equ	0xFD9
 12352                           status	equ	0xFD8
 12353                           
 12354 ;; *************** function _TMR2_Start *****************
 12355 ;; Defined at:
 12356 ;;		line 116 in file "mcc_generated_files/tmr2.c"
 12357 ;; Parameters:    Size  Location     Type
 12358 ;;		None
 12359 ;; Auto vars:     Size  Location     Type
 12360 ;;		None
 12361 ;; Return value:  Size  Location     Type
 12362 ;;                  1    wreg      void 
 12363 ;; Registers used:
 12364 ;;		None
 12365 ;; Tracked objects:
 12366 ;;		On entry : 0/0
 12367 ;;		On exit  : 0/0
 12368 ;;		Unchanged: 0/0
 12369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12374 ;;Total ram usage:        0 bytes
 12375 ;; Hardware stack levels used:    1
 12376 ;; Hardware stack levels required when called:    4
 12377 ;; This function calls:
 12378 ;;		Nothing
 12379 ;; This function is called by:
 12380 ;;		_TMR2_Initialize
 12381 ;;		_TMR2_StartTimer
 12382 ;; This function uses a non-reentrant model
 12383 ;;
 12384                           
 12385                           	psect	text62
 12386  004CA8                     __ptext62:
 12387                           	opt stack 0
 12388  004CA8                     _TMR2_Start:
 12389                           	opt stack 24
 12390                           
 12391                           ;tmr2.c: 119: T2CONbits.TMR2ON = 1;
 12392                           
 12393                           ;incstack = 0
 12394  004CA8  8EBD               	bsf	4029,7,c	;volatile
 12395  004CAA  0012               	return		;funcret
 12396  004CAC                     __end_of_TMR2_Start:
 12397                           	opt stack 0
 12398                           tblptru	equ	0xFF8
 12399                           tblptrh	equ	0xFF7
 12400                           tblptrl	equ	0xFF6
 12401                           tablat	equ	0xFF5
 12402                           prodh	equ	0xFF4
 12403                           prodl	equ	0xFF3
 12404                           intcon	equ	0xFF2
 12405                           postinc0	equ	0xFEE
 12406                           wreg	equ	0xFE8
 12407                           postdec1	equ	0xFE5
 12408                           fsr1l	equ	0xFE1
 12409                           indf2	equ	0xFDF
 12410                           postinc2	equ	0xFDE
 12411                           postdec2	equ	0xFDD
 12412                           fsr2h	equ	0xFDA
 12413                           fsr2l	equ	0xFD9
 12414                           status	equ	0xFD8
 12415                           
 12416 ;; *************** function _TMR2_SetInterruptHandler *****************
 12417 ;; Defined at:
 12418 ;;		line 186 in file "mcc_generated_files/tmr2.c"
 12419 ;; Parameters:    Size  Location     Type
 12420 ;;  InterruptHan    3   18[COMRAM] PTR FTN()void 
 12421 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;		None
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      void 
 12426 ;; Registers used:
 12427 ;;		wreg, status,2, status,0
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12433 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12436 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12437 ;;Total ram usage:        3 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    4
 12440 ;; This function calls:
 12441 ;;		Nothing
 12442 ;; This function is called by:
 12443 ;;		_TMR2_Initialize
 12444 ;; This function uses a non-reentrant model
 12445 ;;
 12446                           
 12447                           	psect	text63
 12448  004C40                     __ptext63:
 12449                           	opt stack 0
 12450  004C40                     _TMR2_SetInterruptHandler:
 12451                           	opt stack 24
 12452                           
 12453                           ;tmr2.c: 187: TMR2_InterruptHandler = InterruptHandler;
 12454                           
 12455                           ;incstack = 0
 12456  004C40  C013  F039         	movff	TMR2_SetInterruptHandler@InterruptHandler,_TMR2_InterruptHandler
 12457  004C44  C014  F03A         	movff	TMR2_SetInterruptHandler@InterruptHandler+1,_TMR2_InterruptHandler+1
 12458  004C48  C015  F03B         	movff	TMR2_SetInterruptHandler@InterruptHandler+2,_TMR2_InterruptHandler+2
 12459  004C4C  0012               	return		;funcret
 12460  004C4E                     __end_of_TMR2_SetInterruptHandler:
 12461                           	opt stack 0
 12462                           tblptru	equ	0xFF8
 12463                           tblptrh	equ	0xFF7
 12464                           tblptrl	equ	0xFF6
 12465                           tablat	equ	0xFF5
 12466                           prodh	equ	0xFF4
 12467                           prodl	equ	0xFF3
 12468                           intcon	equ	0xFF2
 12469                           postinc0	equ	0xFEE
 12470                           wreg	equ	0xFE8
 12471                           postdec1	equ	0xFE5
 12472                           fsr1l	equ	0xFE1
 12473                           indf2	equ	0xFDF
 12474                           postinc2	equ	0xFDE
 12475                           postdec2	equ	0xFDD
 12476                           fsr2h	equ	0xFDA
 12477                           fsr2l	equ	0xFD9
 12478                           status	equ	0xFD8
 12479                           
 12480 ;; *************** function _TMR0_Initialize *****************
 12481 ;; Defined at:
 12482 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;		None
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;		None
 12487 ;; Return value:  Size  Location     Type
 12488 ;;                  1    wreg      void 
 12489 ;; Registers used:
 12490 ;;		wreg, status,2, status,0, cstack
 12491 ;; Tracked objects:
 12492 ;;		On entry : 0/0
 12493 ;;		On exit  : 0/0
 12494 ;;		Unchanged: 0/0
 12495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12499 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12500 ;;Total ram usage:        2 bytes
 12501 ;; Hardware stack levels used:    1
 12502 ;; Hardware stack levels required when called:    5
 12503 ;; This function calls:
 12504 ;;		_TMR0_StartTimer
 12505 ;; This function is called by:
 12506 ;;		_SYSTEM_Initialize
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           	psect	text64
 12511  00496E                     __ptext64:
 12512                           	opt stack 0
 12513  00496E                     _TMR0_Initialize:
 12514                           	opt stack 24
 12515                           
 12516                           ;tmr0.c: 69: T0CON0 = 0x10;
 12517                           
 12518                           ;incstack = 0
 12519  00496E  0E10               	movlw	16
 12520  004970  6ED5               	movwf	4053,c	;volatile
 12521                           
 12522                           ;tmr0.c: 72: T0CON1 = 0x41;
 12523  004972  0E41               	movlw	65
 12524  004974  6ED6               	movwf	4054,c	;volatile
 12525                           
 12526                           ;tmr0.c: 75: TMR0H = 0x15;
 12527  004976  0E15               	movlw	21
 12528  004978  6ED4               	movwf	4052,c	;volatile
 12529                           
 12530                           ;tmr0.c: 78: TMR0L = 0xA0;
 12531  00497A  0EA0               	movlw	160
 12532  00497C  6ED3               	movwf	4051,c	;volatile
 12533                           
 12534                           ;tmr0.c: 81: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 12535  00497E  50D3               	movf	4051,w,c	;volatile
 12536  004980  CFD4 F013          	movff	4052,??_TMR0_Initialize	;volatile
 12537  004984  6A14               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 12538  004986  C013  F014         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 12539  00498A  6A13               	clrf	??_TMR0_Initialize,c
 12540  00498C  1013               	iorwf	??_TMR0_Initialize,w,c
 12541  00498E  6E3C               	movwf	_timer0ReloadVal16bit,c	;volatile
 12542  004990  5014               	movf	??_TMR0_Initialize+1,w,c
 12543  004992  6E3D               	movwf	_timer0ReloadVal16bit+1,c	;volatile
 12544                           
 12545                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 12546  004994  010E               	movlb	14	; () banked
 12547  004996  9BCA               	bcf	202,5,b	;volatile
 12548                           
 12549                           ; BSR set to: 14
 12550                           ;tmr0.c: 88: TMR0_StartTimer();
 12551  004998  EC56  F026         	call	_TMR0_StartTimer	;wreg free
 12552  00499C  0012               	return		;funcret
 12553  00499E                     __end_of_TMR0_Initialize:
 12554                           	opt stack 0
 12555                           tblptru	equ	0xFF8
 12556                           tblptrh	equ	0xFF7
 12557                           tblptrl	equ	0xFF6
 12558                           tablat	equ	0xFF5
 12559                           prodh	equ	0xFF4
 12560                           prodl	equ	0xFF3
 12561                           intcon	equ	0xFF2
 12562                           postinc0	equ	0xFEE
 12563                           wreg	equ	0xFE8
 12564                           postdec1	equ	0xFE5
 12565                           fsr1l	equ	0xFE1
 12566                           indf2	equ	0xFDF
 12567                           postinc2	equ	0xFDE
 12568                           postdec2	equ	0xFDD
 12569                           fsr2h	equ	0xFDA
 12570                           fsr2l	equ	0xFD9
 12571                           status	equ	0xFD8
 12572                           
 12573 ;; *************** function _TMR0_StartTimer *****************
 12574 ;; Defined at:
 12575 ;;		line 91 in file "mcc_generated_files/tmr0.c"
 12576 ;; Parameters:    Size  Location     Type
 12577 ;;		None
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;		None
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  1    wreg      void 
 12582 ;; Registers used:
 12583 ;;		None
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12593 ;;Total ram usage:        0 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; Hardware stack levels required when called:    4
 12596 ;; This function calls:
 12597 ;;		Nothing
 12598 ;; This function is called by:
 12599 ;;		_TMR0_Initialize
 12600 ;;		_computeRollPitch
 12601 ;; This function uses a non-reentrant model
 12602 ;;
 12603                           
 12604                           	psect	text65
 12605  004CAC                     __ptext65:
 12606                           	opt stack 0
 12607  004CAC                     _TMR0_StartTimer:
 12608                           	opt stack 25
 12609                           
 12610                           ;tmr0.c: 94: T0CON0bits.T0EN = 1;
 12611                           
 12612                           ;incstack = 0
 12613  004CAC  8ED5               	bsf	4053,7,c	;volatile
 12614  004CAE  0012               	return		;funcret
 12615  004CB0                     __end_of_TMR0_StartTimer:
 12616                           	opt stack 0
 12617                           tblptru	equ	0xFF8
 12618                           tblptrh	equ	0xFF7
 12619                           tblptrl	equ	0xFF6
 12620                           tablat	equ	0xFF5
 12621                           prodh	equ	0xFF4
 12622                           prodl	equ	0xFF3
 12623                           intcon	equ	0xFF2
 12624                           postinc0	equ	0xFEE
 12625                           wreg	equ	0xFE8
 12626                           postdec1	equ	0xFE5
 12627                           fsr1l	equ	0xFE1
 12628                           indf2	equ	0xFDF
 12629                           postinc2	equ	0xFDE
 12630                           postdec2	equ	0xFDD
 12631                           fsr2h	equ	0xFDA
 12632                           fsr2l	equ	0xFD9
 12633                           status	equ	0xFD8
 12634                           
 12635 ;; *************** function _PWM4_Initialize *****************
 12636 ;; Defined at:
 12637 ;;		line 57 in file "mcc_generated_files/pwm4.c"
 12638 ;; Parameters:    Size  Location     Type
 12639 ;;		None
 12640 ;; Auto vars:     Size  Location     Type
 12641 ;;		None
 12642 ;; Return value:  Size  Location     Type
 12643 ;;                  1    wreg      void 
 12644 ;; Registers used:
 12645 ;;		wreg, status,2
 12646 ;; Tracked objects:
 12647 ;;		On entry : 0/0
 12648 ;;		On exit  : 0/0
 12649 ;;		Unchanged: 0/0
 12650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12655 ;;Total ram usage:        0 bytes
 12656 ;; Hardware stack levels used:    1
 12657 ;; Hardware stack levels required when called:    4
 12658 ;; This function calls:
 12659 ;;		Nothing
 12660 ;; This function is called by:
 12661 ;;		_SYSTEM_Initialize
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665                           	psect	text66
 12666  004B7C                     __ptext66:
 12667                           	opt stack 0
 12668  004B7C                     _PWM4_Initialize:
 12669                           	opt stack 25
 12670                           
 12671                           ;pwm4.c: 61: PWM4CON = 0x80;
 12672                           
 12673                           ;incstack = 0
 12674  004B7C  0E80               	movlw	128
 12675  004B7E  6EA2               	movwf	4002,c	;volatile
 12676                           
 12677                           ;pwm4.c: 64: PWM4DCH = 0x5D;
 12678  004B80  0E5D               	movlw	93
 12679  004B82  6EA1               	movwf	4001,c	;volatile
 12680                           
 12681                           ;pwm4.c: 67: PWM4DCL = 0x40;
 12682  004B84  0E40               	movlw	64
 12683  004B86  6EA0               	movwf	4000,c	;volatile
 12684                           
 12685                           ;pwm4.c: 71: CCPTMRSbits.P4TSEL = 0x1;
 12686  004B88  50AE               	movf	4014,w,c	;volatile
 12687  004B8A  0B3F               	andlw	-193
 12688  004B8C  0940               	iorlw	64
 12689  004B8E  6EAE               	movwf	4014,c	;volatile
 12690  004B90  0012               	return		;funcret
 12691  004B92                     __end_of_PWM4_Initialize:
 12692                           	opt stack 0
 12693                           tblptru	equ	0xFF8
 12694                           tblptrh	equ	0xFF7
 12695                           tblptrl	equ	0xFF6
 12696                           tablat	equ	0xFF5
 12697                           prodh	equ	0xFF4
 12698                           prodl	equ	0xFF3
 12699                           intcon	equ	0xFF2
 12700                           postinc0	equ	0xFEE
 12701                           wreg	equ	0xFE8
 12702                           postdec1	equ	0xFE5
 12703                           fsr1l	equ	0xFE1
 12704                           indf2	equ	0xFDF
 12705                           postinc2	equ	0xFDE
 12706                           postdec2	equ	0xFDD
 12707                           fsr2h	equ	0xFDA
 12708                           fsr2l	equ	0xFD9
 12709                           status	equ	0xFD8
 12710                           
 12711 ;; *************** function _PWM3_Initialize *****************
 12712 ;; Defined at:
 12713 ;;		line 57 in file "mcc_generated_files/pwm3.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;		None
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;		None
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  1    wreg      void 
 12720 ;; Registers used:
 12721 ;;		wreg, status,2
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12731 ;;Total ram usage:        0 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; Hardware stack levels required when called:    4
 12734 ;; This function calls:
 12735 ;;		Nothing
 12736 ;; This function is called by:
 12737 ;;		_SYSTEM_Initialize
 12738 ;; This function uses a non-reentrant model
 12739 ;;
 12740                           
 12741                           	psect	text67
 12742  004B92                     __ptext67:
 12743                           	opt stack 0
 12744  004B92                     _PWM3_Initialize:
 12745                           	opt stack 25
 12746                           
 12747                           ;pwm3.c: 61: PWM3CON = 0x80;
 12748                           
 12749                           ;incstack = 0
 12750  004B92  0E80               	movlw	128
 12751  004B94  6EA5               	movwf	4005,c	;volatile
 12752                           
 12753                           ;pwm3.c: 64: PWM3DCH = 0x5D;
 12754  004B96  0E5D               	movlw	93
 12755  004B98  6EA4               	movwf	4004,c	;volatile
 12756                           
 12757                           ;pwm3.c: 67: PWM3DCL = 0x40;
 12758  004B9A  0E40               	movlw	64
 12759  004B9C  6EA3               	movwf	4003,c	;volatile
 12760                           
 12761                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0x1;
 12762  004B9E  50AE               	movf	4014,w,c	;volatile
 12763  004BA0  0BCF               	andlw	-49
 12764  004BA2  0910               	iorlw	16
 12765  004BA4  6EAE               	movwf	4014,c	;volatile
 12766  004BA6  0012               	return		;funcret
 12767  004BA8                     __end_of_PWM3_Initialize:
 12768                           	opt stack 0
 12769                           tblptru	equ	0xFF8
 12770                           tblptrh	equ	0xFF7
 12771                           tblptrl	equ	0xFF6
 12772                           tablat	equ	0xFF5
 12773                           prodh	equ	0xFF4
 12774                           prodl	equ	0xFF3
 12775                           intcon	equ	0xFF2
 12776                           postinc0	equ	0xFEE
 12777                           wreg	equ	0xFE8
 12778                           postdec1	equ	0xFE5
 12779                           fsr1l	equ	0xFE1
 12780                           indf2	equ	0xFDF
 12781                           postinc2	equ	0xFDE
 12782                           postdec2	equ	0xFDD
 12783                           fsr2h	equ	0xFDA
 12784                           fsr2l	equ	0xFD9
 12785                           status	equ	0xFD8
 12786                           
 12787 ;; *************** function _PWM2_Initialize *****************
 12788 ;; Defined at:
 12789 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 12790 ;; Parameters:    Size  Location     Type
 12791 ;;		None
 12792 ;; Auto vars:     Size  Location     Type
 12793 ;;		None
 12794 ;; Return value:  Size  Location     Type
 12795 ;;                  1    wreg      void 
 12796 ;; Registers used:
 12797 ;;		wreg, status,2
 12798 ;; Tracked objects:
 12799 ;;		On entry : 0/0
 12800 ;;		On exit  : 0/0
 12801 ;;		Unchanged: 0/0
 12802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12807 ;;Total ram usage:        0 bytes
 12808 ;; Hardware stack levels used:    1
 12809 ;; Hardware stack levels required when called:    4
 12810 ;; This function calls:
 12811 ;;		Nothing
 12812 ;; This function is called by:
 12813 ;;		_SYSTEM_Initialize
 12814 ;; This function uses a non-reentrant model
 12815 ;;
 12816                           
 12817                           	psect	text68
 12818  004BA8                     __ptext68:
 12819                           	opt stack 0
 12820  004BA8                     _PWM2_Initialize:
 12821                           	opt stack 25
 12822                           
 12823                           ;pwm2.c: 68: CCP2CON = 0x9C;
 12824                           
 12825                           ;incstack = 0
 12826  004BA8  0E9C               	movlw	156
 12827  004BAA  6EA8               	movwf	4008,c	;volatile
 12828                           
 12829                           ;pwm2.c: 71: CCPR2H = 0x5D;
 12830  004BAC  0E5D               	movlw	93
 12831  004BAE  6EA7               	movwf	4007,c	;volatile
 12832                           
 12833                           ;pwm2.c: 74: CCPR2L = 0x40;
 12834  004BB0  0E40               	movlw	64
 12835  004BB2  6EA6               	movwf	4006,c	;volatile
 12836                           
 12837                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 12838  004BB4  50AE               	movf	4014,w,c	;volatile
 12839  004BB6  0BF3               	andlw	-13
 12840  004BB8  0904               	iorlw	4
 12841  004BBA  6EAE               	movwf	4014,c	;volatile
 12842  004BBC  0012               	return		;funcret
 12843  004BBE                     __end_of_PWM2_Initialize:
 12844                           	opt stack 0
 12845                           tblptru	equ	0xFF8
 12846                           tblptrh	equ	0xFF7
 12847                           tblptrl	equ	0xFF6
 12848                           tablat	equ	0xFF5
 12849                           prodh	equ	0xFF4
 12850                           prodl	equ	0xFF3
 12851                           intcon	equ	0xFF2
 12852                           postinc0	equ	0xFEE
 12853                           wreg	equ	0xFE8
 12854                           postdec1	equ	0xFE5
 12855                           fsr1l	equ	0xFE1
 12856                           indf2	equ	0xFDF
 12857                           postinc2	equ	0xFDE
 12858                           postdec2	equ	0xFDD
 12859                           fsr2h	equ	0xFDA
 12860                           fsr2l	equ	0xFD9
 12861                           status	equ	0xFD8
 12862                           
 12863 ;; *************** function _PWM1_Initialize *****************
 12864 ;; Defined at:
 12865 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 12866 ;; Parameters:    Size  Location     Type
 12867 ;;		None
 12868 ;; Auto vars:     Size  Location     Type
 12869 ;;		None
 12870 ;; Return value:  Size  Location     Type
 12871 ;;                  1    wreg      void 
 12872 ;; Registers used:
 12873 ;;		wreg, status,2
 12874 ;; Tracked objects:
 12875 ;;		On entry : 0/0
 12876 ;;		On exit  : 0/0
 12877 ;;		Unchanged: 0/0
 12878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12883 ;;Total ram usage:        0 bytes
 12884 ;; Hardware stack levels used:    1
 12885 ;; Hardware stack levels required when called:    4
 12886 ;; This function calls:
 12887 ;;		Nothing
 12888 ;; This function is called by:
 12889 ;;		_SYSTEM_Initialize
 12890 ;; This function uses a non-reentrant model
 12891 ;;
 12892                           
 12893                           	psect	text69
 12894  004BBE                     __ptext69:
 12895                           	opt stack 0
 12896  004BBE                     _PWM1_Initialize:
 12897                           	opt stack 25
 12898                           
 12899                           ;pwm1.c: 68: CCP1CON = 0x9C;
 12900                           
 12901                           ;incstack = 0
 12902  004BBE  0E9C               	movlw	156
 12903  004BC0  6EAC               	movwf	4012,c	;volatile
 12904                           
 12905                           ;pwm1.c: 71: CCPR1H = 0x5D;
 12906  004BC2  0E5D               	movlw	93
 12907  004BC4  6EAB               	movwf	4011,c	;volatile
 12908                           
 12909                           ;pwm1.c: 74: CCPR1L = 0x40;
 12910  004BC6  0E40               	movlw	64
 12911  004BC8  6EAA               	movwf	4010,c	;volatile
 12912                           
 12913                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 12914  004BCA  50AE               	movf	4014,w,c	;volatile
 12915  004BCC  0BFC               	andlw	-4
 12916  004BCE  0901               	iorlw	1
 12917  004BD0  6EAE               	movwf	4014,c	;volatile
 12918  004BD2  0012               	return		;funcret
 12919  004BD4                     __end_of_PWM1_Initialize:
 12920                           	opt stack 0
 12921                           tblptru	equ	0xFF8
 12922                           tblptrh	equ	0xFF7
 12923                           tblptrl	equ	0xFF6
 12924                           tablat	equ	0xFF5
 12925                           prodh	equ	0xFF4
 12926                           prodl	equ	0xFF3
 12927                           intcon	equ	0xFF2
 12928                           postinc0	equ	0xFEE
 12929                           wreg	equ	0xFE8
 12930                           postdec1	equ	0xFE5
 12931                           fsr1l	equ	0xFE1
 12932                           indf2	equ	0xFDF
 12933                           postinc2	equ	0xFDE
 12934                           postdec2	equ	0xFDD
 12935                           fsr2h	equ	0xFDA
 12936                           fsr2l	equ	0xFD9
 12937                           status	equ	0xFD8
 12938                           
 12939 ;; *************** function _PIN_MANAGER_Initialize *****************
 12940 ;; Defined at:
 12941 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;		None
 12944 ;; Auto vars:     Size  Location     Type
 12945 ;;  state           1   18[COMRAM] unsigned char 
 12946 ;; Return value:  Size  Location     Type
 12947 ;;                  1    wreg      void 
 12948 ;; Registers used:
 12949 ;;		wreg, status,2
 12950 ;; Tracked objects:
 12951 ;;		On entry : 0/0
 12952 ;;		On exit  : 0/0
 12953 ;;		Unchanged: 0/0
 12954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12958 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12959 ;;Total ram usage:        1 bytes
 12960 ;; Hardware stack levels used:    1
 12961 ;; Hardware stack levels required when called:    4
 12962 ;; This function calls:
 12963 ;;		Nothing
 12964 ;; This function is called by:
 12965 ;;		_SYSTEM_Initialize
 12966 ;; This function uses a non-reentrant model
 12967 ;;
 12968                           
 12969                           	psect	text70
 12970  003D94                     __ptext70:
 12971                           	opt stack 0
 12972  003D94                     _PIN_MANAGER_Initialize:
 12973                           	opt stack 25
 12974                           
 12975                           ;pin_manager.c: 57: LATE = 0x00;
 12976                           
 12977                           ;incstack = 0
 12978  003D94  0E00               	movlw	0
 12979  003D96  6E87               	movwf	3975,c	;volatile
 12980                           
 12981                           ;pin_manager.c: 58: LATD = 0x00;
 12982  003D98  0E00               	movlw	0
 12983  003D9A  6E86               	movwf	3974,c	;volatile
 12984                           
 12985                           ;pin_manager.c: 59: LATA = 0x00;
 12986  003D9C  0E00               	movlw	0
 12987  003D9E  6E83               	movwf	3971,c	;volatile
 12988                           
 12989                           ;pin_manager.c: 60: LATB = 0x00;
 12990  003DA0  0E00               	movlw	0
 12991  003DA2  6E84               	movwf	3972,c	;volatile
 12992                           
 12993                           ;pin_manager.c: 61: LATC = 0x00;
 12994  003DA4  0E00               	movlw	0
 12995  003DA6  6E85               	movwf	3973,c	;volatile
 12996                           
 12997                           ;pin_manager.c: 66: TRISE = 0x07;
 12998  003DA8  0E07               	movlw	7
 12999  003DAA  6E8C               	movwf	3980,c	;volatile
 13000                           
 13001                           ;pin_manager.c: 67: TRISA = 0xCF;
 13002  003DAC  0ECF               	movlw	207
 13003  003DAE  6E88               	movwf	3976,c	;volatile
 13004                           
 13005                           ;pin_manager.c: 68: TRISB = 0xF9;
 13006  003DB0  0EF9               	movlw	249
 13007  003DB2  6E89               	movwf	3977,c	;volatile
 13008                           
 13009                           ;pin_manager.c: 69: TRISC = 0x7F;
 13010  003DB4  0E7F               	movlw	127
 13011  003DB6  6E8A               	movwf	3978,c	;volatile
 13012                           
 13013                           ;pin_manager.c: 70: TRISD = 0xFF;
 13014  003DB8  688B               	setf	3979,c	;volatile
 13015                           
 13016                           ;pin_manager.c: 75: ANSELC = 0xA7;
 13017  003DBA  0EA7               	movlw	167
 13018  003DBC  010F               	movlb	15	; () banked
 13019  003DBE  6F21               	movwf	33,b	;volatile
 13020                           
 13021                           ; BSR set to: 15
 13022                           ;pin_manager.c: 76: ANSELB = 0xFF;
 13023  003DC0  010F               	movlb	15	; () banked
 13024  003DC2  6919               	setf	25,b	;volatile
 13025                           
 13026                           ; BSR set to: 15
 13027                           ;pin_manager.c: 77: ANSELD = 0xFF;
 13028  003DC4  010F               	movlb	15	; () banked
 13029  003DC6  6926               	setf	38,b	;volatile
 13030                           
 13031                           ;pin_manager.c: 78: ANSELE = 0x07;
 13032  003DC8  0E07               	movlw	7
 13033  003DCA  010F               	movlb	15	; () banked
 13034  003DCC  6F2E               	movwf	46,b	;volatile
 13035                           
 13036                           ; BSR set to: 15
 13037                           ;pin_manager.c: 79: ANSELA = 0xFF;
 13038  003DCE  010F               	movlb	15	; () banked
 13039  003DD0  6911               	setf	17,b	;volatile
 13040                           
 13041                           ;pin_manager.c: 84: WPUD = 0x00;
 13042  003DD2  0E00               	movlw	0
 13043  003DD4  010F               	movlb	15	; () banked
 13044  003DD6  6F25               	movwf	37,b	;volatile
 13045                           
 13046                           ;pin_manager.c: 85: WPUE = 0x00;
 13047  003DD8  0E00               	movlw	0
 13048  003DDA  010F               	movlb	15	; () banked
 13049  003DDC  6F2D               	movwf	45,b	;volatile
 13050                           
 13051                           ;pin_manager.c: 86: WPUB = 0x00;
 13052  003DDE  0E00               	movlw	0
 13053  003DE0  010F               	movlb	15	; () banked
 13054  003DE2  6F18               	movwf	24,b	;volatile
 13055                           
 13056                           ;pin_manager.c: 87: WPUA = 0x00;
 13057  003DE4  0E00               	movlw	0
 13058  003DE6  010F               	movlb	15	; () banked
 13059  003DE8  6F10               	movwf	16,b	;volatile
 13060                           
 13061                           ;pin_manager.c: 88: WPUC = 0x00;
 13062  003DEA  0E00               	movlw	0
 13063  003DEC  010F               	movlb	15	; () banked
 13064  003DEE  6F20               	movwf	32,b	;volatile
 13065                           
 13066                           ;pin_manager.c: 93: ODCONE = 0x00;
 13067  003DF0  0E00               	movlw	0
 13068  003DF2  010F               	movlb	15	; () banked
 13069  003DF4  6F2C               	movwf	44,b	;volatile
 13070                           
 13071                           ;pin_manager.c: 94: ODCONA = 0x00;
 13072  003DF6  0E00               	movlw	0
 13073  003DF8  010F               	movlb	15	; () banked
 13074  003DFA  6F0F               	movwf	15,b	;volatile
 13075                           
 13076                           ;pin_manager.c: 95: ODCONB = 0x00;
 13077  003DFC  0E00               	movlw	0
 13078  003DFE  010F               	movlb	15	; () banked
 13079  003E00  6F17               	movwf	23,b	;volatile
 13080                           
 13081                           ;pin_manager.c: 96: ODCONC = 0x00;
 13082  003E02  0E00               	movlw	0
 13083  003E04  010F               	movlb	15	; () banked
 13084  003E06  6F1F               	movwf	31,b	;volatile
 13085                           
 13086                           ;pin_manager.c: 97: ODCOND = 0x00;
 13087  003E08  0E00               	movlw	0
 13088  003E0A  010F               	movlb	15	; () banked
 13089  003E0C  6F24               	movwf	36,b	;volatile
 13090                           
 13091                           ;pin_manager.c: 104: bool state = (unsigned char)GIE;
 13092  003E0E  0E00               	movlw	0
 13093  003E10  BEF2               	btfsc	intcon,7,c	;volatile
 13094  003E12  0E01               	movlw	1
 13095  003E14  6E13               	movwf	PIN_MANAGER_Initialize@state,c
 13096                           
 13097                           ; BSR set to: 15
 13098                           ;pin_manager.c: 105: GIE = 0;
 13099  003E16  9EF2               	bcf	intcon,7,c	;volatile
 13100                           
 13101                           ;pin_manager.c: 106: PPSLOCK = 0x55;
 13102  003E18  0E55               	movlw	85
 13103  003E1A  010E               	movlb	14	; () banked
 13104  003E1C  6FA0               	movwf	160,b	;volatile
 13105                           
 13106                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
 13107  003E1E  0EAA               	movlw	170
 13108  003E20  010E               	movlb	14	; () banked
 13109  003E22  6FA0               	movwf	160,b	;volatile
 13110                           
 13111                           ; BSR set to: 14
 13112                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x00;
 13113  003E24  010E               	movlb	14	; () banked
 13114  003E26  91A0               	bcf	160,0,b	;volatile
 13115                           
 13116                           ;pin_manager.c: 110: RA4PPS = 0x07;
 13117  003E28  0E07               	movlw	7
 13118  003E2A  010E               	movlb	14	; () banked
 13119  003E2C  6FEB               	movwf	235,b	;volatile
 13120                           
 13121                           ;pin_manager.c: 111: RB1PPS = 0x05;
 13122  003E2E  0E05               	movlw	5
 13123  003E30  010E               	movlb	14	; () banked
 13124  003E32  6FF0               	movwf	240,b	;volatile
 13125                           
 13126                           ;pin_manager.c: 112: RC3PPS = 0x0F;
 13127  003E34  0E0F               	movlw	15
 13128  003E36  010E               	movlb	14	; () banked
 13129  003E38  6FFA               	movwf	250,b	;volatile
 13130                           
 13131                           ;pin_manager.c: 113: RB2PPS = 0x06;
 13132  003E3A  0E06               	movlw	6
 13133  003E3C  010E               	movlb	14	; () banked
 13134  003E3E  6FF1               	movwf	241,b	;volatile
 13135                           
 13136                           ;pin_manager.c: 114: RC4PPS = 0x10;
 13137  003E40  0E10               	movlw	16
 13138  003E42  010E               	movlb	14	; () banked
 13139  003E44  6FFB               	movwf	251,b	;volatile
 13140                           
 13141                           ;pin_manager.c: 115: RA5PPS = 0x08;
 13142  003E46  0E08               	movlw	8
 13143  003E48  010E               	movlb	14	; () banked
 13144  003E4A  6FEC               	movwf	236,b	;volatile
 13145                           
 13146                           ; BSR set to: 14
 13147                           ;pin_manager.c: 116: RX1PPSbits.RXPPS = 0x16;
 13148  003E4C  010E               	movlb	14	; () banked
 13149  003E4E  91B5               	bcf	181,0,b	;volatile
 13150  003E50  83B5               	bsf	181,1,b	;volatile
 13151  003E52  85B5               	bsf	181,2,b	;volatile
 13152  003E54  97B5               	bcf	181,3,b	;volatile
 13153  003E56  89B5               	bsf	181,4,b	;volatile
 13154                           
 13155                           ;pin_manager.c: 117: RC7PPS = 0x09;
 13156  003E58  0E09               	movlw	9
 13157  003E5A  010E               	movlb	14	; () banked
 13158  003E5C  6FFE               	movwf	254,b	;volatile
 13159                           
 13160                           ; BSR set to: 14
 13161                           ;pin_manager.c: 118: SSP1CLKPPSbits.SSPCLKPPS = 0x13;
 13162  003E5E  010E               	movlb	14	; () banked
 13163  003E60  81B7               	bsf	183,0,b	;volatile
 13164  003E62  83B7               	bsf	183,1,b	;volatile
 13165  003E64  95B7               	bcf	183,2,b	;volatile
 13166  003E66  97B7               	bcf	183,3,b	;volatile
 13167  003E68  89B7               	bsf	183,4,b	;volatile
 13168                           
 13169                           ; BSR set to: 14
 13170                           ;pin_manager.c: 119: SSP1DATPPSbits.SSPDATPPS = 0x14;
 13171  003E6A  010E               	movlb	14	; () banked
 13172  003E6C  91B8               	bcf	184,0,b	;volatile
 13173  003E6E  93B8               	bcf	184,1,b	;volatile
 13174  003E70  85B8               	bsf	184,2,b	;volatile
 13175  003E72  97B8               	bcf	184,3,b	;volatile
 13176  003E74  89B8               	bsf	184,4,b	;volatile
 13177                           
 13178                           ;pin_manager.c: 121: PPSLOCK = 0x55;
 13179  003E76  0E55               	movlw	85
 13180  003E78  010E               	movlb	14	; () banked
 13181  003E7A  6FA0               	movwf	160,b	;volatile
 13182                           
 13183                           ;pin_manager.c: 122: PPSLOCK = 0xAA;
 13184  003E7C  0EAA               	movlw	170
 13185  003E7E  010E               	movlb	14	; () banked
 13186  003E80  6FA0               	movwf	160,b	;volatile
 13187                           
 13188                           ; BSR set to: 14
 13189                           ;pin_manager.c: 123: PPSLOCKbits.PPSLOCKED = 0x01;
 13190  003E82  010E               	movlb	14	; () banked
 13191  003E84  81A0               	bsf	160,0,b	;volatile
 13192                           
 13193                           ; BSR set to: 14
 13194                           ;pin_manager.c: 125: GIE = state;
 13195  003E86  A013               	btfss	PIN_MANAGER_Initialize@state,0,c
 13196  003E88  D002               	goto	u5050
 13197  003E8A  8EF2               	bsf	intcon,7,c	;volatile
 13198  003E8C  0012               	return	
 13199  003E8E                     u5050:
 13200  003E8E  9EF2               	bcf	intcon,7,c	;volatile
 13201  003E90  0012               	return		;funcret
 13202  003E92                     __end_of_PIN_MANAGER_Initialize:
 13203                           	opt stack 0
 13204                           tblptru	equ	0xFF8
 13205                           tblptrh	equ	0xFF7
 13206                           tblptrl	equ	0xFF6
 13207                           tablat	equ	0xFF5
 13208                           prodh	equ	0xFF4
 13209                           prodl	equ	0xFF3
 13210                           intcon	equ	0xFF2
 13211                           postinc0	equ	0xFEE
 13212                           wreg	equ	0xFE8
 13213                           postdec1	equ	0xFE5
 13214                           fsr1l	equ	0xFE1
 13215                           indf2	equ	0xFDF
 13216                           postinc2	equ	0xFDE
 13217                           postdec2	equ	0xFDD
 13218                           fsr2h	equ	0xFDA
 13219                           fsr2l	equ	0xFD9
 13220                           status	equ	0xFD8
 13221                           
 13222 ;; *************** function _OSCILLATOR_Initialize *****************
 13223 ;; Defined at:
 13224 ;;		line 131 in file "mcc_generated_files/mcc.c"
 13225 ;; Parameters:    Size  Location     Type
 13226 ;;		None
 13227 ;; Auto vars:     Size  Location     Type
 13228 ;;		None
 13229 ;; Return value:  Size  Location     Type
 13230 ;;                  1    wreg      void 
 13231 ;; Registers used:
 13232 ;;		wreg, status,2
 13233 ;; Tracked objects:
 13234 ;;		On entry : 0/0
 13235 ;;		On exit  : 0/0
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13242 ;;Total ram usage:        0 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; Hardware stack levels required when called:    4
 13245 ;; This function calls:
 13246 ;;		Nothing
 13247 ;; This function is called by:
 13248 ;;		_SYSTEM_Initialize
 13249 ;; This function uses a non-reentrant model
 13250 ;;
 13251                           
 13252                           	psect	text71
 13253  004AE4                     __ptext71:
 13254                           	opt stack 0
 13255  004AE4                     _OSCILLATOR_Initialize:
 13256                           	opt stack 25
 13257                           
 13258                           ;mcc.c: 134: OSCCON1 = 0x60;
 13259                           
 13260                           ;incstack = 0
 13261  004AE4  0E60               	movlw	96
 13262  004AE6  010E               	movlb	14	; () banked
 13263  004AE8  6FD8               	movwf	216,b	;volatile
 13264                           
 13265                           ;mcc.c: 136: OSCCON3 = 0x00;
 13266  004AEA  0E00               	movlw	0
 13267  004AEC  010E               	movlb	14	; () banked
 13268  004AEE  6FDA               	movwf	218,b	;volatile
 13269                           
 13270                           ;mcc.c: 138: OSCEN = 0x00;
 13271  004AF0  0E00               	movlw	0
 13272  004AF2  010E               	movlb	14	; () banked
 13273  004AF4  6FDC               	movwf	220,b	;volatile
 13274                           
 13275                           ;mcc.c: 140: OSCFRQ = 0x07;
 13276  004AF6  0E07               	movlw	7
 13277  004AF8  010E               	movlb	14	; () banked
 13278  004AFA  6FDE               	movwf	222,b	;volatile
 13279                           
 13280                           ;mcc.c: 142: OSCTUNE = 0x00;
 13281  004AFC  0E00               	movlw	0
 13282  004AFE  010E               	movlb	14	; () banked
 13283  004B00  6FDD               	movwf	221,b	;volatile
 13284                           
 13285                           ; BSR set to: 14
 13286  004B02  0012               	return		;funcret
 13287  004B04                     __end_of_OSCILLATOR_Initialize:
 13288                           	opt stack 0
 13289                           tblptru	equ	0xFF8
 13290                           tblptrh	equ	0xFF7
 13291                           tblptrl	equ	0xFF6
 13292                           tablat	equ	0xFF5
 13293                           prodh	equ	0xFF4
 13294                           prodl	equ	0xFF3
 13295                           intcon	equ	0xFF2
 13296                           postinc0	equ	0xFEE
 13297                           wreg	equ	0xFE8
 13298                           postdec1	equ	0xFE5
 13299                           fsr1l	equ	0xFE1
 13300                           indf2	equ	0xFDF
 13301                           postinc2	equ	0xFDE
 13302                           postdec2	equ	0xFDD
 13303                           fsr2h	equ	0xFDA
 13304                           fsr2l	equ	0xFD9
 13305                           status	equ	0xFD8
 13306                           
 13307 ;; *************** function _INTERRUPT_Initialize *****************
 13308 ;; Defined at:
 13309 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 13310 ;; Parameters:    Size  Location     Type
 13311 ;;		None
 13312 ;; Auto vars:     Size  Location     Type
 13313 ;;		None
 13314 ;; Return value:  Size  Location     Type
 13315 ;;                  1    wreg      void 
 13316 ;; Registers used:
 13317 ;;		None
 13318 ;; Tracked objects:
 13319 ;;		On entry : 0/0
 13320 ;;		On exit  : 0/0
 13321 ;;		Unchanged: 0/0
 13322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13327 ;;Total ram usage:        0 bytes
 13328 ;; Hardware stack levels used:    1
 13329 ;; Hardware stack levels required when called:    4
 13330 ;; This function calls:
 13331 ;;		Nothing
 13332 ;; This function is called by:
 13333 ;;		_SYSTEM_Initialize
 13334 ;; This function uses a non-reentrant model
 13335 ;;
 13336                           
 13337                           	psect	text72
 13338  004C5A                     __ptext72:
 13339                           	opt stack 0
 13340  004C5A                     _INTERRUPT_Initialize:
 13341                           	opt stack 25
 13342                           
 13343                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 1;
 13344                           
 13345                           ; BSR set to: 14
 13346                           ;incstack = 0
 13347  004C5A  8AF2               	bsf	intcon,5,c	;volatile
 13348                           
 13349                           ;interrupt_manager.c: 59: IPR4bits.TMR2IP = 1;
 13350  004C5C  010E               	movlb	14	; () banked
 13351  004C5E  83BE               	bsf	190,1,b	;volatile
 13352                           
 13353                           ;interrupt_manager.c: 62: IPR3bits.BCL1IP = 1;
 13354  004C60  010E               	movlb	14	; () banked
 13355  004C62  83BD               	bsf	189,1,b	;volatile
 13356                           
 13357                           ; BSR set to: 14
 13358  004C64  0012               	return		;funcret
 13359  004C66                     __end_of_INTERRUPT_Initialize:
 13360                           	opt stack 0
 13361                           tblptru	equ	0xFF8
 13362                           tblptrh	equ	0xFF7
 13363                           tblptrl	equ	0xFF6
 13364                           tablat	equ	0xFF5
 13365                           prodh	equ	0xFF4
 13366                           prodl	equ	0xFF3
 13367                           intcon	equ	0xFF2
 13368                           postinc0	equ	0xFEE
 13369                           wreg	equ	0xFE8
 13370                           postdec1	equ	0xFE5
 13371                           fsr1l	equ	0xFE1
 13372                           indf2	equ	0xFDF
 13373                           postinc2	equ	0xFDE
 13374                           postdec2	equ	0xFDD
 13375                           fsr2h	equ	0xFDA
 13376                           fsr2l	equ	0xFD9
 13377                           status	equ	0xFD8
 13378                           
 13379 ;; *************** function _I2C1_Initialize *****************
 13380 ;; Defined at:
 13381 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;		None
 13384 ;; Auto vars:     Size  Location     Type
 13385 ;;		None
 13386 ;; Return value:  Size  Location     Type
 13387 ;;                  1    wreg      void 
 13388 ;; Registers used:
 13389 ;;		wreg, status,2, status,0
 13390 ;; Tracked objects:
 13391 ;;		On entry : 0/0
 13392 ;;		On exit  : 0/0
 13393 ;;		Unchanged: 0/0
 13394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13399 ;;Total ram usage:        0 bytes
 13400 ;; Hardware stack levels used:    1
 13401 ;; Hardware stack levels required when called:    4
 13402 ;; This function calls:
 13403 ;;		Nothing
 13404 ;; This function is called by:
 13405 ;;		_SYSTEM_Initialize
 13406 ;; This function uses a non-reentrant model
 13407 ;;
 13408                           
 13409                           	psect	text73
 13410  00486A                     __ptext73:
 13411                           	opt stack 0
 13412  00486A                     _I2C1_Initialize:
 13413                           	opt stack 25
 13414                           
 13415                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 13416                           
 13417                           ; BSR set to: 14
 13418                           ;incstack = 0
 13419  00486A  0EEE               	movlw	low _i2c1_tr_queue
 13420  00486C  0100               	movlb	0	; () banked
 13421  00486E  6FAE               	movwf	(_i2c1_object+2)& (0+255),b
 13422  004870  0E00               	movlw	high _i2c1_tr_queue
 13423  004872  0100               	movlb	0	; () banked
 13424  004874  6FAF               	movwf	(_i2c1_object+3)& (0+255),b
 13425                           
 13426                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 13427  004876  0EEE               	movlw	low _i2c1_tr_queue
 13428  004878  0100               	movlb	0	; () banked
 13429  00487A  6FAC               	movwf	_i2c1_object& (0+255),b
 13430  00487C  0E00               	movlw	high _i2c1_tr_queue
 13431  00487E  0100               	movlb	0	; () banked
 13432  004880  6FAD               	movwf	(_i2c1_object+1)& (0+255),b
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 13436  004882  0100               	movlb	0	; () banked
 13437  004884  83B0               	bsf	(_i2c1_object+4)& (0+255),1,b
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 13441  004886  0100               	movlb	0	; () banked
 13442  004888  91B0               	bcf	(_i2c1_object+4)& (0+255),0,b
 13443                           
 13444                           ; BSR set to: 0
 13445                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 13446  00488A  0E00               	movlw	0
 13447  00488C  0100               	movlb	0	; () banked
 13448  00488E  6FB2               	movwf	(_i2c1_object+6)& (0+255),b
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;i2c1.c: 208: SSP1STAT = 0x80;
 13452  004890  0E80               	movlw	128
 13453  004892  6E95               	movwf	3989,c	;volatile
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 13457  004894  0E28               	movlw	40
 13458  004896  6E96               	movwf	3990,c	;volatile
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 13462  004898  0E00               	movlw	0
 13463  00489A  6E98               	movwf	3992,c	;volatile
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;i2c1.c: 214: SSP1ADD = 0x20;
 13467  00489C  0E20               	movlw	32
 13468  00489E  6E93               	movwf	3987,c	;volatile
 13469                           
 13470                           ; BSR set to: 0
 13471  0048A0  0012               	return		;funcret
 13472  0048A2                     __end_of_I2C1_Initialize:
 13473                           	opt stack 0
 13474                           tblptru	equ	0xFF8
 13475                           tblptrh	equ	0xFF7
 13476                           tblptrl	equ	0xFF6
 13477                           tablat	equ	0xFF5
 13478                           prodh	equ	0xFF4
 13479                           prodl	equ	0xFF3
 13480                           intcon	equ	0xFF2
 13481                           postinc0	equ	0xFEE
 13482                           wreg	equ	0xFE8
 13483                           postdec1	equ	0xFE5
 13484                           fsr1l	equ	0xFE1
 13485                           indf2	equ	0xFDF
 13486                           postinc2	equ	0xFDE
 13487                           postdec2	equ	0xFDD
 13488                           fsr2h	equ	0xFDA
 13489                           fsr2l	equ	0xFD9
 13490                           status	equ	0xFD8
 13491                           
 13492 ;; *************** function _EUSART1_Initialize *****************
 13493 ;; Defined at:
 13494 ;;		line 55 in file "mcc_generated_files/eusart1.c"
 13495 ;; Parameters:    Size  Location     Type
 13496 ;;		None
 13497 ;; Auto vars:     Size  Location     Type
 13498 ;;		None
 13499 ;; Return value:  Size  Location     Type
 13500 ;;                  1    wreg      void 
 13501 ;; Registers used:
 13502 ;;		wreg, status,2
 13503 ;; Tracked objects:
 13504 ;;		On entry : 0/0
 13505 ;;		On exit  : 0/0
 13506 ;;		Unchanged: 0/0
 13507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13512 ;;Total ram usage:        0 bytes
 13513 ;; Hardware stack levels used:    1
 13514 ;; Hardware stack levels required when called:    4
 13515 ;; This function calls:
 13516 ;;		Nothing
 13517 ;; This function is called by:
 13518 ;;		_SYSTEM_Initialize
 13519 ;; This function uses a non-reentrant model
 13520 ;;
 13521                           
 13522                           	psect	text74
 13523  004BD4                     __ptext74:
 13524                           	opt stack 0
 13525  004BD4                     _EUSART1_Initialize:
 13526                           	opt stack 25
 13527                           
 13528                           ;eusart1.c: 60: BAUD1CON = 0x08;
 13529                           
 13530                           ; BSR set to: 0
 13531                           ;incstack = 0
 13532  004BD4  0E08               	movlw	8
 13533  004BD6  6E9F               	movwf	3999,c	;volatile
 13534                           
 13535                           ;eusart1.c: 63: RC1STA = 0x90;
 13536  004BD8  0E90               	movlw	144
 13537  004BDA  6E9D               	movwf	3997,c	;volatile
 13538                           
 13539                           ;eusart1.c: 66: TX1STA = 0x24;
 13540  004BDC  0E24               	movlw	36
 13541  004BDE  6E9E               	movwf	3998,c	;volatile
 13542                           
 13543                           ;eusart1.c: 69: SP1BRGL = 0x67;
 13544  004BE0  0E67               	movlw	103
 13545  004BE2  6E9B               	movwf	3995,c	;volatile
 13546                           
 13547                           ;eusart1.c: 72: SP1BRGH = 0x00;
 13548  004BE4  0E00               	movlw	0
 13549  004BE6  6E9C               	movwf	3996,c	;volatile
 13550  004BE8  0012               	return		;funcret
 13551  004BEA                     __end_of_EUSART1_Initialize:
 13552                           	opt stack 0
 13553                           tblptru	equ	0xFF8
 13554                           tblptrh	equ	0xFF7
 13555                           tblptrl	equ	0xFF6
 13556                           tablat	equ	0xFF5
 13557                           prodh	equ	0xFF4
 13558                           prodl	equ	0xFF3
 13559                           intcon	equ	0xFF2
 13560                           postinc0	equ	0xFEE
 13561                           wreg	equ	0xFE8
 13562                           postdec1	equ	0xFE5
 13563                           fsr1l	equ	0xFE1
 13564                           indf2	equ	0xFDF
 13565                           postinc2	equ	0xFDE
 13566                           postdec2	equ	0xFDD
 13567                           fsr2h	equ	0xFDA
 13568                           fsr2l	equ	0xFD9
 13569                           status	equ	0xFD8
 13570                           
 13571 ;; *************** function _EUSART1_Read *****************
 13572 ;; Defined at:
 13573 ;;		line 77 in file "mcc_generated_files/eusart1.c"
 13574 ;; Parameters:    Size  Location     Type
 13575 ;;		None
 13576 ;; Auto vars:     Size  Location     Type
 13577 ;;		None
 13578 ;; Return value:  Size  Location     Type
 13579 ;;                  1    wreg      unsigned char 
 13580 ;; Registers used:
 13581 ;;		wreg, status,2
 13582 ;; Tracked objects:
 13583 ;;		On entry : 0/0
 13584 ;;		On exit  : 0/0
 13585 ;;		Unchanged: 0/0
 13586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13591 ;;Total ram usage:        0 bytes
 13592 ;; Hardware stack levels used:    1
 13593 ;; Hardware stack levels required when called:    4
 13594 ;; This function calls:
 13595 ;;		Nothing
 13596 ;; This function is called by:
 13597 ;;		_main
 13598 ;;		_getch
 13599 ;; This function uses a non-reentrant model
 13600 ;;
 13601                           
 13602                           	psect	text75
 13603  004C10                     __ptext75:
 13604                           	opt stack 0
 13605  004C10                     _EUSART1_Read:
 13606                           	opt stack 26
 13607  004C10                     l394:
 13608  004C10  010E               	movlb	14	; () banked
 13609  004C12  ABCD               	btfss	205,5,b	;volatile
 13610  004C14  D7FD               	goto	l394
 13611                           
 13612                           ; BSR set to: 14
 13613                           ;eusart1.c: 82: }
 13614                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
 13615  004C16  A29D               	btfss	3997,1,c	;volatile
 13616  004C18  D002               	goto	l6107
 13617                           
 13618                           ; BSR set to: 14
 13619                           ;eusart1.c: 86: {
 13620                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
 13621  004C1A  9E9D               	bcf	3997,7,c	;volatile
 13622                           
 13623                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
 13624  004C1C  8E9D               	bsf	3997,7,c	;volatile
 13625  004C1E                     l6107:
 13626                           
 13627                           ; BSR set to: 14
 13628                           ;eusart1.c: 91: }
 13629                           ;eusart1.c: 93: return RC1REG;
 13630  004C1E  5099               	movf	3993,w,c	;volatile
 13631  004C20  0012               	return	
 13632  004C22                     __end_of_EUSART1_Read:
 13633                           	opt stack 0
 13634                           tblptru	equ	0xFF8
 13635                           tblptrh	equ	0xFF7
 13636                           tblptrl	equ	0xFF6
 13637                           tablat	equ	0xFF5
 13638                           prodh	equ	0xFF4
 13639                           prodl	equ	0xFF3
 13640                           intcon	equ	0xFF2
 13641                           postinc0	equ	0xFEE
 13642                           wreg	equ	0xFE8
 13643                           postdec1	equ	0xFE5
 13644                           fsr1l	equ	0xFE1
 13645                           indf2	equ	0xFDF
 13646                           postinc2	equ	0xFDE
 13647                           postdec2	equ	0xFDD
 13648                           fsr2h	equ	0xFDA
 13649                           fsr2l	equ	0xFD9
 13650                           status	equ	0xFD8
 13651                           
 13652 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 13653 ;; Defined at:
 13654 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
 13655 ;; Parameters:    Size  Location     Type
 13656 ;;		None
 13657 ;; Auto vars:     Size  Location     Type
 13658 ;;		None
 13659 ;; Return value:  Size  Location     Type
 13660 ;;                  1    wreg      void 
 13661 ;; Registers used:
 13662 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 13663 ;; Tracked objects:
 13664 ;;		On entry : 0/0
 13665 ;;		On exit  : 0/0
 13666 ;;		Unchanged: 0/0
 13667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13670 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13671 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13672 ;;Total ram usage:       14 bytes
 13673 ;; Hardware stack levels used:    1
 13674 ;; Hardware stack levels required when called:    3
 13675 ;; This function calls:
 13676 ;;		_TMR2_ISR
 13677 ;; This function is called by:
 13678 ;;		Interrupt level 2
 13679 ;; This function uses a non-reentrant model
 13680 ;;
 13681                           
 13682                           	psect	intcode
 13683  000008                     __pintcode:
 13684                           	opt stack 0
 13685  000008                     _INTERRUPT_InterruptManagerHigh:
 13686                           	opt stack 21
 13687                           
 13688                           ; BSR set to: 14
 13689                           ;incstack = 0
 13690  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13691  00000A  CFFA F005          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 13692  00000E  CFFB F006          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 13693  000012  CFE9 F007          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 13694  000016  CFEA F008          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 13695  00001A  CFE1 F009          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 13696  00001E  CFE2 F00A          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 13697  000022  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 13698  000026  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 13699  00002A  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 13700  00002E  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 13701  000032  CFF6 F00F          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 13702  000036  CFF7 F010          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 13703  00003A  CFF8 F011          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 13704  00003E  CFF5 F012          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 13705                           
 13706                           ;interrupt_manager.c: 71: if(PIE4bits.TMR2IE == 1 && PIR4bits.TMR2IF == 1)
 13707  000042  010E               	movlb	14	; () banked
 13708  000044  A3C6               	btfss	198,1,b	;volatile
 13709  000046  D004               	goto	i2l437
 13710                           
 13711                           ; BSR set to: 14
 13712  000048  010E               	movlb	14	; () banked
 13713  00004A  B3CE               	btfsc	206,1,b	;volatile
 13714                           
 13715                           ; BSR set to: 14
 13716                           ;interrupt_manager.c: 72: {
 13717                           ;interrupt_manager.c: 73: TMR2_ISR();
 13718  00004C  EC3B  F025         	call	_TMR2_ISR	;wreg free
 13719  000050                     i2l437:
 13720  000050  C012  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 13721  000054  C011  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 13722  000058  C010  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 13723  00005C  C00F  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 13724  000060  C00E  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 13725  000064  C00D  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 13726  000068  C00C  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 13727  00006C  C00B  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 13728  000070  C00A  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 13729  000074  C009  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 13730  000078  C008  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 13731  00007C  C007  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 13732  000080  C006  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 13733  000084  C005  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 13734  000088  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13735  00008A  0011               	retfie		f
 13736  00008C                     __end_of_INTERRUPT_InterruptManagerHigh:
 13737                           	opt stack 0
 13738                           pclatu	equ	0xFFB
 13739                           pclath	equ	0xFFA
 13740                           tblptru	equ	0xFF8
 13741                           tblptrh	equ	0xFF7
 13742                           tblptrl	equ	0xFF6
 13743                           tablat	equ	0xFF5
 13744                           prodh	equ	0xFF4
 13745                           prodl	equ	0xFF3
 13746                           intcon	equ	0xFF2
 13747                           postinc0	equ	0xFEE
 13748                           fsr0h	equ	0xFEA
 13749                           fsr0l	equ	0xFE9
 13750                           wreg	equ	0xFE8
 13751                           postdec1	equ	0xFE5
 13752                           fsr1h	equ	0xFE2
 13753                           fsr1l	equ	0xFE1
 13754                           indf2	equ	0xFDF
 13755                           postinc2	equ	0xFDE
 13756                           postdec2	equ	0xFDD
 13757                           fsr2h	equ	0xFDA
 13758                           fsr2l	equ	0xFD9
 13759                           status	equ	0xFD8
 13760                           
 13761 ;; *************** function _TMR2_ISR *****************
 13762 ;; Defined at:
 13763 ;;		line 173 in file "mcc_generated_files/tmr2.c"
 13764 ;; Parameters:    Size  Location     Type
 13765 ;;		None
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;		None
 13768 ;; Return value:  Size  Location     Type
 13769 ;;                  1    wreg      void 
 13770 ;; Registers used:
 13771 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 13772 ;; Tracked objects:
 13773 ;;		On entry : 0/0
 13774 ;;		On exit  : 0/0
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13781 ;;Total ram usage:        0 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    2
 13784 ;; This function calls:
 13785 ;;		Absolute function
 13786 ;;		_TMR2_DefaultInterruptHandler
 13787 ;; This function is called by:
 13788 ;;		_INTERRUPT_InterruptManagerHigh
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           	psect	text77
 13793  004A76                     __ptext77:
 13794                           	opt stack 0
 13795  004A76                     _TMR2_ISR:
 13796                           	opt stack 21
 13797                           
 13798                           ;tmr2.c: 177: PIR4bits.TMR2IF = 0;
 13799                           
 13800                           ;incstack = 0
 13801  004A76  010E               	movlb	14	; () banked
 13802  004A78  93CE               	bcf	206,1,b	;volatile
 13803                           
 13804                           ; BSR set to: 14
 13805                           ;tmr2.c: 179: if(TMR2_InterruptHandler)
 13806  004A7A  5039               	movf	_TMR2_InterruptHandler,w,c
 13807  004A7C  103A               	iorwf	_TMR2_InterruptHandler+1,w,c
 13808  004A7E  103B               	iorwf	_TMR2_InterruptHandler+2,w,c
 13809  004A80  B4D8               	btfsc	status,2,c
 13810  004A82  0012               	return	
 13811                           
 13812                           ; BSR set to: 14
 13813                           ;tmr2.c: 180: {
 13814                           ;tmr2.c: 181: TMR2_InterruptHandler();
 13815  004A84  D801               	call	i2u348_48
 13816  004A86  0012               	return	
 13817  004A88                     i2u348_48:
 13818  004A88  0005               	push	
 13819  004A8A  6EFA               	movwf	pclath,c
 13820  004A8C  5039               	movf	_TMR2_InterruptHandler,w,c
 13821  004A8E  6EFD               	movwf	tosl,c
 13822  004A90  503A               	movf	_TMR2_InterruptHandler+1,w,c
 13823  004A92  6EFE               	movwf	tosh,c
 13824  004A94  503B               	movf	_TMR2_InterruptHandler+2,w,c
 13825  004A96  6EFF               	movwf	tosu,c
 13826  004A98  50FA               	movf	pclath,w,c
 13827  004A9A  0012               	return		;indir
 13828  004A9C                     __end_of_TMR2_ISR:
 13829                           	opt stack 0
 13830                           tosu	equ	0xFFF
 13831                           tosh	equ	0xFFE
 13832                           tosl	equ	0xFFD
 13833                           pclatu	equ	0xFFB
 13834                           pclath	equ	0xFFA
 13835                           tblptru	equ	0xFF8
 13836                           tblptrh	equ	0xFF7
 13837                           tblptrl	equ	0xFF6
 13838                           tablat	equ	0xFF5
 13839                           prodh	equ	0xFF4
 13840                           prodl	equ	0xFF3
 13841                           intcon	equ	0xFF2
 13842                           postinc0	equ	0xFEE
 13843                           fsr0h	equ	0xFEA
 13844                           fsr0l	equ	0xFE9
 13845                           wreg	equ	0xFE8
 13846                           postdec1	equ	0xFE5
 13847                           fsr1h	equ	0xFE2
 13848                           fsr1l	equ	0xFE1
 13849                           indf2	equ	0xFDF
 13850                           postinc2	equ	0xFDE
 13851                           postdec2	equ	0xFDD
 13852                           fsr2h	equ	0xFDA
 13853                           fsr2l	equ	0xFD9
 13854                           status	equ	0xFD8
 13855                           
 13856 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 13857 ;; Defined at:
 13858 ;;		line 190 in file "mcc_generated_files/tmr2.c"
 13859 ;; Parameters:    Size  Location     Type
 13860 ;;		None
 13861 ;; Auto vars:     Size  Location     Type
 13862 ;;		None
 13863 ;; Return value:  Size  Location     Type
 13864 ;;                  1    wreg      void 
 13865 ;; Registers used:
 13866 ;;		wreg, status,2, status,0, cstack
 13867 ;; Tracked objects:
 13868 ;;		On entry : 0/0
 13869 ;;		On exit  : 0/0
 13870 ;;		Unchanged: 0/0
 13871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13876 ;;Total ram usage:        0 bytes
 13877 ;; Hardware stack levels used:    1
 13878 ;; Hardware stack levels required when called:    1
 13879 ;; This function calls:
 13880 ;;		_PWM1_LoadDutyValue
 13881 ;;		_PWM2_LoadDutyValue
 13882 ;;		_PWM3_LoadDutyValue
 13883 ;;		_PWM4_LoadDutyValue
 13884 ;; This function is called by:
 13885 ;;		_TMR2_Initialize
 13886 ;;		_TMR2_ISR
 13887 ;; This function uses a non-reentrant model
 13888 ;;
 13889                           
 13890                           	psect	text78
 13891  004382                     __ptext78:
 13892                           	opt stack 0
 13893  004382                     _TMR2_DefaultInterruptHandler:
 13894                           	opt stack 21
 13895                           
 13896                           ;tmr2.c: 191: if ( beginCounter < 2000 ) {
 13897                           
 13898                           ;incstack = 0
 13899  004382  0100               	movlb	0	; () banked
 13900  004384  BFEB               	btfsc	(_beginCounter+1)& (0+255),7,b
 13901  004386  D008               	goto	i2l4077
 13902  004388  0ED0               	movlw	208
 13903  00438A  0100               	movlb	0	; () banked
 13904  00438C  5DEA               	subwf	_beginCounter& (0+255),w,b
 13905  00438E  0E07               	movlw	7
 13906  004390  0100               	movlb	0	; () banked
 13907  004392  59EB               	subwfb	(_beginCounter+1)& (0+255),w,b
 13908  004394  B0D8               	btfsc	status,0,c
 13909  004396  D016               	goto	i2l4087
 13910  004398                     i2l4077:
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;tmr2.c: 192: beginCounter++;
 13914  004398  0100               	movlb	0	; () banked
 13915  00439A  4BEA               	infsnz	_beginCounter& (0+255),f,b
 13916  00439C  2BEB               	incf	(_beginCounter+1)& (0+255),f,b
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;tmr2.c: 193: throttle1 = 0;
 13920  00439E  0E00               	movlw	0
 13921  0043A0  6E45               	movwf	_throttle1+1,c
 13922  0043A2  0E00               	movlw	0
 13923  0043A4  6E44               	movwf	_throttle1,c
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;tmr2.c: 194: throttle2 = 0;
 13927  0043A6  0E00               	movlw	0
 13928  0043A8  6E43               	movwf	_throttle2+1,c
 13929  0043AA  0E00               	movlw	0
 13930  0043AC  6E42               	movwf	_throttle2,c
 13931                           
 13932                           ; BSR set to: 0
 13933                           ;tmr2.c: 195: throttle3 = 0;
 13934  0043AE  0E00               	movlw	0
 13935  0043B0  0100               	movlb	0	; () banked
 13936  0043B2  6FE3               	movwf	(_throttle3+1)& (0+255),b
 13937  0043B4  0E00               	movlw	0
 13938  0043B6  6FE2               	movwf	_throttle3& (0+255),b
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;tmr2.c: 196: throttle4 = 0;
 13942  0043B8  0E00               	movlw	0
 13943  0043BA  0100               	movlb	0	; () banked
 13944  0043BC  6FE1               	movwf	(_throttle4+1)& (0+255),b
 13945  0043BE  0E00               	movlw	0
 13946  0043C0  6FE0               	movwf	_throttle4& (0+255),b
 13947                           
 13948                           ;tmr2.c: 197: } else {
 13949  0043C2  D003               	goto	i2l4089
 13950  0043C4                     i2l4087:
 13951                           
 13952                           ; BSR set to: 0
 13953                           ;tmr2.c: 198: begin = 1;
 13954  0043C4  0E01               	movlw	1
 13955  0043C6  0100               	movlb	0	; () banked
 13956  0043C8  6FED               	movwf	_begin& (0+255),b
 13957  0043CA                     i2l4089:
 13958                           
 13959                           ; BSR set to: 0
 13960                           ;tmr2.c: 199: }
 13961                           ;tmr2.c: 200: accCounter++;
 13962  0043CA  0100               	movlb	0	; () banked
 13963  0043CC  2BEC               	incf	_accCounter& (0+255),f,b
 13964                           
 13965                           ; BSR set to: 0
 13966                           ;tmr2.c: 202: PWM1_LoadDutyValue(373 + throttle1 );
 13967  0043CE  0E75               	movlw	117
 13968  0043D0  2444               	addwf	_throttle1,w,c
 13969  0043D2  6E01               	movwf	PWM1_LoadDutyValue@dutyValue,c
 13970  0043D4  0E01               	movlw	1
 13971  0043D6  2045               	addwfc	_throttle1+1,w,c
 13972  0043D8  6E02               	movwf	PWM1_LoadDutyValue@dutyValue+1,c
 13973  0043DA  EC12  F025         	call	_PWM1_LoadDutyValue	;wreg free
 13974                           
 13975                           ;tmr2.c: 203: PWM2_LoadDutyValue(373 + throttle2 );
 13976  0043DE  0E75               	movlw	117
 13977  0043E0  2442               	addwf	_throttle2,w,c
 13978  0043E2  6E01               	movwf	PWM2_LoadDutyValue@dutyValue,c
 13979  0043E4  0E01               	movlw	1
 13980  0043E6  2043               	addwfc	_throttle2+1,w,c
 13981  0043E8  6E02               	movwf	PWM2_LoadDutyValue@dutyValue+1,c
 13982  0043EA  ECFC  F024         	call	_PWM2_LoadDutyValue	;wreg free
 13983                           
 13984                           ;tmr2.c: 204: PWM3_LoadDutyValue(373 + throttle3 );
 13985  0043EE  0E75               	movlw	117
 13986  0043F0  0100               	movlb	0	; () banked
 13987  0043F2  25E2               	addwf	_throttle3& (0+255),w,b
 13988  0043F4  6E01               	movwf	PWM3_LoadDutyValue@dutyValue,c
 13989  0043F6  0E01               	movlw	1
 13990  0043F8  0100               	movlb	0	; () banked
 13991  0043FA  21E3               	addwfc	(_throttle3+1)& (0+255),w,b
 13992  0043FC  6E02               	movwf	PWM3_LoadDutyValue@dutyValue+1,c
 13993  0043FE  EC9E  F024         	call	_PWM3_LoadDutyValue	;wreg free
 13994                           
 13995                           ;tmr2.c: 205: PWM4_LoadDutyValue(373 + throttle4 );
 13996  004402  0E75               	movlw	117
 13997  004404  0100               	movlb	0	; () banked
 13998  004406  25E0               	addwf	_throttle4& (0+255),w,b
 13999  004408  6E01               	movwf	PWM4_LoadDutyValue@dutyValue,c
 14000  00440A  0E01               	movlw	1
 14001  00440C  0100               	movlb	0	; () banked
 14002  00440E  21E1               	addwfc	(_throttle4+1)& (0+255),w,b
 14003  004410  6E02               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
 14004  004412  EC85  F024         	call	_PWM4_LoadDutyValue	;wreg free
 14005  004416  0012               	return		;funcret
 14006  004418                     __end_of_TMR2_DefaultInterruptHandler:
 14007                           	opt stack 0
 14008                           tosu	equ	0xFFF
 14009                           tosh	equ	0xFFE
 14010                           tosl	equ	0xFFD
 14011                           pclatu	equ	0xFFB
 14012                           pclath	equ	0xFFA
 14013                           tblptru	equ	0xFF8
 14014                           tblptrh	equ	0xFF7
 14015                           tblptrl	equ	0xFF6
 14016                           tablat	equ	0xFF5
 14017                           prodh	equ	0xFF4
 14018                           prodl	equ	0xFF3
 14019                           intcon	equ	0xFF2
 14020                           postinc0	equ	0xFEE
 14021                           fsr0h	equ	0xFEA
 14022                           fsr0l	equ	0xFE9
 14023                           wreg	equ	0xFE8
 14024                           postdec1	equ	0xFE5
 14025                           fsr1h	equ	0xFE2
 14026                           fsr1l	equ	0xFE1
 14027                           indf2	equ	0xFDF
 14028                           postinc2	equ	0xFDE
 14029                           postdec2	equ	0xFDD
 14030                           fsr2h	equ	0xFDA
 14031                           fsr2l	equ	0xFD9
 14032                           status	equ	0xFD8
 14033                           
 14034 ;; *************** function _PWM4_LoadDutyValue *****************
 14035 ;; Defined at:
 14036 ;;		line 74 in file "mcc_generated_files/pwm4.c"
 14037 ;; Parameters:    Size  Location     Type
 14038 ;;  dutyValue       2    0[COMRAM] unsigned int 
 14039 ;; Auto vars:     Size  Location     Type
 14040 ;;		None
 14041 ;; Return value:  Size  Location     Type
 14042 ;;                  1    wreg      void 
 14043 ;; Registers used:
 14044 ;;		wreg, status,2, status,0
 14045 ;; Tracked objects:
 14046 ;;		On entry : 0/0
 14047 ;;		On exit  : 0/0
 14048 ;;		Unchanged: 0/0
 14049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14050 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14052 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14053 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14054 ;;Total ram usage:        4 bytes
 14055 ;; Hardware stack levels used:    1
 14056 ;; This function calls:
 14057 ;;		Nothing
 14058 ;; This function is called by:
 14059 ;;		_TMR2_DefaultInterruptHandler
 14060 ;; This function uses a non-reentrant model
 14061 ;;
 14062                           
 14063                           	psect	text79
 14064  00490A                     __ptext79:
 14065                           	opt stack 0
 14066  00490A                     _PWM4_LoadDutyValue:
 14067                           	opt stack 21
 14068                           
 14069                           ;pwm4.c: 77: PWM4DCH = (dutyValue & 0x03FC)>>2;
 14070                           
 14071                           ;incstack = 0
 14072  00490A  C001  F003         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
 14073  00490E  C002  F004         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
 14074  004912  90D8               	bcf	status,0,c
 14075  004914  3204               	rrcf	??_PWM4_LoadDutyValue+1,f,c
 14076  004916  3203               	rrcf	??_PWM4_LoadDutyValue,f,c
 14077  004918  90D8               	bcf	status,0,c
 14078  00491A  3204               	rrcf	??_PWM4_LoadDutyValue+1,f,c
 14079  00491C  3203               	rrcf	??_PWM4_LoadDutyValue,f,c
 14080  00491E  5003               	movf	??_PWM4_LoadDutyValue,w,c
 14081  004920  6EA1               	movwf	4001,c	;volatile
 14082                           
 14083                           ;pwm4.c: 80: PWM4DCL = (dutyValue & 0x0003)<<6;
 14084  004922  C001  F003         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
 14085  004926  0E03               	movlw	3
 14086  004928  1603               	andwf	??_PWM4_LoadDutyValue,f,c
 14087  00492A  0E06               	movlw	6
 14088  00492C  6E04               	movwf	(??_PWM4_LoadDutyValue+1)& (0+255),c
 14089  00492E                     i2u267_45:
 14090  00492E  90D8               	bcf	status,0,c
 14091  004930  3603               	rlcf	??_PWM4_LoadDutyValue,f,c
 14092  004932  2E04               	decfsz	(??_PWM4_LoadDutyValue+1)& (0+255),f,c
 14093  004934  D7FC               	goto	i2u267_45
 14094  004936  5003               	movf	??_PWM4_LoadDutyValue,w,c
 14095  004938  6EA0               	movwf	4000,c	;volatile
 14096  00493A  0012               	return		;funcret
 14097  00493C                     __end_of_PWM4_LoadDutyValue:
 14098                           	opt stack 0
 14099                           tosu	equ	0xFFF
 14100                           tosh	equ	0xFFE
 14101                           tosl	equ	0xFFD
 14102                           pclatu	equ	0xFFB
 14103                           pclath	equ	0xFFA
 14104                           tblptru	equ	0xFF8
 14105                           tblptrh	equ	0xFF7
 14106                           tblptrl	equ	0xFF6
 14107                           tablat	equ	0xFF5
 14108                           prodh	equ	0xFF4
 14109                           prodl	equ	0xFF3
 14110                           intcon	equ	0xFF2
 14111                           postinc0	equ	0xFEE
 14112                           fsr0h	equ	0xFEA
 14113                           fsr0l	equ	0xFE9
 14114                           wreg	equ	0xFE8
 14115                           postdec1	equ	0xFE5
 14116                           fsr1h	equ	0xFE2
 14117                           fsr1l	equ	0xFE1
 14118                           indf2	equ	0xFDF
 14119                           postinc2	equ	0xFDE
 14120                           postdec2	equ	0xFDD
 14121                           fsr2h	equ	0xFDA
 14122                           fsr2l	equ	0xFD9
 14123                           status	equ	0xFD8
 14124                           
 14125 ;; *************** function _PWM3_LoadDutyValue *****************
 14126 ;; Defined at:
 14127 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;  dutyValue       2    0[COMRAM] unsigned int 
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;		None
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      void 
 14134 ;; Registers used:
 14135 ;;		wreg, status,2, status,0
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14141 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14143 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14144 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14145 ;;Total ram usage:        4 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; This function calls:
 14148 ;;		Nothing
 14149 ;; This function is called by:
 14150 ;;		_TMR2_DefaultInterruptHandler
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           	psect	text80
 14155  00493C                     __ptext80:
 14156                           	opt stack 0
 14157  00493C                     _PWM3_LoadDutyValue:
 14158                           	opt stack 21
 14159                           
 14160                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 14161                           
 14162                           ;incstack = 0
 14163  00493C  C001  F003         	movff	PWM3_LoadDutyValue@dutyValue,??_PWM3_LoadDutyValue
 14164  004940  C002  F004         	movff	PWM3_LoadDutyValue@dutyValue+1,??_PWM3_LoadDutyValue+1
 14165  004944  90D8               	bcf	status,0,c
 14166  004946  3204               	rrcf	??_PWM3_LoadDutyValue+1,f,c
 14167  004948  3203               	rrcf	??_PWM3_LoadDutyValue,f,c
 14168  00494A  90D8               	bcf	status,0,c
 14169  00494C  3204               	rrcf	??_PWM3_LoadDutyValue+1,f,c
 14170  00494E  3203               	rrcf	??_PWM3_LoadDutyValue,f,c
 14171  004950  5003               	movf	??_PWM3_LoadDutyValue,w,c
 14172  004952  6EA4               	movwf	4004,c	;volatile
 14173                           
 14174                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 14175  004954  C001  F003         	movff	PWM3_LoadDutyValue@dutyValue,??_PWM3_LoadDutyValue
 14176  004958  0E03               	movlw	3
 14177  00495A  1603               	andwf	??_PWM3_LoadDutyValue,f,c
 14178  00495C  0E06               	movlw	6
 14179  00495E  6E04               	movwf	(??_PWM3_LoadDutyValue+1)& (0+255),c
 14180  004960                     i2u266_45:
 14181  004960  90D8               	bcf	status,0,c
 14182  004962  3603               	rlcf	??_PWM3_LoadDutyValue,f,c
 14183  004964  2E04               	decfsz	(??_PWM3_LoadDutyValue+1)& (0+255),f,c
 14184  004966  D7FC               	goto	i2u266_45
 14185  004968  5003               	movf	??_PWM3_LoadDutyValue,w,c
 14186  00496A  6EA3               	movwf	4003,c	;volatile
 14187  00496C  0012               	return		;funcret
 14188  00496E                     __end_of_PWM3_LoadDutyValue:
 14189                           	opt stack 0
 14190                           tosu	equ	0xFFF
 14191                           tosh	equ	0xFFE
 14192                           tosl	equ	0xFFD
 14193                           pclatu	equ	0xFFB
 14194                           pclath	equ	0xFFA
 14195                           tblptru	equ	0xFF8
 14196                           tblptrh	equ	0xFF7
 14197                           tblptrl	equ	0xFF6
 14198                           tablat	equ	0xFF5
 14199                           prodh	equ	0xFF4
 14200                           prodl	equ	0xFF3
 14201                           intcon	equ	0xFF2
 14202                           postinc0	equ	0xFEE
 14203                           fsr0h	equ	0xFEA
 14204                           fsr0l	equ	0xFE9
 14205                           wreg	equ	0xFE8
 14206                           postdec1	equ	0xFE5
 14207                           fsr1h	equ	0xFE2
 14208                           fsr1l	equ	0xFE1
 14209                           indf2	equ	0xFDF
 14210                           postinc2	equ	0xFDE
 14211                           postdec2	equ	0xFDD
 14212                           fsr2h	equ	0xFDA
 14213                           fsr2l	equ	0xFD9
 14214                           status	equ	0xFD8
 14215                           
 14216 ;; *************** function _PWM2_LoadDutyValue *****************
 14217 ;; Defined at:
 14218 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;  dutyValue       2    0[COMRAM] unsigned int 
 14221 ;; Auto vars:     Size  Location     Type
 14222 ;;		None
 14223 ;; Return value:  Size  Location     Type
 14224 ;;                  1    wreg      void 
 14225 ;; Registers used:
 14226 ;;		wreg, status,2, status,0
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/0
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14232 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14236 ;;Total ram usage:        2 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; This function calls:
 14239 ;;		Nothing
 14240 ;; This function is called by:
 14241 ;;		_TMR2_DefaultInterruptHandler
 14242 ;; This function uses a non-reentrant model
 14243 ;;
 14244                           
 14245                           	psect	text81
 14246  0049F8                     __ptext81:
 14247                           	opt stack 0
 14248  0049F8                     _PWM2_LoadDutyValue:
 14249                           	opt stack 21
 14250                           
 14251                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 14252                           
 14253                           ;incstack = 0
 14254  0049F8  0EFF               	movlw	255
 14255  0049FA  1601               	andwf	PWM2_LoadDutyValue@dutyValue,f,c
 14256  0049FC  0E03               	movlw	3
 14257  0049FE  1602               	andwf	PWM2_LoadDutyValue@dutyValue+1,f,c
 14258                           
 14259                           ;pwm2.c: 85: if(CCP2CONbits.FMT)
 14260  004A00  A8A8               	btfss	4008,4,c	;volatile
 14261  004A02  D00B               	goto	i2l3829
 14262                           
 14263                           ;pwm2.c: 86: {
 14264                           ;pwm2.c: 87: dutyValue <<= 6;
 14265  004A04  0E06               	movlw	6
 14266  004A06                     i2u265_45:
 14267  004A06  90D8               	bcf	status,0,c
 14268  004A08  3601               	rlcf	PWM2_LoadDutyValue@dutyValue,f,c
 14269  004A0A  3602               	rlcf	PWM2_LoadDutyValue@dutyValue+1,f,c
 14270  004A0C  2EE8               	decfsz	wreg,f,c
 14271  004A0E  D7FB               	goto	i2u265_45
 14272                           
 14273                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 14274  004A10  5002               	movf	PWM2_LoadDutyValue@dutyValue+1,w,c
 14275  004A12  6EA7               	movwf	4007,c	;volatile
 14276                           
 14277                           ;pwm2.c: 89: CCPR2L = dutyValue;
 14278  004A14  C001  FFA6         	movff	PWM2_LoadDutyValue@dutyValue,4006	;volatile
 14279                           
 14280                           ;pwm2.c: 90: }
 14281  004A18  0012               	return	
 14282  004A1A                     i2l3829:
 14283                           
 14284                           ;pwm2.c: 91: else
 14285                           ;pwm2.c: 92: {
 14286                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 14287  004A1A  5002               	movf	PWM2_LoadDutyValue@dutyValue+1,w,c
 14288  004A1C  6EA7               	movwf	4007,c	;volatile
 14289                           
 14290                           ;pwm2.c: 94: CCPR2L = dutyValue;
 14291  004A1E  C001  FFA6         	movff	PWM2_LoadDutyValue@dutyValue,4006	;volatile
 14292  004A22  0012               	return	
 14293  004A24                     __end_of_PWM2_LoadDutyValue:
 14294                           	opt stack 0
 14295                           tosu	equ	0xFFF
 14296                           tosh	equ	0xFFE
 14297                           tosl	equ	0xFFD
 14298                           pclatu	equ	0xFFB
 14299                           pclath	equ	0xFFA
 14300                           tblptru	equ	0xFF8
 14301                           tblptrh	equ	0xFF7
 14302                           tblptrl	equ	0xFF6
 14303                           tablat	equ	0xFF5
 14304                           prodh	equ	0xFF4
 14305                           prodl	equ	0xFF3
 14306                           intcon	equ	0xFF2
 14307                           postinc0	equ	0xFEE
 14308                           fsr0h	equ	0xFEA
 14309                           fsr0l	equ	0xFE9
 14310                           wreg	equ	0xFE8
 14311                           postdec1	equ	0xFE5
 14312                           fsr1h	equ	0xFE2
 14313                           fsr1l	equ	0xFE1
 14314                           indf2	equ	0xFDF
 14315                           postinc2	equ	0xFDE
 14316                           postdec2	equ	0xFDD
 14317                           fsr2h	equ	0xFDA
 14318                           fsr2l	equ	0xFD9
 14319                           status	equ	0xFD8
 14320                           
 14321 ;; *************** function _PWM1_LoadDutyValue *****************
 14322 ;; Defined at:
 14323 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 14324 ;; Parameters:    Size  Location     Type
 14325 ;;  dutyValue       2    0[COMRAM] unsigned int 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;		None
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      void 
 14330 ;; Registers used:
 14331 ;;		wreg, status,2, status,0
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14337 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14341 ;;Total ram usage:        2 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; This function calls:
 14344 ;;		Nothing
 14345 ;; This function is called by:
 14346 ;;		_TMR2_DefaultInterruptHandler
 14347 ;; This function uses a non-reentrant model
 14348 ;;
 14349                           
 14350                           	psect	text82
 14351  004A24                     __ptext82:
 14352                           	opt stack 0
 14353  004A24                     _PWM1_LoadDutyValue:
 14354                           	opt stack 21
 14355                           
 14356                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 14357                           
 14358                           ;incstack = 0
 14359  004A24  0EFF               	movlw	255
 14360  004A26  1601               	andwf	PWM1_LoadDutyValue@dutyValue,f,c
 14361  004A28  0E03               	movlw	3
 14362  004A2A  1602               	andwf	PWM1_LoadDutyValue@dutyValue+1,f,c
 14363                           
 14364                           ;pwm1.c: 85: if(CCP1CONbits.FMT)
 14365  004A2C  A8AC               	btfss	4012,4,c	;volatile
 14366  004A2E  D00B               	goto	i2l3815
 14367                           
 14368                           ;pwm1.c: 86: {
 14369                           ;pwm1.c: 87: dutyValue <<= 6;
 14370  004A30  0E06               	movlw	6
 14371  004A32                     i2u263_45:
 14372  004A32  90D8               	bcf	status,0,c
 14373  004A34  3601               	rlcf	PWM1_LoadDutyValue@dutyValue,f,c
 14374  004A36  3602               	rlcf	PWM1_LoadDutyValue@dutyValue+1,f,c
 14375  004A38  2EE8               	decfsz	wreg,f,c
 14376  004A3A  D7FB               	goto	i2u263_45
 14377                           
 14378                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 14379  004A3C  5002               	movf	PWM1_LoadDutyValue@dutyValue+1,w,c
 14380  004A3E  6EAB               	movwf	4011,c	;volatile
 14381                           
 14382                           ;pwm1.c: 89: CCPR1L = dutyValue;
 14383  004A40  C001  FFAA         	movff	PWM1_LoadDutyValue@dutyValue,4010	;volatile
 14384                           
 14385                           ;pwm1.c: 90: }
 14386  004A44  0012               	return	
 14387  004A46                     i2l3815:
 14388                           
 14389                           ;pwm1.c: 91: else
 14390                           ;pwm1.c: 92: {
 14391                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 14392  004A46  5002               	movf	PWM1_LoadDutyValue@dutyValue+1,w,c
 14393  004A48  6EAB               	movwf	4011,c	;volatile
 14394                           
 14395                           ;pwm1.c: 94: CCPR1L = dutyValue;
 14396  004A4A  C001  FFAA         	movff	PWM1_LoadDutyValue@dutyValue,4010	;volatile
 14397  004A4E  0012               	return	
 14398  004A50                     __end_of_PWM1_LoadDutyValue:
 14399                           	opt stack 0
 14400                           tosu	equ	0xFFF
 14401                           tosh	equ	0xFFE
 14402                           tosl	equ	0xFFD
 14403                           pclatu	equ	0xFFB
 14404                           pclath	equ	0xFFA
 14405                           tblptru	equ	0xFF8
 14406                           tblptrh	equ	0xFF7
 14407                           tblptrl	equ	0xFF6
 14408                           tablat	equ	0xFF5
 14409                           prodh	equ	0xFF4
 14410                           prodl	equ	0xFF3
 14411                           intcon	equ	0xFF2
 14412                           postinc0	equ	0xFEE
 14413                           fsr0h	equ	0xFEA
 14414                           fsr0l	equ	0xFE9
 14415                           wreg	equ	0xFE8
 14416                           postdec1	equ	0xFE5
 14417                           fsr1h	equ	0xFE2
 14418                           fsr1l	equ	0xFE1
 14419                           indf2	equ	0xFDF
 14420                           postinc2	equ	0xFDE
 14421                           postdec2	equ	0xFDD
 14422                           fsr2h	equ	0xFDA
 14423                           fsr2l	equ	0xFD9
 14424                           status	equ	0xFD8
 14425                           tosu	equ	0xFFF
 14426                           tosh	equ	0xFFE
 14427                           tosl	equ	0xFFD
 14428                           pclatu	equ	0xFFB
 14429                           pclath	equ	0xFFA
 14430                           tblptru	equ	0xFF8
 14431                           tblptrh	equ	0xFF7
 14432                           tblptrl	equ	0xFF6
 14433                           tablat	equ	0xFF5
 14434                           prodh	equ	0xFF4
 14435                           prodl	equ	0xFF3
 14436                           intcon	equ	0xFF2
 14437                           postinc0	equ	0xFEE
 14438                           fsr0h	equ	0xFEA
 14439                           fsr0l	equ	0xFE9
 14440                           wreg	equ	0xFE8
 14441                           postdec1	equ	0xFE5
 14442                           fsr1h	equ	0xFE2
 14443                           fsr1l	equ	0xFE1
 14444                           indf2	equ	0xFDF
 14445                           postinc2	equ	0xFDE
 14446                           postdec2	equ	0xFDD
 14447                           fsr2h	equ	0xFDA
 14448                           fsr2l	equ	0xFD9
 14449                           status	equ	0xFD8
 14450                           
 14451                           	psect	text83
 14452  000000                     __ptext83:
 14453                           	opt stack 0
 14454                           tosu	equ	0xFFF
 14455                           tosh	equ	0xFFE
 14456                           tosl	equ	0xFFD
 14457                           pclatu	equ	0xFFB
 14458                           pclath	equ	0xFFA
 14459                           tblptru	equ	0xFF8
 14460                           tblptrh	equ	0xFF7
 14461                           tblptrl	equ	0xFF6
 14462                           tablat	equ	0xFF5
 14463                           prodh	equ	0xFF4
 14464                           prodl	equ	0xFF3
 14465                           intcon	equ	0xFF2
 14466                           postinc0	equ	0xFEE
 14467                           fsr0h	equ	0xFEA
 14468                           fsr0l	equ	0xFE9
 14469                           wreg	equ	0xFE8
 14470                           postdec1	equ	0xFE5
 14471                           fsr1h	equ	0xFE2
 14472                           fsr1l	equ	0xFE1
 14473                           indf2	equ	0xFDF
 14474                           postinc2	equ	0xFDE
 14475                           postdec2	equ	0xFDD
 14476                           fsr2h	equ	0xFDA
 14477                           fsr2l	equ	0xFD9
 14478                           status	equ	0xFD8
 14479                           
 14480                           	psect	rparam
 14481  0000                     tosu	equ	0xFFF
 14482                           tosh	equ	0xFFE
 14483                           tosl	equ	0xFFD
 14484                           pclatu	equ	0xFFB
 14485                           pclath	equ	0xFFA
 14486                           tblptru	equ	0xFF8
 14487                           tblptrh	equ	0xFF7
 14488                           tblptrl	equ	0xFF6
 14489                           tablat	equ	0xFF5
 14490                           prodh	equ	0xFF4
 14491                           prodl	equ	0xFF3
 14492                           intcon	equ	0xFF2
 14493                           postinc0	equ	0xFEE
 14494                           fsr0h	equ	0xFEA
 14495                           fsr0l	equ	0xFE9
 14496                           wreg	equ	0xFE8
 14497                           postdec1	equ	0xFE5
 14498                           fsr1h	equ	0xFE2
 14499                           fsr1l	equ	0xFE1
 14500                           indf2	equ	0xFDF
 14501                           postinc2	equ	0xFDE
 14502                           postdec2	equ	0xFDD
 14503                           fsr2h	equ	0xFDA
 14504                           fsr2l	equ	0xFD9
 14505                           status	equ	0xFD8
 14506                           
 14507                           	psect	temp
 14508  00004C                     btemp:
 14509                           	opt stack 0
 14510  00004C                     	ds	1
 14511  0000                     int$flags	set	btemp
 14512                           tosu	equ	0xFFF
 14513                           tosh	equ	0xFFE
 14514                           tosl	equ	0xFFD
 14515                           pclatu	equ	0xFFB
 14516                           pclath	equ	0xFFA
 14517                           tblptru	equ	0xFF8
 14518                           tblptrh	equ	0xFF7
 14519                           tblptrl	equ	0xFF6
 14520                           tablat	equ	0xFF5
 14521                           prodh	equ	0xFF4
 14522                           prodl	equ	0xFF3
 14523                           intcon	equ	0xFF2
 14524                           postinc0	equ	0xFEE
 14525                           fsr0h	equ	0xFEA
 14526                           fsr0l	equ	0xFE9
 14527                           wreg	equ	0xFE8
 14528                           postdec1	equ	0xFE5
 14529                           fsr1h	equ	0xFE2
 14530                           fsr1l	equ	0xFE1
 14531                           indf2	equ	0xFDF
 14532                           postinc2	equ	0xFDE
 14533                           postdec2	equ	0xFDD
 14534                           fsr2h	equ	0xFDA
 14535                           fsr2l	equ	0xFD9
 14536                           status	equ	0xFD8


Data Sizes:
    Strings     49
    Constant    151
    Data        6
    BSS         232
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      75
    BANK0           160     76     154
    BANK1           256     35     176
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E11626 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    eval_poly@d	PTR const  size(2) Largest target is 18
		 -> atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 49
		 -> STR_1(CODE[49]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    kalmanUpdate@state	PTR struct . size(2) Largest target is 15
		 -> gzState(BANK1[15]), gyState(BANK1[15]), gxState(BANK1[15]), azState(BANK1[15]), 
		 -> ayState(BANK1[15]), axState(BANK1[15]), 

    readi2cData@data	PTR unsigned char  size(2) Largest target is 6
		 -> readGyro@gData(COMRAM[6]), readAccel@aData(BANK0[6]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E11626 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    F11738.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F11733.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E11626 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    S426$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    S438$pTrFlag	PTR enum E11626 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E11626 size(2) Largest target is 0

    S438$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), NULL(NULL[0]), 

    S449$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    S449$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _gyro_Init->_writei2cData
    _accel_Init->_writei2cData
    _writei2cData->_writei2c
    _readGyro->_readi2cData
    _readi2cData->_writei2c
    _writei2c->_checkI2Cbusy
    _starti2c->_checkI2Cbusy
    ___awtoft->___ftpack
    _printf->___ftneg
    _printf->_fround
    _printf->_scale
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _rollPid->___ftneg
    ___fttol->___ftneg
    ___fttol->_scale
    _kalmanUpdate->___ftneg
    _computeRollPitch->___ftneg
    _fastatan2->___ftneg
    _atan2->___ftneg
    _atan->___ftneg
    _fabs->___ftneg
    ___ftneg->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftdiv->___ftneg
    ___ftadd->___ftneg
    ___ftadd->_fround
    ___lwtoft->___ftpack
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _TMR2_DefaultInterruptHandler->_PWM3_LoadDutyValue
    _TMR2_DefaultInterruptHandler->_PWM4_LoadDutyValue

Critical Paths under _main in BANK0

    _main->_printf
    _readSensors->_readAccel
    _readAccel->___ftdiv
    _printf->___fttol
    _pid->_rollPid
    _rollPid->___fttol
    ___fttol->___ftadd
    _filterData->_kalmanUpdate
    _kalmanUpdate->___ftdiv
    _computeRollPitch->_atan2
    _fastatan2->___ftdiv
    _minimum->___ftge
    _maximum->___ftge
    _atan2->_atan
    _atan->___ftdiv
    _eval_poly->___ftadd
    ___ftge->_fabs
    ___ftdiv->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_computeRollPitch

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  350986
                                             26 BANK1      9     9      0
                       _EUSART1_Read
                      _EUSART1_Write
                  _SYSTEM_Initialize
                            ___ftadd
                            ___ftmul
                            ___ftsub
                            ___fttol
                   _computeRollPitch
                         _filterData
                     _interrupt_Init
                        _kalman_Init
                                _pid
                           _pid_Init
                             _printf
                        _readSensors
                       _sensors_Init
                          _unlockI2C
 ---------------------------------------------------------------------------------
 (1) _unlockI2C                                            3     3      0      71
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _sensors_Init                                         0     0      0    2048
                         _accel_Init
                          _gyro_Init
 ---------------------------------------------------------------------------------
 (2) _gyro_Init                                            0     0      0    1024
                       _writei2cData
 ---------------------------------------------------------------------------------
 (2) _accel_Init                                           0     0      0    1024
                       _writei2cData
 ---------------------------------------------------------------------------------
 (3) _writei2cData                                         3     1      2    1024
                                             20 COMRAM     3     1      2
                           _starti2c
                            _stopi2c
                           _writei2c
 ---------------------------------------------------------------------------------
 (1) _readSensors                                          0     0      0   14891
                          _readAccel
                           _readGyro
 ---------------------------------------------------------------------------------
 (2) _readGyro                                            10    10      0    4789
                                             31 COMRAM    10    10      0
                           ___awtoft
                        _readi2cData
 ---------------------------------------------------------------------------------
 (2) _readAccel                                           10    10      0   10102
                                             34 BANK0     10    10      0
                           ___awtoft
                            ___ftdiv
                        _readi2cData
 ---------------------------------------------------------------------------------
 (3) _readi2cData                                         11     7      4     859
                                             20 COMRAM    11     7      4
                             _acki2c
                       _checkI2Cbusy
                            _readi2c
                           _starti2c
                            _stopi2c
                           _writei2c
 ---------------------------------------------------------------------------------
 (4) _writei2c                                             1     1      0      31
                                             19 COMRAM     1     1      0
                       _checkI2Cbusy
 ---------------------------------------------------------------------------------
 (4) _stopi2c                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _starti2c                                             0     0      0       0
                       _checkI2Cbusy
 ---------------------------------------------------------------------------------
 (5) _checkI2Cbusy                                         1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _readi2c                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _acki2c                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3686
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _printf                                              50    37     13   88208
                                             34 BANK0     42    29     13
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   18828
                                             53 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      62
                                             19 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   18549
                                             53 COMRAM     3     0      3
                                              0 BANK0      7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     634
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     853
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3205
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     952
                                             31 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pid_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pid                                                 11     2      9   23324
                                             46 BANK0     11     2      9
                           _pitchPid
                            _rollPid
                             _yawPid
 ---------------------------------------------------------------------------------
 (2) _yawPid                                               3     0      3      90
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _rollPid                                             12     9      3   22781
                                             34 BANK0     12     9      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1091
                                             19 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) _pitchPid                                             3     0      3      90
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _kalman_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _filterData                                           0     0      0   28266
                       _kalmanUpdate
 ---------------------------------------------------------------------------------
 (2) _kalmanUpdate                                         8     3      5   28266
                                             34 BANK0      8     3      5
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _computeRollPitch                                    26    26      0  162067
                                              0 BANK1     26    26      0
                _TMR0_Read16bitTimer
                    _TMR0_StartTimer
                     _TMR0_StopTimer
               _TMR0_Write16bitTimer
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___ftsub
                           ___lwtoft
                              _atan2
                          _fastatan2
 ---------------------------------------------------------------------------------
 (2) _fastatan2                                           24    18      6   36864
                                             34 BANK0     24    18      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                               _fabs
                            _maximum
                            _minimum
 ---------------------------------------------------------------------------------
 (3) _minimum                                              6     0      6    2302
                                             12 BANK0      6     0      6
                             ___ftge
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (3) _maximum                                              6     0      6    2302
                                             12 BANK0      6     0      6
                             ___ftge
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (2) _atan2                                               18    12      6   89161
                                             50 BANK0     15     9      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___ftsub
                               _atan
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _atan                                                16    13      3   56077
                                             34 BANK0     16    13      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 3     0      3    2618
                                              0 BANK0      3     0      3
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3    1715
                                             53 COMRAM     3     0      3
                            ___ftmul (ARG)
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   24105
                                             19 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3652
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6   10181
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1998
                                              3 BANK0      9     3      6
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    5313
                                             19 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                               _fabs (ARG)
                            _maximum (ARG)
                            _minimum (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6   10974
                                             19 BANK0      6     0      6
                            ___ftadd
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    9478
                                              7 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3134
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3013
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _TMR0_Write16bitTimer                                 2     0      2     152
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Read16bitTimer                                  8     6      2     102
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     155
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     121
           _TMR2_SetInterruptHandler
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (3) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             3     0      3     121
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             18 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerHigh                      14    14      0     572
                                              4 COMRAM    14    14      0
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR2_ISR                                             0     0      0     572
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0     572
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (10) _PWM4_LoadDutyValue                                  4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _PWM3_LoadDutyValue                                  4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _PWM2_LoadDutyValue                                  2     0      2     166
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _PWM1_LoadDutyValue                                  2     0      2     166
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_Start
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftsub
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _computeRollPitch
     _TMR0_Read16bitTimer
     _TMR0_StartTimer
     _TMR0_StopTimer
     _TMR0_Write16bitTimer
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _atan2
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
         _maximum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
         _minimum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
       ___ftge
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       _atan
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
           _maximum (ARG)
             ___ftge
               _fabs (ARG)
                 ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _minimum (ARG)
             ___ftge
               _fabs (ARG)
                 ___ftneg
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fabs
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
       _fabs
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
     _fastatan2
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
         _maximum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
         _minimum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
       ___ftge
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       _fabs
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
       _maximum
         ___ftge
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
       _minimum
         ___ftge
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
   _filterData
     _kalmanUpdate
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
         _maximum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
         _minimum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
   _interrupt_Init
   _kalman_Init
   _pid
     _pitchPid
     _rollPid
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___fttol
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _yawPid
   _pid_Init
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       _fabs (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _EUSART1_Write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readSensors
     _readAccel
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
         _maximum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
         _minimum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
       _readi2cData
         _acki2c
         _checkI2Cbusy
         _readi2c
         _starti2c
           _checkI2Cbusy
         _stopi2c
         _writei2c
           _checkI2Cbusy
     _readGyro
       ___awtoft
         ___ftpack
       _readi2cData
         _acki2c
         _checkI2Cbusy
         _readi2c
         _starti2c
           _checkI2Cbusy
         _stopi2c
         _writei2c
           _checkI2Cbusy
   _sensors_Init
     _accel_Init
       _writei2cData
         _starti2c
           _checkI2Cbusy
         _stopi2c
         _writei2c
           _checkI2Cbusy
     _gyro_Init
       _writei2cData
         _starti2c
           _checkI2Cbusy
         _stopi2c
         _writei2c
           _checkI2Cbusy
   _unlockI2C

 _INTERRUPT_InterruptManagerHigh (ROOT)
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     23      B0       8       68.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      9A       5       96.3%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4B       1       79.8%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     195       6        0.0%
DATA                 0      0     195       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Jul 23 22:25:42 2017

        __end_of_TMR2_SetInterruptHandler 4C4E                         kalmanUpdate@state 0082  
                             __CFG_CP$OFF 000000                              ?_kalman_Init 0001  
                            ___awdiv@sign 001E                                        _ax 00C8  
                                      _ay 00C5                                        _az 00C2  
                                      _gx 00BF                                        _gy 00BC  
                                      _gz 00B9                          yawPid@desiredYaw 0013  
                     ___wmul@multiplicand 0023                    __end_of_interrupt_Init 4CA0  
                            ___ftadd@exp1 0072                              ___ftadd@exp2 0071  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 0070  
                                     l401 4C34                                       l394 4C10  
                                     l731 4830                                       l832 235A  
                                     l841 47AE                                       l836 47EC  
                                     l871 4C24                                       l865 4BF4  
                                     _GIE 007F97                                       _PR2 000FBC  
                            __CFG_CPD$OFF 000000                                       _pid 3B66  
                           ?_kalmanUpdate 0082                                       _yaw 0103  
                            ___awmod@sign 0018                           _TMR2_Initialize 48A2  
                         _PWM4_Initialize 4B7C                                       tosl 000FFD  
                                     wreg 000FE8                      rollPid@changeInError 0085  
                       ?_computeRollPitch 0001                              __CFG_ZCD$OFF 000000  
                            ___ftdiv@cntr 007C                              ___ftdiv@sign 0081  
                                    l1100 156A                                      l1421 2CD0  
                                    l1430 2DA6                                      l1415 2C6E  
                                    l1360 3A2E                                      l1450 366C  
                                    l1346 48FC                                      l1419 2CA8  
                                    l1439 2DD0                                      l1392 42B6  
                                    l1464 3906                                      l1457 3878  
                                    l1458 38A0                                      l1539 459C  
                                    l1549 4672                                      l1489 4AB2  
                                    l1770 3118                                      l6003 3954  
                                    l5205 4BFE                                      l5223 2C7C  
                                    l5311 3F14                                      l5321 3F3C  
                                    l6041 3A04                                      l6025 39C6  
                                    l6017 3996                                      l6107 4C1E  
                                    l5171 4238                                      l5251 2D36  
                                    l5235 2CC6                                      l5315 3F24  
                                    l5253 2D44                                      l5245 2D08  
                                    l5229 2CB6                                      l5413 41A0  
                                    l5325 3F4C                                      l6061 455E  
                                    l6037 39F4                                      l5183 4284  
                                    l5175 4246                                      l5271 2DFA  
                                    l5263 2D8C                                      l5255 2D52  
                                    l5423 4224                                      l5431 4146  
                                    l6231 3C60                                      l6223 3C28  
                                    l6047 3A1C                                      l6311 128E  
                                    l5185 42A2                                      l5177 4250  
                                    l5281 2E48                                      l5265 2D9A  
                                    l5257 2D5E                                      l5417 41E0  
                                    l6057 454E                                      l6081 4640  
                                    l6049 3A28                                      l6321 131E  
                                    l6313 12BE                                      l6305 124A  
                                    l6241 0FF0                                      l6137 480C  
                                    l5187 42AC                                      l5179 426E  
                                    l5291 3EBA                                      l5523 3244  
                                    l5507 30B0                                      l6227 3C4A  
                                    l6059 455A                                      l6091 468A  
                                    l5603 4614                                      l6315 12D4  
                                    l5429 40C0                                      l6069 458E  
                                    l6085 4664                                      l6077 4630  
                                    l6093 4696                                      l5541 44CC  
                                    l6341 1416                                      l6325 134C  
                                    l6309 1278                                      l6253 1066  
                                    l6237 0FDA                                      l6501 1EEA  
                                    l5375 35CA                                      l5519 3230  
                                    l6079 463C                                      l5551 44EE  
                                    l5535 44BC                                      l6415 175E  
                                    l6335 13AA                                      l6271 10E6  
                                    l6263 1096                                      l6255 1080  
                                    l5615 4846                                      l5463 430C  
                                    l6503 1F1A                                      l5369 3590  
                                    l5297 3EE2                                      l5625 36DC  
                                    l6441 1830                                      l6433 17D8  
                                    l6417 1764                                      l6409 1738  
                                    l6353 1462                                      l6281 112C  
                                    l6265 10CC                                      l6249 1026  
                                    l5473 432E                                      l6505 1F4A  
                                    l6513 1F68                                      l5395 362A  
                                    l5643 376E                                      l5547 44E2  
                                    l5563 4514                                      l6371 154C  
                                    l6363 151C                                      l6339 1410  
                                    l6259 1090                                      l6507 1F54  
                                    l6515 1FA2                                      l5805 2758  
                                    l5661 37D4                                      l5653 379E  
                                    l5549 44EA                                      l5901 1B00  
                                    l6445 18BC                                      l6437 1808  
                                    l6429 17B0                                      l6381 1592  
                                    l6365 152A                                      l6357 148A  
                                    l6509 1F60                                      l6517 1FDE  
                                    ?_pid 008E                                      l5823 27C4  
                                    l5655 37AE                                      l5647 3782  
                                    l5567 4522                                      l5559 450A  
                                    l5591 45E8                                      l5583 45CE  
                                    l6391 16CA                                      l6375 156E  
                                    l6447 18D2                                      l5497 4754  
                                    l5841 28C2                                      l5809 2768  
                                    l5657 37B8                                      l5913 1C72  
                                    l5905 1B2C                                      l6393 16D8  
                                    l6385 15E4                                      l6369 1538  
                                    l6297 11DA                                      l6481 1DD4  
                                    l6473 1D9C                                      l5851 2958  
                                    l5835 2886                                      l5819 27B4  
                                    l5595 45FC                                      l5587 45DC  
                                    l5579 45C2                                      l5931 4B56  
                                    l5853 2986                                      l5837 28B4  
                                    l5781 2338                                      l5941 3812  
                                    l5589 45E4                                      l6397 16E6  
                                    l6493 1E2A                                      l6477 1DA8  
                                    l5599 4606                                      l5919 1D28  
                                    l6399 16F4                                      l6495 1E5A  
                                    l5777 22F4                                      l5881 2BBE  
                                    l5873 2AF0                                      l6497 1E8A  
                                    l5947 383E                                      l6499 1EBA  
                                    l5797 271C                                      l5981 38DC  
                                    l5895 1A4A                                      l5977 38CC  
                                    l5987 38F4                                      l5997 3936  
                                    l5989 3900                                      STR_1 0F98  
                 __end_of_PWM1_Initialize 4BD4                                      _LATA 000F83  
                                    _LATB 000F84                                      _LATC 000F85  
                                    _LATD 000F86                                      _LATE 000F87  
                                    _T2PR 000FBC                                      u5050 3E8E  
                                    u4331 2C1C                              printf@tmpval 009E  
                                    u4341 2C3A                                      u5301 3822  
                                    u6017 4820                                      u4541 3EA2  
                                    u4800 30DE                                      u4641 356C  
                                    u4561 3ECA                                      u5281 37F6  
                                    u4661 35A6                                      u4790 30DC  
                                    u5830 1562                                      u5670 1172  
                                    u4971 36B8                                      u5675 1166  
                                    u4990 3702                                      u4995 36F8  
                                    _TMR2 000FBB                                      _WPUA 000F10  
                                    _WPUB 000F18                                      _WPUC 000F20  
                                    _WPUD 000F25                                      _WPUE 000F2D  
                      ??_computeRollPitch 0039                             _EUSART1_Write 4C32  
                           __CFG_FCMEN$ON 000000                                      _fabs 48D8  
                                    _atan 3070                                      _main 1D54  
                            ___ftpack@arg 0013                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 0016                           _TMR0_StartTimer 4CAC  
                                    _roll 00B6                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 004C                                      prodh 000FF4  
                                    prodl 000FF3                                      start 008C  
                           __CFG_CSWEN$ON 000000                              ___ftmul@cntr 0034  
                            ___param_bank 000000                              ___ftmul@sign 0035  
                           __CFG_SCANE$ON 000000                              ?_readi2cData 0015  
                            ___fttol@exp1 0081                              ___fttol@lval 007D  
                                   ??_pid 0097                   __end_of_PWM2_Initialize 4BBE  
                 __end_of_TMR0_Initialize 499E                                _i2c1_state 0049  
          __size_of_OSCILLATOR_Initialize 0020             __end_of_OSCILLATOR_Initialize 4B04  
                         ?_interrupt_Init 0001                                     ?_fabs 0060  
                                   ?_atan 0082                                     ?_main 0001  
                         __end_of___awdiv 452C                           __end_of___ftadd 2E6E  
                           __CFG_WDTE$OFF 000000                           __end_of___awmod 461E  
                         __end_of___ftdiv 36A2                           __end_of___ftneg 4AC0  
                         __end_of___lldiv 45AE                           __end_of___ftmul 3F86  
                         ___awdiv@divisor 001B                              ?_readSensors 0001  
                         __end_of___llmod 4684                           __end_of___ftsub 477E  
                         __end_of___fttol 37E6                                     _T2CON 000FBD  
                                   _T2HLT 000FBE                            __CFG_DEBUG$OFF 000000  
                          ??_kalmanUpdate 0039                                     _T2TMR 000FBB  
                                   _T2RST 000FC0                                     i2l437 0050  
                         ___awdiv@counter 001D                                     _OSCEN 000EDC  
                      _PWM4_LoadDutyValue 490A                                     _TMR0H 000FD4  
                                   _TMR0L 000FD3                                     _TRISA 000F88  
                                   _TRISB 000F89                                     _TRISC 000F8A  
                                   _TRISD 000F8B                                     _TRISE 000F8C  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                           __CFG_WRT4$OFF 000000                             __CFG_WRT5$OFF 000000  
                            ___lltoft@exp 0023                             __CFG_WRT6$OFF 000000  
                           __CFG_WRT7$OFF 000000                            __CFG_EBTR0$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ??_I2C1_Initialize 0013  
                          __CFG_EBTR4$OFF 000000                            __CFG_EBTR5$OFF 000000  
                          __CFG_EBTR6$OFF 000000                            __CFG_EBTR7$OFF 000000  
                        __end_of_TMR2_ISR 4A9C                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                                   _begin 00ED                            __CFG_EBTRB$OFF 000000  
                                   _atan2 26DE                             ___awtoft@sign 001E  
                         __end_of_dpowers 0F29                               ?_TMR2_Start 0001  
                                   fabs@d 0060                           __end_of_readi2c 4C32  
                                   _errno 00DA                                     _scale 18F6  
                         __end_of_isdigit 4B5E                                     atan@f 0082  
                                   atan@x 0088                                     atan@y 0085  
                         __end_of_maximum 47FA                                     _pitch 0106  
                     ?_PWM4_LoadDutyValue 0001                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 0017                           __end_of_minimum 47BC  
                                   _putch 4C7A                                     _yawkd 010F  
                                   main@c 01A7                                     _yawki 0112  
                                   _yawkp 0115                            ?_EUSART1_Write 0001  
                 __end_of_PWM3_Initialize 4BA8                                     pclath 000FFA  
                                   tablat 000FF5                           __end_of_rollPid 3556  
                          ??_EUSART1_Read 0013                                     nvmcon 000F81  
                                   status 000FD8                           __end_of_stopi2c 4CA4  
                   __size_of_writei2cData 001E                     _computeRollPitch$2930 0199  
                   _computeRollPitch$2931 019C                     _computeRollPitch$2932 019F  
                   _computeRollPitch$2933 01A2                     _computeRollPitch$2927 0190  
                   _computeRollPitch$2928 0193                     _computeRollPitch$2929 0196  
                         __initialization 46E0                              __end_of_fabs 490A  
                            __end_of_atan 3262                __end_of_EUSART1_Initialize 4BEA  
                            __end_of_main 20AC                      ??_PWM4_LoadDutyValue 0003  
                   __size_of_checkI2Cbusy 0012                   __end_of_PWM4_Initialize 4B92  
                 __end_of_TMR2_Initialize 48D8                                    ??_fabs 0039  
                             _i2c1_object 00AC                                    ??_atan 0039  
                _TMR2_SetInterruptHandler 4C40                                    ??_main 0039  
                           ___fttol@sign1 007C                             __activetblptr 000003  
                    __size_of__tdiv_to_l_ 0132                                    ?_atan2 0092  
                            _writei2cData 4B22                   __end_of_TMR0_StartTimer 4CB0  
                        ___llmod@dividend 0020                                    ?_scale 0036  
                                  _CCPR1H 000FAB                                    _CCPR2H 000FA7  
                                  _CCPR1L 000FAA                                    _CCPR2L 000FA6  
                        ___awdiv@dividend 0019                          __end_of___awtoft 486A  
                                  _ANSELA 000F11                                    ?_putch 0001  
                                  _ANSELB 000F19                                    _ANSELC 000F21  
                                  _ANSELD 000F26                                    _ANSELE 000F2E  
                        __end_of___ftpack 42D6                                    _T0CON0 000FD5  
                                  _T0CON1 000FD6                                    _RC1REG 000F99  
                                  _RB1PPS 000EF0                                    _RA4PPS 000EEB  
                                  _RB2PPS 000EF1                                    _RA5PPS 000EEC  
                                  _RC1STA 000F9D                          __end_of___lltoft 46E0  
                                  _RC3PPS 000EFA                                    _RC4PPS 000EFB  
                        ?_PWM1_Initialize 0001                                    _ODCONA 000F0F  
                                  _ODCONB 000F17                                    _ODCONC 000F1F  
                                  _ODCOND 000F24                                    _ODCONE 000F2C  
                                  _RC7PPS 000EFE                            __CFG_WDTCCS$SC 000000  
             __end_of_TMR0_Read16bitTimer 4B7C                                    i2l4077 4398  
                                  i2l4087 43C4                                    i2l4089 43CA  
                                  i2l3815 4A46                                    i2l3829 4A1A  
                        __end_of___lwtoft 4AE4                                    _OSCFRQ 000EDE  
                                  _TX1REG 000F9A                                    _TX1STA 000F9E  
                            _checkI2Cbusy 4BFE                            __CFG_PWRTE$OFF 000000  
            __end_of_TMR0_Write16bitTimer 4C8E                            __CFG_XINST$OFF 000000  
                            _beginCounter 00EA                          __end_of__powers_ 0F50  
                          _p_i2c1_current 00DE                                    ___ftge 4160  
                                  _acki2c 4C94               __size_of_PWM3_LoadDutyValue 0032  
                                  ___wmul 4A50                                 ??___awdiv 001D  
                               ??___ftadd 006D                            __CFG_STVREN$ON 000000  
                               ??___awmod 0017                                 ??___ftdiv 0079  
                               ??___ftneg 0039                                 ??___lldiv 001B  
                               ??___ftmul 002D                                 ??___llmod 0028  
                               ??___ftsub 0039                                 ??___fttol 0077  
                     __size_of_TMR2_Start 0004                          __end_of_pid_Init 3D94  
                        __end_of_readGyro 44A8                                    atan2@v 009E  
                                  atan2@x 0095                                    atan2@y 0092  
                        ?_TMR0_Initialize 0001                          ?_PWM2_Initialize 0001  
                                  _fround 2994                                    clear_0 470A  
                                  clear_1 4716                                    clear_2 4722  
                        ___awdiv@quotient 001F                           ___awmod@divisor 0015  
                                  _yawAdj 00E4                                    _yawPid 4CB0  
                         ___awmod@counter 0017                                    _printf 0FCA  
                                  _rollkd 00D1                                    _rollki 00D4  
                                  _rollkp 00D7                      __size_of_kalman_Init 018E  
                   ___ftmul@f3_as_product 0031                          __end_of_pitchPid 4CB4  
                               ??_readi2c 0013                                 ??_isdigit 0013  
                               ??_maximum 0039                                 ??_minimum 0039  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                               ??_rollPid 0039             TMR0_Read16bitTimer@readValLow 0019  
                        __end_of_starti2c 4C5A                           ??_EUSART1_Write 0013  
TMR2_SetInterruptHandler@InterruptHandler 0013                                 ??_stopi2c 0013  
                       _rollPreviousError 00CE             __size_of_INTERRUPT_Initialize 000C  
                        __end_of_writei2c 4BFE                                _accCounter 00EC  
                        ?_PWM3_Initialize 0001          ??_INTERRUPT_InterruptManagerHigh 0005  
         ?_INTERRUPT_InterruptManagerHigh 0001                         _SYSTEM_Initialize 499E  
                              __accesstop 0060                   __end_of__initialization 4728  
                              ___ftadd@f1 0067                                ___ftadd@f2 006A  
                              ___ftge@ff1 0063                                ___ftge@ff2 0066  
                      ?_SYSTEM_Initialize 0001                __end_of_PWM2_LoadDutyValue 4A24  
                            eval_poly@res 007C                             ___rparam_used 000001  
                              ___ftdiv@f1 0073                                ___ftdiv@f2 0076  
                              ___ftdiv@f3 007D                      __end_of_kalmanUpdate 3070  
                              ___ftneg@f1 0036                            _i2c1_trb_count 0048  
             PWM1_LoadDutyValue@dutyValue 0001                                ___awtoft@c 001B  
                              ___ftmul@f1 0027                                ___ftmul@f2 002A  
                              _accelAlpha 00F7                                ___ftsub@f1 0073  
                              ___ftsub@f2 0076                                ___fttol@f1 0073  
                          __pcstackCOMRAM 0001                                _accel_Init 49CC  
                            __pidataBANK0 4C8E                       ??_SYSTEM_Initialize 0016  
                           __end_of_atan2 2994                            readAccel@aData 0086  
                               ?_TMR2_ISR 0001                                ___lltoft@c 001B  
                           __end_of_scale 1D54                             __end_of_putch 4C84  
                      _PWM1_LoadDutyValue 4A24                          ?_TMR2_Initialize 0001  
                        ?_PWM4_Initialize 0001                      __size_of_readi2cData 00AC  
                              ___lwtoft@c 001B               PWM4_LoadDutyValue@dutyValue 0001  
                    __end_of_EUSART1_Read 4C22                                __div_to_l_ 3918  
                              _atan2$2943 009B                                _atan2$2944 0098  
                     ?_PWM1_LoadDutyValue 0001                        __size_of_fastatan2 0344  
                    __size_of_readSensors 000A                                   ??_atan2 0039  
                         __div_to_l_@exp1 001E                          ?_TMR0_StartTimer 0001  
                         __div_to_l_@cntr 001D                                   ??_scale 0039  
               __end_of_SYSTEM_Initialize 49CC                           __div_to_l_@quot 0019  
                                 ??_putch 0014                                __pbssBANK0 00AC  
                              __pbssBANK1 0100                        __size_of_eval_poly 00E8  
                      __size_of_readAccel 0126                             __div_to_l_@f1 0013  
                           __div_to_l_@f2 0016                      ??_PWM1_LoadDutyValue 0003  
                          _SSP1DATPPSbits 000EB8                        rollPid@desiredRoll 0082  
                        ??_interrupt_Init 0013                 __size_of_computeRollPitch 02EE  
                                 ?___ftge 0063                                   ?_acki2c 0001  
                 __size_of_TMR0_StopTimer 0004                                   ?___wmul 0021  
                         __CFG_PPS1WAY$ON 000000                                ??_TMR2_ISR 0005  
                      __size_of_gyro_Init 001E                           _I2C1_Initialize 486A  
                                 _CCP1CON 000FAC                                   _CCP2CON 000FA8  
                                 ?_fround 0036                                 ?___awtoft 001B  
                               ?___ftpack 0013                            _SSP1CLKPPSbits 000EB7  
                                 ?_yawPid 0013                                   ?_printf 0082  
                               ?___lltoft 001B                                 ?___lwtoft 001B  
                                 _SP1BRGH 000F9C                                   _SP1BRGL 000F9B  
                                 _OSCCON1 000ED8                                   _OSCCON3 000EDA  
                    _TMR0_Write16bitTimer 4C84                                   _OSCTUNE 000EDD  
                                 _PWM3DCH 000FA4                                   _PWM3DCL 000FA3  
                                 _PWM4DCH 000FA1                                   _PWM4DCL 000FA0  
                                 _PWM3CON 000FA5                                   _PWM4CON 000FA2  
                                 _SSP1ADD 000F93                                   _PPSLOCK 000EA0  
                                 _SSP1BUF 000F92                              readi2cData@i 001E  
                            ??_TMR2_Start 0013                                _filterData 3F86  
                      __size_of_unlockI2C 0038                                 ?_pid_Init 0001  
                               ?_readGyro 0001                         __end_of__npowers_ 0F77  
                                 __Hparam 0000                                 ?_pitchPid 0013  
                              _scale$2941 0060                         __end_of_fastatan2 23F0  
                                 __Lparam 0000                ??_TMR2_SetInterruptHandler 0016  
              __CFG_RSTOSC$HFINTOSC_64MHZ 000000                        _p_i2c1_trb_current 0040  
                             ?_accel_Init 0001                           __size_of___ftge 00C8  
                         __size_of_acki2c 0006                                   ___awdiv 44A8  
                                 ___ftadd 2C06                                   ___awmod 45AE  
                                 ___ftdiv 3556                                   ___ftneg 4A9C  
                                 ___lldiv 452C                           __size_of___wmul 0026  
                                 ___ftmul 3E92                                   ___llmod 461E  
                                 ___ftsub 4732                                   ___fttol 36A2  
                               ?_starti2c 0001                              __psmallconst 0F00  
                      __end_of_TMR2_Start 4CAC                                   __pcinit 46E0  
                              ??___awtoft 001E                                ??___ftpack 0018  
                       __end_of_eval_poly 4160                           __size_of_fround 0272  
                                 __ramtop 0F00                                   _axState 0172  
                                 _ayState 0163                                ??___lltoft 001F  
                                 __ptext0 1D54                                   __ptext1 47FA  
                                 _azState 0154                                   __ptext2 4C66  
                                 __ptext3 4B04                                   __ptext4 49CC  
                                 __ptext5 4B22                                   __ptext6 4C70  
                               ?_writei2c 0001                                   __ptext7 4418  
                                 __ptext8 3A40                                   __ptext9 42D6  
                       __end_of_readAccel 3B66                           __size_of_yawPid 0002  
                         __size_of_printf 092C                                ??___lwtoft 001E  
                 kalmanUpdate@measurement 0084                               ?__div_to_l_ 0013  
                                 _gxState 0145                                   _gyState 0136  
                                 _dpowers 0F01                                   _gzState 0127  
                   _OSCILLATOR_Initialize 4AE4                                   _readi2c 4C22  
                               _T2CONbits 000FBD                              __size_of_pid 011E  
                                 _isdigit 4B40                           atan@val_squared 008C  
                                 _maximum 47BC                          ___awmod@dividend 0013  
                                 _minimum 477E                     ?_TMR0_Write16bitTimer 0013  
                      _EUSART1_Initialize 4BD4                  ??_PIN_MANAGER_Initialize 0013  
                               _T2HLTbits 000FBE                                   atan@val 008F  
                                 _pitchkd 011E                                   _pitchki 0121  
                                 _pitchkp 0124                                   _rollAcc 00B3  
                                 _rollAdj 00E8                                   _rollPid 33F0  
                                 _stopi2c 4CA0                __size_of_SYSTEM_Initialize 002E  
                    I2C1_ISR@pi2c_buf_ptr 003E                                   main@val 01AA  
                    end_of_initialization 4728                         __end_of_gyro_Init 4B22  
                               _T2RSTbits 000FC0                     __size_of_kalmanUpdate 0202  
                     ?_EUSART1_Initialize 0001                             ?_sensors_Init 0001  
                              ??_pid_Init 0013                                ??_readGyro 0020  
                 __end_of_I2C1_Initialize 48A2                           ___lldiv@divisor 0017  
                              ??_pitchPid 0016                           ___lldiv@counter 001F  
                                 printf@c 00AB                                   printf@f 0082  
                                 postdec1 000FE5                                   postdec2 000FDD  
          TMR0_Read16bitTimer@readValHigh 001A                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0012  
                            writei2c@data 0014                         __end_of_unlockI2C 4832  
             __size_of_PWM4_LoadDutyValue 0032                                ??_starti2c 0014  
                          __tdiv_to_l_@f1 0013                            __tdiv_to_l_@f2 0016  
                    ??_EUSART1_Initialize 0013                     __CFG_WDTCPS$WDTCPS_31 000000  
                          readi2cData@len 0018                             ??__tdiv_to_l_ 0019  
                          readi2cData@reg 0015                                ??_writei2c 0014  
                           pid@desiredYaw 0094                                fastatan2@a 0094  
                              fastatan2@r 0097                                fastatan2@s 0091  
                              fastatan2@x 0082                                fastatan2@y 0085  
                            _kalmanUpdate 2E6E                                 _TRISCbits 000F8A  
                             ?_filterData 0001                       EUSART1_Write@txData 0013  
                     __size_of_accel_Init 002C                          __CFG_FEXTOSC$OFF 000000  
       I2C1_ISR@i2c_10bit_address_restart 0046                            ??_sensors_Init 0018  
            TMR0_Write16bitTimer@timerVal 0013                               _CCP1CONbits 000FAC  
                             ___ftdiv@exp 0080                              _EUSART1_Read 4C10  
                             _CCP2CONbits 000FA8                __end_of_PWM3_LoadDutyValue 496E  
                     __size_of__div_to_l_ 0128              __size_of_TMR0_Read16bitTimer 001E  
                __size_of_PWM1_Initialize 0016                               ___ftmul@exp 0030  
                    _timer0ReloadVal16bit 003C                            _TMR0_StopTimer 4CA4  
                        _computeRollPitch 23F0              __end_of_INTERRUPT_Initialize 4C66  
    __end_of_TMR2_DefaultInterruptHandler 4418     __size_of_TMR2_DefaultInterruptHandler 0096  
            _TMR2_DefaultInterruptHandler 4382                             ??_kalman_Init 0013  
                          __end_of___ftge 4228                            __end_of_acki2c 4C9A  
                          __end_of___wmul 4A76                   I2C1_MasterWrite@trBlock 0187  
                       __size_of_TMR2_ISR 0026                        _PWM2_LoadDutyValue 49F8  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_fround 2C06  
                          __end_of_yawPid 4CB2                    ??_TMR0_Write16bitTimer 0015  
                          __end_of_printf 18F6                       start_initialization 46E0  
                              eval_poly@d 0076                                eval_poly@n 0078  
                              eval_poly@x 0073                  __size_of_PWM2_Initialize 0016  
                __size_of_TMR0_Initialize 0030                       ?_PWM2_LoadDutyValue 0001  
         __size_of_PIN_MANAGER_Initialize 00FE                       __end_of__tdiv_to_l_ 3918  
                             __end_of_pid 3C84                               putch@txData 0014  
                   __end_of_EUSART1_Write 4C40                           ___llmod@divisor 0024  
                         ___llmod@counter 0028                    __end_of_TMR0_StopTimer 4CA8  
                        ?_I2C1_Initialize 0001                          __CFG_LPBOREN$OFF 000000  
                    ??_PWM2_LoadDutyValue 0003                  __size_of_PWM3_Initialize 0016  
             PWM2_LoadDutyValue@dutyValue 0001                                  ??___ftge 0069  
                                ??_acki2c 0013                                  ??___wmul 0025  
                           ??_readi2cData 0019                               _CCPTMRSbits 000FAE  
                        writei2cData@data 0016                       __size_of_filterData 00F2  
                             __pdataBANK0 00F4                                  ??_fround 0039  
           ?_TMR2_DefaultInterruptHandler 0001                                  ??_yawPid 0016  
                                ??_printf 008F                             ??_readSensors 0039  
                              fround@prec 0066                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                     __end_of_kalman_Init 33F0                               __pbssCOMRAM 0039  
                       __size_of___lwtoft 0024                             _pitchIntegral 0118  
                           __pcstackBANK0 0060                             __pcstackBANK1 018D  
                __size_of_PWM4_Initialize 0016                  __size_of_TMR2_Initialize 0036  
                           _i2c1_tr_queue 00EE                              _isdigit$2464 0014  
                        rollPid@rollError 008B                            _fastatan2$2934 0088  
                          _fastatan2$2935 008B                            _fastatan2$2936 008E  
                __size_of_TMR0_StartTimer 0004                           ?_TMR0_StopTimer 0001  
                       __size_of_pid_Init 0110                         __size_of_readGyro 0090  
             __size_of_PWM1_LoadDutyValue 002C                    _PIN_MANAGER_Initialize 3D94  
                            ??_accel_Init 0018                                 __pintcode 0008  
                       __size_of_pitchPid 0002                                  ?___awdiv 0019  
                                ?___ftadd 0067                                  ?___awmod 0013  
                                ?___ftdiv 0073                                  ?___ftneg 0036  
                                ?___lldiv 0013                                  ?___ftmul 0027  
                                ?___llmod 0020                                  ?___ftsub 0073  
                               __npowers_ 0F50                                  ?___fttol 0073  
                               _fastatan2 20AC                      __end_of_sensors_Init 4C70  
                       ??_PWM1_Initialize 0013                               __tdiv_to_l_ 37E6  
                       __size_of_starti2c 000C                              ??__div_to_l_ 0019  
                                _BAUD1CON 000F9F                               __smallconst 0F00  
                     __end_of_readi2cData 4382                                  ?_readi2c 0001  
                                ?_isdigit 0001                                  ?_maximum 006C  
                       __size_of_writei2c 0014                                 _eval_poly 4078  
                                ?_minimum 006C                                 _readAccel 3A40  
                                ?_rollPid 0082                             ?_writei2cData 0015  
                      readi2cData@address 001D                            __size_of_atan2 02B6  
                     __end_of_readSensors 4C7A                                  ?_stopi2c 0001  
                                _T2CLKCON 000FBF                            __size_of_scale 045E  
                          __size_of_putch 000A                        __end_of_accel_Init 49F8  
                    _INTERRUPT_Initialize 4C5A                    I2C1_MasterRead@trBlock 0181  
                       ??_TMR0_Initialize 0013                         ??_PWM2_Initialize 0013  
                          ___wmul@product 0025                                 _gyroAlpha 00F4  
                                _LATCbits 000F85                                 atan@recip 008B  
                               _gyro_Init 4B04                                  _IPR3bits 000EBD  
                                _IPR4bits 000EBE                             ?_checkI2Cbusy 0001  
                                _PIE4bits 000EC6                       __CFG_BORV$VBOR_2P45 000000  
                                _PIR0bits 000ECA                                  i2u263_45 4A32  
                                i2u265_45 4A06                        __end_of__div_to_l_ 3A40  
                                i2u266_45 4960                                  i2u267_45 492E  
                                i2u348_48 4A88                                  _PIR3bits 000ECD  
                                _PIR4bits 000ECE                TMR0_Read16bitTimer@readVal 0017  
                      _pitchPreviousError 011B                                  _SSP1CON1 000F96  
                                _SSP1CON2 000F97                                  _SSP1CON3 000F98  
                                _TMR2_ISR 4A76                                  _SSP1STAT 000F95  
                              ?_fastatan2 0082                               _kalman_Init 3262  
                        _yawPreviousError 010C                         ??_PWM3_Initialize 0013  
                               _throttle1 0044                                 _throttle2 0042  
                               _throttle3 00E2                                 _throttle4 00E0  
                       ___wmul@multiplier 0021                                 _unlockI2C 47FA  
                              printf@flag 009A                                printf@fval 00A8  
                              printf@prec 00A6                   __size_of_interrupt_Init 0006  
                              ?_eval_poly 0073            ??_TMR2_DefaultInterruptHandler 0005  
       __size_of_TMR2_SetInterruptHandler 000E                   computeRollPitch@tmr0val 01A5  
                          ??_writei2cData 0017                 ?_TMR2_SetInterruptHandler 0013  
                              ?_readAccel 0001                       _TMR0_Read16bitTimer 4B5E  
                     __end_ofatan@coeff_a 0F89                       __end_ofatan@coeff_b 0F98  
                __end_of_computeRollPitch 26DE                              ??_filterData 0039  
                               copy_data0 46F8                     ?_INTERRUPT_Initialize 0001  
                       ??_TMR2_Initialize 0016                         ??_PWM4_Initialize 0013  
                          ??_checkI2Cbusy 0013                                ?_gyro_Init 0001  
                                __Hrparam 0000                      ?_TMR0_Read16bitTimer 0013  
              __end_of_PWM4_LoadDutyValue 493C                                  __Lrparam 0000  
                              unlockI2C@i 0014                        __CFG_BOREN$SBORDIS 000000  
                         writei2cData@reg 0015                    I2C1_ISR@i2c_bytes_left 0047  
                           readGyro@gData 0024                   ??_OSCILLATOR_Initialize 0013  
                             _readi2cData 42D6                         ??_TMR0_StartTimer 0013  
                        __size_of___awdiv 0084                          __size_of___ftadd 0268  
                        __size_of___awmod 0070                          __size_of___ftdiv 014C  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                        __size_of___ftmul 00F4                          __size_of___llmod 0066  
                        __size_of___ftsub 004C                          __size_of___fttol 0144  
             __size_of_EUSART1_Initialize 0016                        __end_of_filterData 4078  
                                ___awtoft 4832                                  ___ftpack 4228  
                             _fround$2940 0060                               _fround$2939 0063  
                                ___lltoft 4684                                ?_unlockI2C 0001  
                      _PWM3_LoadDutyValue 493C                                  ___lwtoft 4AC0  
                       _kalmanUpdate$2938 0087                               _readSensors 4C70  
                              _T0CON0bits 000FD5                          __size_of_readi2c 0010  
                        __size_of_isdigit 001E                          __size_of_maximum 003E  
                        __size_of_minimum 003E                       I2C1_ISR@i2c_address 004A  
                                __ptext10 4BEA                                  __ptext11 4CA0  
                                __ptext20 4C32                                  __ptext12 4C4E  
                                __ptext21 4B40                                  __ptext13 4BFE  
                                __ptext30 3C84                                  __ptext22 2994  
                                __ptext14 4C22                                  __ptext31 3B66  
                                __ptext23 45AE                                  __ptext15 4C94  
                                __ptext40 23F0                                  __ptext32 4CB0  
                                __ptext24 44A8                                  __ptext16 4832  
                                __ptext41 20AC                                  __ptext33 33F0  
                                __ptext25 37E6                                  __ptext17 0FCA  
                                __ptext50 3E92                                  __ptext42 477E  
                                __ptext34 36A2                                  __ptext26 3918  
                                __ptext18 18F6                                  __ptext51 4160  
                                __ptext43 47BC                                  __ptext35 4CB2  
                                __ptext27 4684                                  __ptext19 4C7A  
                                __ptext60 499E                                  __ptext52 3556  
                                __ptext44 26DE                                  __ptext36 3262  
                                __ptext28 461E                                  __ptext61 48A2  
                                __ptext53 4732                                  __ptext45 3070  
                                __ptext37 4C9A                                  __ptext29 452C  
                                __ptext70 3D94                                  __ptext62 4CA8  
                                __ptext54 2C06                                  __ptext46 48D8  
                                __ptext38 3F86                                  __ptext71 4AE4  
                                __ptext63 4C40                                  __ptext55 4AC0  
                                __ptext47 4A9C                                  __ptext39 2E6E  
                                __ptext80 493C                                  __ptext72 4C5A  
                                __ptext64 496E                                  __ptext56 4228  
                                __ptext48 4078                                  __ptext81 49F8  
                                __ptext73 486A                                  __ptext65 4CAC  
                                __ptext57 4C84                                  __ptext49 4A50  
                                __ptext82 4A24                                  __ptext74 4BD4  
                                __ptext66 4B7C                                  __ptext58 4CA4  
                     ?_PWM3_LoadDutyValue 0001                                  __ptext83 0000  
                                __ptext75 4C10                                  __ptext67 4B92  
                                __ptext59 4B5E                                  __ptext68 4BA8  
                                __ptext77 4A76                                  __ptext69 4BBE  
                                __ptext78 4382                                  __ptext79 490A  
                            _SSP1CON1bits 000F96                              _SSP1CON2bits 000F97  
                                __powers_ 0F29                          __size_of_rollPid 0166  
                        __size_of_stopi2c 0004                                  _pid_Init 3C84  
                           __size_of_fabs 0032                                  _readGyro 4418  
                           __size_of_atan 01F2                             __size_of_main 0358  
                    __CFG_WDTCWS$WDTCWS_7 000000                       writei2cData@address 0017  
                   ??_TMR0_Read16bitTimer 0015                                  _pitchAcc 0100  
                                _pitchAdj 00E6                                  _pitchPid 4CB2  
                              _RC1STAbits 000F9D                     __size_of_sensors_Init 000A  
                    ??_PWM3_LoadDutyValue 0003                                  int$flags 004C  
                                _starti2c 4C4E                               ??_fastatan2 0039  
                                _throttle 00DC                                 printf@exp 009C  
                               printf@val 00A2                              _SSP1STATbits 000F95  
                                main@val2 01AD                                  main@show 01A8  
                                _writei2c 4BEA                      pitchPid@desiredPitch 0013  
                             atan@coeff_a 0F77                               atan@coeff_b 0F89  
             PIN_MANAGER_Initialize@state 0013                                _INTCONbits 000FF2  
                             ??_eval_poly 007A                               ??_readAccel 0082  
                            _rollPid$2937 0088             __size_of_TMR0_Write16bitTimer 000A  
                                isdigit@c 0015                    ??_INTERRUPT_Initialize 0013  
                                scale@scl 0063                                  maximum@x 006C  
                                maximum@y 006F                                  intlevel2 0000  
                                minimum@x 006C                                  minimum@y 006F  
                        ??_TMR0_StopTimer 0013                          __tdiv_to_l_@exp1 0021  
                        __tdiv_to_l_@cntr 0020                          __tdiv_to_l_@quot 001C  
                            _sensors_Init 4C66                          ___lldiv@dividend 0013  
                 ?_PIN_MANAGER_Initialize 0001                         __CFG_CLKOUTEN$OFF 000000  
                             ??_gyro_Init 0018                               _PPSLOCKbits 000EA0  
                         _PWM1_Initialize 4BBE                              _rollIntegral 00CB  
                      computeRollPitch@dt 018D               __size_of_PWM2_LoadDutyValue 002C  
                    __end_of_writei2cData 4B40                                  printf@ap 0098  
             PWM3_LoadDutyValue@dutyValue 0001                           pid@desiredPitch 0091  
                __size_of_I2C1_Initialize 0038                    __size_of_EUSART1_Write 000E  
                            ?__tdiv_to_l_ 0013    __end_of_INTERRUPT_InterruptManagerHigh 008C  
 __size_of_INTERRUPT_InterruptManagerHigh 0084            _INTERRUPT_InterruptManagerHigh 0008  
                             ??_unlockI2C 0013                                _RX1PPSbits 000EB5  
                             _printf$2942 0095                            _interrupt_Init 4C9A  
                    __end_of_checkI2Cbusy 4C10                          ___lldiv@quotient 001B  
                         _TMR0_Initialize 496E                           _PWM2_Initialize 4BA8  
                         readi2cData@data 0016                                _TMR2_Start 4CA8  
                          pid@desiredRoll 008E                               _yawIntegral 0109  
          __end_of_PIN_MANAGER_Initialize 3E92                __end_of_PWM1_LoadDutyValue 4A50  
                   _TMR2_InterruptHandler 0039                           _PWM3_Initialize 4B92  
