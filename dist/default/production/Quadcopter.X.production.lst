

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Jul 23 01:44:02 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1
    78                           	psect	text65,global,reloc=2,class=CODE,delta=1
    79                           	psect	text66,global,reloc=2,class=CODE,delta=1
    80                           	psect	text67,global,reloc=2,class=CODE,delta=1
    81                           	psect	text68,global,reloc=2,class=CODE,delta=1
    82                           	psect	text69,global,reloc=2,class=CODE,delta=1
    83                           	psect	text70,global,reloc=2,class=CODE,delta=1
    84                           	psect	text71,global,reloc=2,class=CODE,delta=1
    85                           	psect	text72,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    87                           	psect	text74,global,reloc=2,class=CODE,delta=1
    88                           	psect	text75,global,reloc=2,class=CODE,delta=1
    89                           	psect	text76,global,reloc=2,class=CODE,delta=1
    90                           	psect	text77,global,reloc=2,class=CODE,delta=1
    91                           	psect	text78,global,reloc=2,class=CODE,delta=1
    92                           	psect	text79,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 1.42
    99                           ; Generated 13/04/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F47K40 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133                           	psect	smallconst
   134  000F00                     __psmallconst:
   135                           	opt stack 0
   136  000F00  00                 	db	0
   137  000F01                     _dpowers:
   138                           	opt stack 0
   139  000F01  0001               	dw	1
   140  000F03  0000               	dw	0
   141  000F05  000A               	dw	10
   142  000F07  0000               	dw	0
   143  000F09  0064               	dw	100
   144  000F0B  0000               	dw	0
   145  000F0D  03E8               	dw	1000
   146  000F0F  0000               	dw	0
   147  000F11  2710               	dw	10000
   148  000F13  0000               	dw	0
   149  000F15  86A0               	dw	34464
   150  000F17  0001               	dw	1
   151  000F19  4240               	dw	16960
   152  000F1B  000F               	dw	15
   153  000F1D  9680               	dw	38528
   154  000F1F  0098               	dw	152
   155  000F21  E100               	dw	57600
   156  000F23  05F5               	dw	1525
   157  000F25  CA00               	dw	51712
   158  000F27  3B9A               	dw	15258
   159  000F29                     __end_of_dpowers:
   160                           	opt stack 0
   161  000F29                     __powers_:
   162                           	opt stack 0
   163  000F29  00                 	db	0
   164  000F2A  80                 	db	128
   165  000F2B  3F                 	db	63
   166  000F2C  00                 	db	0
   167  000F2D  20                 	db	32
   168  000F2E  41                 	db	65
   169  000F2F  00                 	db	0
   170  000F30  C8                 	db	200
   171  000F31  42                 	db	66
   172  000F32  00                 	db	0
   173  000F33  7A                 	db	122
   174  000F34  44                 	db	68
   175  000F35  40                 	db	64
   176  000F36  1C                 	db	28
   177  000F37  46                 	db	70
   178  000F38  50                 	db	80
   179  000F39  C3                 	db	195
   180  000F3A  47                 	db	71
   181  000F3B  24                 	db	36
   182  000F3C  74                 	db	116
   183  000F3D  49                 	db	73
   184  000F3E  97                 	db	151
   185  000F3F  18                 	db	24
   186  000F40  4B                 	db	75
   187  000F41  BC                 	db	188
   188  000F42  BE                 	db	190
   189  000F43  4C                 	db	76
   190  000F44  6B                 	db	107
   191  000F45  6E                 	db	110
   192  000F46  4E                 	db	78
   193  000F47  03                 	db	3
   194  000F48  15                 	db	21
   195  000F49  50                 	db	80
   196  000F4A  79                 	db	121
   197  000F4B  AD                 	db	173
   198  000F4C  60                 	db	96
   199  000F4D  F3                 	db	243
   200  000F4E  49                 	db	73
   201  000F4F  71                 	db	113
   202  000F50                     __end_of__powers_:
   203                           	opt stack 0
   204  000F50                     __npowers_:
   205                           	opt stack 0
   206  000F50  00                 	db	0
   207  000F51  80                 	db	128
   208  000F52  3F                 	db	63
   209  000F53  CD                 	db	205
   210  000F54  CC                 	db	204
   211  000F55  3D                 	db	61
   212  000F56  D7                 	db	215
   213  000F57  23                 	db	35
   214  000F58  3C                 	db	60
   215  000F59  12                 	db	18
   216  000F5A  83                 	db	131
   217  000F5B  3A                 	db	58
   218  000F5C  B7                 	db	183
   219  000F5D  D1                 	db	209
   220  000F5E  38                 	db	56
   221  000F5F  C6                 	db	198
   222  000F60  27                 	db	39
   223  000F61  37                 	db	55
   224  000F62  38                 	db	56
   225  000F63  86                 	db	134
   226  000F64  35                 	db	53
   227  000F65  C0                 	db	192
   228  000F66  D6                 	db	214
   229  000F67  33                 	db	51
   230  000F68  CC                 	db	204
   231  000F69  2B                 	db	43
   232  000F6A  32                 	db	50
   233  000F6B  70                 	db	112
   234  000F6C  89                 	db	137
   235  000F6D  30                 	db	48
   236  000F6E  E7                 	db	231
   237  000F6F  DB                 	db	219
   238  000F70  2E                 	db	46
   239  000F71  E5                 	db	229
   240  000F72  3C                 	db	60
   241  000F73  1E                 	db	30
   242  000F74  42                 	db	66
   243  000F75  A2                 	db	162
   244  000F76  0D                 	db	13
   245  000F77                     __end_of__npowers_:
   246                           	opt stack 0
   247  0000                     _PIR0bits	set	3786
   248  0000                     _OSCTUNE	set	3805
   249  0000                     _OSCFRQ	set	3806
   250  0000                     _OSCEN	set	3804
   251  0000                     _OSCCON3	set	3802
   252  0000                     _OSCCON1	set	3800
   253  0000                     _IPR3bits	set	3773
   254  0000                     _IPR4bits	set	3774
   255  0000                     _PIR3bits	set	3789
   256  0000                     _SSP1DATPPSbits	set	3768
   257  0000                     _SSP1CLKPPSbits	set	3767
   258  0000                     _RC7PPS	set	3838
   259  0000                     _RX1PPSbits	set	3765
   260  0000                     _RA5PPS	set	3820
   261  0000                     _RC4PPS	set	3835
   262  0000                     _RB2PPS	set	3825
   263  0000                     _RC3PPS	set	3834
   264  0000                     _RB1PPS	set	3824
   265  0000                     _RA4PPS	set	3819
   266  0000                     _PPSLOCKbits	set	3744
   267  0000                     _PPSLOCK	set	3744
   268  0000                     _PIE4bits	set	3782
   269  0000                     _PIR4bits	set	3790
   270  0000                     _ODCOND	set	3876
   271  0000                     _ODCONC	set	3871
   272  0000                     _ODCONB	set	3863
   273  0000                     _ODCONA	set	3855
   274  0000                     _ODCONE	set	3884
   275  0000                     _WPUC	set	3872
   276  0000                     _WPUA	set	3856
   277  0000                     _WPUB	set	3864
   278  0000                     _WPUE	set	3885
   279  0000                     _WPUD	set	3877
   280  0000                     _ANSELA	set	3857
   281  0000                     _ANSELE	set	3886
   282  0000                     _ANSELD	set	3878
   283  0000                     _ANSELB	set	3865
   284  0000                     _ANSELC	set	3873
   285  0000                     _SSP1STATbits	set	3989
   286  0000                     _SSP1CON2	set	3991
   287  0000                     _LATCbits	set	3973
   288  0000                     _TRISCbits	set	3978
   289  0000                     _LATBbits	set	3972
   290  0000                     _TRISBbits	set	3977
   291  0000                     _T0CON0bits	set	4053
   292  0000                     _TMR0L	set	4051
   293  0000                     _TMR0H	set	4052
   294  0000                     _T0CON1	set	4054
   295  0000                     _T0CON0	set	4053
   296  0000                     _PWM3DCL	set	4003
   297  0000                     _PWM3DCH	set	4004
   298  0000                     _PWM3CON	set	4005
   299  0000                     _PWM4DCL	set	4000
   300  0000                     _PWM4DCH	set	4001
   301  0000                     _PWM4CON	set	4002
   302  0000                     _CCP2CONbits	set	4008
   303  0000                     _CCPR2L	set	4006
   304  0000                     _CCPR2H	set	4007
   305  0000                     _CCP2CON	set	4008
   306  0000                     _CCP1CONbits	set	4012
   307  0000                     _CCPTMRSbits	set	4014
   308  0000                     _CCPR1L	set	4010
   309  0000                     _CCPR1H	set	4011
   310  0000                     _CCP1CON	set	4012
   311  0000                     _INTCONbits	set	4082
   312  0000                     _TX1REG	set	3994
   313  0000                     _RC1REG	set	3993
   314  0000                     _RC1STAbits	set	3997
   315  0000                     _SP1BRGH	set	3996
   316  0000                     _SP1BRGL	set	3995
   317  0000                     _TX1STA	set	3998
   318  0000                     _RC1STA	set	3997
   319  0000                     _BAUD1CON	set	3999
   320  0000                     _SSP1BUF	set	3986
   321  0000                     _SSP1CON2bits	set	3991
   322  0000                     _SSP1CON1bits	set	3990
   323  0000                     _SSP1ADD	set	3987
   324  0000                     _SSP1CON3	set	3992
   325  0000                     _SSP1CON1	set	3990
   326  0000                     _SSP1STAT	set	3989
   327  0000                     _TRISD	set	3979
   328  0000                     _TRISC	set	3978
   329  0000                     _TRISB	set	3977
   330  0000                     _TRISA	set	3976
   331  0000                     _TRISE	set	3980
   332  0000                     _LATC	set	3973
   333  0000                     _LATB	set	3972
   334  0000                     _LATA	set	3971
   335  0000                     _LATD	set	3974
   336  0000                     _LATE	set	3975
   337  0000                     _PR2	set	4028
   338  0000                     _TMR2	set	4027
   339  0000                     _T2CONbits	set	4029
   340  0000                     _T2RSTbits	set	4032
   341  0000                     _T2HLTbits	set	4030
   342  0000                     _T2TMR	set	4027
   343  0000                     _T2PR	set	4028
   344  0000                     _T2RST	set	4032
   345  0000                     _T2HLT	set	4030
   346  0000                     _T2CLKCON	set	4031
   347  0000                     _T2CON	set	4029
   348  0000                     _GIE	set	32663
   349  000F77                     STR_1:
   350  000F77  6B                 	db	107	;'k'
   351  000F78  70                 	db	112	;'p'
   352  000F79  3A                 	db	58	;':'
   353  000F7A  20                 	db	32
   354  000F7B  25                 	db	37
   355  000F7C  2E                 	db	46
   356  000F7D  32                 	db	50	;'2'
   357  000F7E  66                 	db	102	;'f'
   358  000F7F  20                 	db	32
   359  000F80  20                 	db	32
   360  000F81  20                 	db	32
   361  000F82  6B                 	db	107	;'k'
   362  000F83  64                 	db	100	;'d'
   363  000F84  3A                 	db	58	;':'
   364  000F85  20                 	db	32
   365  000F86  25                 	db	37
   366  000F87  2E                 	db	46
   367  000F88  32                 	db	50	;'2'
   368  000F89  66                 	db	102	;'f'
   369  000F8A  20                 	db	32
   370  000F8B  20                 	db	32
   371  000F8C  20                 	db	32
   372  000F8D  6B                 	db	107	;'k'
   373  000F8E  69                 	db	105	;'i'
   374  000F8F  3A                 	db	58	;':'
   375  000F90  20                 	db	32
   376  000F91  25                 	db	37
   377  000F92  2E                 	db	46
   378  000F93  33                 	db	51	;'3'
   379  000F94  66                 	db	102	;'f'
   380  000F95  20                 	db	32
   381  000F96  20                 	db	32
   382  000F97  20                 	db	32
   383  000F98  74                 	db	116	;'t'
   384  000F99  68                 	db	104	;'h'
   385  000F9A  72                 	db	114	;'r'
   386  000F9B  6F                 	db	111	;'o'
   387  000F9C  74                 	db	116	;'t'
   388  000F9D  74                 	db	116	;'t'
   389  000F9E  6C                 	db	108	;'l'
   390  000F9F  65                 	db	101	;'e'
   391  000FA0  3A                 	db	58	;':'
   392  000FA1  20                 	db	32
   393  000FA2  25                 	db	37
   394  000FA3  69                 	db	105	;'i'
   395  000FA4  20                 	db	32
   396  000FA5  0A                 	db	10
   397  000FA6  0D                 	db	13
   398  000FA7  00                 	db	0
   399                           
   400                           ; #config settings
   401  000FA8  00                 	db	0	; dummy byte at the end
   402  0000                     
   403                           	psect	cinit
   404  004166                     __pcinit:
   405                           	opt stack 0
   406  004166                     start_initialization:
   407                           	opt stack 0
   408  004166                     __initialization:
   409                           	opt stack 0
   410                           
   411                           ; NVMREG Errata
   412  004166                     	if	3969
   413  004166  8E81               	bsf	129,7,c
   414  004168  9C81               	bcf	129,6,c
   415  00416A                     	endif
   416                           
   417                           ; Clear objects allocated to BANK1 (114 bytes)
   418  00416A  EE01  F000         	lfsr	0,__pbssBANK1
   419  00416E  0E72               	movlw	114
   420  004170                     clear_0:
   421  004170  6AEE               	clrf	postinc0,c
   422  004172  06E8               	decf	wreg,f,c
   423  004174  E1FD               	bnz	clear_0
   424                           
   425                           ; Clear objects allocated to BANK0 (97 bytes)
   426  004176  EE00  F060         	lfsr	0,__pbssBANK0
   427  00417A  0E61               	movlw	97
   428  00417C                     clear_1:
   429  00417C  6AEE               	clrf	postinc0,c
   430  00417E  06E8               	decf	wreg,f,c
   431  004180  E1FD               	bnz	clear_1
   432                           
   433                           ; Clear objects allocated to COMRAM (19 bytes)
   434  004182  EE00  F039         	lfsr	0,__pbssCOMRAM
   435  004186  0E13               	movlw	19
   436  004188                     clear_2:
   437  004188  6AEE               	clrf	postinc0,c
   438  00418A  06E8               	decf	wreg,f,c
   439  00418C  E1FD               	bnz	clear_2
   440  00418E                     end_of_initialization:
   441                           	opt stack 0
   442  00418E                     __end_of__initialization:
   443                           	opt stack 0
   444  00418E  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   445  004190  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   446  004192  0100               	movlb	0
   447  004194  EF3C  F010         	goto	_main	;jump to C main() function
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           
   451                           	psect	bssCOMRAM
   452  000039                     __pbssCOMRAM:
   453                           	opt stack 0
   454  000039                     _TMR2_InterruptHandler:
   455                           	opt stack 0
   456  000039                     	ds	3
   457  00003C                     _timer0ReloadVal16bit:
   458                           	opt stack 0
   459  00003C                     	ds	2
   460  00003E                     I2C1_ISR@pi2c_buf_ptr:
   461                           	opt stack 0
   462  00003E                     	ds	2
   463  000040                     _p_i2c1_trb_current:
   464                           	opt stack 0
   465  000040                     	ds	2
   466  000042                     _throttle2:
   467                           	opt stack 0
   468  000042                     	ds	2
   469  000044                     _throttle1:
   470                           	opt stack 0
   471  000044                     	ds	2
   472  000046                     I2C1_ISR@i2c_10bit_address_restart:
   473                           	opt stack 0
   474  000046                     	ds	1
   475  000047                     I2C1_ISR@i2c_bytes_left:
   476                           	opt stack 0
   477  000047                     	ds	1
   478  000048                     _i2c1_trb_count:
   479                           	opt stack 0
   480  000048                     	ds	1
   481  000049                     _i2c1_state:
   482                           	opt stack 0
   483  000049                     	ds	1
   484  00004A                     I2C1_ISR@i2c_address:
   485                           	opt stack 0
   486  00004A                     	ds	2
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           
   490                           	psect	bssBANK0
   491  000060                     __pbssBANK0:
   492                           	opt stack 0
   493  000060                     _i2c1_object:
   494                           	opt stack 0
   495  000060                     	ds	7
   496  000067                     _rollAcc:
   497                           	opt stack 0
   498  000067                     	ds	3
   499  00006A                     _roll:
   500                           	opt stack 0
   501  00006A                     	ds	3
   502  00006D                     _gz:
   503                           	opt stack 0
   504  00006D                     	ds	3
   505  000070                     _gy:
   506                           	opt stack 0
   507  000070                     	ds	3
   508  000073                     _gx:
   509                           	opt stack 0
   510  000073                     	ds	3
   511  000076                     _az:
   512                           	opt stack 0
   513  000076                     	ds	3
   514  000079                     _ay:
   515                           	opt stack 0
   516  000079                     	ds	3
   517  00007C                     _ax:
   518                           	opt stack 0
   519  00007C                     	ds	3
   520  00007F                     _yawPreviousError:
   521                           	opt stack 0
   522  00007F                     	ds	3
   523  000082                     _yawkd:
   524                           	opt stack 0
   525  000082                     	ds	3
   526  000085                     _yawki:
   527                           	opt stack 0
   528  000085                     	ds	3
   529  000088                     _yawkp:
   530                           	opt stack 0
   531  000088                     	ds	3
   532  00008B                     _pitchIntegral:
   533                           	opt stack 0
   534  00008B                     	ds	3
   535  00008E                     _pitchPreviousError:
   536                           	opt stack 0
   537  00008E                     	ds	3
   538  000091                     _pitchkd:
   539                           	opt stack 0
   540  000091                     	ds	3
   541  000094                     _pitchki:
   542                           	opt stack 0
   543  000094                     	ds	3
   544  000097                     _pitchkp:
   545                           	opt stack 0
   546  000097                     	ds	3
   547  00009A                     _rollIntegral:
   548                           	opt stack 0
   549  00009A                     	ds	3
   550  00009D                     _rollPreviousError:
   551                           	opt stack 0
   552  00009D                     	ds	3
   553  0000A0                     _rollkd:
   554                           	opt stack 0
   555  0000A0                     	ds	3
   556  0000A3                     _rollki:
   557                           	opt stack 0
   558  0000A3                     	ds	3
   559  0000A6                     _rollkp:
   560                           	opt stack 0
   561  0000A6                     	ds	3
   562  0000A9                     _throttle:
   563                           	opt stack 0
   564  0000A9                     	ds	2
   565  0000AB                     _p_i2c1_current:
   566                           	opt stack 0
   567  0000AB                     	ds	2
   568  0000AD                     _throttle4:
   569                           	opt stack 0
   570  0000AD                     	ds	2
   571  0000AF                     _throttle3:
   572                           	opt stack 0
   573  0000AF                     	ds	2
   574  0000B1                     _yawAdj:
   575                           	opt stack 0
   576  0000B1                     	ds	2
   577  0000B3                     _pitchAdj:
   578                           	opt stack 0
   579  0000B3                     	ds	2
   580  0000B5                     _rollAdj:
   581                           	opt stack 0
   582  0000B5                     	ds	2
   583  0000B7                     _beginCounter:
   584                           	opt stack 0
   585  0000B7                     	ds	2
   586  0000B9                     _accCounter:
   587                           	opt stack 0
   588  0000B9                     	ds	1
   589  0000BA                     _begin:
   590                           	opt stack 0
   591  0000BA                     	ds	1
   592  0000BB                     _i2c1_tr_queue:
   593                           	opt stack 0
   594  0000BB                     	ds	6
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           
   598                           	psect	bssBANK1
   599  000100                     __pbssBANK1:
   600                           	opt stack 0
   601  000100                     _pitchAcc:
   602                           	opt stack 0
   603  000100                     	ds	3
   604  000103                     _yaw:
   605                           	opt stack 0
   606  000103                     	ds	3
   607  000106                     _pitch:
   608                           	opt stack 0
   609  000106                     	ds	3
   610  000109                     _yawIntegral:
   611                           	opt stack 0
   612  000109                     	ds	3
   613  00010C                     _gzState:
   614                           	opt stack 0
   615  00010C                     	ds	15
   616  00011B                     _gyState:
   617                           	opt stack 0
   618  00011B                     	ds	15
   619  00012A                     _gxState:
   620                           	opt stack 0
   621  00012A                     	ds	15
   622  000139                     _azState:
   623                           	opt stack 0
   624  000139                     	ds	15
   625  000148                     _ayState:
   626                           	opt stack 0
   627  000148                     	ds	15
   628  000157                     _axState:
   629                           	opt stack 0
   630  000157                     	ds	15
   631  000166                     I2C1_MasterRead@trBlock:
   632                           	opt stack 0
   633  000166                     	ds	6
   634  00016C                     I2C1_MasterWrite@trBlock:
   635                           	opt stack 0
   636  00016C                     	ds	6
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           
   640                           	psect	cstackBANK1
   641  000172                     __pcstackBANK1:
   642                           	opt stack 0
   643  000172                     computeRollPitch@dt:
   644                           	opt stack 0
   645  000172                     _printf$2968:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x0
   649  000172                     	ds	3
   650  000175                     printf@ap:
   651                           	opt stack 0
   652  000175                     _computeRollPitch$2957:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x3
   656  000175                     	ds	2
   657  000177                     printf@flag:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x5
   661  000177                     	ds	1
   662  000178                     _computeRollPitch$2958:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x6
   666  000178                     	ds	1
   667  000179                     printf@exp:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x7
   671  000179                     	ds	2
   672  00017B                     _computeRollPitch$2959:
   673                           	opt stack 0
   674  00017B                     printf@tmpval:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x9
   678  00017B                     	ds	3
   679  00017E                     computeRollPitch@tmr0val:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0xC
   683  00017E                     	ds	1
   684  00017F                     printf@val:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0xD
   688  00017F                     	ds	4
   689  000183                     printf@prec:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x11
   693  000183                     	ds	2
   694  000185                     printf@fval:
   695                           	opt stack 0
   696                           
   697                           ; 3 bytes @ 0x13
   698  000185                     	ds	3
   699  000188                     printf@c:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x16
   703  000188                     	ds	1
   704  000189                     main@c:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x17
   708  000189                     	ds	1
   709  00018A                     main@show:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x18
   713  00018A                     	ds	2
   714  00018C                     main@val:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x1A
   718  00018C                     	ds	3
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           
   722                           	psect	cstackBANK0
   723  0000C1                     __pcstackBANK0:
   724                           	opt stack 0
   725  0000C1                     ?_fabs:
   726                           	opt stack 0
   727  0000C1                     fabs@d:
   728                           	opt stack 0
   729  0000C1                     _fround$2966:
   730                           	opt stack 0
   731  0000C1                     _scale$2967:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x0
   735  0000C1                     	ds	3
   736  0000C4                     scale@scl:
   737                           	opt stack 0
   738  0000C4                     ___ftge@ff1:
   739                           	opt stack 0
   740  0000C4                     _fround$2965:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0x3
   744  0000C4                     	ds	3
   745  0000C7                     fround@prec:
   746                           	opt stack 0
   747  0000C7                     ___ftge@ff2:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x6
   751  0000C7                     	ds	1
   752  0000C8                     ?___ftadd:
   753                           	opt stack 0
   754  0000C8                     ___ftadd@f1:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x7
   758  0000C8                     	ds	2
   759  0000CA                     ??___ftge:
   760                           
   761                           ; 1 bytes @ 0x9
   762  0000CA                     	ds	1
   763  0000CB                     ___ftadd@f2:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0xA
   767  0000CB                     	ds	2
   768  0000CD                     ?_minimum:
   769                           	opt stack 0
   770  0000CD                     ?_maximum:
   771                           	opt stack 0
   772  0000CD                     maximum@x:
   773                           	opt stack 0
   774  0000CD                     minimum@x:
   775                           	opt stack 0
   776                           
   777                           ; 3 bytes @ 0xC
   778  0000CD                     	ds	1
   779  0000CE                     ??___ftadd:
   780                           
   781                           ; 1 bytes @ 0xD
   782  0000CE                     	ds	2
   783  0000D0                     maximum@y:
   784                           	opt stack 0
   785  0000D0                     minimum@y:
   786                           	opt stack 0
   787                           
   788                           ; 3 bytes @ 0xF
   789  0000D0                     	ds	1
   790  0000D1                     ___ftadd@sign:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x10
   794  0000D1                     	ds	1
   795  0000D2                     ___ftadd@exp2:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x11
   799  0000D2                     	ds	1
   800  0000D3                     ___ftadd@exp1:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x12
   804  0000D3                     	ds	1
   805  0000D4                     ?___ftdiv:
   806                           	opt stack 0
   807  0000D4                     ?___ftsub:
   808                           	opt stack 0
   809  0000D4                     ?___fttol:
   810                           	opt stack 0
   811  0000D4                     ___ftdiv@f1:
   812                           	opt stack 0
   813  0000D4                     ___ftsub@f1:
   814                           	opt stack 0
   815  0000D4                     ___fttol@f1:
   816                           	opt stack 0
   817                           
   818                           ; 3 bytes @ 0x13
   819  0000D4                     	ds	3
   820  0000D7                     ___ftdiv@f2:
   821                           	opt stack 0
   822  0000D7                     ___ftsub@f2:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x16
   826  0000D7                     	ds	1
   827  0000D8                     ??___fttol:
   828                           
   829                           ; 1 bytes @ 0x17
   830  0000D8                     	ds	2
   831  0000DA                     ??___ftdiv:
   832                           
   833                           ; 1 bytes @ 0x19
   834  0000DA                     	ds	3
   835  0000DD                     ___ftdiv@cntr:
   836                           	opt stack 0
   837  0000DD                     ___fttol@sign1:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x1C
   841  0000DD                     	ds	1
   842  0000DE                     ___ftdiv@f3:
   843                           	opt stack 0
   844  0000DE                     ___fttol@lval:
   845                           	opt stack 0
   846                           
   847                           ; 4 bytes @ 0x1D
   848  0000DE                     	ds	3
   849  0000E1                     ___ftdiv@exp:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x20
   853  0000E1                     	ds	1
   854  0000E2                     ___ftdiv@sign:
   855                           	opt stack 0
   856  0000E2                     ___fttol@exp1:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x21
   860  0000E2                     	ds	1
   861  0000E3                     ??_readAccel:
   862  0000E3                     ?_printf:
   863                           	opt stack 0
   864  0000E3                     ?_fastatan2:
   865                           	opt stack 0
   866  0000E3                     kalmanUpdate@state:
   867                           	opt stack 0
   868  0000E3                     printf@f:
   869                           	opt stack 0
   870  0000E3                     fastatan2@x:
   871                           	opt stack 0
   872  0000E3                     rollPid@desiredRoll:
   873                           	opt stack 0
   874                           
   875                           ; 3 bytes @ 0x22
   876  0000E3                     	ds	2
   877  0000E5                     kalmanUpdate@measurement:
   878                           	opt stack 0
   879                           
   880                           ; 3 bytes @ 0x24
   881  0000E5                     	ds	1
   882  0000E6                     fastatan2@y:
   883                           	opt stack 0
   884  0000E6                     rollPid@changeInError:
   885                           	opt stack 0
   886                           
   887                           ; 3 bytes @ 0x25
   888  0000E6                     	ds	1
   889  0000E7                     readAccel@aData:
   890                           	opt stack 0
   891                           
   892                           ; 6 bytes @ 0x26
   893  0000E7                     	ds	1
   894  0000E8                     _kalmanUpdate$2964:
   895                           	opt stack 0
   896                           
   897                           ; 3 bytes @ 0x27
   898  0000E8                     	ds	1
   899  0000E9                     _fastatan2$2960:
   900                           	opt stack 0
   901  0000E9                     _rollPid$2963:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x28
   905  0000E9                     	ds	3
   906  0000EC                     rollPid@rollError:
   907                           	opt stack 0
   908  0000EC                     _fastatan2$2961:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0x2B
   912  0000EC                     	ds	3
   913  0000EF                     pid@desiredRoll:
   914                           	opt stack 0
   915  0000EF                     _fastatan2$2962:
   916                           	opt stack 0
   917                           
   918                           ; 3 bytes @ 0x2E
   919  0000EF                     	ds	1
   920  0000F0                     ??_printf:
   921                           
   922                           ; 1 bytes @ 0x2F
   923  0000F0                     	ds	2
   924  0000F2                     fastatan2@s:
   925                           	opt stack 0
   926  0000F2                     pid@desiredPitch:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x31
   930  0000F2                     	ds	3
   931  0000F5                     fastatan2@a:
   932                           	opt stack 0
   933  0000F5                     pid@desiredYaw:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x34
   937  0000F5                     	ds	3
   938  0000F8                     ??_pid:
   939  0000F8                     fastatan2@r:
   940                           	opt stack 0
   941                           
   942                           ; 3 bytes @ 0x37
   943  0000F8                     	ds	3
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           
   947                           	psect	cstackCOMRAM
   948  000001                     __pcstackCOMRAM:
   949                           	opt stack 0
   950  000001                     PWM1_LoadDutyValue@dutyValue:
   951                           	opt stack 0
   952  000001                     PWM2_LoadDutyValue@dutyValue:
   953                           	opt stack 0
   954  000001                     PWM4_LoadDutyValue@dutyValue:
   955                           	opt stack 0
   956  000001                     PWM3_LoadDutyValue@dutyValue:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x0
   960  000001                     	ds	2
   961  000003                     ??_PWM3_LoadDutyValue:
   962  000003                     ??_PWM4_LoadDutyValue:
   963                           
   964                           ; 1 bytes @ 0x2
   965  000003                     	ds	2
   966  000005                     ??_INTERRUPT_InterruptManagerHigh:
   967                           
   968                           ; 1 bytes @ 0x4
   969  000005                     	ds	14
   970  000013                     ??_TMR0_Initialize:
   971  000013                     ??_unlockI2C:
   972  000013                     ??_isdigit:
   973  000013                     ??_checkI2Cbusy:
   974  000013                     ?_TMR0_Read16bitTimer:
   975                           	opt stack 0
   976  000013                     ?___awmod:
   977                           	opt stack 0
   978  000013                     ?___ftpack:
   979                           	opt stack 0
   980  000013                     ?__tdiv_to_l_:
   981                           	opt stack 0
   982  000013                     ?__div_to_l_:
   983                           	opt stack 0
   984  000013                     ?___lldiv:
   985                           	opt stack 0
   986  000013                     PIN_MANAGER_Initialize@state:
   987                           	opt stack 0
   988  000013                     EUSART1_Write@txData:
   989                           	opt stack 0
   990  000013                     TMR0_Write16bitTimer@timerVal:
   991                           	opt stack 0
   992  000013                     ___awmod@dividend:
   993                           	opt stack 0
   994  000013                     TMR2_SetInterruptHandler@InterruptHandler:
   995                           	opt stack 0
   996  000013                     pitchPid@desiredPitch:
   997                           	opt stack 0
   998  000013                     yawPid@desiredYaw:
   999                           	opt stack 0
  1000  000013                     __div_to_l_@f1:
  1001                           	opt stack 0
  1002  000013                     ___ftpack@arg:
  1003                           	opt stack 0
  1004  000013                     __tdiv_to_l_@f1:
  1005                           	opt stack 0
  1006  000013                     ___lldiv@dividend:
  1007                           	opt stack 0
  1008                           
  1009                           ; 4 bytes @ 0x12
  1010  000013                     	ds	1
  1011  000014                     putch@txData:
  1012                           	opt stack 0
  1013  000014                     writei2c@data:
  1014                           	opt stack 0
  1015  000014                     _isdigit$2516:
  1016                           	opt stack 0
  1017  000014                     unlockI2C@i:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x13
  1021  000014                     	ds	1
  1022  000015                     ??_TMR0_Read16bitTimer:
  1023  000015                     writei2cData@reg:
  1024                           	opt stack 0
  1025  000015                     readi2cData@reg:
  1026                           	opt stack 0
  1027  000015                     isdigit@c:
  1028                           	opt stack 0
  1029  000015                     ___awmod@divisor:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x14
  1033  000015                     	ds	1
  1034  000016                     writei2cData@data:
  1035                           	opt stack 0
  1036  000016                     ___ftpack@exp:
  1037                           	opt stack 0
  1038  000016                     readi2cData@data:
  1039                           	opt stack 0
  1040  000016                     __div_to_l_@f2:
  1041                           	opt stack 0
  1042  000016                     __tdiv_to_l_@f2:
  1043                           	opt stack 0
  1044                           
  1045                           ; 3 bytes @ 0x15
  1046  000016                     	ds	1
  1047  000017                     writei2cData@address:
  1048                           	opt stack 0
  1049  000017                     ___awmod@counter:
  1050                           	opt stack 0
  1051  000017                     ___ftpack@sign:
  1052                           	opt stack 0
  1053  000017                     TMR0_Read16bitTimer@readVal:
  1054                           	opt stack 0
  1055  000017                     ___lldiv@divisor:
  1056                           	opt stack 0
  1057                           
  1058                           ; 4 bytes @ 0x16
  1059  000017                     	ds	1
  1060  000018                     ??___ftpack:
  1061  000018                     readi2cData@len:
  1062                           	opt stack 0
  1063  000018                     ___awmod@sign:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x17
  1067  000018                     	ds	1
  1068  000019                     ??_readi2cData:
  1069  000019                     ??__tdiv_to_l_:
  1070  000019                     ?___awdiv:
  1071                           	opt stack 0
  1072  000019                     TMR0_Read16bitTimer@readValLow:
  1073                           	opt stack 0
  1074  000019                     ___awdiv@dividend:
  1075                           	opt stack 0
  1076  000019                     __div_to_l_@quot:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x18
  1080  000019                     	ds	1
  1081  00001A                     TMR0_Read16bitTimer@readValHigh:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x19
  1085  00001A                     	ds	1
  1086  00001B                     ?___awtoft:
  1087                           	opt stack 0
  1088  00001B                     ?___lltoft:
  1089                           	opt stack 0
  1090  00001B                     ?___lwtoft:
  1091                           	opt stack 0
  1092  00001B                     ___awdiv@divisor:
  1093                           	opt stack 0
  1094  00001B                     ___awtoft@c:
  1095                           	opt stack 0
  1096  00001B                     ___lwtoft@c:
  1097                           	opt stack 0
  1098  00001B                     ___lldiv@quotient:
  1099                           	opt stack 0
  1100  00001B                     ___lltoft@c:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x1A
  1104  00001B                     	ds	1
  1105  00001C                     __tdiv_to_l_@quot:
  1106                           	opt stack 0
  1107                           
  1108                           ; 4 bytes @ 0x1B
  1109  00001C                     	ds	1
  1110  00001D                     readi2cData@address:
  1111                           	opt stack 0
  1112  00001D                     ___awdiv@counter:
  1113                           	opt stack 0
  1114  00001D                     __div_to_l_@cntr:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x1C
  1118  00001D                     	ds	1
  1119  00001E                     ___awdiv@sign:
  1120                           	opt stack 0
  1121  00001E                     ___awtoft@sign:
  1122                           	opt stack 0
  1123  00001E                     __div_to_l_@exp1:
  1124                           	opt stack 0
  1125  00001E                     readi2cData@i:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x1D
  1129  00001E                     	ds	1
  1130  00001F                     ??___lltoft:
  1131  00001F                     ___lldiv@counter:
  1132                           	opt stack 0
  1133  00001F                     ___awdiv@quotient:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x1E
  1137  00001F                     	ds	1
  1138  000020                     ??_readGyro:
  1139  000020                     ?___llmod:
  1140                           	opt stack 0
  1141  000020                     __tdiv_to_l_@cntr:
  1142                           	opt stack 0
  1143  000020                     ___llmod@dividend:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0x1F
  1147  000020                     	ds	1
  1148  000021                     ?___wmul:
  1149                           	opt stack 0
  1150  000021                     __tdiv_to_l_@exp1:
  1151                           	opt stack 0
  1152  000021                     ___wmul@multiplier:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x20
  1156  000021                     	ds	2
  1157  000023                     ___lltoft@exp:
  1158                           	opt stack 0
  1159  000023                     ___wmul@multiplicand:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x22
  1163  000023                     	ds	1
  1164  000024                     ___llmod@divisor:
  1165                           	opt stack 0
  1166  000024                     readGyro@gData:
  1167                           	opt stack 0
  1168                           
  1169                           ; 6 bytes @ 0x23
  1170  000024                     	ds	1
  1171  000025                     ___wmul@product:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x24
  1175  000025                     	ds	2
  1176  000027                     ?___ftmul:
  1177                           	opt stack 0
  1178  000027                     ___ftmul@f1:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0x26
  1182  000027                     	ds	1
  1183  000028                     ___llmod@counter:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x27
  1187  000028                     	ds	2
  1188  00002A                     ___ftmul@f2:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0x29
  1192  00002A                     	ds	3
  1193  00002D                     ??___ftmul:
  1194                           
  1195                           ; 1 bytes @ 0x2C
  1196  00002D                     	ds	3
  1197  000030                     ___ftmul@exp:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x2F
  1201  000030                     	ds	1
  1202  000031                     ___ftmul@f3_as_product:
  1203                           	opt stack 0
  1204                           
  1205                           ; 3 bytes @ 0x30
  1206  000031                     	ds	3
  1207  000034                     ___ftmul@cntr:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0x33
  1211  000034                     	ds	1
  1212  000035                     ___ftmul@sign:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x34
  1216  000035                     	ds	1
  1217  000036                     ?_fround:
  1218                           	opt stack 0
  1219  000036                     ?_scale:
  1220                           	opt stack 0
  1221  000036                     ?___ftneg:
  1222                           	opt stack 0
  1223  000036                     ___ftneg@f1:
  1224                           	opt stack 0
  1225                           
  1226                           ; 3 bytes @ 0x35
  1227  000036                     	ds	3
  1228  000039                     postinc0	equ	0xFEE
  1229                           wreg	equ	0xFE8
  1230                           
  1231                           ; 1 bytes @ 0x38
  1232 ;;
  1233 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1234 ;;
  1235 ;; *************** function _main *****************
  1236 ;; Defined at:
  1237 ;;		line 20 in file "main.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;		None
  1240 ;; Auto vars:     Size  Location     Type
  1241 ;;  val             3   26[BANK1 ] float 
  1242 ;;  show            2   24[BANK1 ] int 
  1243 ;;  c               1   23[BANK1 ] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1254 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1256 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1257 ;;Total ram usage:        6 bytes
  1258 ;; Hardware stack levels required when called:    9
  1259 ;; This function calls:
  1260 ;;		_EUSART1_Read
  1261 ;;		_EUSART1_Write
  1262 ;;		_SYSTEM_Initialize
  1263 ;;		___ftadd
  1264 ;;		___ftmul
  1265 ;;		___ftsub
  1266 ;;		___fttol
  1267 ;;		_computeRollPitch
  1268 ;;		_filterData
  1269 ;;		_interrupt_Init
  1270 ;;		_kalman_Init
  1271 ;;		_pid
  1272 ;;		_pid_Init
  1273 ;;		_printf
  1274 ;;		_readSensors
  1275 ;;		_sensors_Init
  1276 ;;		_unlockI2C
  1277 ;; This function is called by:
  1278 ;;		Startup code after reset
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text0
  1283  002078                     __ptext0:
  1284                           	opt stack 0
  1285  002078                     _main:
  1286                           	opt stack 22
  1287                           
  1288                           ;main.c: 22: char c;
  1289                           ;main.c: 23: int show = 0;
  1290                           
  1291                           ;incstack = 0
  1292  002078  0E00               	movlw	0
  1293  00207A  0101               	movlb	1	; () banked
  1294  00207C  6F8B               	movwf	(main@show+1)& (0+255),b
  1295  00207E  0E00               	movlw	0
  1296  002080  6F8A               	movwf	main@show& (0+255),b
  1297                           
  1298                           ; BSR set to: 1
  1299                           ;main.c: 26: unlockI2C();
  1300  002082  EC44  F020         	call	_unlockI2C	;wreg free
  1301                           
  1302                           ;main.c: 29: SYSTEM_Initialize();
  1303  002086  EC2F  F021         	call	_SYSTEM_Initialize	;wreg free
  1304                           
  1305                           ;main.c: 30: interrupt_Init();
  1306  00208A  ECAA  F022         	call	_interrupt_Init	;wreg free
  1307                           
  1308                           ;main.c: 31: sensors_Init();
  1309  00208E  EC93  F022         	call	_sensors_Init	;wreg free
  1310                           
  1311                           ;main.c: 32: kalman_Init();
  1312  002092  EC15  F016         	call	_kalman_Init	;wreg free
  1313                           
  1314                           ;main.c: 33: pid_Init();
  1315  002096  EC26  F01B         	call	_pid_Init	;wreg free
  1316                           
  1317                           ;main.c: 34: TRISBbits.TRISB4 = 0;
  1318  00209A  9889               	bcf	3977,4,c	;volatile
  1319                           
  1320                           ;main.c: 37: while ( !begin ) {readSensors(); filterData(); computeRollPitch();}
  1321  00209C  D006               	goto	l6115
  1322  00209E                     l6111:
  1323  00209E  EC98  F022         	call	_readSensors	;wreg free
  1324  0020A2  ECA7  F01C         	call	_filterData	;wreg free
  1325  0020A6  EC2B  F015         	call	_computeRollPitch	;wreg free
  1326  0020AA                     l6115:
  1327  0020AA  0100               	movlb	0	; () banked
  1328  0020AC  51BA               	movf	_begin& (0+255),w,b
  1329  0020AE  B4D8               	btfsc	status,2,c
  1330  0020B0  D7F6               	goto	l6111
  1331  0020B2                     l6117:
  1332                           
  1333                           ;main.c: 41: {
  1334                           ;main.c: 42: readSensors();
  1335  0020B2  EC98  F022         	call	_readSensors	;wreg free
  1336                           
  1337                           ;main.c: 43: filterData();
  1338  0020B6  ECA7  F01C         	call	_filterData	;wreg free
  1339                           
  1340                           ;main.c: 44: computeRollPitch();
  1341  0020BA  EC2B  F015         	call	_computeRollPitch	;wreg free
  1342                           
  1343                           ;main.c: 45: pid( -5.7, 0, 0 );
  1344  0020BE  0E66               	movlw	102
  1345  0020C0  0100               	movlb	0	; () banked
  1346  0020C2  6FEF               	movwf	pid@desiredRoll& (0+255),b
  1347  0020C4  0EB6               	movlw	182
  1348  0020C6  0100               	movlb	0	; () banked
  1349  0020C8  6FF0               	movwf	(pid@desiredRoll+1)& (0+255),b
  1350  0020CA  0EC0               	movlw	192
  1351  0020CC  0100               	movlb	0	; () banked
  1352  0020CE  6FF1               	movwf	(pid@desiredRoll+2)& (0+255),b
  1353  0020D0  0E00               	movlw	0
  1354  0020D2  0100               	movlb	0	; () banked
  1355  0020D4  6FF2               	movwf	pid@desiredPitch& (0+255),b
  1356  0020D6  0E00               	movlw	0
  1357  0020D8  0100               	movlb	0	; () banked
  1358  0020DA  6FF3               	movwf	(pid@desiredPitch+1)& (0+255),b
  1359  0020DC  0E00               	movlw	0
  1360  0020DE  0100               	movlb	0	; () banked
  1361  0020E0  6FF4               	movwf	(pid@desiredPitch+2)& (0+255),b
  1362  0020E2  0E00               	movlw	0
  1363  0020E4  0100               	movlb	0	; () banked
  1364  0020E6  6FF5               	movwf	pid@desiredYaw& (0+255),b
  1365  0020E8  0E00               	movlw	0
  1366  0020EA  0100               	movlb	0	; () banked
  1367  0020EC  6FF6               	movwf	(pid@desiredYaw+1)& (0+255),b
  1368  0020EE  0E00               	movlw	0
  1369  0020F0  0100               	movlb	0	; () banked
  1370  0020F2  6FF7               	movwf	(pid@desiredYaw+2)& (0+255),b
  1371  0020F4  EC97  F01A         	call	_pid	;wreg free
  1372                           
  1373                           ;main.c: 47: if ( PIR3bits.RC1IF ) {
  1374  0020F8  010E               	movlb	14	; () banked
  1375  0020FA  ABCD               	btfss	205,5,b	;volatile
  1376  0020FC  D0DF               	goto	l6151
  1377                           
  1378                           ; BSR set to: 14
  1379                           ;main.c: 48: c = EUSART1_Read();
  1380  0020FE  EC68  F022         	call	_EUSART1_Read	;wreg free
  1381  002102  0101               	movlb	1	; () banked
  1382  002104  6F89               	movwf	main@c& (0+255),b
  1383                           
  1384                           ;main.c: 50: switch(c){
  1385  002106  D09F               	goto	l6147
  1386  002108                     l6127:
  1387                           
  1388                           ; BSR set to: 1
  1389  002108  C0A6  F0C8         	movff	_rollkp,___ftadd@f1
  1390  00210C  C0A7  F0C9         	movff	_rollkp+1,___ftadd@f1+1
  1391  002110  C0A8  F0CA         	movff	_rollkp+2,___ftadd@f1+2
  1392  002114  0ED7               	movlw	215
  1393  002116  0100               	movlb	0	; () banked
  1394  002118  6FCB               	movwf	___ftadd@f2& (0+255),b
  1395  00211A  0E23               	movlw	35
  1396  00211C  0100               	movlb	0	; () banked
  1397  00211E  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  1398  002120  0E3C               	movlw	60
  1399  002122  0100               	movlb	0	; () banked
  1400  002124  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  1401  002126  ECF6  F012         	call	___ftadd	;wreg free
  1402  00212A  C0C8  F0A6         	movff	?___ftadd,_rollkp
  1403  00212E  C0C9  F0A7         	movff	?___ftadd+1,_rollkp+1
  1404  002132  C0CA  F0A8         	movff	?___ftadd+2,_rollkp+2
  1405  002136  D0A4               	goto	l6149
  1406  002138                     l6129:
  1407  002138  C0A6  F0D4         	movff	_rollkp,___ftsub@f1
  1408  00213C  C0A7  F0D5         	movff	_rollkp+1,___ftsub@f1+1
  1409  002140  C0A8  F0D6         	movff	_rollkp+2,___ftsub@f1+2
  1410  002144  0ED7               	movlw	215
  1411  002146  0100               	movlb	0	; () banked
  1412  002148  6FD7               	movwf	___ftsub@f2& (0+255),b
  1413  00214A  0E23               	movlw	35
  1414  00214C  0100               	movlb	0	; () banked
  1415  00214E  6FD8               	movwf	(___ftsub@f2+1)& (0+255),b
  1416  002150  0E3C               	movlw	60
  1417  002152  0100               	movlb	0	; () banked
  1418  002154  6FD9               	movwf	(___ftsub@f2+2)& (0+255),b
  1419  002156  ECE0  F01F         	call	___ftsub	;wreg free
  1420  00215A  C0D4  F0A6         	movff	?___ftsub,_rollkp
  1421  00215E  C0D5  F0A7         	movff	?___ftsub+1,_rollkp+1
  1422  002162  C0D6  F0A8         	movff	?___ftsub+2,_rollkp+2
  1423  002166  D08C               	goto	l6149
  1424  002168                     l6131:
  1425  002168  C0A0  F0C8         	movff	_rollkd,___ftadd@f1
  1426  00216C  C0A1  F0C9         	movff	_rollkd+1,___ftadd@f1+1
  1427  002170  C0A2  F0CA         	movff	_rollkd+2,___ftadd@f1+2
  1428  002174  0ECD               	movlw	205
  1429  002176  0100               	movlb	0	; () banked
  1430  002178  6FCB               	movwf	___ftadd@f2& (0+255),b
  1431  00217A  0E4C               	movlw	76
  1432  00217C  0100               	movlb	0	; () banked
  1433  00217E  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  1434  002180  0E3D               	movlw	61
  1435  002182  0100               	movlb	0	; () banked
  1436  002184  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  1437  002186  ECF6  F012         	call	___ftadd	;wreg free
  1438  00218A  C0C8  F0A0         	movff	?___ftadd,_rollkd
  1439  00218E  C0C9  F0A1         	movff	?___ftadd+1,_rollkd+1
  1440  002192  C0CA  F0A2         	movff	?___ftadd+2,_rollkd+2
  1441  002196  D074               	goto	l6149
  1442  002198                     l6133:
  1443  002198  C0A0  F0D4         	movff	_rollkd,___ftsub@f1
  1444  00219C  C0A1  F0D5         	movff	_rollkd+1,___ftsub@f1+1
  1445  0021A0  C0A2  F0D6         	movff	_rollkd+2,___ftsub@f1+2
  1446  0021A4  0ECD               	movlw	205
  1447  0021A6  0100               	movlb	0	; () banked
  1448  0021A8  6FD7               	movwf	___ftsub@f2& (0+255),b
  1449  0021AA  0E4C               	movlw	76
  1450  0021AC  0100               	movlb	0	; () banked
  1451  0021AE  6FD8               	movwf	(___ftsub@f2+1)& (0+255),b
  1452  0021B0  0E3D               	movlw	61
  1453  0021B2  0100               	movlb	0	; () banked
  1454  0021B4  6FD9               	movwf	(___ftsub@f2+2)& (0+255),b
  1455  0021B6  ECE0  F01F         	call	___ftsub	;wreg free
  1456  0021BA  C0D4  F0A0         	movff	?___ftsub,_rollkd
  1457  0021BE  C0D5  F0A1         	movff	?___ftsub+1,_rollkd+1
  1458  0021C2  C0D6  F0A2         	movff	?___ftsub+2,_rollkd+2
  1459  0021C6  D05C               	goto	l6149
  1460  0021C8                     l6135:
  1461  0021C8  C0A3  F0C8         	movff	_rollki,___ftadd@f1
  1462  0021CC  C0A4  F0C9         	movff	_rollki+1,___ftadd@f1+1
  1463  0021D0  C0A5  F0CA         	movff	_rollki+2,___ftadd@f1+2
  1464  0021D4  0E12               	movlw	18
  1465  0021D6  0100               	movlb	0	; () banked
  1466  0021D8  6FCB               	movwf	___ftadd@f2& (0+255),b
  1467  0021DA  0E83               	movlw	131
  1468  0021DC  0100               	movlb	0	; () banked
  1469  0021DE  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  1470  0021E0  0E3A               	movlw	58
  1471  0021E2  0100               	movlb	0	; () banked
  1472  0021E4  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  1473  0021E6  ECF6  F012         	call	___ftadd	;wreg free
  1474  0021EA  C0C8  F0A3         	movff	?___ftadd,_rollki
  1475  0021EE  C0C9  F0A4         	movff	?___ftadd+1,_rollki+1
  1476  0021F2  C0CA  F0A5         	movff	?___ftadd+2,_rollki+2
  1477  0021F6  D044               	goto	l6149
  1478  0021F8                     l6137:
  1479  0021F8  C0A3  F0D4         	movff	_rollki,___ftsub@f1
  1480  0021FC  C0A4  F0D5         	movff	_rollki+1,___ftsub@f1+1
  1481  002200  C0A5  F0D6         	movff	_rollki+2,___ftsub@f1+2
  1482  002204  0E12               	movlw	18
  1483  002206  0100               	movlb	0	; () banked
  1484  002208  6FD7               	movwf	___ftsub@f2& (0+255),b
  1485  00220A  0E83               	movlw	131
  1486  00220C  0100               	movlb	0	; () banked
  1487  00220E  6FD8               	movwf	(___ftsub@f2+1)& (0+255),b
  1488  002210  0E3A               	movlw	58
  1489  002212  0100               	movlb	0	; () banked
  1490  002214  6FD9               	movwf	(___ftsub@f2+2)& (0+255),b
  1491  002216  ECE0  F01F         	call	___ftsub	;wreg free
  1492  00221A  C0D4  F0A3         	movff	?___ftsub,_rollki
  1493  00221E  C0D5  F0A4         	movff	?___ftsub+1,_rollki+1
  1494  002222  C0D6  F0A5         	movff	?___ftsub+2,_rollki+2
  1495  002226  D02C               	goto	l6149
  1496  002228                     l6139:
  1497  002228  0E02               	movlw	2
  1498  00222A  0100               	movlb	0	; () banked
  1499  00222C  27A9               	addwf	_throttle& (0+255),f,b
  1500  00222E  0E00               	movlw	0
  1501  002230  D004               	goto	L1
  1502  002232                     l6141:
  1503  002232  0100               	movlb	0	; () banked
  1504  002234  0EFE               	movlw	254
  1505  002236  27A9               	addwf	_throttle& (0+255),f,b
  1506  002238  0EFF               	movlw	255
  1507  00223A                     L1:
  1508  00223A  23AA               	addwfc	(_throttle+1)& (0+255),f,b
  1509  00223C  D021               	goto	l6149
  1510  00223E                     l6143:
  1511  00223E  0E01               	movlw	1
  1512  002240  0101               	movlb	1	; () banked
  1513  002242  1B8A               	xorwf	main@show& (0+255),f,b
  1514                           
  1515                           ; BSR set to: 1
  1516                           ;main.c: 64: }
  1517                           
  1518                           ; BSR set to: 1
  1519                           
  1520                           ;main.c: 63: default: break;
  1521  002244  D01D               	goto	l6149
  1522  002246                     l6147:
  1523                           
  1524                           ; BSR set to: 1
  1525  002246  0101               	movlb	1	; () banked
  1526  002248  5189               	movf	main@c& (0+255),w,b
  1527                           
  1528                           ; Switch size 1, requested type "space"
  1529                           ; Number of cases is 9, Range of values is 97 to 122
  1530                           ; switch strategies available:
  1531                           ; Name         Instructions Cycles
  1532                           ; simple_byte           28    15 (average)
  1533                           ;	Chosen strategy is simple_byte
  1534  00224A  0A61               	xorlw	97	; case 97
  1535  00224C  B4D8               	btfsc	status,2,c
  1536  00224E  D774               	goto	l6129
  1537  002250  0A05               	xorlw	5	; case 100
  1538  002252  B4D8               	btfsc	status,2,c
  1539  002254  D7D1               	goto	l6137
  1540  002256  0A01               	xorlw	1	; case 101
  1541  002258  B4D8               	btfsc	status,2,c
  1542  00225A  D7B6               	goto	l6135
  1543  00225C  0A02               	xorlw	2	; case 103
  1544  00225E  B4D8               	btfsc	status,2,c
  1545  002260  D7E8               	goto	l6141
  1546  002262  0A16               	xorlw	22	; case 113
  1547  002264  B4D8               	btfsc	status,2,c
  1548  002266  D750               	goto	l6127
  1549  002268  0A02               	xorlw	2	; case 115
  1550  00226A  B4D8               	btfsc	status,2,c
  1551  00226C  D795               	goto	l6133
  1552  00226E  0A07               	xorlw	7	; case 116
  1553  002270  B4D8               	btfsc	status,2,c
  1554  002272  D7DA               	goto	l6139
  1555  002274  0A03               	xorlw	3	; case 119
  1556  002276  B4D8               	btfsc	status,2,c
  1557  002278  D777               	goto	l6131
  1558  00227A  0A0D               	xorlw	13	; case 122
  1559  00227C  B4D8               	btfsc	status,2,c
  1560  00227E  D7DF               	goto	l6143
  1561  002280                     l6149:
  1562                           
  1563                           ;main.c: 65: printf( "kp: %.2f   kd: %.2f   ki: %.3f   throttle: %i \n\r", rollkp, rollk
      +                          d, rollki, throttle );
  1564  002280  0E77               	movlw	low STR_1
  1565  002282  0100               	movlb	0	; () banked
  1566  002284  6FE3               	movwf	printf@f& (0+255),b
  1567  002286  0E0F               	movlw	high STR_1
  1568  002288  0100               	movlb	0	; () banked
  1569  00228A  6FE4               	movwf	(printf@f+1)& (0+255),b
  1570  00228C  C0A6  F0E5         	movff	_rollkp,?_printf+2
  1571  002290  C0A7  F0E6         	movff	_rollkp+1,?_printf+3
  1572  002294  C0A8  F0E7         	movff	_rollkp+2,?_printf+4
  1573  002298  C0A0  F0E8         	movff	_rollkd,?_printf+5
  1574  00229C  C0A1  F0E9         	movff	_rollkd+1,?_printf+6
  1575  0022A0  C0A2  F0EA         	movff	_rollkd+2,?_printf+7
  1576  0022A4  C0A3  F0EB         	movff	_rollki,?_printf+8
  1577  0022A8  C0A4  F0EC         	movff	_rollki+1,?_printf+9
  1578  0022AC  C0A5  F0ED         	movff	_rollki+2,?_printf+10
  1579  0022B0  C0A9  F0EE         	movff	_throttle,?_printf+11
  1580  0022B4  C0AA  F0EF         	movff	_throttle+1,?_printf+12
  1581  0022B8  ECD5  F007         	call	_printf	;wreg free
  1582  0022BC                     l6151:
  1583                           
  1584                           ;main.c: 66: }
  1585                           ;main.c: 67: if (show) {
  1586  0022BC  0101               	movlb	1	; () banked
  1587  0022BE  518A               	movf	main@show& (0+255),w,b
  1588  0022C0  0101               	movlb	1	; () banked
  1589  0022C2  118B               	iorwf	(main@show+1)& (0+255),w,b
  1590  0022C4  B4D8               	btfsc	status,2,c
  1591  0022C6  D057               	goto	l6165
  1592                           
  1593                           ; BSR set to: 1
  1594                           ;main.c: 68: float val = roll*100;
  1595  0022C8  C06A  F027         	movff	_roll,___ftmul@f1
  1596  0022CC  C06B  F028         	movff	_roll+1,___ftmul@f1+1
  1597  0022D0  C06C  F029         	movff	_roll+2,___ftmul@f1+2
  1598  0022D4  0E00               	movlw	0
  1599  0022D6  6E2A               	movwf	___ftmul@f2,c
  1600  0022D8  0EC8               	movlw	200
  1601  0022DA  6E2B               	movwf	___ftmul@f2+1,c
  1602  0022DC  0E42               	movlw	66
  1603  0022DE  6E2C               	movwf	___ftmul@f2+2,c
  1604  0022E0  EC2D  F01C         	call	___ftmul	;wreg free
  1605  0022E4  C027  F18C         	movff	?___ftmul,main@val
  1606  0022E8  C028  F18D         	movff	?___ftmul+1,main@val+1
  1607  0022EC  C029  F18E         	movff	?___ftmul+2,main@val+2
  1608                           
  1609                           ;main.c: 69: EUSART1_Write(0xAA);
  1610  0022F0  0EAA               	movlw	170
  1611  0022F2  EC79  F022         	call	_EUSART1_Write
  1612                           
  1613                           ;main.c: 70: EUSART1_Write(((int)(gx))>>8);
  1614  0022F6  C073  F0D4         	movff	_gx,___fttol@f1
  1615  0022FA  C074  F0D5         	movff	_gx+1,___fttol@f1+1
  1616  0022FE  C075  F0D6         	movff	_gx+2,___fttol@f1+2
  1617  002302  EC35  F018         	call	___fttol	;wreg free
  1618  002306  0100               	movlb	0	; () banked
  1619  002308  C0D5  F0D4         	movff	?___fttol+1,?___fttol
  1620  00230C  0100               	movlb	0	; () banked
  1621  00230E  6BD5               	clrf	(?___fttol+1)& (0+255),b
  1622  002310  0100               	movlb	0	; () banked
  1623  002312  BFD4               	btfsc	?___fttol& (0+255),7,b
  1624  002314  69D5               	setf	(?___fttol+1)& (0+255),b
  1625  002316  0100               	movlb	0	; () banked
  1626  002318  51D4               	movf	?___fttol& (0+255),w,b
  1627  00231A  EC79  F022         	call	_EUSART1_Write
  1628                           
  1629                           ;main.c: 71: EUSART1_Write(((int)(gx)));
  1630  00231E  C073  F0D4         	movff	_gx,___fttol@f1
  1631  002322  C074  F0D5         	movff	_gx+1,___fttol@f1+1
  1632  002326  C075  F0D6         	movff	_gx+2,___fttol@f1+2
  1633  00232A  EC35  F018         	call	___fttol	;wreg free
  1634  00232E  0100               	movlb	0	; () banked
  1635  002330  51D4               	movf	?___fttol& (0+255),w,b
  1636  002332  EC79  F022         	call	_EUSART1_Write
  1637                           
  1638                           ;main.c: 72: EUSART1_Write(((int)(val))>>8);
  1639  002336  C18C  F0D4         	movff	main@val,___fttol@f1
  1640  00233A  C18D  F0D5         	movff	main@val+1,___fttol@f1+1
  1641  00233E  C18E  F0D6         	movff	main@val+2,___fttol@f1+2
  1642  002342  EC35  F018         	call	___fttol	;wreg free
  1643  002346  0100               	movlb	0	; () banked
  1644  002348  C0D5  F0D4         	movff	?___fttol+1,?___fttol
  1645  00234C  0100               	movlb	0	; () banked
  1646  00234E  6BD5               	clrf	(?___fttol+1)& (0+255),b
  1647  002350  0100               	movlb	0	; () banked
  1648  002352  BFD4               	btfsc	?___fttol& (0+255),7,b
  1649  002354  69D5               	setf	(?___fttol+1)& (0+255),b
  1650  002356  0100               	movlb	0	; () banked
  1651  002358  51D4               	movf	?___fttol& (0+255),w,b
  1652  00235A  EC79  F022         	call	_EUSART1_Write
  1653                           
  1654                           ;main.c: 73: EUSART1_Write((int)(val));
  1655  00235E  C18C  F0D4         	movff	main@val,___fttol@f1
  1656  002362  C18D  F0D5         	movff	main@val+1,___fttol@f1+1
  1657  002366  C18E  F0D6         	movff	main@val+2,___fttol@f1+2
  1658  00236A  EC35  F018         	call	___fttol	;wreg free
  1659  00236E  0100               	movlb	0	; () banked
  1660  002370  51D4               	movf	?___fttol& (0+255),w,b
  1661  002372  EC79  F022         	call	_EUSART1_Write
  1662  002376                     l6165:
  1663                           
  1664                           ;main.c: 75: }
  1665                           ;main.c: 77: LATBbits.LATB4 ^= 1;
  1666  002376  7884               	btg	3972,4,c	;volatile
  1667  002378  D69C               	goto	l6117
  1668  00237A                     __end_of_main:
  1669                           	opt stack 0
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           status	equ	0xFD8
  1673                           
  1674 ;; *************** function _unlockI2C *****************
  1675 ;; Defined at:
  1676 ;;		line 89 in file "main.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  i               2   19[COMRAM] unsigned int 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1691 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1692 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1693 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1694 ;;Total ram usage:        3 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    4
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text1
  1705  004088                     __ptext1:
  1706                           	opt stack 0
  1707  004088                     _unlockI2C:
  1708                           	opt stack 26
  1709                           
  1710                           ;main.c: 90: unsigned int i = 0;
  1711                           
  1712                           ;incstack = 0
  1713  004088  0E00               	movlw	0
  1714  00408A  6E15               	movwf	unlockI2C@i+1,c
  1715  00408C  0E00               	movlw	0
  1716  00408E  6E14               	movwf	unlockI2C@i,c
  1717                           
  1718                           ;main.c: 91: TRISCbits.TRISC3 = 0;
  1719  004090  968A               	bcf	3978,3,c	;volatile
  1720                           
  1721                           ;main.c: 92: for ( i = 0; i < 40; i++ ) {
  1722  004092  0E00               	movlw	0
  1723  004094  6E15               	movwf	unlockI2C@i+1,c
  1724  004096  0E00               	movlw	0
  1725  004098  6E14               	movwf	unlockI2C@i,c
  1726  00409A                     l5773:
  1727  00409A  5015               	movf	unlockI2C@i+1,w,c
  1728  00409C  E110               	bnz	l731
  1729  00409E  0E28               	movlw	40
  1730  0040A0  5C14               	subwf	unlockI2C@i,w,c
  1731  0040A2  B0D8               	btfsc	status,0,c
  1732  0040A4  0012               	return	
  1733                           
  1734                           ;main.c: 93: LATCbits.LATC3 ^= 1;
  1735  0040A6  7685               	btg	3973,3,c	;volatile
  1736                           
  1737                           ;main.c: 94: _delay((unsigned long)((10)*(48000000/4000.0)));
  1738  0040A8  0E9C               	movlw	156
  1739  0040AA  6E13               	movwf	??_unlockI2C& (0+255),c
  1740  0040AC  0ED7               	movlw	215
  1741  0040AE                     u5537:
  1742  0040AE  2EE8               	decfsz	wreg,f,c
  1743  0040B0  D7FE               	bra	u5537
  1744  0040B2  2E13               	decfsz	??_unlockI2C& (0+255),f,c
  1745  0040B4  D7FC               	bra	u5537
  1746  0040B6  F000               	nop	
  1747  0040B8  4A14               	infsnz	unlockI2C@i,f,c
  1748  0040BA  2A15               	incf	unlockI2C@i+1,f,c
  1749  0040BC  D7EE               	goto	l5773
  1750  0040BE                     l731:
  1751  0040BE  0012               	return		;funcret
  1752  0040C0                     __end_of_unlockI2C:
  1753                           	opt stack 0
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           status	equ	0xFD8
  1757                           
  1758 ;; *************** function _sensors_Init *****************
  1759 ;; Defined at:
  1760 ;;		line 7 in file "sensors.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;		None
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;		None
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		wreg, status,2, status,0, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1778 ;;Total ram usage:        0 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:    8
  1781 ;; This function calls:
  1782 ;;		_accel_Init
  1783 ;;		_gyro_Init
  1784 ;; This function is called by:
  1785 ;;		_main
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text2
  1790  004526                     __ptext2:
  1791                           	opt stack 0
  1792  004526                     _sensors_Init:
  1793                           	opt stack 22
  1794                           
  1795                           ;sensors.c: 8: accel_Init();
  1796                           
  1797                           ;incstack = 0
  1798  004526  EC46  F021         	call	_accel_Init	;wreg free
  1799                           
  1800                           ;sensors.c: 9: gyro_Init();
  1801  00452A  ECE2  F021         	call	_gyro_Init	;wreg free
  1802  00452E  0012               	return		;funcret
  1803  004530                     __end_of_sensors_Init:
  1804                           	opt stack 0
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           status	equ	0xFD8
  1808                           
  1809 ;; *************** function _gyro_Init *****************
  1810 ;; Defined at:
  1811 ;;		line 18 in file "sensors.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;		None
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		wreg, status,2, status,0, cstack
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1829 ;;Total ram usage:        0 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:    7
  1832 ;; This function calls:
  1833 ;;		_writei2cData
  1834 ;; This function is called by:
  1835 ;;		_sensors_Init
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text3
  1840  0043C4                     __ptext3:
  1841                           	opt stack 0
  1842  0043C4                     _gyro_Init:
  1843                           	opt stack 22
  1844                           
  1845                           ;sensors.c: 19: writei2cData( 0b11010110, 0x20, 0xAF );
  1846                           
  1847                           ;incstack = 0
  1848  0043C4  0E20               	movlw	32
  1849  0043C6  6E15               	movwf	writei2cData@reg,c
  1850  0043C8  0EAF               	movlw	175
  1851  0043CA  6E16               	movwf	writei2cData@data,c
  1852  0043CC  0ED6               	movlw	214
  1853  0043CE  ECF1  F021         	call	_writei2cData
  1854                           
  1855                           ;sensors.c: 20: writei2cData( 0b11010110, 0x23, 0x10 );
  1856  0043D2  0E23               	movlw	35
  1857  0043D4  6E15               	movwf	writei2cData@reg,c
  1858  0043D6  0E10               	movlw	16
  1859  0043D8  6E16               	movwf	writei2cData@data,c
  1860  0043DA  0ED6               	movlw	214
  1861  0043DC  ECF1  F021         	call	_writei2cData
  1862  0043E0  0012               	return		;funcret
  1863  0043E2                     __end_of_gyro_Init:
  1864                           	opt stack 0
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _accel_Init *****************
  1870 ;; Defined at:
  1871 ;;		line 12 in file "sensors.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;		None
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;		None
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2, status,0, cstack
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1889 ;;Total ram usage:        0 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:    7
  1892 ;; This function calls:
  1893 ;;		_writei2cData
  1894 ;; This function is called by:
  1895 ;;		_sensors_Init
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text4
  1900  00428C                     __ptext4:
  1901                           	opt stack 0
  1902  00428C                     _accel_Init:
  1903                           	opt stack 22
  1904                           
  1905                           ;sensors.c: 13: writei2cData( 0b00110010, 0x20, 0x37 );
  1906                           
  1907                           ;incstack = 0
  1908  00428C  0E20               	movlw	32
  1909  00428E  6E15               	movwf	writei2cData@reg,c
  1910  004290  0E37               	movlw	55
  1911  004292  6E16               	movwf	writei2cData@data,c
  1912  004294  0E32               	movlw	50
  1913  004296  ECF1  F021         	call	_writei2cData
  1914                           
  1915                           ;sensors.c: 14: writei2cData( 0b00110010, 0x21, 0x00 );
  1916  00429A  0E21               	movlw	33
  1917  00429C  6E15               	movwf	writei2cData@reg,c
  1918  00429E  0E00               	movlw	0
  1919  0042A0  6E16               	movwf	writei2cData@data,c
  1920  0042A2  0E32               	movlw	50
  1921  0042A4  ECF1  F021         	call	_writei2cData
  1922                           
  1923                           ;sensors.c: 15: writei2cData( 0b00110010, 0x22, 0x00 );
  1924  0042A8  0E22               	movlw	34
  1925  0042AA  6E15               	movwf	writei2cData@reg,c
  1926  0042AC  0E00               	movlw	0
  1927  0042AE  6E16               	movwf	writei2cData@data,c
  1928  0042B0  0E32               	movlw	50
  1929  0042B2  ECF1  F021         	call	_writei2cData
  1930  0042B6  0012               	return		;funcret
  1931  0042B8                     __end_of_accel_Init:
  1932                           	opt stack 0
  1933                           postinc0	equ	0xFEE
  1934                           wreg	equ	0xFE8
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _writei2cData *****************
  1938 ;; Defined at:
  1939 ;;		line 48 in file "i2c.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  address         1    wreg     unsigned char 
  1942 ;;  reg             1   20[COMRAM] unsigned char 
  1943 ;;  data            1   21[COMRAM] unsigned char 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  address         1   22[COMRAM] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1958 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1959 ;;Total ram usage:        3 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    6
  1962 ;; This function calls:
  1963 ;;		_starti2c
  1964 ;;		_stopi2c
  1965 ;;		_writei2c
  1966 ;; This function is called by:
  1967 ;;		_accel_Init
  1968 ;;		_gyro_Init
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text5
  1973  0043E2                     __ptext5:
  1974                           	opt stack 0
  1975  0043E2                     _writei2cData:
  1976                           	opt stack 22
  1977                           
  1978                           ;incstack = 0
  1979                           ;writei2cData@address stored from wreg
  1980  0043E2  6E17               	movwf	writei2cData@address,c
  1981                           
  1982                           ;i2c.c: 49: starti2c();
  1983  0043E4  EC87  F022         	call	_starti2c	;wreg free
  1984                           
  1985                           ;i2c.c: 50: writei2c( address );
  1986  0043E8  5017               	movf	writei2cData@address,w,c
  1987  0043EA  EC55  F022         	call	_writei2c
  1988                           
  1989                           ;i2c.c: 51: writei2c( reg );
  1990  0043EE  5015               	movf	writei2cData@reg,w,c
  1991  0043F0  EC55  F022         	call	_writei2c
  1992                           
  1993                           ;i2c.c: 52: writei2c( data );
  1994  0043F4  5016               	movf	writei2cData@data,w,c
  1995  0043F6  EC55  F022         	call	_writei2c
  1996                           
  1997                           ;i2c.c: 53: stopi2c();
  1998  0043FA  ECAD  F022         	call	_stopi2c	;wreg free
  1999  0043FE  0012               	return		;funcret
  2000  004400                     __end_of_writei2cData:
  2001                           	opt stack 0
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function _readSensors *****************
  2007 ;; Defined at:
  2008 ;;		line 23 in file "sensors.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;		None
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  1    wreg      void 
  2015 ;; Registers used:
  2016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2026 ;;Total ram usage:        0 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    8
  2029 ;; This function calls:
  2030 ;;		_readAccel
  2031 ;;		_readGyro
  2032 ;; This function is called by:
  2033 ;;		_main
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text6
  2038  004530                     __ptext6:
  2039                           	opt stack 0
  2040  004530                     _readSensors:
  2041                           	opt stack 22
  2042                           
  2043                           ;sensors.c: 24: readAccel();
  2044                           
  2045                           ;incstack = 0
  2046  004530  EC04  F01A         	call	_readAccel	;wreg free
  2047                           
  2048                           ;sensors.c: 25: readGyro();
  2049  004534  EC7C  F01E         	call	_readGyro	;wreg free
  2050  004538  0012               	return		;funcret
  2051  00453A                     __end_of_readSensors:
  2052                           	opt stack 0
  2053                           postinc0	equ	0xFEE
  2054                           wreg	equ	0xFE8
  2055                           status	equ	0xFD8
  2056                           
  2057 ;; *************** function _readGyro *****************
  2058 ;; Defined at:
  2059 ;;		line 41 in file "sensors.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;		None
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;  gData           6   35[COMRAM] unsigned char [6]
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2074 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2075 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2076 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2077 ;;Total ram usage:       10 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    7
  2080 ;; This function calls:
  2081 ;;		___awtoft
  2082 ;;		_readi2cData
  2083 ;; This function is called by:
  2084 ;;		_readSensors
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           	psect	text7
  2089  003CF8                     __ptext7:
  2090                           	opt stack 0
  2091  003CF8                     _readGyro:
  2092                           	opt stack 22
  2093                           
  2094                           ;sensors.c: 43: uint8_t gData[6];
  2095                           ;sensors.c: 46: readi2cData( 0b11010110, 0xA8, gData, 6 );
  2096                           
  2097                           ;incstack = 0
  2098  003CF8  0EA8               	movlw	168
  2099  003CFA  6E15               	movwf	readi2cData@reg,c
  2100  003CFC  0E24               	movlw	low readGyro@gData
  2101  003CFE  6E16               	movwf	readi2cData@data,c
  2102  003D00  0E00               	movlw	high readGyro@gData
  2103  003D02  6E17               	movwf	readi2cData@data+1,c
  2104  003D04  0E06               	movlw	6
  2105  003D06  6E18               	movwf	readi2cData@len,c
  2106  003D08  0ED6               	movlw	214
  2107  003D0A  ECDB  F01D         	call	_readi2cData
  2108                           
  2109                           ;sensors.c: 49: gx = (float)((int)gData[0] | ((int)gData[1] << 8));
  2110  003D0E  5025               	movf	readGyro@gData+1,w,c
  2111  003D10  6E21               	movwf	(??_readGyro+1)& (0+255),c
  2112  003D12  6A20               	clrf	??_readGyro& (0+255),c
  2113  003D14  5024               	movf	readGyro@gData,w,c
  2114  003D16  6E22               	movwf	(??_readGyro+2)& (0+255),c
  2115  003D18  6A23               	clrf	(??_readGyro+3)& (0+255),c
  2116  003D1A  5020               	movf	??_readGyro,w,c
  2117  003D1C  1022               	iorwf	??_readGyro+2,w,c
  2118  003D1E  6E1B               	movwf	___awtoft@c,c
  2119  003D20  5021               	movf	??_readGyro+1,w,c
  2120  003D22  1023               	iorwf	??_readGyro+3,w,c
  2121  003D24  6E1C               	movwf	___awtoft@c+1,c
  2122  003D26  EC60  F020         	call	___awtoft	;wreg free
  2123  003D2A  C01B  F073         	movff	?___awtoft,_gx
  2124  003D2E  C01C  F074         	movff	?___awtoft+1,_gx+1
  2125  003D32  C01D  F075         	movff	?___awtoft+2,_gx+2
  2126                           
  2127                           ;sensors.c: 50: gy = (float)((int)gData[2] | ((int)gData[3] << 8));
  2128  003D36  5027               	movf	readGyro@gData+3,w,c
  2129  003D38  6E21               	movwf	(??_readGyro+1)& (0+255),c
  2130  003D3A  6A20               	clrf	??_readGyro& (0+255),c
  2131  003D3C  5026               	movf	readGyro@gData+2,w,c
  2132  003D3E  6E22               	movwf	(??_readGyro+2)& (0+255),c
  2133  003D40  6A23               	clrf	(??_readGyro+3)& (0+255),c
  2134  003D42  5020               	movf	??_readGyro,w,c
  2135  003D44  1022               	iorwf	??_readGyro+2,w,c
  2136  003D46  6E1B               	movwf	___awtoft@c,c
  2137  003D48  5021               	movf	??_readGyro+1,w,c
  2138  003D4A  1023               	iorwf	??_readGyro+3,w,c
  2139  003D4C  6E1C               	movwf	___awtoft@c+1,c
  2140  003D4E  EC60  F020         	call	___awtoft	;wreg free
  2141  003D52  C01B  F070         	movff	?___awtoft,_gy
  2142  003D56  C01C  F071         	movff	?___awtoft+1,_gy+1
  2143  003D5A  C01D  F072         	movff	?___awtoft+2,_gy+2
  2144                           
  2145                           ;sensors.c: 51: gz = (float)((int)gData[4] | ((int)gData[5] << 8));
  2146  003D5E  5029               	movf	readGyro@gData+5,w,c
  2147  003D60  6E21               	movwf	(??_readGyro+1)& (0+255),c
  2148  003D62  6A20               	clrf	??_readGyro& (0+255),c
  2149  003D64  5028               	movf	readGyro@gData+4,w,c
  2150  003D66  6E22               	movwf	(??_readGyro+2)& (0+255),c
  2151  003D68  6A23               	clrf	(??_readGyro+3)& (0+255),c
  2152  003D6A  5020               	movf	??_readGyro,w,c
  2153  003D6C  1022               	iorwf	??_readGyro+2,w,c
  2154  003D6E  6E1B               	movwf	___awtoft@c,c
  2155  003D70  5021               	movf	??_readGyro+1,w,c
  2156  003D72  1023               	iorwf	??_readGyro+3,w,c
  2157  003D74  6E1C               	movwf	___awtoft@c+1,c
  2158  003D76  EC60  F020         	call	___awtoft	;wreg free
  2159  003D7A  C01B  F06D         	movff	?___awtoft,_gz
  2160  003D7E  C01C  F06E         	movff	?___awtoft+1,_gz+1
  2161  003D82  C01D  F06F         	movff	?___awtoft+2,_gz+2
  2162  003D86  0012               	return		;funcret
  2163  003D88                     __end_of_readGyro:
  2164                           	opt stack 0
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _readAccel *****************
  2170 ;; Defined at:
  2171 ;;		line 28 in file "sensors.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;		None
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  aData           6   38[BANK0 ] unsigned char [6]
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2186 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2187 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2188 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2189 ;;Total ram usage:       10 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    7
  2192 ;; This function calls:
  2193 ;;		___awtoft
  2194 ;;		___ftdiv
  2195 ;;		_readi2cData
  2196 ;; This function is called by:
  2197 ;;		_readSensors
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text8
  2202  003408                     __ptext8:
  2203                           	opt stack 0
  2204  003408                     _readAccel:
  2205                           	opt stack 22
  2206                           
  2207                           ;sensors.c: 30: uint8_t aData[6];
  2208                           ;sensors.c: 33: readi2cData( 0b00110010, 0xA8, aData, 6 );
  2209                           
  2210                           ;incstack = 0
  2211  003408  0EA8               	movlw	168
  2212  00340A  6E15               	movwf	readi2cData@reg,c
  2213  00340C  0EE7               	movlw	low readAccel@aData
  2214  00340E  6E16               	movwf	readi2cData@data,c
  2215  003410  0E00               	movlw	high readAccel@aData
  2216  003412  6E17               	movwf	readi2cData@data+1,c
  2217  003414  0E06               	movlw	6
  2218  003416  6E18               	movwf	readi2cData@len,c
  2219  003418  0E32               	movlw	50
  2220  00341A  ECDB  F01D         	call	_readi2cData
  2221                           
  2222                           ;sensors.c: 36: ax = (float)((int)aData[0] | ((int)aData[1] << 8))/16;
  2223  00341E  0100               	movlb	0	; () banked
  2224  003420  51E8               	movf	(readAccel@aData+1)& (0+255),w,b
  2225  003422  0100               	movlb	0	; () banked
  2226  003424  6FE4               	movwf	(??_readAccel+1)& (0+255),b
  2227  003426  6BE3               	clrf	??_readAccel& (0+255),b
  2228  003428  0100               	movlb	0	; () banked
  2229  00342A  51E7               	movf	readAccel@aData& (0+255),w,b
  2230  00342C  0100               	movlb	0	; () banked
  2231  00342E  6FE5               	movwf	(??_readAccel+2)& (0+255),b
  2232  003430  6BE6               	clrf	(??_readAccel+3)& (0+255),b
  2233  003432  0100               	movlb	0	; () banked
  2234  003434  51E3               	movf	??_readAccel& (0+255),w,b
  2235  003436  0100               	movlb	0	; () banked
  2236  003438  11E5               	iorwf	(??_readAccel+2)& (0+255),w,b
  2237  00343A  6E1B               	movwf	___awtoft@c,c
  2238  00343C  0100               	movlb	0	; () banked
  2239  00343E  51E4               	movf	(??_readAccel+1)& (0+255),w,b
  2240  003440  0100               	movlb	0	; () banked
  2241  003442  11E6               	iorwf	(??_readAccel+3)& (0+255),w,b
  2242  003444  6E1C               	movwf	___awtoft@c+1,c
  2243  003446  EC60  F020         	call	___awtoft	;wreg free
  2244  00344A  C01B  F0D4         	movff	?___awtoft,___ftdiv@f1
  2245  00344E  C01C  F0D5         	movff	?___awtoft+1,___ftdiv@f1+1
  2246  003452  C01D  F0D6         	movff	?___awtoft+2,___ftdiv@f1+2
  2247  003456  0E00               	movlw	0
  2248  003458  0100               	movlb	0	; () banked
  2249  00345A  6FD7               	movwf	___ftdiv@f2& (0+255),b
  2250  00345C  0E80               	movlw	128
  2251  00345E  0100               	movlb	0	; () banked
  2252  003460  6FD8               	movwf	(___ftdiv@f2+1)& (0+255),b
  2253  003462  0E41               	movlw	65
  2254  003464  0100               	movlb	0	; () banked
  2255  003466  6FD9               	movwf	(___ftdiv@f2+2)& (0+255),b
  2256  003468  EC8F  F017         	call	___ftdiv	;wreg free
  2257  00346C  C0D4  F07C         	movff	?___ftdiv,_ax
  2258  003470  C0D5  F07D         	movff	?___ftdiv+1,_ax+1
  2259  003474  C0D6  F07E         	movff	?___ftdiv+2,_ax+2
  2260                           
  2261                           ;sensors.c: 37: ay = (float)((int)aData[2] | ((int)aData[3] << 8))/16;
  2262  003478  0100               	movlb	0	; () banked
  2263  00347A  51EA               	movf	(readAccel@aData+3)& (0+255),w,b
  2264  00347C  0100               	movlb	0	; () banked
  2265  00347E  6FE4               	movwf	(??_readAccel+1)& (0+255),b
  2266  003480  6BE3               	clrf	??_readAccel& (0+255),b
  2267  003482  0100               	movlb	0	; () banked
  2268  003484  51E9               	movf	(readAccel@aData+2)& (0+255),w,b
  2269  003486  0100               	movlb	0	; () banked
  2270  003488  6FE5               	movwf	(??_readAccel+2)& (0+255),b
  2271  00348A  6BE6               	clrf	(??_readAccel+3)& (0+255),b
  2272  00348C  0100               	movlb	0	; () banked
  2273  00348E  51E3               	movf	??_readAccel& (0+255),w,b
  2274  003490  0100               	movlb	0	; () banked
  2275  003492  11E5               	iorwf	(??_readAccel+2)& (0+255),w,b
  2276  003494  6E1B               	movwf	___awtoft@c,c
  2277  003496  0100               	movlb	0	; () banked
  2278  003498  51E4               	movf	(??_readAccel+1)& (0+255),w,b
  2279  00349A  0100               	movlb	0	; () banked
  2280  00349C  11E6               	iorwf	(??_readAccel+3)& (0+255),w,b
  2281  00349E  6E1C               	movwf	___awtoft@c+1,c
  2282  0034A0  EC60  F020         	call	___awtoft	;wreg free
  2283  0034A4  C01B  F0D4         	movff	?___awtoft,___ftdiv@f1
  2284  0034A8  C01C  F0D5         	movff	?___awtoft+1,___ftdiv@f1+1
  2285  0034AC  C01D  F0D6         	movff	?___awtoft+2,___ftdiv@f1+2
  2286  0034B0  0E00               	movlw	0
  2287  0034B2  0100               	movlb	0	; () banked
  2288  0034B4  6FD7               	movwf	___ftdiv@f2& (0+255),b
  2289  0034B6  0E80               	movlw	128
  2290  0034B8  0100               	movlb	0	; () banked
  2291  0034BA  6FD8               	movwf	(___ftdiv@f2+1)& (0+255),b
  2292  0034BC  0E41               	movlw	65
  2293  0034BE  0100               	movlb	0	; () banked
  2294  0034C0  6FD9               	movwf	(___ftdiv@f2+2)& (0+255),b
  2295  0034C2  EC8F  F017         	call	___ftdiv	;wreg free
  2296  0034C6  C0D4  F079         	movff	?___ftdiv,_ay
  2297  0034CA  C0D5  F07A         	movff	?___ftdiv+1,_ay+1
  2298  0034CE  C0D6  F07B         	movff	?___ftdiv+2,_ay+2
  2299                           
  2300                           ;sensors.c: 38: az = (float)((int)aData[4] | ((int)aData[5] << 8))/16;
  2301  0034D2  0100               	movlb	0	; () banked
  2302  0034D4  51EC               	movf	(readAccel@aData+5)& (0+255),w,b
  2303  0034D6  0100               	movlb	0	; () banked
  2304  0034D8  6FE4               	movwf	(??_readAccel+1)& (0+255),b
  2305  0034DA  6BE3               	clrf	??_readAccel& (0+255),b
  2306  0034DC  0100               	movlb	0	; () banked
  2307  0034DE  51EB               	movf	(readAccel@aData+4)& (0+255),w,b
  2308  0034E0  0100               	movlb	0	; () banked
  2309  0034E2  6FE5               	movwf	(??_readAccel+2)& (0+255),b
  2310  0034E4  6BE6               	clrf	(??_readAccel+3)& (0+255),b
  2311  0034E6  0100               	movlb	0	; () banked
  2312  0034E8  51E3               	movf	??_readAccel& (0+255),w,b
  2313  0034EA  0100               	movlb	0	; () banked
  2314  0034EC  11E5               	iorwf	(??_readAccel+2)& (0+255),w,b
  2315  0034EE  6E1B               	movwf	___awtoft@c,c
  2316  0034F0  0100               	movlb	0	; () banked
  2317  0034F2  51E4               	movf	(??_readAccel+1)& (0+255),w,b
  2318  0034F4  0100               	movlb	0	; () banked
  2319  0034F6  11E6               	iorwf	(??_readAccel+3)& (0+255),w,b
  2320  0034F8  6E1C               	movwf	___awtoft@c+1,c
  2321  0034FA  EC60  F020         	call	___awtoft	;wreg free
  2322  0034FE  C01B  F0D4         	movff	?___awtoft,___ftdiv@f1
  2323  003502  C01C  F0D5         	movff	?___awtoft+1,___ftdiv@f1+1
  2324  003506  C01D  F0D6         	movff	?___awtoft+2,___ftdiv@f1+2
  2325  00350A  0E00               	movlw	0
  2326  00350C  0100               	movlb	0	; () banked
  2327  00350E  6FD7               	movwf	___ftdiv@f2& (0+255),b
  2328  003510  0E80               	movlw	128
  2329  003512  0100               	movlb	0	; () banked
  2330  003514  6FD8               	movwf	(___ftdiv@f2+1)& (0+255),b
  2331  003516  0E41               	movlw	65
  2332  003518  0100               	movlb	0	; () banked
  2333  00351A  6FD9               	movwf	(___ftdiv@f2+2)& (0+255),b
  2334  00351C  EC8F  F017         	call	___ftdiv	;wreg free
  2335  003520  C0D4  F076         	movff	?___ftdiv,_az
  2336  003524  C0D5  F077         	movff	?___ftdiv+1,_az+1
  2337  003528  C0D6  F078         	movff	?___ftdiv+2,_az+2
  2338  00352C  0012               	return		;funcret
  2339  00352E                     __end_of_readAccel:
  2340                           	opt stack 0
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _readi2cData *****************
  2346 ;; Defined at:
  2347 ;;		line 56 in file "i2c.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  address         1    wreg     unsigned char 
  2350 ;;  reg             1   20[COMRAM] unsigned char 
  2351 ;;  data            2   21[COMRAM] PTR unsigned char 
  2352 ;;		 -> readGyro@gData(6), readAccel@aData(6), 
  2353 ;;  len             1   23[COMRAM] unsigned char 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  address         1   28[COMRAM] unsigned char 
  2356 ;;  i               2   29[COMRAM] unsigned int 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2366 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2367 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2368 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2369 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2370 ;;Total ram usage:       11 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    6
  2373 ;; This function calls:
  2374 ;;		_acki2c
  2375 ;;		_checkI2Cbusy
  2376 ;;		_readi2c
  2377 ;;		_starti2c
  2378 ;;		_stopi2c
  2379 ;;		_writei2c
  2380 ;; This function is called by:
  2381 ;;		_readAccel
  2382 ;;		_readGyro
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text9
  2387  003BB6                     __ptext9:
  2388                           	opt stack 0
  2389  003BB6                     _readi2cData:
  2390                           	opt stack 22
  2391                           
  2392                           ;incstack = 0
  2393                           ;readi2cData@address stored from wreg
  2394  003BB6  6E1D               	movwf	readi2cData@address,c
  2395                           
  2396                           ;i2c.c: 57: unsigned int i = 0;
  2397  003BB8  0E00               	movlw	0
  2398  003BBA  6E1F               	movwf	readi2cData@i+1,c
  2399  003BBC  0E00               	movlw	0
  2400  003BBE  6E1E               	movwf	readi2cData@i,c
  2401                           
  2402                           ;i2c.c: 59: starti2c();
  2403  003BC0  EC87  F022         	call	_starti2c	;wreg free
  2404                           
  2405                           ;i2c.c: 60: writei2c(address & ~0x01);
  2406  003BC4  501D               	movf	readi2cData@address,w,c
  2407  003BC6  0BFE               	andlw	254
  2408  003BC8  EC55  F022         	call	_writei2c
  2409                           
  2410                           ;i2c.c: 61: writei2c(reg);
  2411  003BCC  5015               	movf	readi2cData@reg,w,c
  2412  003BCE  EC55  F022         	call	_writei2c
  2413                           
  2414                           ;i2c.c: 62: stopi2c();
  2415  003BD2  ECAD  F022         	call	_stopi2c	;wreg free
  2416                           
  2417                           ;i2c.c: 64: starti2c();
  2418  003BD6  EC87  F022         	call	_starti2c	;wreg free
  2419                           
  2420                           ;i2c.c: 65: writei2c(address | 0x01);
  2421  003BDA  501D               	movf	readi2cData@address,w,c
  2422  003BDC  0901               	iorlw	1
  2423  003BDE  EC55  F022         	call	_writei2c
  2424                           
  2425                           ;i2c.c: 67: for ( i = 0; i < len-1; i++) {
  2426  003BE2  0E00               	movlw	0
  2427  003BE4  6E1F               	movwf	readi2cData@i+1,c
  2428  003BE6  0E00               	movlw	0
  2429  003BE8  6E1E               	movwf	readi2cData@i,c
  2430  003BEA  D011               	goto	l5027
  2431  003BEC                     l5017:
  2432                           
  2433                           ;i2c.c: 68: data[i] = readi2c();
  2434  003BEC  501E               	movf	readi2cData@i,w,c
  2435  003BEE  2416               	addwf	readi2cData@data,w,c
  2436  003BF0  6ED9               	movwf	fsr2l,c
  2437  003BF2  501F               	movf	readi2cData@i+1,w,c
  2438  003BF4  2017               	addwfc	readi2cData@data+1,w,c
  2439  003BF6  6EDA               	movwf	fsr2h,c
  2440  003BF8  EC71  F022         	call	_readi2c	;wreg free
  2441  003BFC  6EDF               	movwf	indf2,c
  2442                           
  2443                           ;i2c.c: 69: checkI2Cbusy();
  2444  003BFE  EC5F  F022         	call	_checkI2Cbusy	;wreg free
  2445                           
  2446                           ;i2c.c: 70: acki2c();
  2447  003C02  ECA7  F022         	call	_acki2c	;wreg free
  2448                           
  2449                           ;i2c.c: 71: checkI2Cbusy();
  2450  003C06  EC5F  F022         	call	_checkI2Cbusy	;wreg free
  2451  003C0A  4A1E               	infsnz	readi2cData@i,f,c
  2452  003C0C  2A1F               	incf	readi2cData@i+1,f,c
  2453  003C0E                     l5027:
  2454  003C0E  0EFF               	movlw	255
  2455  003C10  6E19               	movwf	??_readi2cData& (0+255),c
  2456  003C12  0EFF               	movlw	255
  2457  003C14  6E1A               	movwf	(??_readi2cData+1)& (0+255),c
  2458  003C16  5018               	movf	readi2cData@len,w,c
  2459  003C18  6E1B               	movwf	(??_readi2cData+2)& (0+255),c
  2460  003C1A  6A1C               	clrf	(??_readi2cData+3)& (0+255),c
  2461  003C1C  5019               	movf	??_readi2cData,w,c
  2462  003C1E  261B               	addwf	??_readi2cData+2,f,c
  2463  003C20  501A               	movf	??_readi2cData+1,w,c
  2464  003C22  221C               	addwfc	??_readi2cData+3,f,c
  2465  003C24  501B               	movf	??_readi2cData+2,w,c
  2466  003C26  5C1E               	subwf	readi2cData@i,w,c
  2467  003C28  501C               	movf	??_readi2cData+3,w,c
  2468  003C2A  581F               	subwfb	readi2cData@i+1,w,c
  2469  003C2C  A0D8               	btfss	status,0,c
  2470  003C2E  D7DE               	goto	l5017
  2471                           
  2472                           ;i2c.c: 72: }
  2473                           ;i2c.c: 74: data[len-1] = readi2c();
  2474  003C30  0EFF               	movlw	255
  2475  003C32  6E19               	movwf	??_readi2cData& (0+255),c
  2476  003C34  0EFF               	movlw	255
  2477  003C36  6E1A               	movwf	(??_readi2cData+1)& (0+255),c
  2478  003C38  5018               	movf	readi2cData@len,w,c
  2479  003C3A  6E1B               	movwf	(??_readi2cData+2)& (0+255),c
  2480  003C3C  6A1C               	clrf	(??_readi2cData+3)& (0+255),c
  2481  003C3E  5019               	movf	??_readi2cData,w,c
  2482  003C40  261B               	addwf	??_readi2cData+2,f,c
  2483  003C42  501A               	movf	??_readi2cData+1,w,c
  2484  003C44  221C               	addwfc	??_readi2cData+3,f,c
  2485  003C46  501B               	movf	??_readi2cData+2,w,c
  2486  003C48  2416               	addwf	readi2cData@data,w,c
  2487  003C4A  6ED9               	movwf	fsr2l,c
  2488  003C4C  501C               	movf	??_readi2cData+3,w,c
  2489  003C4E  2017               	addwfc	readi2cData@data+1,w,c
  2490  003C50  6EDA               	movwf	fsr2h,c
  2491  003C52  EC71  F022         	call	_readi2c	;wreg free
  2492  003C56  6EDF               	movwf	indf2,c
  2493                           
  2494                           ;i2c.c: 75: checkI2Cbusy();
  2495  003C58  EC5F  F022         	call	_checkI2Cbusy	;wreg free
  2496                           
  2497                           ;i2c.c: 76: stopi2c();
  2498  003C5C  ECAD  F022         	call	_stopi2c	;wreg free
  2499  003C60  0012               	return		;funcret
  2500  003C62                     __end_of_readi2cData:
  2501                           	opt stack 0
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           indf2	equ	0xFDF
  2505                           fsr2h	equ	0xFDA
  2506                           fsr2l	equ	0xFD9
  2507                           status	equ	0xFD8
  2508                           
  2509 ;; *************** function _writei2c *****************
  2510 ;; Defined at:
  2511 ;;		line 17 in file "i2c.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  data            1    wreg     unsigned char 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  data            1   19[COMRAM] unsigned char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      void 
  2518 ;; Registers used:
  2519 ;;		wreg, status,2, status,0, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2526 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2528 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2529 ;;Total ram usage:        1 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    5
  2532 ;; This function calls:
  2533 ;;		_checkI2Cbusy
  2534 ;; This function is called by:
  2535 ;;		_writei2cData
  2536 ;;		_readi2cData
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text10
  2541  0044AA                     __ptext10:
  2542                           	opt stack 0
  2543  0044AA                     _writei2c:
  2544                           	opt stack 22
  2545                           
  2546                           ;incstack = 0
  2547                           ;writei2c@data stored from wreg
  2548  0044AA  6E14               	movwf	writei2c@data,c
  2549                           
  2550                           ;i2c.c: 18: checkI2Cbusy();
  2551  0044AC  EC5F  F022         	call	_checkI2Cbusy	;wreg free
  2552                           
  2553                           ;i2c.c: 19: SSP1BUF = data;
  2554  0044B0  C014  FF92         	movff	writei2c@data,3986	;volatile
  2555  0044B4                     l859:
  2556  0044B4  B095               	btfsc	3989,0,c	;volatile
  2557  0044B6  D7FE               	goto	l859
  2558                           
  2559                           ;i2c.c: 21: checkI2Cbusy();
  2560  0044B8  EC5F  F022         	call	_checkI2Cbusy	;wreg free
  2561  0044BC  0012               	return		;funcret
  2562  0044BE                     __end_of_writei2c:
  2563                           	opt stack 0
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           indf2	equ	0xFDF
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _stopi2c *****************
  2572 ;; Defined at:
  2573 ;;		line 44 in file "i2c.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;		None
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		None
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2591 ;;Total ram usage:        0 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    4
  2594 ;; This function calls:
  2595 ;;		Nothing
  2596 ;; This function is called by:
  2597 ;;		_writei2cData
  2598 ;;		_readi2cData
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text11
  2603  00455A                     __ptext11:
  2604                           	opt stack 0
  2605  00455A                     _stopi2c:
  2606                           	opt stack 23
  2607                           
  2608                           ;i2c.c: 45: SSP1CON2bits.PEN = 1;
  2609                           
  2610                           ;incstack = 0
  2611  00455A  8497               	bsf	3991,2,c	;volatile
  2612  00455C  0012               	return		;funcret
  2613  00455E                     __end_of_stopi2c:
  2614                           	opt stack 0
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           indf2	equ	0xFDF
  2618                           fsr2h	equ	0xFDA
  2619                           fsr2l	equ	0xFD9
  2620                           status	equ	0xFD8
  2621                           
  2622 ;; *************** function _starti2c *****************
  2623 ;; Defined at:
  2624 ;;		line 11 in file "i2c.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;		None
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;		None
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      void 
  2631 ;; Registers used:
  2632 ;;		wreg, status,2, status,0, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2642 ;;Total ram usage:        0 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    5
  2645 ;; This function calls:
  2646 ;;		_checkI2Cbusy
  2647 ;; This function is called by:
  2648 ;;		_writei2cData
  2649 ;;		_readi2cData
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text12
  2654  00450E                     __ptext12:
  2655                           	opt stack 0
  2656  00450E                     _starti2c:
  2657                           	opt stack 22
  2658                           
  2659                           ;i2c.c: 12: checkI2Cbusy();
  2660                           
  2661                           ;incstack = 0
  2662  00450E  EC5F  F022         	call	_checkI2Cbusy	;wreg free
  2663                           
  2664                           ;i2c.c: 13: SSP1CON2bits.SEN = 1;
  2665  004512  8097               	bsf	3991,0,c	;volatile
  2666                           
  2667                           ;i2c.c: 14: checkI2Cbusy();
  2668  004514  EC5F  F022         	call	_checkI2Cbusy	;wreg free
  2669  004518  0012               	return		;funcret
  2670  00451A                     __end_of_starti2c:
  2671                           	opt stack 0
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           indf2	equ	0xFDF
  2675                           fsr2h	equ	0xFDA
  2676                           fsr2l	equ	0xFD9
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _checkI2Cbusy *****************
  2680 ;; Defined at:
  2681 ;;		line 6 in file "i2c.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  2  849[None  ] int 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2698 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2699 ;;Total ram usage:        1 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    4
  2702 ;; This function calls:
  2703 ;;		Nothing
  2704 ;; This function is called by:
  2705 ;;		_starti2c
  2706 ;;		_writei2c
  2707 ;;		_readi2cData
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text13
  2712  0044BE                     __ptext13:
  2713                           	opt stack 0
  2714  0044BE                     _checkI2Cbusy:
  2715                           	opt stack 22
  2716  0044BE                     l4905:
  2717  0044BE  CF97 F013          	movff	3991,??_checkI2Cbusy	;volatile
  2718  0044C2  0E1F               	movlw	31
  2719  0044C4  1613               	andwf	??_checkI2Cbusy,f,c
  2720  0044C6  A4D8               	btfss	status,2,c
  2721  0044C8  D7FA               	goto	l4905
  2722  0044CA  A495               	btfss	3989,2,c	;volatile
  2723  0044CC  0012               	return	
  2724  0044CE  D7F7               	goto	l4905
  2725  0044D0                     __end_of_checkI2Cbusy:
  2726                           	opt stack 0
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           indf2	equ	0xFDF
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function _readi2c *****************
  2735 ;; Defined at:
  2736 ;;		line 24 in file "i2c.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      unsigned char 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    4
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_readi2cData
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text14
  2765  0044E2                     __ptext14:
  2766                           	opt stack 0
  2767  0044E2                     _readi2c:
  2768                           	opt stack 23
  2769                           
  2770                           ;i2c.c: 25: SSP1CON2bits.RCEN = 1;
  2771                           
  2772                           ;incstack = 0
  2773  0044E2  8697               	bsf	3991,3,c	;volatile
  2774  0044E4                     l865:
  2775  0044E4  A095               	btfss	3989,0,c	;volatile
  2776  0044E6  D7FE               	goto	l865
  2777                           
  2778                           ;i2c.c: 28: SSP1STATbits.BF = 0;
  2779  0044E8  9095               	bcf	3989,0,c	;volatile
  2780                           
  2781                           ;i2c.c: 29: PIR3bits.SSP1IF = 0;
  2782  0044EA  010E               	movlb	14	; () banked
  2783  0044EC  91CD               	bcf	205,0,b	;volatile
  2784                           
  2785                           ; BSR set to: 14
  2786                           ;i2c.c: 31: return ( SSP1BUF );
  2787  0044EE  5092               	movf	3986,w,c	;volatile
  2788  0044F0  0012               	return	
  2789  0044F2                     __end_of_readi2c:
  2790                           	opt stack 0
  2791                           postinc0	equ	0xFEE
  2792                           wreg	equ	0xFE8
  2793                           indf2	equ	0xFDF
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _acki2c *****************
  2799 ;; Defined at:
  2800 ;;		line 34 in file "i2c.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		None
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2818 ;;Total ram usage:        0 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    4
  2821 ;; This function calls:
  2822 ;;		Nothing
  2823 ;; This function is called by:
  2824 ;;		_readi2cData
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text15
  2829  00454E                     __ptext15:
  2830                           	opt stack 0
  2831  00454E                     _acki2c:
  2832                           	opt stack 23
  2833                           
  2834                           ;i2c.c: 35: SSP1CON2bits.ACKDT = 0;
  2835                           
  2836                           ; BSR set to: 14
  2837                           ;incstack = 0
  2838  00454E  9A97               	bcf	3991,5,c	;volatile
  2839                           
  2840                           ;i2c.c: 36: SSP1CON2bits.ACKEN = 1;
  2841  004550  8897               	bsf	3991,4,c	;volatile
  2842  004552  0012               	return		;funcret
  2843  004554                     __end_of_acki2c:
  2844                           	opt stack 0
  2845                           postinc0	equ	0xFEE
  2846                           wreg	equ	0xFE8
  2847                           indf2	equ	0xFDF
  2848                           fsr2h	equ	0xFDA
  2849                           fsr2l	equ	0xFD9
  2850                           status	equ	0xFD8
  2851                           
  2852 ;; *************** function ___awtoft *****************
  2853 ;; Defined at:
  2854 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  c               2   26[COMRAM] int 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  sign            1   29[COMRAM] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  3   26[COMRAM] float 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2868 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2871 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2872 ;;Total ram usage:        4 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    5
  2875 ;; This function calls:
  2876 ;;		___ftpack
  2877 ;; This function is called by:
  2878 ;;		_readAccel
  2879 ;;		_readGyro
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           	psect	text16
  2884  0040C0                     __ptext16:
  2885                           	opt stack 0
  2886  0040C0                     ___awtoft:
  2887                           	opt stack 23
  2888                           
  2889                           ;incstack = 0
  2890  0040C0  0E00               	movlw	0
  2891  0040C2  6E1E               	movwf	___awtoft@sign,c
  2892  0040C4  AE1C               	btfss	___awtoft@c+1,7,c
  2893  0040C6  D006               	goto	l5311
  2894  0040C8  6C1B               	negf	___awtoft@c,c
  2895  0040CA  1E1C               	comf	___awtoft@c+1,f,c
  2896  0040CC  B0D8               	btfsc	status,0,c
  2897  0040CE  2A1C               	incf	___awtoft@c+1,f,c
  2898  0040D0  0E01               	movlw	1
  2899  0040D2  6E1E               	movwf	___awtoft@sign,c
  2900  0040D4                     l5311:
  2901  0040D4  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  2902  0040D8  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  2903  0040DC  6A15               	clrf	___ftpack@arg+2,c
  2904  0040DE  0E8E               	movlw	142
  2905  0040E0  6E16               	movwf	___ftpack@exp,c
  2906  0040E2  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  2907  0040E6  EC84  F01D         	call	___ftpack	;wreg free
  2908  0040EA  C013  F01B         	movff	?___ftpack,?___awtoft
  2909  0040EE  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  2910  0040F2  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  2911  0040F6  0012               	return	
  2912  0040F8                     __end_of___awtoft:
  2913                           	opt stack 0
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           indf2	equ	0xFDF
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function _printf *****************
  2922 ;; Defined at:
  2923 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  2926 ;;		 -> STR_1(49), 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  val             4   13[BANK1 ] unsigned long 
  2929 ;;  tmpval          4    9[BANK1 ] struct .
  2930 ;;  fval            3   19[BANK1 ] struct .
  2931 ;;  cp              3    0        PTR const unsigned char 
  2932 ;;  prec            2   17[BANK1 ] int 
  2933 ;;  exp             2    7[BANK1 ] int 
  2934 ;;  flag            2    5[BANK1 ] unsigned short 
  2935 ;;  ap              2    3[BANK1 ] PTR void [1]
  2936 ;;		 -> ?_printf(2), 
  2937 ;;  len             2    0        unsigned int 
  2938 ;;  width           2    0        int 
  2939 ;;  c               1   22[BANK1 ] char 
  2940 ;;  d               1    0        unsigned char 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  2   34[BANK0 ] int 
  2943 ;; Registers used:
  2944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2950 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2952 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2953 ;;      Totals:         0      19      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2954 ;;Total ram usage:       42 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    7
  2957 ;; This function calls:
  2958 ;;		___awdiv
  2959 ;;		___ftadd
  2960 ;;		___ftge
  2961 ;;		___ftmul
  2962 ;;		___ftneg
  2963 ;;		___ftsub
  2964 ;;		___fttol
  2965 ;;		___lldiv
  2966 ;;		___llmod
  2967 ;;		___lltoft
  2968 ;;		___wmul
  2969 ;;		__div_to_l_
  2970 ;;		__tdiv_to_l_
  2971 ;;		_fround
  2972 ;;		_isdigit
  2973 ;;		_putch
  2974 ;;		_scale
  2975 ;; This function is called by:
  2976 ;;		_main
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text17
  2981  000FAA                     __ptext17:
  2982                           	opt stack 0
  2983  000FAA                     _printf:
  2984                           	opt stack 23
  2985                           
  2986                           ;doprnt.c: 466: va_list ap;
  2987                           ;doprnt.c: 499: signed char c;
  2988                           ;doprnt.c: 501: int width;
  2989                           ;doprnt.c: 504: int prec;
  2990                           ;doprnt.c: 508: unsigned short flag;
  2991                           ;doprnt.c: 515: char d;
  2992                           ;doprnt.c: 516: double fval;
  2993                           ;doprnt.c: 517: int exp;
  2994                           ;doprnt.c: 523: union {
  2995                           ;doprnt.c: 524: unsigned long vd;
  2996                           ;doprnt.c: 525: double integ;
  2997                           ;doprnt.c: 526: } tmpval;
  2998                           ;doprnt.c: 528: unsigned long val;
  2999                           ;doprnt.c: 529: unsigned len;
  3000                           ;doprnt.c: 530: const char * cp;
  3001                           ;doprnt.c: 533: *ap = __va_start();
  3002                           
  3003                           ;incstack = 0
  3004  000FAA  0EE5               	movlw	low (?_printf+2)
  3005  000FAC  0101               	movlb	1	; () banked
  3006  000FAE  6F75               	movwf	printf@ap& (0+255),b
  3007  000FB0  0E00               	movlw	high (?_printf+2)
  3008  000FB2  0101               	movlb	1	; () banked
  3009  000FB4  6F76               	movwf	(printf@ap+1)& (0+255),b
  3010                           
  3011                           ;doprnt.c: 536: while(c = *f++) {
  3012  000FB6  EF59  F00C         	goto	l6087
  3013  000FBA                     l5877:
  3014                           
  3015                           ; BSR set to: 1
  3016                           ;doprnt.c: 538: if(c != '%')
  3017  000FBA  0E25               	movlw	37
  3018  000FBC  0101               	movlb	1	; () banked
  3019  000FBE  1988               	xorwf	printf@c& (0+255),w,b
  3020  000FC0  B4D8               	btfsc	status,2,c
  3021  000FC2  D006               	goto	l5881
  3022                           
  3023                           ; BSR set to: 1
  3024                           ;doprnt.c: 540: {
  3025                           ;doprnt.c: 541: (putch(c) );
  3026  000FC4  0101               	movlb	1	; () banked
  3027  000FC6  5188               	movf	printf@c& (0+255),w,b
  3028  000FC8  EC9D  F022         	call	_putch
  3029                           
  3030                           ;doprnt.c: 542: continue;
  3031  000FCC  EF59  F00C         	goto	l6087
  3032  000FD0                     l5881:
  3033                           
  3034                           ;doprnt.c: 543: }
  3035                           ;doprnt.c: 548: flag = 0;
  3036  000FD0  0E00               	movlw	0
  3037  000FD2  0101               	movlb	1	; () banked
  3038  000FD4  6F78               	movwf	(printf@flag+1)& (0+255),b
  3039  000FD6  0E00               	movlw	0
  3040  000FD8  6F77               	movwf	printf@flag& (0+255),b
  3041                           
  3042                           ; BSR set to: 1
  3043                           ;doprnt.c: 611: if(*f == '.') {
  3044  000FDA  C0E3  FFF6         	movff	printf@f,tblptrl
  3045  000FDE  C0E4  FFF7         	movff	printf@f+1,tblptrh
  3046  000FE2                     	if	0	;tblptru may be non-zero
  3047  000FE2                     	endif
  3048  000FE2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3049  000FE2  0E00               	movlw	low (__mediumconst shr (0+16))
  3050  000FE4  6EF8               	movwf	tblptru,c
  3051  000FE6                     	endif
  3052  000FE6  0008               	tblrd		*
  3053  000FE8  50F5               	movf	tablat,w,c
  3054  000FEA  0A2E               	xorlw	46
  3055  000FEC  A4D8               	btfss	status,2,c
  3056  000FEE  D038               	goto	l5895
  3057                           
  3058                           ; BSR set to: 1
  3059                           ;doprnt.c: 612: flag |= 0x4000;
  3060  000FF0  0101               	movlb	1	; () banked
  3061  000FF2  8D78               	bsf	(printf@flag+1)& (0+255),6,b
  3062                           
  3063                           ;doprnt.c: 613: f++;
  3064  000FF4  0100               	movlb	0	; () banked
  3065  000FF6  4BE3               	infsnz	printf@f& (0+255),f,b
  3066  000FF8  2BE4               	incf	(printf@f+1)& (0+255),f,b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;doprnt.c: 620: {
  3070                           ;doprnt.c: 621: prec = 0;
  3071  000FFA  0E00               	movlw	0
  3072  000FFC  0101               	movlb	1	; () banked
  3073  000FFE  6F84               	movwf	(printf@prec+1)& (0+255),b
  3074  001000  0E00               	movlw	0
  3075  001002  6F83               	movwf	printf@prec& (0+255),b
  3076                           
  3077                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3078  001004  D020               	goto	l5893
  3079  001006                     l5889:
  3080                           
  3081                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3082  001006  C183  F021         	movff	printf@prec,___wmul@multiplier
  3083  00100A  C184  F022         	movff	printf@prec+1,___wmul@multiplier+1
  3084  00100E  0E00               	movlw	0
  3085  001010  6E24               	movwf	___wmul@multiplicand+1,c
  3086  001012  0E0A               	movlw	10
  3087  001014  6E23               	movwf	___wmul@multiplicand,c
  3088  001016  EC88  F021         	call	___wmul	;wreg free
  3089  00101A  C0E3  FFF6         	movff	printf@f,tblptrl
  3090  00101E  C0E4  FFF7         	movff	printf@f+1,tblptrh
  3091  001022                     	if	0	;tblptru may be non-zero
  3092  001022                     	endif
  3093  001022                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3094  001022  0E00               	movlw	low (__mediumconst shr (0+16))
  3095  001024  6EF8               	movwf	tblptru,c
  3096  001026                     	endif
  3097  001026  0008               	tblrd		*
  3098  001028  50F5               	movf	tablat,w,c
  3099  00102A  2621               	addwf	?___wmul,f,c
  3100  00102C  0E00               	movlw	0
  3101  00102E  2222               	addwfc	?___wmul+1,f,c
  3102  001030  0ED0               	movlw	208
  3103  001032  2421               	addwf	?___wmul,w,c
  3104  001034  0101               	movlb	1	; () banked
  3105  001036  6F83               	movwf	printf@prec& (0+255),b
  3106  001038  0EFF               	movlw	255
  3107  00103A  2022               	addwfc	?___wmul+1,w,c
  3108  00103C  0101               	movlb	1	; () banked
  3109  00103E  6F84               	movwf	(printf@prec+1)& (0+255),b
  3110                           
  3111                           ; BSR set to: 1
  3112  001040  0100               	movlb	0	; () banked
  3113  001042  4BE3               	infsnz	printf@f& (0+255),f,b
  3114  001044  2BE4               	incf	(printf@f+1)& (0+255),f,b
  3115  001046                     l5893:
  3116  001046  C0E3  FFF6         	movff	printf@f,tblptrl
  3117  00104A  C0E4  FFF7         	movff	printf@f+1,tblptrh
  3118  00104E                     	if	0	;tblptru may be non-zero
  3119  00104E                     	endif
  3120  00104E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3121  00104E  0E00               	movlw	low (__mediumconst shr (0+16))
  3122  001050  6EF8               	movwf	tblptru,c
  3123  001052                     	endif
  3124  001052  0008               	tblrd		*
  3125  001054  50F5               	movf	tablat,w,c
  3126  001056  EC00  F022         	call	_isdigit
  3127  00105A  A0D8               	btfss	status,0,c
  3128  00105C  D00C               	goto	l5903
  3129  00105E  D7D3               	goto	l5889
  3130  001060                     l5895:
  3131                           
  3132                           ;doprnt.c: 626: prec = 0;
  3133  001060  0E00               	movlw	0
  3134  001062  0101               	movlb	1	; () banked
  3135  001064  6F84               	movwf	(printf@prec+1)& (0+255),b
  3136  001066  0E00               	movlw	0
  3137  001068  6F83               	movwf	printf@prec& (0+255),b
  3138                           
  3139                           ; BSR set to: 1
  3140                           ;doprnt.c: 628: flag |= 0x1000;
  3141  00106A  0101               	movlb	1	; () banked
  3142  00106C  8978               	bsf	(printf@flag+1)& (0+255),4,b
  3143                           
  3144                           ; BSR set to: 1
  3145                           ;doprnt.c: 630: }
  3146                           ;doprnt.c: 635: switch(c = *f++) {
  3147  00106E  D003               	goto	l5903
  3148  001070                     l5899:
  3149                           
  3150                           ; BSR set to: 1
  3151                           ;doprnt.c: 663: flag |= 0x400;
  3152  001070  0101               	movlb	1	; () banked
  3153  001072  8578               	bsf	(printf@flag+1)& (0+255),2,b
  3154                           
  3155                           ; BSR set to: 1
  3156                           ;doprnt.c: 698: case 'i':
  3157                           ;doprnt.c: 699: break;
  3158                           
  3159                           ; BSR set to: 1
  3160                           
  3161                           ;doprnt.c: 697: case 'd':
  3162                           
  3163                           ;doprnt.c: 664: break;
  3164  001074  D01B               	goto	l5905
  3165  001076                     l5903:
  3166  001076  C0E3  FFF6         	movff	printf@f,tblptrl
  3167  00107A  C0E4  FFF7         	movff	printf@f+1,tblptrh
  3168  00107E  0100               	movlb	0	; () banked
  3169  001080  4BE3               	infsnz	printf@f& (0+255),f,b
  3170  001082  2BE4               	incf	(printf@f+1)& (0+255),f,b
  3171  001084                     	if	0	;tblptru may be non-zero
  3172  001084                     	endif
  3173  001084                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3174  001084  0E00               	movlw	low (__mediumconst shr (0+16))
  3175  001086  6EF8               	movwf	tblptru,c
  3176  001088                     	endif
  3177  001088  0008               	tblrd		*
  3178  00108A  CFF5 F188          	movff	tablat,printf@c
  3179  00108E  0101               	movlb	1	; () banked
  3180  001090  5188               	movf	printf@c& (0+255),w,b
  3181                           
  3182                           ; Switch size 1, requested type "space"
  3183                           ; Number of cases is 4, Range of values is 0 to 105
  3184                           ; switch strategies available:
  3185                           ; Name         Instructions Cycles
  3186                           ; simple_byte           13     7 (average)
  3187                           ;	Chosen strategy is simple_byte
  3188  001092  0A00               	xorlw	0	; case 0
  3189  001094  B4D8               	btfsc	status,2,c
  3190  001096  0012               	return	
  3191  001098  0A64               	xorlw	100	; case 100
  3192  00109A  B4D8               	btfsc	status,2,c
  3193  00109C  D007               	goto	l5905
  3194  00109E  0A02               	xorlw	2	; case 102
  3195  0010A0  B4D8               	btfsc	status,2,c
  3196  0010A2  D7E6               	goto	l5899
  3197  0010A4  0A0F               	xorlw	15	; case 105
  3198  0010A6  A4D8               	btfss	status,2,c
  3199  0010A8  EF59  F00C         	goto	l6087
  3200  0010AC                     l5905:
  3201                           
  3202                           ; BSR set to: 1
  3203                           ;doprnt.c: 825: if(flag & (0x700)) {
  3204  0010AC  0E07               	movlw	7
  3205  0010AE  0101               	movlb	1	; () banked
  3206  0010B0  1578               	andwf	(printf@flag+1)& (0+255),w,b
  3207  0010B2  B4D8               	btfsc	status,2,c
  3208  0010B4  D30F               	goto	l6039
  3209                           
  3210                           ; BSR set to: 1
  3211                           ;doprnt.c: 827: if(flag & 0x1000)
  3212  0010B6  0101               	movlb	1	; () banked
  3213  0010B8  A978               	btfss	(printf@flag+1)& (0+255),4,b
  3214  0010BA  D005               	goto	l5911
  3215                           
  3216                           ; BSR set to: 1
  3217                           ;doprnt.c: 829: prec = 6;
  3218  0010BC  0E00               	movlw	0
  3219  0010BE  0101               	movlb	1	; () banked
  3220  0010C0  6F84               	movwf	(printf@prec+1)& (0+255),b
  3221  0010C2  0E06               	movlw	6
  3222  0010C4  6F83               	movwf	printf@prec& (0+255),b
  3223  0010C6                     l5911:
  3224                           
  3225                           ; BSR set to: 1
  3226                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3227  0010C6  C175  FFD9         	movff	printf@ap,fsr2l
  3228  0010CA  C176  FFDA         	movff	printf@ap+1,fsr2h
  3229  0010CE  CFDE F185          	movff	postinc2,printf@fval
  3230  0010D2  CFDE F186          	movff	postinc2,printf@fval+1
  3231  0010D6  CFDD F187          	movff	postdec2,printf@fval+2
  3232                           
  3233                           ; BSR set to: 1
  3234  0010DA  0E03               	movlw	3
  3235  0010DC  0101               	movlb	1	; () banked
  3236  0010DE  2775               	addwf	printf@ap& (0+255),f,b
  3237  0010E0  0E00               	movlw	0
  3238  0010E2  2376               	addwfc	(printf@ap+1)& (0+255),f,b
  3239                           
  3240                           ; BSR set to: 1
  3241                           ;doprnt.c: 831: if(fval < 0.0) {
  3242  0010E4  0101               	movlb	1	; () banked
  3243  0010E6  AF87               	btfss	(printf@fval+2)& (0+255),7,b
  3244  0010E8  D011               	goto	l5921
  3245                           
  3246                           ; BSR set to: 1
  3247                           ;doprnt.c: 832: fval = -fval;
  3248  0010EA  C185  F036         	movff	printf@fval,___ftneg@f1
  3249  0010EE  C186  F037         	movff	printf@fval+1,___ftneg@f1+1
  3250  0010F2  C187  F038         	movff	printf@fval+2,___ftneg@f1+2
  3251  0010F6  ECAE  F021         	call	___ftneg	;wreg free
  3252  0010FA  C036  F185         	movff	?___ftneg,printf@fval
  3253  0010FE  C037  F186         	movff	?___ftneg+1,printf@fval+1
  3254  001102  C038  F187         	movff	?___ftneg+2,printf@fval+2
  3255                           
  3256                           ;doprnt.c: 833: flag |= 0x03;
  3257  001106  0E03               	movlw	3
  3258  001108  0101               	movlb	1	; () banked
  3259  00110A  1377               	iorwf	printf@flag& (0+255),f,b
  3260  00110C                     l5921:
  3261                           
  3262                           ; BSR set to: 1
  3263                           ;doprnt.c: 834: }
  3264                           ;doprnt.c: 835: exp = 0;
  3265  00110C  0E00               	movlw	0
  3266  00110E  0101               	movlb	1	; () banked
  3267  001110  6F7A               	movwf	(printf@exp+1)& (0+255),b
  3268  001112  0E00               	movlw	0
  3269  001114  6F79               	movwf	printf@exp& (0+255),b
  3270                           
  3271                           ; BSR set to: 1
  3272                           ;doprnt.c: 836: if( fval!=0) {
  3273  001116  0101               	movlb	1	; () banked
  3274  001118  5185               	movf	printf@fval& (0+255),w,b
  3275  00111A  0101               	movlb	1	; () banked
  3276  00111C  1186               	iorwf	(printf@fval+1)& (0+255),w,b
  3277  00111E  0101               	movlb	1	; () banked
  3278  001120  1187               	iorwf	(printf@fval+2)& (0+255),w,b
  3279  001122  B4D8               	btfsc	status,2,c
  3280  001124  D099               	goto	l5949
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3284  001126  0E82               	movlw	130
  3285  001128  0100               	movlb	0	; () banked
  3286  00112A  6FF0               	movwf	??_printf& (0+255),b
  3287  00112C  0EFF               	movlw	255
  3288  00112E  0100               	movlb	0	; () banked
  3289  001130  6FF1               	movwf	(??_printf+1)& (0+255),b
  3290  001132  C185  F0F2         	movff	printf@fval,??_printf+2
  3291  001136  C186  F0F3         	movff	printf@fval+1,??_printf+3
  3292  00113A  C187  F0F4         	movff	printf@fval+2,??_printf+4
  3293  00113E  C188  F0F5         	movff	printf@fval+3,??_printf+5
  3294  001142  0E10               	movlw	16
  3295  001144  D006               	goto	u5190
  3296  001146                     u5195:
  3297  001146  0100               	movlb	0	; () banked
  3298  001148  90D8               	bcf	status,0,c
  3299  00114A  33F5               	rrcf	(??_printf+5)& (0+255),f,b
  3300  00114C  33F4               	rrcf	(??_printf+4)& (0+255),f,b
  3301  00114E  33F3               	rrcf	(??_printf+3)& (0+255),f,b
  3302  001150  33F2               	rrcf	(??_printf+2)& (0+255),f,b
  3303  001152                     u5190:
  3304  001152  2EE8               	decfsz	wreg,f,c
  3305  001154  D7F8               	goto	u5195
  3306  001156  0100               	movlb	0	; () banked
  3307  001158  51F2               	movf	(??_printf+2)& (0+255),w,b
  3308  00115A  0100               	movlb	0	; () banked
  3309  00115C  25F0               	addwf	??_printf& (0+255),w,b
  3310  00115E  0101               	movlb	1	; () banked
  3311  001160  6F79               	movwf	printf@exp& (0+255),b
  3312  001162  0E00               	movlw	0
  3313  001164  0100               	movlb	0	; () banked
  3314  001166  21F1               	addwfc	(??_printf+1)& (0+255),w,b
  3315  001168  0101               	movlb	1	; () banked
  3316  00116A  6F7A               	movwf	(printf@exp+1)& (0+255),b
  3317                           
  3318                           ; BSR set to: 1
  3319                           ;doprnt.c: 838: exp--;
  3320  00116C  0101               	movlb	1	; () banked
  3321  00116E  0779               	decf	printf@exp& (0+255),f,b
  3322  001170  A0D8               	btfss	status,0,c
  3323  001172  077A               	decf	(printf@exp+1)& (0+255),f,b
  3324                           
  3325                           ; BSR set to: 1
  3326                           ;doprnt.c: 839: exp *= 3;
  3327  001174  C179  F021         	movff	printf@exp,___wmul@multiplier
  3328  001178  C17A  F022         	movff	printf@exp+1,___wmul@multiplier+1
  3329  00117C  0E00               	movlw	0
  3330  00117E  6E24               	movwf	___wmul@multiplicand+1,c
  3331  001180  0E03               	movlw	3
  3332  001182  6E23               	movwf	___wmul@multiplicand,c
  3333  001184  EC88  F021         	call	___wmul	;wreg free
  3334  001188  C021  F179         	movff	?___wmul,printf@exp
  3335  00118C  C022  F17A         	movff	?___wmul+1,printf@exp+1
  3336                           
  3337                           ;doprnt.c: 840: exp /= 10;
  3338  001190  C179  F019         	movff	printf@exp,___awdiv@dividend
  3339  001194  C17A  F01A         	movff	printf@exp+1,___awdiv@dividend+1
  3340  001198  0E00               	movlw	0
  3341  00119A  6E1C               	movwf	___awdiv@divisor+1,c
  3342  00119C  0E0A               	movlw	10
  3343  00119E  6E1B               	movwf	___awdiv@divisor,c
  3344  0011A0  ECC4  F01E         	call	___awdiv	;wreg free
  3345  0011A4  C019  F179         	movff	?___awdiv,printf@exp
  3346  0011A8  C01A  F17A         	movff	?___awdiv+1,printf@exp+1
  3347                           
  3348                           ;doprnt.c: 841: if(exp < 0)
  3349  0011AC  0101               	movlb	1	; () banked
  3350  0011AE  AF7A               	btfss	(printf@exp+1)& (0+255),7,b
  3351  0011B0  D004               	goto	l5937
  3352                           
  3353                           ; BSR set to: 1
  3354                           ;doprnt.c: 842: exp--;
  3355  0011B2  0101               	movlb	1	; () banked
  3356  0011B4  0779               	decf	printf@exp& (0+255),f,b
  3357  0011B6  A0D8               	btfss	status,0,c
  3358  0011B8  077A               	decf	(printf@exp+1)& (0+255),f,b
  3359  0011BA                     l5937:
  3360                           
  3361                           ; BSR set to: 1
  3362                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3363  0011BA  0101               	movlb	1	; () banked
  3364  0011BC  5179               	movf	printf@exp& (0+255),w,b
  3365  0011BE  0800               	sublw	0
  3366  0011C0  EC6B  F00C         	call	_scale
  3367  0011C4  C036  F17B         	movff	?_scale,printf@tmpval
  3368  0011C8  C037  F17C         	movff	?_scale+1,printf@tmpval+1
  3369  0011CC  C038  F17D         	movff	?_scale+2,printf@tmpval+2
  3370                           
  3371                           ;doprnt.c: 847: tmpval.integ *= fval;
  3372  0011D0  C17B  F027         	movff	printf@tmpval,___ftmul@f1
  3373  0011D4  C17C  F028         	movff	printf@tmpval+1,___ftmul@f1+1
  3374  0011D8  C17D  F029         	movff	printf@tmpval+2,___ftmul@f1+2
  3375  0011DC  C185  F02A         	movff	printf@fval,___ftmul@f2
  3376  0011E0  C186  F02B         	movff	printf@fval+1,___ftmul@f2+1
  3377  0011E4  C187  F02C         	movff	printf@fval+2,___ftmul@f2+2
  3378  0011E8  EC2D  F01C         	call	___ftmul	;wreg free
  3379  0011EC  C027  F17B         	movff	?___ftmul,printf@tmpval
  3380  0011F0  C028  F17C         	movff	?___ftmul+1,printf@tmpval+1
  3381  0011F4  C029  F17D         	movff	?___ftmul+2,printf@tmpval+2
  3382                           
  3383                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3384  0011F8  C17B  F0C4         	movff	printf@tmpval,___ftge@ff1
  3385  0011FC  C17C  F0C5         	movff	printf@tmpval+1,___ftge@ff1+1
  3386  001200  C17D  F0C6         	movff	printf@tmpval+2,___ftge@ff1+2
  3387  001204  0E00               	movlw	0
  3388  001206  0100               	movlb	0	; () banked
  3389  001208  6FC7               	movwf	___ftge@ff2& (0+255),b
  3390  00120A  0E80               	movlw	128
  3391  00120C  0100               	movlb	0	; () banked
  3392  00120E  6FC8               	movwf	(___ftge@ff2+1)& (0+255),b
  3393  001210  0E3F               	movlw	63
  3394  001212  0100               	movlb	0	; () banked
  3395  001214  6FC9               	movwf	(___ftge@ff2+2)& (0+255),b
  3396  001216  EC20  F01D         	call	___ftge	;wreg free
  3397  00121A  0100               	movlb	0	; () banked
  3398  00121C  B0D8               	btfsc	status,0,c
  3399  00121E  D005               	goto	l5945
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;doprnt.c: 849: exp--;
  3403  001220  0101               	movlb	1	; () banked
  3404  001222  0779               	decf	printf@exp& (0+255),f,b
  3405  001224  A0D8               	btfss	status,0,c
  3406  001226  077A               	decf	(printf@exp+1)& (0+255),f,b
  3407  001228  D017               	goto	l5949
  3408  00122A                     l5945:
  3409                           
  3410                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3411  00122A  C17B  F0C4         	movff	printf@tmpval,___ftge@ff1
  3412  00122E  C17C  F0C5         	movff	printf@tmpval+1,___ftge@ff1+1
  3413  001232  C17D  F0C6         	movff	printf@tmpval+2,___ftge@ff1+2
  3414  001236  0E00               	movlw	0
  3415  001238  0100               	movlb	0	; () banked
  3416  00123A  6FC7               	movwf	___ftge@ff2& (0+255),b
  3417  00123C  0E20               	movlw	32
  3418  00123E  0100               	movlb	0	; () banked
  3419  001240  6FC8               	movwf	(___ftge@ff2+1)& (0+255),b
  3420  001242  0E41               	movlw	65
  3421  001244  0100               	movlb	0	; () banked
  3422  001246  6FC9               	movwf	(___ftge@ff2+2)& (0+255),b
  3423  001248  EC20  F01D         	call	___ftge	;wreg free
  3424  00124C  0100               	movlb	0	; () banked
  3425  00124E  A0D8               	btfss	status,0,c
  3426  001250  D003               	goto	l5949
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;doprnt.c: 851: exp++;
  3430  001252  0101               	movlb	1	; () banked
  3431  001254  4B79               	infsnz	printf@exp& (0+255),f,b
  3432  001256  2B7A               	incf	(printf@exp+1)& (0+255),f,b
  3433  001258                     l5949:
  3434                           
  3435                           ;doprnt.c: 852: }
  3436                           ;doprnt.c: 1112: if(prec <= 12)
  3437  001258  0101               	movlb	1	; () banked
  3438  00125A  BF84               	btfsc	(printf@prec+1)& (0+255),7,b
  3439  00125C  D008               	goto	l5951
  3440  00125E  0101               	movlb	1	; () banked
  3441  001260  5184               	movf	(printf@prec+1)& (0+255),w,b
  3442  001262  E11D               	bnz	l5953
  3443  001264  0E0D               	movlw	13
  3444  001266  0101               	movlb	1	; () banked
  3445  001268  5D83               	subwf	printf@prec& (0+255),w,b
  3446  00126A  B0D8               	btfsc	status,0,c
  3447  00126C  D018               	goto	l5953
  3448  00126E                     l5951:
  3449                           
  3450                           ; BSR set to: 1
  3451                           ;doprnt.c: 1113: fval += fround(prec);
  3452  00126E  C185  F0C8         	movff	printf@fval,___ftadd@f1
  3453  001272  C186  F0C9         	movff	printf@fval+1,___ftadd@f1+1
  3454  001276  C187  F0CA         	movff	printf@fval+2,___ftadd@f1+2
  3455  00127A  0101               	movlb	1	; () banked
  3456  00127C  5183               	movf	printf@prec& (0+255),w,b
  3457  00127E  ECBD  F011         	call	_fround
  3458  001282  C036  F0CB         	movff	?_fround,___ftadd@f2
  3459  001286  C037  F0CC         	movff	?_fround+1,___ftadd@f2+1
  3460  00128A  C038  F0CD         	movff	?_fround+2,___ftadd@f2+2
  3461  00128E  ECF6  F012         	call	___ftadd	;wreg free
  3462  001292  C0C8  F185         	movff	?___ftadd,printf@fval
  3463  001296  C0C9  F186         	movff	?___ftadd+1,printf@fval+1
  3464  00129A  C0CA  F187         	movff	?___ftadd+2,printf@fval+2
  3465  00129E                     l5953:
  3466                           
  3467                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3468  00129E  0101               	movlb	1	; () banked
  3469  0012A0  BF7A               	btfsc	(printf@exp+1)& (0+255),7,b
  3470  0012A2  D008               	goto	l5955
  3471  0012A4  0101               	movlb	1	; () banked
  3472  0012A6  517A               	movf	(printf@exp+1)& (0+255),w,b
  3473  0012A8  E12A               	bnz	l5961
  3474  0012AA  0E0A               	movlw	10
  3475  0012AC  0101               	movlb	1	; () banked
  3476  0012AE  5D79               	subwf	printf@exp& (0+255),w,b
  3477  0012B0  B0D8               	btfsc	status,0,c
  3478  0012B2  D025               	goto	l5961
  3479  0012B4                     l5955:
  3480                           
  3481                           ; BSR set to: 1
  3482  0012B4  0101               	movlb	1	; () banked
  3483  0012B6  5185               	movf	printf@fval& (0+255),w,b
  3484  0012B8  0101               	movlb	1	; () banked
  3485  0012BA  1186               	iorwf	(printf@fval+1)& (0+255),w,b
  3486  0012BC  0101               	movlb	1	; () banked
  3487  0012BE  1187               	iorwf	(printf@fval+2)& (0+255),w,b
  3488  0012C0  B4D8               	btfsc	status,2,c
  3489  0012C2  D063               	goto	l5975
  3490                           
  3491                           ; BSR set to: 1
  3492  0012C4  C185  F0D4         	movff	printf@fval,___fttol@f1
  3493  0012C8  C186  F0D5         	movff	printf@fval+1,___fttol@f1+1
  3494  0012CC  C187  F0D6         	movff	printf@fval+2,___fttol@f1+2
  3495  0012D0  EC35  F018         	call	___fttol	;wreg free
  3496  0012D4  0100               	movlb	0	; () banked
  3497  0012D6  51D4               	movf	?___fttol& (0+255),w,b
  3498  0012D8  0100               	movlb	0	; () banked
  3499  0012DA  11D5               	iorwf	(?___fttol+1)& (0+255),w,b
  3500  0012DC  0100               	movlb	0	; () banked
  3501  0012DE  11D6               	iorwf	(?___fttol+2)& (0+255),w,b
  3502  0012E0  0100               	movlb	0	; () banked
  3503  0012E2  11D7               	iorwf	(?___fttol+3)& (0+255),w,b
  3504  0012E4  A4D8               	btfss	status,2,c
  3505  0012E6  D051               	goto	l5975
  3506                           
  3507                           ; BSR set to: 0
  3508  0012E8  0101               	movlb	1	; () banked
  3509  0012EA  BF7A               	btfsc	(printf@exp+1)& (0+255),7,b
  3510  0012EC  D04E               	goto	l5975
  3511  0012EE  0101               	movlb	1	; () banked
  3512  0012F0  517A               	movf	(printf@exp+1)& (0+255),w,b
  3513  0012F2  E105               	bnz	l5961
  3514  0012F4  0E02               	movlw	2
  3515  0012F6  0101               	movlb	1	; () banked
  3516  0012F8  5D79               	subwf	printf@exp& (0+255),w,b
  3517  0012FA  A0D8               	btfss	status,0,c
  3518  0012FC  D046               	goto	l5975
  3519  0012FE                     l5961:
  3520                           
  3521                           ; BSR set to: 1
  3522                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3523  0012FE  C17B  F0C4         	movff	printf@tmpval,___ftge@ff1
  3524  001302  C17C  F0C5         	movff	printf@tmpval+1,___ftge@ff1+1
  3525  001306  C17D  F0C6         	movff	printf@tmpval+2,___ftge@ff1+2
  3526  00130A  0E70               	movlw	112
  3527  00130C  0100               	movlb	0	; () banked
  3528  00130E  6FC7               	movwf	___ftge@ff2& (0+255),b
  3529  001310  0E89               	movlw	137
  3530  001312  0100               	movlb	0	; () banked
  3531  001314  6FC8               	movwf	(___ftge@ff2+1)& (0+255),b
  3532  001316  0E40               	movlw	64
  3533  001318  0100               	movlb	0	; () banked
  3534  00131A  6FC9               	movwf	(___ftge@ff2+2)& (0+255),b
  3535  00131C  EC20  F01D         	call	___ftge	;wreg free
  3536  001320  0100               	movlb	0	; () banked
  3537  001322  B0D8               	btfsc	status,0,c
  3538  001324  D003               	goto	l5965
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3542  001326  0101               	movlb	1	; () banked
  3543  001328  0EF7               	movlw	247
  3544  00132A  D002               	goto	L2
  3545  00132C                     l5965:
  3546                           
  3547                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3548  00132C  0101               	movlb	1	; () banked
  3549  00132E  0EF8               	movlw	248
  3550  001330                     L2:
  3551  001330  2779               	addwf	printf@exp& (0+255),f,b
  3552  001332  0EFF               	movlw	255
  3553  001334  237A               	addwfc	(printf@exp+1)& (0+255),f,b
  3554                           
  3555                           ; BSR set to: 1
  3556                           ;doprnt.c: 1124: }
  3557                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3558                           
  3559                           ; BSR set to: 1
  3560  001336  0101               	movlb	1	; () banked
  3561  001338  5179               	movf	printf@exp& (0+255),w,b
  3562  00133A  EC6B  F00C         	call	_scale
  3563  00133E  C036  F17B         	movff	?_scale,printf@tmpval
  3564  001342  C037  F17C         	movff	?_scale+1,printf@tmpval+1
  3565  001346  C038  F17D         	movff	?_scale+2,printf@tmpval+2
  3566                           
  3567                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3568  00134A  C185  F013         	movff	printf@fval,__tdiv_to_l_@f1
  3569  00134E  C186  F014         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3570  001352  C187  F015         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3571  001356  C17B  F016         	movff	printf@tmpval,__tdiv_to_l_@f2
  3572  00135A  C17C  F017         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3573  00135E  C17D  F018         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3574  001362  ECD7  F018         	call	__tdiv_to_l_	;wreg free
  3575  001366  C013  F17F         	movff	?__tdiv_to_l_,printf@val
  3576  00136A  C014  F180         	movff	?__tdiv_to_l_+1,printf@val+1
  3577  00136E  C015  F181         	movff	?__tdiv_to_l_+2,printf@val+2
  3578  001372  C016  F182         	movff	?__tdiv_to_l_+3,printf@val+3
  3579                           
  3580                           ;doprnt.c: 1129: fval = 0.0;
  3581  001376  0E00               	movlw	0
  3582  001378  0101               	movlb	1	; () banked
  3583  00137A  6F85               	movwf	printf@fval& (0+255),b
  3584  00137C  0E00               	movlw	0
  3585  00137E  0101               	movlb	1	; () banked
  3586  001380  6F86               	movwf	(printf@fval+1)& (0+255),b
  3587  001382  0E00               	movlw	0
  3588  001384  0101               	movlb	1	; () banked
  3589  001386  6F87               	movwf	(printf@fval+2)& (0+255),b
  3590                           
  3591                           ;doprnt.c: 1130: } else {
  3592  001388  D033               	goto	l5979
  3593  00138A                     l5975:
  3594                           
  3595                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3596  00138A  C185  F0D4         	movff	printf@fval,___fttol@f1
  3597  00138E  C186  F0D5         	movff	printf@fval+1,___fttol@f1+1
  3598  001392  C187  F0D6         	movff	printf@fval+2,___fttol@f1+2
  3599  001396  EC35  F018         	call	___fttol	;wreg free
  3600  00139A  C0D4  F17F         	movff	?___fttol,printf@val
  3601  00139E  C0D5  F180         	movff	?___fttol+1,printf@val+1
  3602  0013A2  C0D6  F181         	movff	?___fttol+2,printf@val+2
  3603  0013A6  C0D7  F182         	movff	?___fttol+3,printf@val+3
  3604                           
  3605                           ;doprnt.c: 1132: fval -= (double)val;
  3606  0013AA  C185  F0D4         	movff	printf@fval,___ftsub@f1
  3607  0013AE  C186  F0D5         	movff	printf@fval+1,___ftsub@f1+1
  3608  0013B2  C187  F0D6         	movff	printf@fval+2,___ftsub@f1+2
  3609  0013B6  C17F  F01B         	movff	printf@val,___lltoft@c
  3610  0013BA  C180  F01C         	movff	printf@val+1,___lltoft@c+1
  3611  0013BE  C181  F01D         	movff	printf@val+2,___lltoft@c+2
  3612  0013C2  C182  F01E         	movff	printf@val+3,___lltoft@c+3
  3613  0013C6  ECB2  F01F         	call	___lltoft	;wreg free
  3614  0013CA  C01B  F0D7         	movff	?___lltoft,___ftsub@f2
  3615  0013CE  C01C  F0D8         	movff	?___lltoft+1,___ftsub@f2+1
  3616  0013D2  C01D  F0D9         	movff	?___lltoft+2,___ftsub@f2+2
  3617  0013D6  ECE0  F01F         	call	___ftsub	;wreg free
  3618  0013DA  C0D4  F185         	movff	?___ftsub,printf@fval
  3619  0013DE  C0D5  F186         	movff	?___ftsub+1,printf@fval+1
  3620  0013E2  C0D6  F187         	movff	?___ftsub+2,printf@fval+2
  3621                           
  3622                           ;doprnt.c: 1133: exp = 0;
  3623  0013E6  0E00               	movlw	0
  3624  0013E8  0101               	movlb	1	; () banked
  3625  0013EA  6F7A               	movwf	(printf@exp+1)& (0+255),b
  3626  0013EC  0E00               	movlw	0
  3627  0013EE  6F79               	movwf	printf@exp& (0+255),b
  3628  0013F0                     l5979:
  3629                           
  3630                           ; BSR set to: 1
  3631                           ;doprnt.c: 1134: }
  3632                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3633  0013F0  0E01               	movlw	1
  3634  0013F2  0101               	movlb	1	; () banked
  3635  0013F4  6F88               	movwf	printf@c& (0+255),b
  3636  0013F6                     l5981:
  3637                           
  3638                           ; BSR set to: 1
  3639  0013F6  0E0A               	movlw	10
  3640  0013F8  0101               	movlb	1	; () banked
  3641  0013FA  1988               	xorwf	printf@c& (0+255),w,b
  3642  0013FC  B4D8               	btfsc	status,2,c
  3643  0013FE  D021               	goto	l5993
  3644                           
  3645                           ; BSR set to: 1
  3646                           ;doprnt.c: 1137: if(val < dpowers[c])
  3647                           
  3648                           ; BSR set to: 1
  3649                           
  3650                           ; BSR set to: 1
  3651  001400  0101               	movlb	1	; () banked
  3652  001402  5188               	movf	printf@c& (0+255),w,b
  3653  001404  0D04               	mullw	4
  3654  001406  0E01               	movlw	low _dpowers
  3655  001408  24F3               	addwf	prodl,w,c
  3656  00140A  6EF6               	movwf	tblptrl,c
  3657  00140C  0E0F               	movlw	high _dpowers
  3658  00140E  20F4               	addwfc	prodh,w,c
  3659  001410  6EF7               	movwf	tblptrh,c
  3660  001412                     	if	1	;There are 3 active tblptr bytes
  3661  001412  6AF8               	clrf	tblptru,c
  3662  001414  0E00               	movlw	low (__mediumconst shr (0+16))
  3663  001416  22F8               	addwfc	tblptru,f,c
  3664  001418                     	endif
  3665  001418  0009               	tblrd		*+
  3666  00141A  50F5               	movf	tablat,w,c
  3667  00141C  0101               	movlb	1	; () banked
  3668  00141E  5D7F               	subwf	printf@val& (0+255),w,b
  3669  001420  0009               	tblrd		*+
  3670  001422  50F5               	movf	tablat,w,c
  3671  001424  0101               	movlb	1	; () banked
  3672  001426  5980               	subwfb	(printf@val+1)& (0+255),w,b
  3673  001428  0009               	tblrd		*+
  3674  00142A  50F5               	movf	tablat,w,c
  3675  00142C  0101               	movlb	1	; () banked
  3676  00142E  5981               	subwfb	(printf@val+2)& (0+255),w,b
  3677  001430  0009               	tblrd		*+
  3678  001432  50F5               	movf	tablat,w,c
  3679  001434  0101               	movlb	1	; () banked
  3680  001436  5982               	subwfb	(printf@val+3)& (0+255),w,b
  3681  001438  A0D8               	btfss	status,0,c
  3682  00143A  D003               	goto	l5993
  3683                           
  3684                           ; BSR set to: 1
  3685                           
  3686                           ; BSR set to: 1
  3687                           
  3688                           ; BSR set to: 1
  3689                           ;doprnt.c: 1138: break;
  3690  00143C  0101               	movlb	1	; () banked
  3691  00143E  2B88               	incf	printf@c& (0+255),f,b
  3692  001440  D7DA               	goto	l5981
  3693  001442                     l5993:
  3694                           
  3695                           ; BSR set to: 1
  3696                           ;doprnt.c: 1175: {
  3697                           ;doprnt.c: 1188: if(flag & 0x03)
  3698  001442  0E03               	movlw	3
  3699  001444  0101               	movlb	1	; () banked
  3700  001446  1577               	andwf	printf@flag& (0+255),w,b
  3701  001448  0100               	movlb	0	; () banked
  3702  00144A  6FF0               	movwf	??_printf& (0+255),b
  3703  00144C  0E00               	movlw	0
  3704  00144E  0101               	movlb	1	; () banked
  3705  001450  1578               	andwf	(printf@flag+1)& (0+255),w,b
  3706  001452  0100               	movlb	0	; () banked
  3707  001454  6FF1               	movwf	(??_printf+1)& (0+255),b
  3708  001456  0100               	movlb	0	; () banked
  3709  001458  51F0               	movf	??_printf& (0+255),w,b
  3710  00145A  0100               	movlb	0	; () banked
  3711  00145C  11F1               	iorwf	(??_printf+1)& (0+255),w,b
  3712  00145E  B4D8               	btfsc	status,2,c
  3713  001460  D04D               	goto	l6003
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;doprnt.c: 1190: (putch('-') );
  3717  001462  0E2D               	movlw	45
  3718  001464  EC9D  F022         	call	_putch
  3719                           
  3720                           ;doprnt.c: 1195: }
  3721                           ;doprnt.c: 1196: while(c--) {
  3722  001468  D049               	goto	l6003
  3723  00146A                     l5997:
  3724                           
  3725                           ;doprnt.c: 1200: {
  3726                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3727  00146A  C17F  F013         	movff	printf@val,___lldiv@dividend
  3728  00146E  C180  F014         	movff	printf@val+1,___lldiv@dividend+1
  3729  001472  C181  F015         	movff	printf@val+2,___lldiv@dividend+2
  3730  001476  C182  F016         	movff	printf@val+3,___lldiv@dividend+3
  3731  00147A  0101               	movlb	1	; () banked
  3732  00147C  5188               	movf	printf@c& (0+255),w,b
  3733  00147E  0D04               	mullw	4
  3734  001480  0E01               	movlw	low _dpowers
  3735  001482  24F3               	addwf	prodl,w,c
  3736  001484  6EF6               	movwf	tblptrl,c
  3737  001486  0E0F               	movlw	high _dpowers
  3738  001488  20F4               	addwfc	prodh,w,c
  3739  00148A  6EF7               	movwf	tblptrh,c
  3740  00148C                     	if	1	;There are 3 active tblptr bytes
  3741  00148C  6AF8               	clrf	tblptru,c
  3742  00148E  0E00               	movlw	low (__mediumconst shr (0+16))
  3743  001490  22F8               	addwfc	tblptru,f,c
  3744  001492                     	endif
  3745  001492  0009               	tblrd		*+
  3746  001494  CFF5 F017          	movff	tablat,___lldiv@divisor
  3747  001498  0009               	tblrd		*+
  3748  00149A  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  3749  00149E  0009               	tblrd		*+
  3750  0014A0  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  3751  0014A4  000A               	tblrd		*-
  3752  0014A6  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  3753  0014AA  EC06  F01F         	call	___lldiv	;wreg free
  3754  0014AE  C013  F17B         	movff	?___lldiv,printf@tmpval
  3755  0014B2  C014  F17C         	movff	?___lldiv+1,printf@tmpval+1
  3756  0014B6  C015  F17D         	movff	?___lldiv+2,printf@tmpval+2
  3757  0014BA  C016  F17E         	movff	?___lldiv+3,printf@tmpval+3
  3758                           
  3759                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3760  0014BE  C17B  F020         	movff	printf@tmpval,___llmod@dividend
  3761  0014C2  C17C  F021         	movff	printf@tmpval+1,___llmod@dividend+1
  3762  0014C6  C17D  F022         	movff	printf@tmpval+2,___llmod@dividend+2
  3763  0014CA  C17E  F023         	movff	printf@tmpval+3,___llmod@dividend+3
  3764  0014CE  0E0A               	movlw	10
  3765  0014D0  6E24               	movwf	___llmod@divisor,c
  3766  0014D2  0E00               	movlw	0
  3767  0014D4  6E25               	movwf	___llmod@divisor+1,c
  3768  0014D6  0E00               	movlw	0
  3769  0014D8  6E26               	movwf	___llmod@divisor+2,c
  3770  0014DA  0E00               	movlw	0
  3771  0014DC  6E27               	movwf	___llmod@divisor+3,c
  3772  0014DE  EC7F  F01F         	call	___llmod	;wreg free
  3773  0014E2  C020  F17B         	movff	?___llmod,printf@tmpval
  3774  0014E6  C021  F17C         	movff	?___llmod+1,printf@tmpval+1
  3775  0014EA  C022  F17D         	movff	?___llmod+2,printf@tmpval+2
  3776  0014EE  C023  F17E         	movff	?___llmod+3,printf@tmpval+3
  3777                           
  3778                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3779  0014F2  0101               	movlb	1	; () banked
  3780  0014F4  517B               	movf	printf@tmpval& (0+255),w,b
  3781  0014F6  0F30               	addlw	48
  3782  0014F8  EC9D  F022         	call	_putch
  3783  0014FC                     l6003:
  3784  0014FC  0101               	movlb	1	; () banked
  3785  0014FE  0788               	decf	printf@c& (0+255),f,b
  3786  001500  0101               	movlb	1	; () banked
  3787  001502  2988               	incf	printf@c& (0+255),w,b
  3788  001504  B4D8               	btfsc	status,2,c
  3789  001506  D008               	goto	l6009
  3790  001508  D7B0               	goto	l5997
  3791  00150A                     l6005:
  3792                           
  3793                           ; BSR set to: 1
  3794                           ;doprnt.c: 1208: (putch('0') );
  3795  00150A  0E30               	movlw	48
  3796  00150C  EC9D  F022         	call	_putch
  3797                           
  3798                           ;doprnt.c: 1209: exp--;
  3799  001510  0101               	movlb	1	; () banked
  3800  001512  0779               	decf	printf@exp& (0+255),f,b
  3801  001514  A0D8               	btfss	status,0,c
  3802  001516  077A               	decf	(printf@exp+1)& (0+255),f,b
  3803  001518                     l6009:
  3804                           
  3805                           ; BSR set to: 1
  3806  001518  0101               	movlb	1	; () banked
  3807  00151A  BF7A               	btfsc	(printf@exp+1)& (0+255),7,b
  3808  00151C  D007               	goto	l6011
  3809  00151E  0101               	movlb	1	; () banked
  3810  001520  517A               	movf	(printf@exp+1)& (0+255),w,b
  3811  001522  E1F3               	bnz	l6005
  3812  001524  0101               	movlb	1	; () banked
  3813  001526  0579               	decf	printf@exp& (0+255),w,b
  3814  001528  B0D8               	btfsc	status,0,c
  3815  00152A  D7EF               	goto	l6005
  3816  00152C                     l6011:
  3817                           
  3818                           ; BSR set to: 1
  3819                           ;doprnt.c: 1210: }
  3820                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3821  00152C  0101               	movlb	1	; () banked
  3822  00152E  BF84               	btfsc	(printf@prec+1)& (0+255),7,b
  3823  001530  D00C               	goto	l1090
  3824  001532  0101               	movlb	1	; () banked
  3825  001534  5184               	movf	(printf@prec+1)& (0+255),w,b
  3826  001536  E105               	bnz	u5350
  3827  001538  0E09               	movlw	9
  3828  00153A  0101               	movlb	1	; () banked
  3829  00153C  5D83               	subwf	printf@prec& (0+255),w,b
  3830  00153E  A0D8               	btfss	status,0,c
  3831  001540  D004               	goto	l1090
  3832  001542                     u5350:
  3833                           
  3834                           ; BSR set to: 1
  3835                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3836  001542  0E08               	movlw	8
  3837  001544  0101               	movlb	1	; () banked
  3838  001546  6F88               	movwf	printf@c& (0+255),b
  3839  001548  D002               	goto	l6015
  3840  00154A                     l1090:
  3841                           
  3842                           ; BSR set to: 1
  3843                           ;doprnt.c: 1213: else
  3844                           ;doprnt.c: 1214: c = prec;
  3845  00154A  C183  F188         	movff	printf@prec,printf@c
  3846  00154E                     l6015:
  3847                           
  3848                           ; BSR set to: 1
  3849                           ;doprnt.c: 1215: prec -= c;
  3850  00154E  0101               	movlb	1	; () banked
  3851  001550  5188               	movf	printf@c& (0+255),w,b
  3852  001552  0101               	movlb	1	; () banked
  3853  001554  5F83               	subwf	printf@prec& (0+255),f,b
  3854  001556  0E00               	movlw	0
  3855  001558  0101               	movlb	1	; () banked
  3856  00155A  BF88               	btfsc	printf@c& (0+255),7,b
  3857  00155C  0EFF               	movlw	255
  3858  00155E  0101               	movlb	1	; () banked
  3859  001560  5B84               	subwfb	(printf@prec+1)& (0+255),f,b
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;doprnt.c: 1219: if(c)
  3863  001562  0101               	movlb	1	; () banked
  3864  001564  5188               	movf	printf@c& (0+255),w,b
  3865  001566  0101               	movlb	1	; () banked
  3866  001568  B4D8               	btfsc	status,2,c
  3867  00156A  D003               	goto	l6021
  3868                           
  3869                           ; BSR set to: 1
  3870                           ;doprnt.c: 1221: (putch('.') );
  3871  00156C  0E2E               	movlw	46
  3872  00156E  EC9D  F022         	call	_putch
  3873  001572                     l6021:
  3874                           
  3875                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3876  001572  0101               	movlb	1	; () banked
  3877  001574  5188               	movf	printf@c& (0+255),w,b
  3878  001576  EC6B  F00C         	call	_scale
  3879  00157A  C036  F172         	movff	?_scale,_printf$2968
  3880  00157E  C037  F173         	movff	?_scale+1,_printf$2968+1
  3881  001582  C038  F174         	movff	?_scale+2,_printf$2968+2
  3882                           
  3883                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3884  001586  C185  F02A         	movff	printf@fval,___ftmul@f2
  3885  00158A  C186  F02B         	movff	printf@fval+1,___ftmul@f2+1
  3886  00158E  C187  F02C         	movff	printf@fval+2,___ftmul@f2+2
  3887  001592  C172  F027         	movff	_printf$2968,___ftmul@f1
  3888  001596  C173  F028         	movff	_printf$2968+1,___ftmul@f1+1
  3889  00159A  C174  F029         	movff	_printf$2968+2,___ftmul@f1+2
  3890  00159E  EC2D  F01C         	call	___ftmul	;wreg free
  3891  0015A2  C027  F0D4         	movff	?___ftmul,___fttol@f1
  3892  0015A6  C028  F0D5         	movff	?___ftmul+1,___fttol@f1+1
  3893  0015AA  C029  F0D6         	movff	?___ftmul+2,___fttol@f1+2
  3894  0015AE  EC35  F018         	call	___fttol	;wreg free
  3895  0015B2  C0D4  F17F         	movff	?___fttol,printf@val
  3896  0015B6  C0D5  F180         	movff	?___fttol+1,printf@val+1
  3897  0015BA  C0D6  F181         	movff	?___fttol+2,printf@val+2
  3898  0015BE  C0D7  F182         	movff	?___fttol+3,printf@val+3
  3899                           
  3900                           ;doprnt.c: 1228: while(c--) {
  3901  0015C2  D073               	goto	l6031
  3902  0015C4                     l6025:
  3903                           
  3904                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3905  0015C4  C17F  F013         	movff	printf@val,___lldiv@dividend
  3906  0015C8  C180  F014         	movff	printf@val+1,___lldiv@dividend+1
  3907  0015CC  C181  F015         	movff	printf@val+2,___lldiv@dividend+2
  3908  0015D0  C182  F016         	movff	printf@val+3,___lldiv@dividend+3
  3909  0015D4  0101               	movlb	1	; () banked
  3910  0015D6  5188               	movf	printf@c& (0+255),w,b
  3911  0015D8  0D04               	mullw	4
  3912  0015DA  0E01               	movlw	low _dpowers
  3913  0015DC  24F3               	addwf	prodl,w,c
  3914  0015DE  6EF6               	movwf	tblptrl,c
  3915  0015E0  0E0F               	movlw	high _dpowers
  3916  0015E2  20F4               	addwfc	prodh,w,c
  3917  0015E4  6EF7               	movwf	tblptrh,c
  3918  0015E6                     	if	1	;There are 3 active tblptr bytes
  3919  0015E6  6AF8               	clrf	tblptru,c
  3920  0015E8  0E00               	movlw	low (__mediumconst shr (0+16))
  3921  0015EA  22F8               	addwfc	tblptru,f,c
  3922  0015EC                     	endif
  3923  0015EC  0009               	tblrd		*+
  3924  0015EE  CFF5 F017          	movff	tablat,___lldiv@divisor
  3925  0015F2  0009               	tblrd		*+
  3926  0015F4  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  3927  0015F8  0009               	tblrd		*+
  3928  0015FA  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  3929  0015FE  000A               	tblrd		*-
  3930  001600  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  3931  001604  EC06  F01F         	call	___lldiv	;wreg free
  3932  001608  C013  F17B         	movff	?___lldiv,printf@tmpval
  3933  00160C  C014  F17C         	movff	?___lldiv+1,printf@tmpval+1
  3934  001610  C015  F17D         	movff	?___lldiv+2,printf@tmpval+2
  3935  001614  C016  F17E         	movff	?___lldiv+3,printf@tmpval+3
  3936                           
  3937                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3938  001618  C17B  F020         	movff	printf@tmpval,___llmod@dividend
  3939  00161C  C17C  F021         	movff	printf@tmpval+1,___llmod@dividend+1
  3940  001620  C17D  F022         	movff	printf@tmpval+2,___llmod@dividend+2
  3941  001624  C17E  F023         	movff	printf@tmpval+3,___llmod@dividend+3
  3942  001628  0E0A               	movlw	10
  3943  00162A  6E24               	movwf	___llmod@divisor,c
  3944  00162C  0E00               	movlw	0
  3945  00162E  6E25               	movwf	___llmod@divisor+1,c
  3946  001630  0E00               	movlw	0
  3947  001632  6E26               	movwf	___llmod@divisor+2,c
  3948  001634  0E00               	movlw	0
  3949  001636  6E27               	movwf	___llmod@divisor+3,c
  3950  001638  EC7F  F01F         	call	___llmod	;wreg free
  3951  00163C  C020  F17B         	movff	?___llmod,printf@tmpval
  3952  001640  C021  F17C         	movff	?___llmod+1,printf@tmpval+1
  3953  001644  C022  F17D         	movff	?___llmod+2,printf@tmpval+2
  3954  001648  C023  F17E         	movff	?___llmod+3,printf@tmpval+3
  3955                           
  3956                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3957  00164C  0101               	movlb	1	; () banked
  3958  00164E  517B               	movf	printf@tmpval& (0+255),w,b
  3959  001650  0F30               	addlw	48
  3960  001652  EC9D  F022         	call	_putch
  3961                           
  3962                           ;doprnt.c: 1232: val %= dpowers[c];
  3963  001656  C17F  F020         	movff	printf@val,___llmod@dividend
  3964  00165A  C180  F021         	movff	printf@val+1,___llmod@dividend+1
  3965  00165E  C181  F022         	movff	printf@val+2,___llmod@dividend+2
  3966  001662  C182  F023         	movff	printf@val+3,___llmod@dividend+3
  3967  001666  0101               	movlb	1	; () banked
  3968  001668  5188               	movf	printf@c& (0+255),w,b
  3969  00166A  0D04               	mullw	4
  3970  00166C  0E01               	movlw	low _dpowers
  3971  00166E  24F3               	addwf	prodl,w,c
  3972  001670  6EF6               	movwf	tblptrl,c
  3973  001672  0E0F               	movlw	high _dpowers
  3974  001674  20F4               	addwfc	prodh,w,c
  3975  001676  6EF7               	movwf	tblptrh,c
  3976  001678                     	if	1	;There are 3 active tblptr bytes
  3977  001678  6AF8               	clrf	tblptru,c
  3978  00167A  0E00               	movlw	low (__mediumconst shr (0+16))
  3979  00167C  22F8               	addwfc	tblptru,f,c
  3980  00167E                     	endif
  3981  00167E  0009               	tblrd		*+
  3982  001680  CFF5 F024          	movff	tablat,___llmod@divisor
  3983  001684  0009               	tblrd		*+
  3984  001686  CFF5 F025          	movff	tablat,___llmod@divisor+1
  3985  00168A  0009               	tblrd		*+
  3986  00168C  CFF5 F026          	movff	tablat,___llmod@divisor+2
  3987  001690  000A               	tblrd		*-
  3988  001692  CFF5 F027          	movff	tablat,___llmod@divisor+3
  3989  001696  EC7F  F01F         	call	___llmod	;wreg free
  3990  00169A  C020  F17F         	movff	?___llmod,printf@val
  3991  00169E  C021  F180         	movff	?___llmod+1,printf@val+1
  3992  0016A2  C022  F181         	movff	?___llmod+2,printf@val+2
  3993  0016A6  C023  F182         	movff	?___llmod+3,printf@val+3
  3994  0016AA                     l6031:
  3995  0016AA  0101               	movlb	1	; () banked
  3996  0016AC  0788               	decf	printf@c& (0+255),f,b
  3997  0016AE  0101               	movlb	1	; () banked
  3998  0016B0  2988               	incf	printf@c& (0+255),w,b
  3999  0016B2  B4D8               	btfsc	status,2,c
  4000  0016B4  D008               	goto	l6037
  4001  0016B6  D786               	goto	l6025
  4002  0016B8                     l6033:
  4003                           
  4004                           ; BSR set to: 1
  4005                           ;doprnt.c: 1236: (putch('0') );
  4006  0016B8  0E30               	movlw	48
  4007  0016BA  EC9D  F022         	call	_putch
  4008                           
  4009                           ;doprnt.c: 1237: prec--;
  4010  0016BE  0101               	movlb	1	; () banked
  4011  0016C0  0783               	decf	printf@prec& (0+255),f,b
  4012  0016C2  A0D8               	btfss	status,0,c
  4013  0016C4  0784               	decf	(printf@prec+1)& (0+255),f,b
  4014  0016C6                     l6037:
  4015                           
  4016                           ; BSR set to: 1
  4017  0016C6  0101               	movlb	1	; () banked
  4018  0016C8  5183               	movf	printf@prec& (0+255),w,b
  4019  0016CA  0101               	movlb	1	; () banked
  4020  0016CC  1184               	iorwf	(printf@prec+1)& (0+255),w,b
  4021  0016CE  B4D8               	btfsc	status,2,c
  4022  0016D0  D0F0               	goto	l6087
  4023  0016D2  D7F2               	goto	l6033
  4024  0016D4                     l6039:
  4025                           
  4026                           ; BSR set to: 1
  4027                           ;doprnt.c: 1246: }
  4028                           ;doprnt.c: 1253: {
  4029                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4030  0016D4  C175  FFD9         	movff	printf@ap,fsr2l
  4031  0016D8  C176  FFDA         	movff	printf@ap+1,fsr2h
  4032  0016DC  CFDE F17F          	movff	postinc2,printf@val
  4033  0016E0  CFDD F180          	movff	postdec2,printf@val+1
  4034  0016E4  0101               	movlb	1	; () banked
  4035  0016E6  0E00               	movlw	0
  4036  0016E8  BF80               	btfsc	(printf@val+1)& (0+255),7,b
  4037  0016EA  0EFF               	movlw	-1
  4038  0016EC  6F81               	movwf	(printf@val+2)& (0+255),b
  4039  0016EE  6F82               	movwf	(printf@val+3)& (0+255),b
  4040                           
  4041                           ; BSR set to: 1
  4042  0016F0  0E02               	movlw	2
  4043  0016F2  0101               	movlb	1	; () banked
  4044  0016F4  2775               	addwf	printf@ap& (0+255),f,b
  4045  0016F6  0E00               	movlw	0
  4046  0016F8  2376               	addwfc	(printf@ap+1)& (0+255),f,b
  4047                           
  4048                           ; BSR set to: 1
  4049                           ;doprnt.c: 1261: if((long)val < 0) {
  4050  0016FA  0101               	movlb	1	; () banked
  4051  0016FC  AF82               	btfss	(printf@val+3)& (0+255),7,b
  4052  0016FE  D00C               	goto	l6049
  4053                           
  4054                           ; BSR set to: 1
  4055                           ;doprnt.c: 1262: flag |= 0x03;
  4056  001700  0E03               	movlw	3
  4057  001702  0101               	movlb	1	; () banked
  4058  001704  1377               	iorwf	printf@flag& (0+255),f,b
  4059                           
  4060                           ; BSR set to: 1
  4061                           ;doprnt.c: 1263: val = -val;
  4062  001706  0101               	movlb	1	; () banked
  4063  001708  1F82               	comf	(printf@val+3)& (0+255),f,b
  4064  00170A  1F81               	comf	(printf@val+2)& (0+255),f,b
  4065  00170C  1F80               	comf	(printf@val+1)& (0+255),f,b
  4066  00170E  6D7F               	negf	printf@val& (0+255),b
  4067  001710  0E00               	movlw	0
  4068  001712  2380               	addwfc	(printf@val+1)& (0+255),f,b
  4069  001714  2381               	addwfc	(printf@val+2)& (0+255),f,b
  4070  001716  2382               	addwfc	(printf@val+3)& (0+255),f,b
  4071  001718                     l6049:
  4072                           
  4073                           ; BSR set to: 1
  4074                           ;doprnt.c: 1264: }
  4075                           ;doprnt.c: 1266: }
  4076                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4077  001718  0101               	movlb	1	; () banked
  4078  00171A  5183               	movf	printf@prec& (0+255),w,b
  4079  00171C  0101               	movlb	1	; () banked
  4080  00171E  1184               	iorwf	(printf@prec+1)& (0+255),w,b
  4081  001720  A4D8               	btfss	status,2,c
  4082  001722  D00D               	goto	l6055
  4083                           
  4084                           ; BSR set to: 1
  4085  001724  0101               	movlb	1	; () banked
  4086  001726  517F               	movf	printf@val& (0+255),w,b
  4087  001728  0101               	movlb	1	; () banked
  4088  00172A  1180               	iorwf	(printf@val+1)& (0+255),w,b
  4089  00172C  0101               	movlb	1	; () banked
  4090  00172E  1181               	iorwf	(printf@val+2)& (0+255),w,b
  4091  001730  0101               	movlb	1	; () banked
  4092  001732  1182               	iorwf	(printf@val+3)& (0+255),w,b
  4093  001734  A4D8               	btfss	status,2,c
  4094  001736  D003               	goto	l6055
  4095                           
  4096                           ; BSR set to: 1
  4097                           ;doprnt.c: 1291: prec++;
  4098  001738  0101               	movlb	1	; () banked
  4099  00173A  4B83               	infsnz	printf@prec& (0+255),f,b
  4100  00173C  2B84               	incf	(printf@prec+1)& (0+255),f,b
  4101  00173E                     l6055:
  4102                           
  4103                           ; BSR set to: 1
  4104                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4105  00173E  0E01               	movlw	1
  4106  001740  0101               	movlb	1	; () banked
  4107  001742  6F88               	movwf	printf@c& (0+255),b
  4108  001744                     l6057:
  4109                           
  4110                           ; BSR set to: 1
  4111  001744  0E0A               	movlw	10
  4112  001746  0101               	movlb	1	; () banked
  4113  001748  1988               	xorwf	printf@c& (0+255),w,b
  4114  00174A  B4D8               	btfsc	status,2,c
  4115  00174C  D021               	goto	l6069
  4116                           
  4117                           ; BSR set to: 1
  4118                           ;doprnt.c: 1306: if(val < dpowers[c])
  4119                           
  4120                           ; BSR set to: 1
  4121                           
  4122                           ; BSR set to: 1
  4123  00174E  0101               	movlb	1	; () banked
  4124  001750  5188               	movf	printf@c& (0+255),w,b
  4125  001752  0D04               	mullw	4
  4126  001754  0E01               	movlw	low _dpowers
  4127  001756  24F3               	addwf	prodl,w,c
  4128  001758  6EF6               	movwf	tblptrl,c
  4129  00175A  0E0F               	movlw	high _dpowers
  4130  00175C  20F4               	addwfc	prodh,w,c
  4131  00175E  6EF7               	movwf	tblptrh,c
  4132  001760                     	if	1	;There are 3 active tblptr bytes
  4133  001760  6AF8               	clrf	tblptru,c
  4134  001762  0E00               	movlw	low (__mediumconst shr (0+16))
  4135  001764  22F8               	addwfc	tblptru,f,c
  4136  001766                     	endif
  4137  001766  0009               	tblrd		*+
  4138  001768  50F5               	movf	tablat,w,c
  4139  00176A  0101               	movlb	1	; () banked
  4140  00176C  5D7F               	subwf	printf@val& (0+255),w,b
  4141  00176E  0009               	tblrd		*+
  4142  001770  50F5               	movf	tablat,w,c
  4143  001772  0101               	movlb	1	; () banked
  4144  001774  5980               	subwfb	(printf@val+1)& (0+255),w,b
  4145  001776  0009               	tblrd		*+
  4146  001778  50F5               	movf	tablat,w,c
  4147  00177A  0101               	movlb	1	; () banked
  4148  00177C  5981               	subwfb	(printf@val+2)& (0+255),w,b
  4149  00177E  0009               	tblrd		*+
  4150  001780  50F5               	movf	tablat,w,c
  4151  001782  0101               	movlb	1	; () banked
  4152  001784  5982               	subwfb	(printf@val+3)& (0+255),w,b
  4153  001786  A0D8               	btfss	status,0,c
  4154  001788  D003               	goto	l6069
  4155                           
  4156                           ; BSR set to: 1
  4157                           
  4158                           ; BSR set to: 1
  4159                           
  4160                           ; BSR set to: 1
  4161                           ;doprnt.c: 1307: break;
  4162  00178A  0101               	movlb	1	; () banked
  4163  00178C  2B88               	incf	printf@c& (0+255),f,b
  4164  00178E  D7DA               	goto	l6057
  4165  001790                     l6069:
  4166                           
  4167                           ; BSR set to: 1
  4168                           ;doprnt.c: 1339: if(c < prec)
  4169  001790  0E80               	movlw	128
  4170  001792  0101               	movlb	1	; () banked
  4171  001794  BF88               	btfsc	printf@c& (0+255),7,b
  4172  001796  0E7F               	movlw	127
  4173  001798  0100               	movlb	0	; () banked
  4174  00179A  6FF0               	movwf	??_printf& (0+255),b
  4175  00179C  0101               	movlb	1	; () banked
  4176  00179E  5183               	movf	printf@prec& (0+255),w,b
  4177  0017A0  0101               	movlb	1	; () banked
  4178  0017A2  5D88               	subwf	printf@c& (0+255),w,b
  4179  0017A4  0101               	movlb	1	; () banked
  4180  0017A6  5184               	movf	(printf@prec+1)& (0+255),w,b
  4181  0017A8  0A80               	xorlw	128
  4182  0017AA  0100               	movlb	0	; () banked
  4183  0017AC  59F0               	subwfb	??_printf& (0+255),w,b
  4184  0017AE  B0D8               	btfsc	status,0,c
  4185  0017B0  D003               	goto	l6073
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;doprnt.c: 1340: c = prec;
  4189  0017B2  C183  F188         	movff	printf@prec,printf@c
  4190  0017B6  D018               	goto	l6077
  4191  0017B8                     l6073:
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;doprnt.c: 1341: else if(prec < c)
  4195  0017B8  0101               	movlb	1	; () banked
  4196  0017BA  5184               	movf	(printf@prec+1)& (0+255),w,b
  4197  0017BC  0A80               	xorlw	128
  4198  0017BE  0100               	movlb	0	; () banked
  4199  0017C0  6FF0               	movwf	??_printf& (0+255),b
  4200  0017C2  0101               	movlb	1	; () banked
  4201  0017C4  5188               	movf	printf@c& (0+255),w,b
  4202  0017C6  0101               	movlb	1	; () banked
  4203  0017C8  5D83               	subwf	printf@prec& (0+255),w,b
  4204  0017CA  0E80               	movlw	128
  4205  0017CC  0101               	movlb	1	; () banked
  4206  0017CE  BF88               	btfsc	printf@c& (0+255),7,b
  4207  0017D0  0E7F               	movlw	127
  4208  0017D2  0100               	movlb	0	; () banked
  4209  0017D4  59F0               	subwfb	??_printf& (0+255),w,b
  4210  0017D6  B0D8               	btfsc	status,0,c
  4211  0017D8  D007               	goto	l6077
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;doprnt.c: 1342: prec = c;
  4215  0017DA  0101               	movlb	1	; () banked
  4216  0017DC  5188               	movf	printf@c& (0+255),w,b
  4217  0017DE  0101               	movlb	1	; () banked
  4218  0017E0  6F83               	movwf	printf@prec& (0+255),b
  4219  0017E2  6B84               	clrf	(printf@prec+1)& (0+255),b
  4220  0017E4  BF83               	btfsc	printf@prec& (0+255),7,b
  4221  0017E6  0784               	decf	(printf@prec+1)& (0+255),f,b
  4222  0017E8                     l6077:
  4223                           
  4224                           ;doprnt.c: 1422: {
  4225                           ;doprnt.c: 1438: if(flag & 0x03)
  4226  0017E8  0E03               	movlw	3
  4227  0017EA  0101               	movlb	1	; () banked
  4228  0017EC  1577               	andwf	printf@flag& (0+255),w,b
  4229  0017EE  0100               	movlb	0	; () banked
  4230  0017F0  6FF0               	movwf	??_printf& (0+255),b
  4231  0017F2  0E00               	movlw	0
  4232  0017F4  0101               	movlb	1	; () banked
  4233  0017F6  1578               	andwf	(printf@flag+1)& (0+255),w,b
  4234  0017F8  0100               	movlb	0	; () banked
  4235  0017FA  6FF1               	movwf	(??_printf+1)& (0+255),b
  4236  0017FC  0100               	movlb	0	; () banked
  4237  0017FE  51F0               	movf	??_printf& (0+255),w,b
  4238  001800  0100               	movlb	0	; () banked
  4239  001802  11F1               	iorwf	(??_printf+1)& (0+255),w,b
  4240  001804  B4D8               	btfsc	status,2,c
  4241  001806  D04A               	goto	l6085
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;doprnt.c: 1439: (putch('-') );
  4245  001808  0E2D               	movlw	45
  4246  00180A  EC9D  F022         	call	_putch
  4247                           
  4248                           ;doprnt.c: 1469: }
  4249                           ;doprnt.c: 1474: while(prec--) {
  4250  00180E  D046               	goto	l6085
  4251  001810                     l6081:
  4252                           
  4253                           ;doprnt.c: 1478: {
  4254                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4255  001810  C183  F0F0         	movff	printf@prec,??_printf
  4256  001814  C184  F0F1         	movff	printf@prec+1,??_printf+1
  4257  001818  0100               	movlb	0	; () banked
  4258  00181A  90D8               	bcf	status,0,c
  4259  00181C  37F0               	rlcf	??_printf& (0+255),f,b
  4260  00181E  37F1               	rlcf	(??_printf+1)& (0+255),f,b
  4261  001820  0100               	movlb	0	; () banked
  4262  001822  90D8               	bcf	status,0,c
  4263  001824  37F0               	rlcf	??_printf& (0+255),f,b
  4264  001826  37F1               	rlcf	(??_printf+1)& (0+255),f,b
  4265  001828  0E01               	movlw	low _dpowers
  4266  00182A  0100               	movlb	0	; () banked
  4267  00182C  25F0               	addwf	??_printf& (0+255),w,b
  4268  00182E  6EF6               	movwf	tblptrl,c
  4269  001830  0E0F               	movlw	high _dpowers
  4270  001832  21F1               	addwfc	(??_printf+1)& (0+255),w,b
  4271  001834  6EF7               	movwf	tblptrh,c
  4272  001836                     	if	1	;There are 3 active tblptr bytes
  4273  001836  6AF8               	clrf	tblptru,c
  4274  001838  0E00               	movlw	low (__mediumconst shr (0+16))
  4275  00183A  22F8               	addwfc	tblptru,f,c
  4276  00183C                     	endif
  4277  00183C  0009               	tblrd		*+
  4278  00183E  CFF5 F017          	movff	tablat,___lldiv@divisor
  4279  001842  0009               	tblrd		*+
  4280  001844  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  4281  001848  0009               	tblrd		*+
  4282  00184A  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  4283  00184E  000A               	tblrd		*-
  4284  001850  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  4285  001854  C17F  F013         	movff	printf@val,___lldiv@dividend
  4286  001858  C180  F014         	movff	printf@val+1,___lldiv@dividend+1
  4287  00185C  C181  F015         	movff	printf@val+2,___lldiv@dividend+2
  4288  001860  C182  F016         	movff	printf@val+3,___lldiv@dividend+3
  4289  001864  EC06  F01F         	call	___lldiv	;wreg free
  4290  001868  C013  F020         	movff	?___lldiv,___llmod@dividend
  4291  00186C  C014  F021         	movff	?___lldiv+1,___llmod@dividend+1
  4292  001870  C015  F022         	movff	?___lldiv+2,___llmod@dividend+2
  4293  001874  C016  F023         	movff	?___lldiv+3,___llmod@dividend+3
  4294  001878  0E0A               	movlw	10
  4295  00187A  6E24               	movwf	___llmod@divisor,c
  4296  00187C  0E00               	movlw	0
  4297  00187E  6E25               	movwf	___llmod@divisor+1,c
  4298  001880  0E00               	movlw	0
  4299  001882  6E26               	movwf	___llmod@divisor+2,c
  4300  001884  0E00               	movlw	0
  4301  001886  6E27               	movwf	___llmod@divisor+3,c
  4302  001888  EC7F  F01F         	call	___llmod	;wreg free
  4303  00188C  5020               	movf	?___llmod,w,c
  4304  00188E  0F30               	addlw	48
  4305  001890  0101               	movlb	1	; () banked
  4306  001892  6F88               	movwf	printf@c& (0+255),b
  4307                           
  4308                           ; BSR set to: 1
  4309                           ;doprnt.c: 1523: }
  4310                           ;doprnt.c: 1524: (putch(c) );
  4311  001894  0101               	movlb	1	; () banked
  4312  001896  5188               	movf	printf@c& (0+255),w,b
  4313  001898  EC9D  F022         	call	_putch
  4314  00189C                     l6085:
  4315  00189C  0101               	movlb	1	; () banked
  4316  00189E  0783               	decf	printf@prec& (0+255),f,b
  4317  0018A0  A0D8               	btfss	status,0,c
  4318  0018A2  0784               	decf	(printf@prec+1)& (0+255),f,b
  4319  0018A4  0101               	movlb	1	; () banked
  4320  0018A6  2983               	incf	printf@prec& (0+255),w,b
  4321  0018A8  E1B3               	bnz	l6081
  4322  0018AA  0101               	movlb	1	; () banked
  4323  0018AC  2984               	incf	(printf@prec+1)& (0+255),w,b
  4324  0018AE  A4D8               	btfss	status,2,c
  4325  0018B0  D7AF               	goto	l6081
  4326  0018B2                     l6087:
  4327  0018B2  C0E3  FFF6         	movff	printf@f,tblptrl
  4328  0018B6  C0E4  FFF7         	movff	printf@f+1,tblptrh
  4329  0018BA  0100               	movlb	0	; () banked
  4330  0018BC  4BE3               	infsnz	printf@f& (0+255),f,b
  4331  0018BE  2BE4               	incf	(printf@f+1)& (0+255),f,b
  4332  0018C0                     	if	0	;tblptru may be non-zero
  4333  0018C0                     	endif
  4334  0018C0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4335  0018C0  0E00               	movlw	low (__mediumconst shr (0+16))
  4336  0018C2  6EF8               	movwf	tblptru,c
  4337  0018C4                     	endif
  4338  0018C4  0008               	tblrd		*
  4339  0018C6  CFF5 F188          	movff	tablat,printf@c
  4340  0018CA  0101               	movlb	1	; () banked
  4341  0018CC  5188               	movf	printf@c& (0+255),w,b
  4342  0018CE  B4D8               	btfsc	status,2,c
  4343  0018D0  0012               	return	
  4344  0018D2  EFDD  F007         	goto	l5877
  4345  0018D6                     __end_of_printf:
  4346                           	opt stack 0
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           indf2	equ	0xFDF
  4356                           postinc2	equ	0xFDE
  4357                           postdec2	equ	0xFDD
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function _scale *****************
  4363 ;; Defined at:
  4364 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  scl             1    wreg     char 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  scl             1    3[BANK0 ] char 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  3   53[COMRAM] char 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4378 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4379 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4381 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4382 ;;Total ram usage:        7 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    6
  4385 ;; This function calls:
  4386 ;;		___awdiv
  4387 ;;		___awmod
  4388 ;;		___ftmul
  4389 ;;		___wmul
  4390 ;; This function is called by:
  4391 ;;		_printf
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           	psect	text18
  4396  0018D6                     __ptext18:
  4397                           	opt stack 0
  4398  0018D6                     _scale:
  4399                           	opt stack 23
  4400                           
  4401                           ; BSR set to: 1
  4402                           ;incstack = 0
  4403                           ;scale@scl stored from wreg
  4404  0018D6  0100               	movlb	0	; () banked
  4405  0018D8  6FC4               	movwf	scale@scl& (0+255),b
  4406                           
  4407                           ;doprnt.c: 428: if(scl < 0) {
  4408  0018DA  0100               	movlb	0	; () banked
  4409  0018DC  AFC4               	btfss	scale@scl& (0+255),7,b
  4410  0018DE  D116               	goto	l5533
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;doprnt.c: 429: scl = -scl;
  4414  0018E0  0100               	movlb	0	; () banked
  4415  0018E2  6DC4               	negf	scale@scl& (0+255),b
  4416                           
  4417                           ;doprnt.c: 430: if(scl>=110)
  4418  0018E4  0100               	movlb	0	; () banked
  4419  0018E6  51C4               	movf	scale@scl& (0+255),w,b
  4420  0018E8  0A80               	xorlw	128
  4421  0018EA  0F12               	addlw	-238
  4422  0018EC  A0D8               	btfss	status,0,c
  4423  0018EE  D09D               	goto	l5523
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4427  0018F0  0E00               	movlw	0
  4428  0018F2  6E24               	movwf	___wmul@multiplicand+1,c
  4429  0018F4  0E03               	movlw	3
  4430  0018F6  6E23               	movwf	___wmul@multiplicand,c
  4431  0018F8  0E00               	movlw	0
  4432  0018FA  6E1C               	movwf	___awdiv@divisor+1,c
  4433  0018FC  0E0A               	movlw	10
  4434  0018FE  6E1B               	movwf	___awdiv@divisor,c
  4435  001900  0E00               	movlw	0
  4436  001902  6E16               	movwf	___awmod@divisor+1,c
  4437  001904  0E64               	movlw	100
  4438  001906  6E15               	movwf	___awmod@divisor,c
  4439  001908  0100               	movlb	0	; () banked
  4440  00190A  51C4               	movf	scale@scl& (0+255),w,b
  4441  00190C  6E13               	movwf	___awmod@dividend,c
  4442  00190E  6A14               	clrf	___awmod@dividend+1,c
  4443  001910  BE13               	btfsc	___awmod@dividend,7,c
  4444  001912  0614               	decf	___awmod@dividend+1,f,c
  4445  001914  EC47  F01F         	call	___awmod	;wreg free
  4446  001918  C013  F019         	movff	?___awmod,___awdiv@dividend
  4447  00191C  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4448  001920  ECC4  F01E         	call	___awdiv	;wreg free
  4449  001924  0E09               	movlw	9
  4450  001926  2419               	addwf	?___awdiv,w,c
  4451  001928  6E21               	movwf	___wmul@multiplier,c
  4452  00192A  0E00               	movlw	0
  4453  00192C  201A               	addwfc	?___awdiv+1,w,c
  4454  00192E  6E22               	movwf	___wmul@multiplier+1,c
  4455  001930  EC88  F021         	call	___wmul	;wreg free
  4456  001934  0E50               	movlw	low __npowers_
  4457  001936  2421               	addwf	?___wmul,w,c
  4458  001938  6EF6               	movwf	tblptrl,c
  4459  00193A  0E0F               	movlw	high __npowers_
  4460  00193C  2022               	addwfc	?___wmul+1,w,c
  4461  00193E  6EF7               	movwf	tblptrh,c
  4462  001940                     	if	1	;There are 3 active tblptr bytes
  4463  001940  6AF8               	clrf	tblptru,c
  4464  001942  0E00               	movlw	low (__mediumconst shr (0+16))
  4465  001944  22F8               	addwfc	tblptru,f,c
  4466  001946                     	endif
  4467  001946  0009               	tblrd		*+
  4468  001948  CFF5 F02A          	movff	tablat,___ftmul@f2
  4469  00194C  0009               	tblrd		*+
  4470  00194E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4471  001952  000A               	tblrd		*-
  4472  001954  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4473  001958  0E00               	movlw	0
  4474  00195A  6E1C               	movwf	___awdiv@divisor+1,c
  4475  00195C  0E64               	movlw	100
  4476  00195E  6E1B               	movwf	___awdiv@divisor,c
  4477  001960  0100               	movlb	0	; () banked
  4478  001962  51C4               	movf	scale@scl& (0+255),w,b
  4479  001964  6E19               	movwf	___awdiv@dividend,c
  4480  001966  6A1A               	clrf	___awdiv@dividend+1,c
  4481  001968  BE19               	btfsc	___awdiv@dividend,7,c
  4482  00196A  061A               	decf	___awdiv@dividend+1,f,c
  4483  00196C  ECC4  F01E         	call	___awdiv	;wreg free
  4484  001970  0E12               	movlw	18
  4485  001972  2419               	addwf	?___awdiv,w,c
  4486  001974  6E21               	movwf	___wmul@multiplier,c
  4487  001976  0E00               	movlw	0
  4488  001978  201A               	addwfc	?___awdiv+1,w,c
  4489  00197A  6E22               	movwf	___wmul@multiplier+1,c
  4490  00197C  0E00               	movlw	0
  4491  00197E  6E24               	movwf	___wmul@multiplicand+1,c
  4492  001980  0E03               	movlw	3
  4493  001982  6E23               	movwf	___wmul@multiplicand,c
  4494  001984  EC88  F021         	call	___wmul	;wreg free
  4495  001988  0E50               	movlw	low __npowers_
  4496  00198A  2421               	addwf	?___wmul,w,c
  4497  00198C  6EF6               	movwf	tblptrl,c
  4498  00198E  0E0F               	movlw	high __npowers_
  4499  001990  2022               	addwfc	?___wmul+1,w,c
  4500  001992  6EF7               	movwf	tblptrh,c
  4501  001994                     	if	1	;There are 3 active tblptr bytes
  4502  001994  6AF8               	clrf	tblptru,c
  4503  001996  0E00               	movlw	low (__mediumconst shr (0+16))
  4504  001998  22F8               	addwfc	tblptru,f,c
  4505  00199A                     	endif
  4506  00199A  0009               	tblrd		*+
  4507  00199C  CFF5 F027          	movff	tablat,___ftmul@f1
  4508  0019A0  0009               	tblrd		*+
  4509  0019A2  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4510  0019A6  000A               	tblrd		*-
  4511  0019A8  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4512  0019AC  EC2D  F01C         	call	___ftmul	;wreg free
  4513  0019B0  C027  F0C1         	movff	?___ftmul,_scale$2967
  4514  0019B4  C028  F0C2         	movff	?___ftmul+1,_scale$2967+1
  4515  0019B8  C029  F0C3         	movff	?___ftmul+2,_scale$2967+2
  4516                           
  4517                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4518  0019BC  C0C1  F027         	movff	_scale$2967,___ftmul@f1
  4519  0019C0  C0C2  F028         	movff	_scale$2967+1,___ftmul@f1+1
  4520  0019C4  C0C3  F029         	movff	_scale$2967+2,___ftmul@f1+2
  4521  0019C8  0E00               	movlw	0
  4522  0019CA  6E24               	movwf	___wmul@multiplicand+1,c
  4523  0019CC  0E03               	movlw	3
  4524  0019CE  6E23               	movwf	___wmul@multiplicand,c
  4525  0019D0  0E00               	movlw	0
  4526  0019D2  6E16               	movwf	___awmod@divisor+1,c
  4527  0019D4  0E0A               	movlw	10
  4528  0019D6  6E15               	movwf	___awmod@divisor,c
  4529  0019D8  0100               	movlb	0	; () banked
  4530  0019DA  51C4               	movf	scale@scl& (0+255),w,b
  4531  0019DC  6E13               	movwf	___awmod@dividend,c
  4532  0019DE  6A14               	clrf	___awmod@dividend+1,c
  4533  0019E0  BE13               	btfsc	___awmod@dividend,7,c
  4534  0019E2  0614               	decf	___awmod@dividend+1,f,c
  4535  0019E4  EC47  F01F         	call	___awmod	;wreg free
  4536  0019E8  C013  F021         	movff	?___awmod,___wmul@multiplier
  4537  0019EC  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4538  0019F0  EC88  F021         	call	___wmul	;wreg free
  4539  0019F4  0E50               	movlw	low __npowers_
  4540  0019F6  2421               	addwf	?___wmul,w,c
  4541  0019F8  6EF6               	movwf	tblptrl,c
  4542  0019FA  0E0F               	movlw	high __npowers_
  4543  0019FC  2022               	addwfc	?___wmul+1,w,c
  4544  0019FE  6EF7               	movwf	tblptrh,c
  4545  001A00                     	if	1	;There are 3 active tblptr bytes
  4546  001A00  6AF8               	clrf	tblptru,c
  4547  001A02  0E00               	movlw	low (__mediumconst shr (0+16))
  4548  001A04  22F8               	addwfc	tblptru,f,c
  4549  001A06                     	endif
  4550  001A06  0009               	tblrd		*+
  4551  001A08  CFF5 F02A          	movff	tablat,___ftmul@f2
  4552  001A0C  0009               	tblrd		*+
  4553  001A0E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4554  001A12  000A               	tblrd		*-
  4555  001A14  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4556  001A18  EC2D  F01C         	call	___ftmul	;wreg free
  4557  001A1C  C027  F036         	movff	?___ftmul,?_scale
  4558  001A20  C028  F037         	movff	?___ftmul+1,?_scale+1
  4559  001A24  C029  F038         	movff	?___ftmul+2,?_scale+2
  4560  001A28  0012               	return	
  4561  001A2A                     l5523:
  4562                           
  4563                           ;doprnt.c: 432: else if(scl > 10)
  4564  001A2A  0100               	movlb	0	; () banked
  4565  001A2C  51C4               	movf	scale@scl& (0+255),w,b
  4566  001A2E  0A80               	xorlw	128
  4567  001A30  0F75               	addlw	-139
  4568  001A32  A0D8               	btfss	status,0,c
  4569  001A34  D055               	goto	l5529
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4573  001A36  0E00               	movlw	0
  4574  001A38  6E1C               	movwf	___awdiv@divisor+1,c
  4575  001A3A  0E0A               	movlw	10
  4576  001A3C  6E1B               	movwf	___awdiv@divisor,c
  4577  001A3E  0100               	movlb	0	; () banked
  4578  001A40  51C4               	movf	scale@scl& (0+255),w,b
  4579  001A42  6E19               	movwf	___awdiv@dividend,c
  4580  001A44  6A1A               	clrf	___awdiv@dividend+1,c
  4581  001A46  BE19               	btfsc	___awdiv@dividend,7,c
  4582  001A48  061A               	decf	___awdiv@dividend+1,f,c
  4583  001A4A  ECC4  F01E         	call	___awdiv	;wreg free
  4584  001A4E  0E09               	movlw	9
  4585  001A50  2419               	addwf	?___awdiv,w,c
  4586  001A52  6E21               	movwf	___wmul@multiplier,c
  4587  001A54  0E00               	movlw	0
  4588  001A56  201A               	addwfc	?___awdiv+1,w,c
  4589  001A58  6E22               	movwf	___wmul@multiplier+1,c
  4590  001A5A  0E00               	movlw	0
  4591  001A5C  6E24               	movwf	___wmul@multiplicand+1,c
  4592  001A5E  0E03               	movlw	3
  4593  001A60  6E23               	movwf	___wmul@multiplicand,c
  4594  001A62  EC88  F021         	call	___wmul	;wreg free
  4595  001A66  0E50               	movlw	low __npowers_
  4596  001A68  2421               	addwf	?___wmul,w,c
  4597  001A6A  6EF6               	movwf	tblptrl,c
  4598  001A6C  0E0F               	movlw	high __npowers_
  4599  001A6E  2022               	addwfc	?___wmul+1,w,c
  4600  001A70  6EF7               	movwf	tblptrh,c
  4601  001A72                     	if	1	;There are 3 active tblptr bytes
  4602  001A72  6AF8               	clrf	tblptru,c
  4603  001A74  0E00               	movlw	low (__mediumconst shr (0+16))
  4604  001A76  22F8               	addwfc	tblptru,f,c
  4605  001A78                     	endif
  4606  001A78  0009               	tblrd		*+
  4607  001A7A  CFF5 F027          	movff	tablat,___ftmul@f1
  4608  001A7E  0009               	tblrd		*+
  4609  001A80  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4610  001A84  000A               	tblrd		*-
  4611  001A86  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4612  001A8A  0E00               	movlw	0
  4613  001A8C  6E24               	movwf	___wmul@multiplicand+1,c
  4614  001A8E  0E03               	movlw	3
  4615  001A90  6E23               	movwf	___wmul@multiplicand,c
  4616  001A92  0E00               	movlw	0
  4617  001A94  6E16               	movwf	___awmod@divisor+1,c
  4618  001A96  0E0A               	movlw	10
  4619  001A98  6E15               	movwf	___awmod@divisor,c
  4620  001A9A  0100               	movlb	0	; () banked
  4621  001A9C  51C4               	movf	scale@scl& (0+255),w,b
  4622  001A9E  6E13               	movwf	___awmod@dividend,c
  4623  001AA0  6A14               	clrf	___awmod@dividend+1,c
  4624  001AA2  BE13               	btfsc	___awmod@dividend,7,c
  4625  001AA4  0614               	decf	___awmod@dividend+1,f,c
  4626  001AA6  EC47  F01F         	call	___awmod	;wreg free
  4627  001AAA  C013  F021         	movff	?___awmod,___wmul@multiplier
  4628  001AAE  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4629  001AB2  EC88  F021         	call	___wmul	;wreg free
  4630  001AB6  0E50               	movlw	low __npowers_
  4631  001AB8  2421               	addwf	?___wmul,w,c
  4632  001ABA  6EF6               	movwf	tblptrl,c
  4633  001ABC  0E0F               	movlw	high __npowers_
  4634  001ABE  2022               	addwfc	?___wmul+1,w,c
  4635  001AC0  6EF7               	movwf	tblptrh,c
  4636  001AC2                     	if	1	;There are 3 active tblptr bytes
  4637  001AC2  6AF8               	clrf	tblptru,c
  4638  001AC4  0E00               	movlw	low (__mediumconst shr (0+16))
  4639  001AC6  22F8               	addwfc	tblptru,f,c
  4640  001AC8                     	endif
  4641  001AC8  0009               	tblrd		*+
  4642  001ACA  CFF5 F02A          	movff	tablat,___ftmul@f2
  4643  001ACE  0009               	tblrd		*+
  4644  001AD0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4645  001AD4  000A               	tblrd		*-
  4646  001AD6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4647  001ADA  EC2D  F01C         	call	___ftmul	;wreg free
  4648  001ADE  D79E               	goto	L3
  4649  001AE0                     l5529:
  4650                           
  4651                           ;doprnt.c: 434: return _npowers_[scl];
  4652  001AE0  0100               	movlb	0	; () banked
  4653  001AE2  51C4               	movf	scale@scl& (0+255),w,b
  4654  001AE4  0D03               	mullw	3
  4655  001AE6  0E50               	movlw	low __npowers_
  4656  001AE8  24F3               	addwf	prodl,w,c
  4657  001AEA  6EF6               	movwf	tblptrl,c
  4658  001AEC  0E0F               	movlw	high __npowers_
  4659  001AEE  20F4               	addwfc	prodh,w,c
  4660  001AF0  6EF7               	movwf	tblptrh,c
  4661  001AF2                     	if	1	;There are 3 active tblptr bytes
  4662  001AF2  6AF8               	clrf	tblptru,c
  4663  001AF4  0E00               	movlw	low (__mediumconst shr (0+16))
  4664  001AF6  22F8               	addwfc	tblptru,f,c
  4665  001AF8                     	endif
  4666  001AF8  0009               	tblrd		*+
  4667  001AFA  CFF5 F036          	movff	tablat,?_scale
  4668  001AFE  0009               	tblrd		*+
  4669  001B00  CFF5 F037          	movff	tablat,?_scale+1
  4670  001B04  000A               	tblrd		*-
  4671  001B06  CFF5 F038          	movff	tablat,?_scale+2
  4672                           
  4673                           ; BSR set to: 0
  4674  001B0A  0012               	return	
  4675  001B0C                     l5533:
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;doprnt.c: 435: }
  4679                           ;doprnt.c: 436: if(scl>=110)
  4680  001B0C  0100               	movlb	0	; () banked
  4681  001B0E  51C4               	movf	scale@scl& (0+255),w,b
  4682  001B10  0A80               	xorlw	128
  4683  001B12  0F12               	addlw	-238
  4684  001B14  A0D8               	btfss	status,0,c
  4685  001B16  D09D               	goto	l5541
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4689  001B18  0E00               	movlw	0
  4690  001B1A  6E24               	movwf	___wmul@multiplicand+1,c
  4691  001B1C  0E03               	movlw	3
  4692  001B1E  6E23               	movwf	___wmul@multiplicand,c
  4693  001B20  0E00               	movlw	0
  4694  001B22  6E1C               	movwf	___awdiv@divisor+1,c
  4695  001B24  0E0A               	movlw	10
  4696  001B26  6E1B               	movwf	___awdiv@divisor,c
  4697  001B28  0E00               	movlw	0
  4698  001B2A  6E16               	movwf	___awmod@divisor+1,c
  4699  001B2C  0E64               	movlw	100
  4700  001B2E  6E15               	movwf	___awmod@divisor,c
  4701  001B30  0100               	movlb	0	; () banked
  4702  001B32  51C4               	movf	scale@scl& (0+255),w,b
  4703  001B34  6E13               	movwf	___awmod@dividend,c
  4704  001B36  6A14               	clrf	___awmod@dividend+1,c
  4705  001B38  BE13               	btfsc	___awmod@dividend,7,c
  4706  001B3A  0614               	decf	___awmod@dividend+1,f,c
  4707  001B3C  EC47  F01F         	call	___awmod	;wreg free
  4708  001B40  C013  F019         	movff	?___awmod,___awdiv@dividend
  4709  001B44  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4710  001B48  ECC4  F01E         	call	___awdiv	;wreg free
  4711  001B4C  0E09               	movlw	9
  4712  001B4E  2419               	addwf	?___awdiv,w,c
  4713  001B50  6E21               	movwf	___wmul@multiplier,c
  4714  001B52  0E00               	movlw	0
  4715  001B54  201A               	addwfc	?___awdiv+1,w,c
  4716  001B56  6E22               	movwf	___wmul@multiplier+1,c
  4717  001B58  EC88  F021         	call	___wmul	;wreg free
  4718  001B5C  0E29               	movlw	low __powers_
  4719  001B5E  2421               	addwf	?___wmul,w,c
  4720  001B60  6EF6               	movwf	tblptrl,c
  4721  001B62  0E0F               	movlw	high __powers_
  4722  001B64  2022               	addwfc	?___wmul+1,w,c
  4723  001B66  6EF7               	movwf	tblptrh,c
  4724  001B68                     	if	1	;There are 3 active tblptr bytes
  4725  001B68  6AF8               	clrf	tblptru,c
  4726  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
  4727  001B6C  22F8               	addwfc	tblptru,f,c
  4728  001B6E                     	endif
  4729  001B6E  0009               	tblrd		*+
  4730  001B70  CFF5 F02A          	movff	tablat,___ftmul@f2
  4731  001B74  0009               	tblrd		*+
  4732  001B76  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4733  001B7A  000A               	tblrd		*-
  4734  001B7C  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4735  001B80  0E00               	movlw	0
  4736  001B82  6E1C               	movwf	___awdiv@divisor+1,c
  4737  001B84  0E64               	movlw	100
  4738  001B86  6E1B               	movwf	___awdiv@divisor,c
  4739  001B88  0100               	movlb	0	; () banked
  4740  001B8A  51C4               	movf	scale@scl& (0+255),w,b
  4741  001B8C  6E19               	movwf	___awdiv@dividend,c
  4742  001B8E  6A1A               	clrf	___awdiv@dividend+1,c
  4743  001B90  BE19               	btfsc	___awdiv@dividend,7,c
  4744  001B92  061A               	decf	___awdiv@dividend+1,f,c
  4745  001B94  ECC4  F01E         	call	___awdiv	;wreg free
  4746  001B98  0E12               	movlw	18
  4747  001B9A  2419               	addwf	?___awdiv,w,c
  4748  001B9C  6E21               	movwf	___wmul@multiplier,c
  4749  001B9E  0E00               	movlw	0
  4750  001BA0  201A               	addwfc	?___awdiv+1,w,c
  4751  001BA2  6E22               	movwf	___wmul@multiplier+1,c
  4752  001BA4  0E00               	movlw	0
  4753  001BA6  6E24               	movwf	___wmul@multiplicand+1,c
  4754  001BA8  0E03               	movlw	3
  4755  001BAA  6E23               	movwf	___wmul@multiplicand,c
  4756  001BAC  EC88  F021         	call	___wmul	;wreg free
  4757  001BB0  0E29               	movlw	low __powers_
  4758  001BB2  2421               	addwf	?___wmul,w,c
  4759  001BB4  6EF6               	movwf	tblptrl,c
  4760  001BB6  0E0F               	movlw	high __powers_
  4761  001BB8  2022               	addwfc	?___wmul+1,w,c
  4762  001BBA  6EF7               	movwf	tblptrh,c
  4763  001BBC                     	if	1	;There are 3 active tblptr bytes
  4764  001BBC  6AF8               	clrf	tblptru,c
  4765  001BBE  0E00               	movlw	low (__mediumconst shr (0+16))
  4766  001BC0  22F8               	addwfc	tblptru,f,c
  4767  001BC2                     	endif
  4768  001BC2  0009               	tblrd		*+
  4769  001BC4  CFF5 F027          	movff	tablat,___ftmul@f1
  4770  001BC8  0009               	tblrd		*+
  4771  001BCA  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4772  001BCE  000A               	tblrd		*-
  4773  001BD0  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4774  001BD4  EC2D  F01C         	call	___ftmul	;wreg free
  4775  001BD8  C027  F0C1         	movff	?___ftmul,_scale$2967
  4776  001BDC  C028  F0C2         	movff	?___ftmul+1,_scale$2967+1
  4777  001BE0  C029  F0C3         	movff	?___ftmul+2,_scale$2967+2
  4778                           
  4779                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4780  001BE4  C0C1  F027         	movff	_scale$2967,___ftmul@f1
  4781  001BE8  C0C2  F028         	movff	_scale$2967+1,___ftmul@f1+1
  4782  001BEC  C0C3  F029         	movff	_scale$2967+2,___ftmul@f1+2
  4783  001BF0  0E00               	movlw	0
  4784  001BF2  6E24               	movwf	___wmul@multiplicand+1,c
  4785  001BF4  0E03               	movlw	3
  4786  001BF6  6E23               	movwf	___wmul@multiplicand,c
  4787  001BF8  0E00               	movlw	0
  4788  001BFA  6E16               	movwf	___awmod@divisor+1,c
  4789  001BFC  0E0A               	movlw	10
  4790  001BFE  6E15               	movwf	___awmod@divisor,c
  4791  001C00  0100               	movlb	0	; () banked
  4792  001C02  51C4               	movf	scale@scl& (0+255),w,b
  4793  001C04  6E13               	movwf	___awmod@dividend,c
  4794  001C06  6A14               	clrf	___awmod@dividend+1,c
  4795  001C08  BE13               	btfsc	___awmod@dividend,7,c
  4796  001C0A  0614               	decf	___awmod@dividend+1,f,c
  4797  001C0C  EC47  F01F         	call	___awmod	;wreg free
  4798  001C10  C013  F021         	movff	?___awmod,___wmul@multiplier
  4799  001C14  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4800  001C18  EC88  F021         	call	___wmul	;wreg free
  4801  001C1C  0E29               	movlw	low __powers_
  4802  001C1E  2421               	addwf	?___wmul,w,c
  4803  001C20  6EF6               	movwf	tblptrl,c
  4804  001C22  0E0F               	movlw	high __powers_
  4805  001C24  2022               	addwfc	?___wmul+1,w,c
  4806  001C26  6EF7               	movwf	tblptrh,c
  4807  001C28                     	if	1	;There are 3 active tblptr bytes
  4808  001C28  6AF8               	clrf	tblptru,c
  4809  001C2A  0E00               	movlw	low (__mediumconst shr (0+16))
  4810  001C2C  22F8               	addwfc	tblptru,f,c
  4811  001C2E                     	endif
  4812  001C2E  0009               	tblrd		*+
  4813  001C30  CFF5 F02A          	movff	tablat,___ftmul@f2
  4814  001C34  0009               	tblrd		*+
  4815  001C36  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4816  001C3A  000A               	tblrd		*-
  4817  001C3C  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4818  001C40  EC2D  F01C         	call	___ftmul	;wreg free
  4819  001C44  C027  F036         	movff	?___ftmul,?_scale
  4820  001C48  C028  F037         	movff	?___ftmul+1,?_scale+1
  4821  001C4C  C029  F038         	movff	?___ftmul+2,?_scale+2
  4822  001C50  0012               	return	
  4823  001C52                     l5541:
  4824                           
  4825                           ;doprnt.c: 438: else if(scl > 10)
  4826  001C52  0100               	movlb	0	; () banked
  4827  001C54  51C4               	movf	scale@scl& (0+255),w,b
  4828  001C56  0A80               	xorlw	128
  4829  001C58  0F75               	addlw	-139
  4830  001C5A  A0D8               	btfss	status,0,c
  4831  001C5C  D055               	goto	l5547
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4835  001C5E  0E00               	movlw	0
  4836  001C60  6E1C               	movwf	___awdiv@divisor+1,c
  4837  001C62  0E0A               	movlw	10
  4838  001C64  6E1B               	movwf	___awdiv@divisor,c
  4839  001C66  0100               	movlb	0	; () banked
  4840  001C68  51C4               	movf	scale@scl& (0+255),w,b
  4841  001C6A  6E19               	movwf	___awdiv@dividend,c
  4842  001C6C  6A1A               	clrf	___awdiv@dividend+1,c
  4843  001C6E  BE19               	btfsc	___awdiv@dividend,7,c
  4844  001C70  061A               	decf	___awdiv@dividend+1,f,c
  4845  001C72  ECC4  F01E         	call	___awdiv	;wreg free
  4846  001C76  0E09               	movlw	9
  4847  001C78  2419               	addwf	?___awdiv,w,c
  4848  001C7A  6E21               	movwf	___wmul@multiplier,c
  4849  001C7C  0E00               	movlw	0
  4850  001C7E  201A               	addwfc	?___awdiv+1,w,c
  4851  001C80  6E22               	movwf	___wmul@multiplier+1,c
  4852  001C82  0E00               	movlw	0
  4853  001C84  6E24               	movwf	___wmul@multiplicand+1,c
  4854  001C86  0E03               	movlw	3
  4855  001C88  6E23               	movwf	___wmul@multiplicand,c
  4856  001C8A  EC88  F021         	call	___wmul	;wreg free
  4857  001C8E  0E29               	movlw	low __powers_
  4858  001C90  2421               	addwf	?___wmul,w,c
  4859  001C92  6EF6               	movwf	tblptrl,c
  4860  001C94  0E0F               	movlw	high __powers_
  4861  001C96  2022               	addwfc	?___wmul+1,w,c
  4862  001C98  6EF7               	movwf	tblptrh,c
  4863  001C9A                     	if	1	;There are 3 active tblptr bytes
  4864  001C9A  6AF8               	clrf	tblptru,c
  4865  001C9C  0E00               	movlw	low (__mediumconst shr (0+16))
  4866  001C9E  22F8               	addwfc	tblptru,f,c
  4867  001CA0                     	endif
  4868  001CA0  0009               	tblrd		*+
  4869  001CA2  CFF5 F027          	movff	tablat,___ftmul@f1
  4870  001CA6  0009               	tblrd		*+
  4871  001CA8  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4872  001CAC  000A               	tblrd		*-
  4873  001CAE  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4874  001CB2  0E00               	movlw	0
  4875  001CB4  6E24               	movwf	___wmul@multiplicand+1,c
  4876  001CB6  0E03               	movlw	3
  4877  001CB8  6E23               	movwf	___wmul@multiplicand,c
  4878  001CBA  0E00               	movlw	0
  4879  001CBC  6E16               	movwf	___awmod@divisor+1,c
  4880  001CBE  0E0A               	movlw	10
  4881  001CC0  6E15               	movwf	___awmod@divisor,c
  4882  001CC2  0100               	movlb	0	; () banked
  4883  001CC4  51C4               	movf	scale@scl& (0+255),w,b
  4884  001CC6  6E13               	movwf	___awmod@dividend,c
  4885  001CC8  6A14               	clrf	___awmod@dividend+1,c
  4886  001CCA  BE13               	btfsc	___awmod@dividend,7,c
  4887  001CCC  0614               	decf	___awmod@dividend+1,f,c
  4888  001CCE  EC47  F01F         	call	___awmod	;wreg free
  4889  001CD2  C013  F021         	movff	?___awmod,___wmul@multiplier
  4890  001CD6  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4891  001CDA  EC88  F021         	call	___wmul	;wreg free
  4892  001CDE  0E29               	movlw	low __powers_
  4893  001CE0  2421               	addwf	?___wmul,w,c
  4894  001CE2  6EF6               	movwf	tblptrl,c
  4895  001CE4  0E0F               	movlw	high __powers_
  4896  001CE6  2022               	addwfc	?___wmul+1,w,c
  4897  001CE8  6EF7               	movwf	tblptrh,c
  4898  001CEA                     	if	1	;There are 3 active tblptr bytes
  4899  001CEA  6AF8               	clrf	tblptru,c
  4900  001CEC  0E00               	movlw	low (__mediumconst shr (0+16))
  4901  001CEE  22F8               	addwfc	tblptru,f,c
  4902  001CF0                     	endif
  4903  001CF0  0009               	tblrd		*+
  4904  001CF2  CFF5 F02A          	movff	tablat,___ftmul@f2
  4905  001CF6  0009               	tblrd		*+
  4906  001CF8  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4907  001CFC  000A               	tblrd		*-
  4908  001CFE  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4909  001D02  EC2D  F01C         	call	___ftmul	;wreg free
  4910  001D06  D79E               	goto	L4
  4911  001D08                     l5547:
  4912                           
  4913                           ;doprnt.c: 440: return _powers_[scl];
  4914  001D08  0100               	movlb	0	; () banked
  4915  001D0A  51C4               	movf	scale@scl& (0+255),w,b
  4916  001D0C  0D03               	mullw	3
  4917  001D0E  0E29               	movlw	low __powers_
  4918  001D10  24F3               	addwf	prodl,w,c
  4919  001D12  6EF6               	movwf	tblptrl,c
  4920  001D14  0E0F               	movlw	high __powers_
  4921  001D16  20F4               	addwfc	prodh,w,c
  4922  001D18  6EF7               	movwf	tblptrh,c
  4923  001D1A                     	if	1	;There are 3 active tblptr bytes
  4924  001D1A  6AF8               	clrf	tblptru,c
  4925  001D1C  0E00               	movlw	low (__mediumconst shr (0+16))
  4926  001D1E  22F8               	addwfc	tblptru,f,c
  4927  001D20                     	endif
  4928  001D20  0009               	tblrd		*+
  4929  001D22  CFF5 F036          	movff	tablat,?_scale
  4930  001D26  0009               	tblrd		*+
  4931  001D28  CFF5 F037          	movff	tablat,?_scale+1
  4932  001D2C  000A               	tblrd		*-
  4933  001D2E  CFF5 F038          	movff	tablat,?_scale+2
  4934  001D32  0012               	return	
  4935  001D34                     __end_of_scale:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           indf2	equ	0xFDF
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function _putch *****************
  4953 ;; Defined at:
  4954 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  txData          1    wreg     unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  txData          1   19[COMRAM] unsigned char 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      void 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4972 ;;Total ram usage:        1 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    5
  4975 ;; This function calls:
  4976 ;;		_EUSART1_Write
  4977 ;; This function is called by:
  4978 ;;		_printf
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text19
  4983  00453A                     __ptext19:
  4984                           	opt stack 0
  4985  00453A                     _putch:
  4986                           	opt stack 24
  4987                           
  4988                           ;incstack = 0
  4989                           ;putch@txData stored from wreg
  4990  00453A  6E14               	movwf	putch@txData,c
  4991                           
  4992                           ;eusart1.c: 112: EUSART1_Write(txData);
  4993  00453C  5014               	movf	putch@txData,w,c
  4994  00453E  EC79  F022         	call	_EUSART1_Write
  4995  004542  0012               	return		;funcret
  4996  004544                     __end_of_putch:
  4997                           	opt stack 0
  4998                           tblptru	equ	0xFF8
  4999                           tblptrh	equ	0xFF7
  5000                           tblptrl	equ	0xFF6
  5001                           tablat	equ	0xFF5
  5002                           prodh	equ	0xFF4
  5003                           prodl	equ	0xFF3
  5004                           postinc0	equ	0xFEE
  5005                           wreg	equ	0xFE8
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _EUSART1_Write *****************
  5014 ;; Defined at:
  5015 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  txData          1    wreg     unsigned char 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  txData          1   18[COMRAM] unsigned char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  1    wreg      void 
  5022 ;; Registers used:
  5023 ;;		wreg
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5032 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5033 ;;Total ram usage:        1 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    4
  5036 ;; This function calls:
  5037 ;;		Nothing
  5038 ;; This function is called by:
  5039 ;;		_putch
  5040 ;;		_main
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           	psect	text20
  5045  0044F2                     __ptext20:
  5046                           	opt stack 0
  5047  0044F2                     _EUSART1_Write:
  5048                           	opt stack 24
  5049                           
  5050                           ;incstack = 0
  5051                           ;EUSART1_Write@txData stored from wreg
  5052  0044F2  6E13               	movwf	EUSART1_Write@txData,c
  5053  0044F4                     l401:
  5054  0044F4  010E               	movlb	14	; () banked
  5055  0044F6  A9CD               	btfss	205,4,b	;volatile
  5056  0044F8  D7FD               	goto	l401
  5057                           
  5058                           ; BSR set to: 14
  5059                           ;eusart1.c: 100: }
  5060                           ;eusart1.c: 102: TX1REG = txData;
  5061                           
  5062                           ; BSR set to: 14
  5063  0044FA  C013  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
  5064                           
  5065                           ; BSR set to: 14
  5066  0044FE  0012               	return		;funcret
  5067  004500                     __end_of_EUSART1_Write:
  5068                           	opt stack 0
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           postinc0	equ	0xFEE
  5076                           wreg	equ	0xFE8
  5077                           indf2	equ	0xFDF
  5078                           postinc2	equ	0xFDE
  5079                           postdec2	equ	0xFDD
  5080                           fsr2h	equ	0xFDA
  5081                           fsr2l	equ	0xFD9
  5082                           status	equ	0xFD8
  5083                           
  5084 ;; *************** function _isdigit *****************
  5085 ;; Defined at:
  5086 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  c               1    wreg     unsigned char 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  c               1   20[COMRAM] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;		None               void
  5093 ;; Registers used:
  5094 ;;		wreg, status,2, status,0
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5102 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5103 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5104 ;;Total ram usage:        3 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    4
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_printf
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text21
  5115  004400                     __ptext21:
  5116                           	opt stack 0
  5117  004400                     _isdigit:
  5118                           	opt stack 25
  5119                           
  5120                           ; BSR set to: 14
  5121                           ;incstack = 0
  5122                           ;isdigit@c stored from wreg
  5123  004400  6E15               	movwf	isdigit@c,c
  5124  004402  0E00               	movlw	0
  5125  004404  6E14               	movwf	_isdigit$2516,c
  5126  004406  0E3A               	movlw	58
  5127  004408  6015               	cpfslt	isdigit@c,c
  5128  00440A  D005               	goto	l5559
  5129  00440C  0E2F               	movlw	47
  5130  00440E  6415               	cpfsgt	isdigit@c,c
  5131  004410  D002               	goto	l5559
  5132  004412  0E01               	movlw	1
  5133  004414  6E14               	movwf	_isdigit$2516,c
  5134  004416                     l5559:
  5135  004416  C014  F013         	movff	_isdigit$2516,??_isdigit
  5136  00441A  3013               	rrcf	??_isdigit,w,c
  5137  00441C  0012               	return	
  5138  00441E                     __end_of_isdigit:
  5139                           	opt stack 0
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           prodh	equ	0xFF4
  5145                           prodl	equ	0xFF3
  5146                           postinc0	equ	0xFEE
  5147                           wreg	equ	0xFE8
  5148                           indf2	equ	0xFDF
  5149                           postinc2	equ	0xFDE
  5150                           postdec2	equ	0xFDD
  5151                           fsr2h	equ	0xFDA
  5152                           fsr2l	equ	0xFD9
  5153                           status	equ	0xFD8
  5154                           
  5155 ;; *************** function _fround *****************
  5156 ;; Defined at:
  5157 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  prec            1    wreg     unsigned char 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  prec            1    6[BANK0 ] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  3   53[COMRAM] unsigned char 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5171 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5172 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5174 ;;      Totals:         3       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5175 ;;Total ram usage:       10 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    6
  5178 ;; This function calls:
  5179 ;;		___awdiv
  5180 ;;		___awmod
  5181 ;;		___ftmul
  5182 ;;		___wmul
  5183 ;; This function is called by:
  5184 ;;		_printf
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text22
  5189  00237A                     __ptext22:
  5190                           	opt stack 0
  5191  00237A                     _fround:
  5192                           	opt stack 23
  5193                           
  5194                           ;incstack = 0
  5195                           ;fround@prec stored from wreg
  5196  00237A  0100               	movlb	0	; () banked
  5197  00237C  6FC7               	movwf	fround@prec& (0+255),b
  5198                           
  5199                           ;doprnt.c: 413: if(prec>=110)
  5200  00237E  0E6D               	movlw	109
  5201  002380  0100               	movlb	0	; () banked
  5202  002382  65C7               	cpfsgt	fround@prec& (0+255),b
  5203  002384  D0A8               	goto	l5501
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5207  002386  0E00               	movlw	0
  5208  002388  6E24               	movwf	___wmul@multiplicand+1,c
  5209  00238A  0E03               	movlw	3
  5210  00238C  6E23               	movwf	___wmul@multiplicand,c
  5211  00238E  0E00               	movlw	0
  5212  002390  6E1C               	movwf	___awdiv@divisor+1,c
  5213  002392  0E0A               	movlw	10
  5214  002394  6E1B               	movwf	___awdiv@divisor,c
  5215  002396  0E00               	movlw	0
  5216  002398  6E16               	movwf	___awmod@divisor+1,c
  5217  00239A  0E64               	movlw	100
  5218  00239C  6E15               	movwf	___awmod@divisor,c
  5219  00239E  C0C7  F013         	movff	fround@prec,___awmod@dividend
  5220  0023A2  6A14               	clrf	___awmod@dividend+1,c
  5221  0023A4  EC47  F01F         	call	___awmod	;wreg free
  5222  0023A8  C013  F019         	movff	?___awmod,___awdiv@dividend
  5223  0023AC  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  5224  0023B0  ECC4  F01E         	call	___awdiv	;wreg free
  5225  0023B4  0E09               	movlw	9
  5226  0023B6  2419               	addwf	?___awdiv,w,c
  5227  0023B8  6E21               	movwf	___wmul@multiplier,c
  5228  0023BA  0E00               	movlw	0
  5229  0023BC  201A               	addwfc	?___awdiv+1,w,c
  5230  0023BE  6E22               	movwf	___wmul@multiplier+1,c
  5231  0023C0  EC88  F021         	call	___wmul	;wreg free
  5232  0023C4  0E50               	movlw	low __npowers_
  5233  0023C6  2421               	addwf	?___wmul,w,c
  5234  0023C8  6EF6               	movwf	tblptrl,c
  5235  0023CA  0E0F               	movlw	high __npowers_
  5236  0023CC  2022               	addwfc	?___wmul+1,w,c
  5237  0023CE  6EF7               	movwf	tblptrh,c
  5238  0023D0                     	if	1	;There are 3 active tblptr bytes
  5239  0023D0  6AF8               	clrf	tblptru,c
  5240  0023D2  0E00               	movlw	low (__mediumconst shr (0+16))
  5241  0023D4  22F8               	addwfc	tblptru,f,c
  5242  0023D6                     	endif
  5243  0023D6  0009               	tblrd		*+
  5244  0023D8  CFF5 F02A          	movff	tablat,___ftmul@f2
  5245  0023DC  0009               	tblrd		*+
  5246  0023DE  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5247  0023E2  000A               	tblrd		*-
  5248  0023E4  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5249  0023E8  0E00               	movlw	0
  5250  0023EA  6E1C               	movwf	___awdiv@divisor+1,c
  5251  0023EC  0E64               	movlw	100
  5252  0023EE  6E1B               	movwf	___awdiv@divisor,c
  5253  0023F0  C0C7  F019         	movff	fround@prec,___awdiv@dividend
  5254  0023F4  6A1A               	clrf	___awdiv@dividend+1,c
  5255  0023F6  ECC4  F01E         	call	___awdiv	;wreg free
  5256  0023FA  0E12               	movlw	18
  5257  0023FC  2419               	addwf	?___awdiv,w,c
  5258  0023FE  6E21               	movwf	___wmul@multiplier,c
  5259  002400  0E00               	movlw	0
  5260  002402  201A               	addwfc	?___awdiv+1,w,c
  5261  002404  6E22               	movwf	___wmul@multiplier+1,c
  5262  002406  0E00               	movlw	0
  5263  002408  6E24               	movwf	___wmul@multiplicand+1,c
  5264  00240A  0E03               	movlw	3
  5265  00240C  6E23               	movwf	___wmul@multiplicand,c
  5266  00240E  EC88  F021         	call	___wmul	;wreg free
  5267  002412  0E50               	movlw	low __npowers_
  5268  002414  2421               	addwf	?___wmul,w,c
  5269  002416  6EF6               	movwf	tblptrl,c
  5270  002418  0E0F               	movlw	high __npowers_
  5271  00241A  2022               	addwfc	?___wmul+1,w,c
  5272  00241C  6EF7               	movwf	tblptrh,c
  5273  00241E                     	if	1	;There are 3 active tblptr bytes
  5274  00241E  6AF8               	clrf	tblptru,c
  5275  002420  0E00               	movlw	low (__mediumconst shr (0+16))
  5276  002422  22F8               	addwfc	tblptru,f,c
  5277  002424                     	endif
  5278  002424  0009               	tblrd		*+
  5279  002426  CFF5 F027          	movff	tablat,___ftmul@f1
  5280  00242A  0009               	tblrd		*+
  5281  00242C  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5282  002430  000A               	tblrd		*-
  5283  002432  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5284  002436  EC2D  F01C         	call	___ftmul	;wreg free
  5285  00243A  C027  F0C4         	movff	?___ftmul,_fround$2965
  5286  00243E  C028  F0C5         	movff	?___ftmul+1,_fround$2965+1
  5287  002442  C029  F0C6         	movff	?___ftmul+2,_fround$2965+2
  5288                           
  5289                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5290  002446  0E00               	movlw	0
  5291  002448  6E24               	movwf	___wmul@multiplicand+1,c
  5292  00244A  0E03               	movlw	3
  5293  00244C  6E23               	movwf	___wmul@multiplicand,c
  5294  00244E  0E00               	movlw	0
  5295  002450  6E16               	movwf	___awmod@divisor+1,c
  5296  002452  0E0A               	movlw	10
  5297  002454  6E15               	movwf	___awmod@divisor,c
  5298  002456  C0C7  F013         	movff	fround@prec,___awmod@dividend
  5299  00245A  6A14               	clrf	___awmod@dividend+1,c
  5300  00245C  EC47  F01F         	call	___awmod	;wreg free
  5301  002460  C013  F021         	movff	?___awmod,___wmul@multiplier
  5302  002464  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5303  002468  EC88  F021         	call	___wmul	;wreg free
  5304  00246C  0E50               	movlw	low __npowers_
  5305  00246E  2421               	addwf	?___wmul,w,c
  5306  002470  6EF6               	movwf	tblptrl,c
  5307  002472  0E0F               	movlw	high __npowers_
  5308  002474  2022               	addwfc	?___wmul+1,w,c
  5309  002476  6EF7               	movwf	tblptrh,c
  5310  002478                     	if	1	;There are 3 active tblptr bytes
  5311  002478  6AF8               	clrf	tblptru,c
  5312  00247A  0E00               	movlw	low (__mediumconst shr (0+16))
  5313  00247C  22F8               	addwfc	tblptru,f,c
  5314  00247E                     	endif
  5315  00247E  0009               	tblrd		*+
  5316  002480  CFF5 F02A          	movff	tablat,___ftmul@f2
  5317  002484  0009               	tblrd		*+
  5318  002486  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5319  00248A  000A               	tblrd		*-
  5320  00248C  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5321  002490  C0C4  F027         	movff	_fround$2965,___ftmul@f1
  5322  002494  C0C5  F028         	movff	_fround$2965+1,___ftmul@f1+1
  5323  002498  C0C6  F029         	movff	_fround$2965+2,___ftmul@f1+2
  5324  00249C  EC2D  F01C         	call	___ftmul	;wreg free
  5325  0024A0  C027  F0C1         	movff	?___ftmul,_fround$2966
  5326  0024A4  C028  F0C2         	movff	?___ftmul+1,_fround$2966+1
  5327  0024A8  C029  F0C3         	movff	?___ftmul+2,_fround$2966+2
  5328                           
  5329                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5330  0024AC  C0C1  F027         	movff	_fround$2966,___ftmul@f1
  5331  0024B0  C0C2  F028         	movff	_fround$2966+1,___ftmul@f1+1
  5332  0024B4  C0C3  F029         	movff	_fround$2966+2,___ftmul@f1+2
  5333  0024B8  0E00               	movlw	0
  5334  0024BA  6E2A               	movwf	___ftmul@f2,c
  5335  0024BC  0E00               	movlw	0
  5336  0024BE  6E2B               	movwf	___ftmul@f2+1,c
  5337  0024C0  0E3F               	movlw	63
  5338  0024C2  6E2C               	movwf	___ftmul@f2+2,c
  5339  0024C4  EC2D  F01C         	call	___ftmul	;wreg free
  5340  0024C8  C027  F036         	movff	?___ftmul,?_fround
  5341  0024CC  C028  F037         	movff	?___ftmul+1,?_fround+1
  5342  0024D0  C029  F038         	movff	?___ftmul+2,?_fround+2
  5343  0024D4  0012               	return	
  5344  0024D6                     l5501:
  5345                           
  5346                           ;doprnt.c: 415: else if(prec > 10)
  5347  0024D6  0E0A               	movlw	10
  5348  0024D8  0100               	movlb	0	; () banked
  5349  0024DA  65C7               	cpfsgt	fround@prec& (0+255),b
  5350  0024DC  D063               	goto	l5509
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5354  0024DE  0E00               	movlw	0
  5355  0024E0  6E24               	movwf	___wmul@multiplicand+1,c
  5356  0024E2  0E03               	movlw	3
  5357  0024E4  6E23               	movwf	___wmul@multiplicand,c
  5358  0024E6  0E00               	movlw	0
  5359  0024E8  6E16               	movwf	___awmod@divisor+1,c
  5360  0024EA  0E0A               	movlw	10
  5361  0024EC  6E15               	movwf	___awmod@divisor,c
  5362  0024EE  C0C7  F013         	movff	fround@prec,___awmod@dividend
  5363  0024F2  6A14               	clrf	___awmod@dividend+1,c
  5364  0024F4  EC47  F01F         	call	___awmod	;wreg free
  5365  0024F8  C013  F021         	movff	?___awmod,___wmul@multiplier
  5366  0024FC  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  5367  002500  EC88  F021         	call	___wmul	;wreg free
  5368  002504  0E50               	movlw	low __npowers_
  5369  002506  2421               	addwf	?___wmul,w,c
  5370  002508  6EF6               	movwf	tblptrl,c
  5371  00250A  0E0F               	movlw	high __npowers_
  5372  00250C  2022               	addwfc	?___wmul+1,w,c
  5373  00250E  6EF7               	movwf	tblptrh,c
  5374  002510                     	if	1	;There are 3 active tblptr bytes
  5375  002510  6AF8               	clrf	tblptru,c
  5376  002512  0E00               	movlw	low (__mediumconst shr (0+16))
  5377  002514  22F8               	addwfc	tblptru,f,c
  5378  002516                     	endif
  5379  002516  0009               	tblrd		*+
  5380  002518  CFF5 F02A          	movff	tablat,___ftmul@f2
  5381  00251C  0009               	tblrd		*+
  5382  00251E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  5383  002522  000A               	tblrd		*-
  5384  002524  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  5385  002528  0E00               	movlw	0
  5386  00252A  6E1C               	movwf	___awdiv@divisor+1,c
  5387  00252C  0E0A               	movlw	10
  5388  00252E  6E1B               	movwf	___awdiv@divisor,c
  5389  002530  C0C7  F019         	movff	fround@prec,___awdiv@dividend
  5390  002534  6A1A               	clrf	___awdiv@dividend+1,c
  5391  002536  ECC4  F01E         	call	___awdiv	;wreg free
  5392  00253A  0E09               	movlw	9
  5393  00253C  2419               	addwf	?___awdiv,w,c
  5394  00253E  6E21               	movwf	___wmul@multiplier,c
  5395  002540  0E00               	movlw	0
  5396  002542  201A               	addwfc	?___awdiv+1,w,c
  5397  002544  6E22               	movwf	___wmul@multiplier+1,c
  5398  002546  0E00               	movlw	0
  5399  002548  6E24               	movwf	___wmul@multiplicand+1,c
  5400  00254A  0E03               	movlw	3
  5401  00254C  6E23               	movwf	___wmul@multiplicand,c
  5402  00254E  EC88  F021         	call	___wmul	;wreg free
  5403  002552  0E50               	movlw	low __npowers_
  5404  002554  2421               	addwf	?___wmul,w,c
  5405  002556  6EF6               	movwf	tblptrl,c
  5406  002558  0E0F               	movlw	high __npowers_
  5407  00255A  2022               	addwfc	?___wmul+1,w,c
  5408  00255C  6EF7               	movwf	tblptrh,c
  5409  00255E                     	if	1	;There are 3 active tblptr bytes
  5410  00255E  6AF8               	clrf	tblptru,c
  5411  002560  0E00               	movlw	low (__mediumconst shr (0+16))
  5412  002562  22F8               	addwfc	tblptru,f,c
  5413  002564                     	endif
  5414  002564  0009               	tblrd		*+
  5415  002566  CFF5 F027          	movff	tablat,___ftmul@f1
  5416  00256A  0009               	tblrd		*+
  5417  00256C  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5418  002570  000A               	tblrd		*-
  5419  002572  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5420  002576  EC2D  F01C         	call	___ftmul	;wreg free
  5421  00257A  C027  F0C4         	movff	?___ftmul,_fround$2965
  5422  00257E  C028  F0C5         	movff	?___ftmul+1,_fround$2965+1
  5423  002582  C029  F0C6         	movff	?___ftmul+2,_fround$2965+2
  5424                           
  5425                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5426  002586  C0C4  F027         	movff	_fround$2965,___ftmul@f1
  5427  00258A  C0C5  F028         	movff	_fround$2965+1,___ftmul@f1+1
  5428  00258E  C0C6  F029         	movff	_fround$2965+2,___ftmul@f1+2
  5429  002592  0E00               	movlw	0
  5430  002594  6E2A               	movwf	___ftmul@f2,c
  5431  002596  0E00               	movlw	0
  5432  002598  6E2B               	movwf	___ftmul@f2+1,c
  5433  00259A  0E3F               	movlw	63
  5434  00259C  6E2C               	movwf	___ftmul@f2+2,c
  5435  00259E  EC2D  F01C         	call	___ftmul	;wreg free
  5436  0025A2  D792               	goto	L5
  5437  0025A4                     l5509:
  5438                           
  5439                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5440  0025A4  0100               	movlb	0	; () banked
  5441  0025A6  51C7               	movf	fround@prec& (0+255),w,b
  5442  0025A8  0D03               	mullw	3
  5443  0025AA  0E50               	movlw	low __npowers_
  5444  0025AC  24F3               	addwf	prodl,w,c
  5445  0025AE  6EF6               	movwf	tblptrl,c
  5446  0025B0  0E0F               	movlw	high __npowers_
  5447  0025B2  20F4               	addwfc	prodh,w,c
  5448  0025B4  6EF7               	movwf	tblptrh,c
  5449  0025B6                     	if	1	;There are 3 active tblptr bytes
  5450  0025B6  6AF8               	clrf	tblptru,c
  5451  0025B8  0E00               	movlw	low (__mediumconst shr (0+16))
  5452  0025BA  22F8               	addwfc	tblptru,f,c
  5453  0025BC                     	endif
  5454  0025BC  0009               	tblrd		*+
  5455  0025BE  CFF5 F027          	movff	tablat,___ftmul@f1
  5456  0025C2  0009               	tblrd		*+
  5457  0025C4  CFF5 F028          	movff	tablat,___ftmul@f1+1
  5458  0025C8  000A               	tblrd		*-
  5459  0025CA  CFF5 F029          	movff	tablat,___ftmul@f1+2
  5460  0025CE  0E00               	movlw	0
  5461  0025D0  6E2A               	movwf	___ftmul@f2,c
  5462  0025D2  0E00               	movlw	0
  5463  0025D4  6E2B               	movwf	___ftmul@f2+1,c
  5464  0025D6  0E3F               	movlw	63
  5465  0025D8  6E2C               	movwf	___ftmul@f2+2,c
  5466  0025DA  EC2D  F01C         	call	___ftmul	;wreg free
  5467  0025DE  C027  F036         	movff	?___ftmul,?_fround
  5468  0025E2  C028  F037         	movff	?___ftmul+1,?_fround+1
  5469  0025E6  C029  F038         	movff	?___ftmul+2,?_fround+2
  5470  0025EA  0012               	return	
  5471  0025EC                     __end_of_fround:
  5472                           	opt stack 0
  5473                           tblptru	equ	0xFF8
  5474                           tblptrh	equ	0xFF7
  5475                           tblptrl	equ	0xFF6
  5476                           tablat	equ	0xFF5
  5477                           prodh	equ	0xFF4
  5478                           prodl	equ	0xFF3
  5479                           postinc0	equ	0xFEE
  5480                           wreg	equ	0xFE8
  5481                           indf2	equ	0xFDF
  5482                           postinc2	equ	0xFDE
  5483                           postdec2	equ	0xFDD
  5484                           fsr2h	equ	0xFDA
  5485                           fsr2l	equ	0xFD9
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function ___wmul *****************
  5489 ;; Defined at:
  5490 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  multiplier      2   32[COMRAM] unsigned int 
  5493 ;;  multiplicand    2   34[COMRAM] unsigned int 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  product         2   36[COMRAM] unsigned int 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  2   32[COMRAM] unsigned int 
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0, prodl, prodh
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5508 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5509 ;;Total ram usage:        6 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    4
  5512 ;; This function calls:
  5513 ;;		Nothing
  5514 ;; This function is called by:
  5515 ;;		_fround
  5516 ;;		_scale
  5517 ;;		_printf
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text23
  5522  004310                     __ptext23:
  5523                           	opt stack 0
  5524  004310                     ___wmul:
  5525                           	opt stack 24
  5526                           
  5527                           ;incstack = 0
  5528  004310  5021               	movf	___wmul@multiplier,w,c
  5529  004312  0223               	mulwf	___wmul@multiplicand,c
  5530  004314  CFF3 F025          	movff	prodl,___wmul@product
  5531  004318  CFF4 F026          	movff	prodh,___wmul@product+1
  5532  00431C  5021               	movf	___wmul@multiplier,w,c
  5533  00431E  0224               	mulwf	___wmul@multiplicand+1,c
  5534  004320  50F3               	movf	prodl,w,c
  5535  004322  2626               	addwf	___wmul@product+1,f,c
  5536  004324  5022               	movf	___wmul@multiplier+1,w,c
  5537  004326  0223               	mulwf	___wmul@multiplicand,c
  5538  004328  50F3               	movf	prodl,w,c
  5539  00432A  2626               	addwf	___wmul@product+1,f,c
  5540  00432C  C025  F021         	movff	___wmul@product,?___wmul
  5541  004330  C026  F022         	movff	___wmul@product+1,?___wmul+1
  5542  004334  0012               	return	
  5543  004336                     __end_of___wmul:
  5544                           	opt stack 0
  5545                           tblptru	equ	0xFF8
  5546                           tblptrh	equ	0xFF7
  5547                           tblptrl	equ	0xFF6
  5548                           tablat	equ	0xFF5
  5549                           prodh	equ	0xFF4
  5550                           prodl	equ	0xFF3
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           indf2	equ	0xFDF
  5554                           postinc2	equ	0xFDE
  5555                           postdec2	equ	0xFDD
  5556                           fsr2h	equ	0xFDA
  5557                           fsr2l	equ	0xFD9
  5558                           status	equ	0xFD8
  5559                           
  5560 ;; *************** function ___awmod *****************
  5561 ;; Defined at:
  5562 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;  dividend        2   18[COMRAM] int 
  5565 ;;  divisor         2   20[COMRAM] int 
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;  sign            1   23[COMRAM] unsigned char 
  5568 ;;  counter         1   22[COMRAM] unsigned char 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  2   18[COMRAM] int 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5582 ;;Total ram usage:        6 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    4
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_fround
  5589 ;;		_scale
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text24
  5594  003E8E                     __ptext24:
  5595                           	opt stack 0
  5596  003E8E                     ___awmod:
  5597                           	opt stack 24
  5598                           
  5599                           ;incstack = 0
  5600  003E8E  0E00               	movlw	0
  5601  003E90  6E18               	movwf	___awmod@sign,c
  5602  003E92  AE14               	btfss	___awmod@dividend+1,7,c
  5603  003E94  D006               	goto	l5275
  5604  003E96  6C13               	negf	___awmod@dividend,c
  5605  003E98  1E14               	comf	___awmod@dividend+1,f,c
  5606  003E9A  B0D8               	btfsc	status,0,c
  5607  003E9C  2A14               	incf	___awmod@dividend+1,f,c
  5608  003E9E  0E01               	movlw	1
  5609  003EA0  6E18               	movwf	___awmod@sign,c
  5610  003EA2                     l5275:
  5611  003EA2  AE16               	btfss	___awmod@divisor+1,7,c
  5612  003EA4  D004               	goto	l5279
  5613  003EA6  6C15               	negf	___awmod@divisor,c
  5614  003EA8  1E16               	comf	___awmod@divisor+1,f,c
  5615  003EAA  B0D8               	btfsc	status,0,c
  5616  003EAC  2A16               	incf	___awmod@divisor+1,f,c
  5617  003EAE                     l5279:
  5618  003EAE  5015               	movf	___awmod@divisor,w,c
  5619  003EB0  1016               	iorwf	___awmod@divisor+1,w,c
  5620  003EB2  B4D8               	btfsc	status,2,c
  5621  003EB4  D018               	goto	l5295
  5622  003EB6  0E01               	movlw	1
  5623  003EB8  6E17               	movwf	___awmod@counter,c
  5624  003EBA  D004               	goto	l5285
  5625  003EBC                     l5283:
  5626  003EBC  90D8               	bcf	status,0,c
  5627  003EBE  3615               	rlcf	___awmod@divisor,f,c
  5628  003EC0  3616               	rlcf	___awmod@divisor+1,f,c
  5629  003EC2  2A17               	incf	___awmod@counter,f,c
  5630  003EC4                     l5285:
  5631  003EC4  AE16               	btfss	___awmod@divisor+1,7,c
  5632  003EC6  D7FA               	goto	l5283
  5633  003EC8                     l5287:
  5634  003EC8  5015               	movf	___awmod@divisor,w,c
  5635  003ECA  5C13               	subwf	___awmod@dividend,w,c
  5636  003ECC  5016               	movf	___awmod@divisor+1,w,c
  5637  003ECE  5814               	subwfb	___awmod@dividend+1,w,c
  5638  003ED0  A0D8               	btfss	status,0,c
  5639  003ED2  D004               	goto	l5291
  5640  003ED4  5015               	movf	___awmod@divisor,w,c
  5641  003ED6  5E13               	subwf	___awmod@dividend,f,c
  5642  003ED8  5016               	movf	___awmod@divisor+1,w,c
  5643  003EDA  5A14               	subwfb	___awmod@dividend+1,f,c
  5644  003EDC                     l5291:
  5645  003EDC  90D8               	bcf	status,0,c
  5646  003EDE  3216               	rrcf	___awmod@divisor+1,f,c
  5647  003EE0  3215               	rrcf	___awmod@divisor,f,c
  5648  003EE2  2E17               	decfsz	___awmod@counter,f,c
  5649  003EE4  D7F1               	goto	l5287
  5650  003EE6                     l5295:
  5651  003EE6  5018               	movf	___awmod@sign,w,c
  5652  003EE8  B4D8               	btfsc	status,2,c
  5653  003EEA  D004               	goto	l5299
  5654  003EEC  6C13               	negf	___awmod@dividend,c
  5655  003EEE  1E14               	comf	___awmod@dividend+1,f,c
  5656  003EF0  B0D8               	btfsc	status,0,c
  5657  003EF2  2A14               	incf	___awmod@dividend+1,f,c
  5658  003EF4                     l5299:
  5659  003EF4  C013  F013         	movff	___awmod@dividend,?___awmod
  5660  003EF8  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  5661  003EFC  0012               	return	
  5662  003EFE                     __end_of___awmod:
  5663                           	opt stack 0
  5664                           tblptru	equ	0xFF8
  5665                           tblptrh	equ	0xFF7
  5666                           tblptrl	equ	0xFF6
  5667                           tablat	equ	0xFF5
  5668                           prodh	equ	0xFF4
  5669                           prodl	equ	0xFF3
  5670                           postinc0	equ	0xFEE
  5671                           wreg	equ	0xFE8
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function ___awdiv *****************
  5680 ;; Defined at:
  5681 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  dividend        2   24[COMRAM] int 
  5684 ;;  divisor         2   26[COMRAM] int 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  quotient        2   30[COMRAM] int 
  5687 ;;  sign            1   29[COMRAM] unsigned char 
  5688 ;;  counter         1   28[COMRAM] unsigned char 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  2   24[COMRAM] int 
  5691 ;; Registers used:
  5692 ;;		wreg, status,2, status,0
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5698 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5699 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5701 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5702 ;;Total ram usage:        8 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    4
  5705 ;; This function calls:
  5706 ;;		Nothing
  5707 ;; This function is called by:
  5708 ;;		_fround
  5709 ;;		_scale
  5710 ;;		_printf
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text25
  5715  003D88                     __ptext25:
  5716                           	opt stack 0
  5717  003D88                     ___awdiv:
  5718                           	opt stack 24
  5719                           
  5720                           ;incstack = 0
  5721  003D88  0E00               	movlw	0
  5722  003D8A  6E1E               	movwf	___awdiv@sign,c
  5723  003D8C  AE1C               	btfss	___awdiv@divisor+1,7,c
  5724  003D8E  D006               	goto	l5231
  5725  003D90  6C1B               	negf	___awdiv@divisor,c
  5726  003D92  1E1C               	comf	___awdiv@divisor+1,f,c
  5727  003D94  B0D8               	btfsc	status,0,c
  5728  003D96  2A1C               	incf	___awdiv@divisor+1,f,c
  5729  003D98  0E01               	movlw	1
  5730  003D9A  6E1E               	movwf	___awdiv@sign,c
  5731  003D9C                     l5231:
  5732  003D9C  AE1A               	btfss	___awdiv@dividend+1,7,c
  5733  003D9E  D006               	goto	l5237
  5734  003DA0  6C19               	negf	___awdiv@dividend,c
  5735  003DA2  1E1A               	comf	___awdiv@dividend+1,f,c
  5736  003DA4  B0D8               	btfsc	status,0,c
  5737  003DA6  2A1A               	incf	___awdiv@dividend+1,f,c
  5738  003DA8  0E01               	movlw	1
  5739  003DAA  1A1E               	xorwf	___awdiv@sign,f,c
  5740  003DAC                     l5237:
  5741  003DAC  0E00               	movlw	0
  5742  003DAE  6E20               	movwf	___awdiv@quotient+1,c
  5743  003DB0  0E00               	movlw	0
  5744  003DB2  6E1F               	movwf	___awdiv@quotient,c
  5745  003DB4  501B               	movf	___awdiv@divisor,w,c
  5746  003DB6  101C               	iorwf	___awdiv@divisor+1,w,c
  5747  003DB8  B4D8               	btfsc	status,2,c
  5748  003DBA  D01C               	goto	l5259
  5749  003DBC  0E01               	movlw	1
  5750  003DBE  6E1D               	movwf	___awdiv@counter,c
  5751  003DC0  D004               	goto	l5245
  5752  003DC2                     l5243:
  5753  003DC2  90D8               	bcf	status,0,c
  5754  003DC4  361B               	rlcf	___awdiv@divisor,f,c
  5755  003DC6  361C               	rlcf	___awdiv@divisor+1,f,c
  5756  003DC8  2A1D               	incf	___awdiv@counter,f,c
  5757  003DCA                     l5245:
  5758  003DCA  AE1C               	btfss	___awdiv@divisor+1,7,c
  5759  003DCC  D7FA               	goto	l5243
  5760  003DCE                     l5247:
  5761  003DCE  90D8               	bcf	status,0,c
  5762  003DD0  361F               	rlcf	___awdiv@quotient,f,c
  5763  003DD2  3620               	rlcf	___awdiv@quotient+1,f,c
  5764  003DD4  501B               	movf	___awdiv@divisor,w,c
  5765  003DD6  5C19               	subwf	___awdiv@dividend,w,c
  5766  003DD8  501C               	movf	___awdiv@divisor+1,w,c
  5767  003DDA  581A               	subwfb	___awdiv@dividend+1,w,c
  5768  003DDC  A0D8               	btfss	status,0,c
  5769  003DDE  D005               	goto	l5255
  5770  003DE0  501B               	movf	___awdiv@divisor,w,c
  5771  003DE2  5E19               	subwf	___awdiv@dividend,f,c
  5772  003DE4  501C               	movf	___awdiv@divisor+1,w,c
  5773  003DE6  5A1A               	subwfb	___awdiv@dividend+1,f,c
  5774  003DE8  801F               	bsf	___awdiv@quotient,0,c
  5775  003DEA                     l5255:
  5776  003DEA  90D8               	bcf	status,0,c
  5777  003DEC  321C               	rrcf	___awdiv@divisor+1,f,c
  5778  003DEE  321B               	rrcf	___awdiv@divisor,f,c
  5779  003DF0  2E1D               	decfsz	___awdiv@counter,f,c
  5780  003DF2  D7ED               	goto	l5247
  5781  003DF4                     l5259:
  5782  003DF4  501E               	movf	___awdiv@sign,w,c
  5783  003DF6  B4D8               	btfsc	status,2,c
  5784  003DF8  D004               	goto	l5263
  5785  003DFA  6C1F               	negf	___awdiv@quotient,c
  5786  003DFC  1E20               	comf	___awdiv@quotient+1,f,c
  5787  003DFE  B0D8               	btfsc	status,0,c
  5788  003E00  2A20               	incf	___awdiv@quotient+1,f,c
  5789  003E02                     l5263:
  5790  003E02  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  5791  003E06  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  5792  003E0A  0012               	return	
  5793  003E0C                     __end_of___awdiv:
  5794                           	opt stack 0
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           indf2	equ	0xFDF
  5804                           postinc2	equ	0xFDE
  5805                           postdec2	equ	0xFDD
  5806                           fsr2h	equ	0xFDA
  5807                           fsr2l	equ	0xFD9
  5808                           status	equ	0xFD8
  5809                           
  5810 ;; *************** function __tdiv_to_l_ *****************
  5811 ;; Defined at:
  5812 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  f1              3   18[COMRAM] float 
  5815 ;;  f2              3   21[COMRAM] float 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  quot            4   27[COMRAM] unsigned long 
  5818 ;;  exp1            1   32[COMRAM] unsigned char 
  5819 ;;  cntr            1   31[COMRAM] unsigned char 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  4   18[COMRAM] unsigned long 
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5829 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5830 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5831 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5832 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5833 ;;Total ram usage:       15 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    4
  5836 ;; This function calls:
  5837 ;;		Nothing
  5838 ;; This function is called by:
  5839 ;;		_printf
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text26
  5844  0031AE                     __ptext26:
  5845                           	opt stack 0
  5846  0031AE                     __tdiv_to_l_:
  5847                           	opt stack 25
  5848                           
  5849                           ;incstack = 0
  5850  0031AE  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5851  0031B2  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5852  0031B4  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5853  0031B6  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  5854  0031B8  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5855  0031BA  E301               	bnc	u4791
  5856  0031BC  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5857  0031BE                     u4791:
  5858  0031BE  5019               	movf	??__tdiv_to_l_,w,c
  5859  0031C0  6E21               	movwf	__tdiv_to_l_@exp1,c
  5860  0031C2  5021               	movf	__tdiv_to_l_@exp1,w,c
  5861  0031C4  A4D8               	btfss	status,2,c
  5862  0031C6  D009               	goto	l5569
  5863  0031C8  0E00               	movlw	0
  5864  0031CA  6E13               	movwf	?__tdiv_to_l_,c
  5865  0031CC  0E00               	movlw	0
  5866  0031CE  6E14               	movwf	?__tdiv_to_l_+1,c
  5867  0031D0  0E00               	movlw	0
  5868  0031D2  6E15               	movwf	?__tdiv_to_l_+2,c
  5869  0031D4  0E00               	movlw	0
  5870  0031D6  6E16               	movwf	?__tdiv_to_l_+3,c
  5871  0031D8  0012               	return	
  5872  0031DA                     l5569:
  5873  0031DA  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5874  0031DE  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5875  0031E0  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5876  0031E2  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  5877  0031E4  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5878  0031E6  E301               	bnc	u4811
  5879  0031E8  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5880  0031EA                     u4811:
  5881  0031EA  5019               	movf	??__tdiv_to_l_,w,c
  5882  0031EC  6E20               	movwf	__tdiv_to_l_@cntr,c
  5883  0031EE  5020               	movf	__tdiv_to_l_@cntr,w,c
  5884  0031F0  A4D8               	btfss	status,2,c
  5885  0031F2  D009               	goto	l5575
  5886  0031F4  0E00               	movlw	0
  5887  0031F6  6E13               	movwf	?__tdiv_to_l_,c
  5888  0031F8  0E00               	movlw	0
  5889  0031FA  6E14               	movwf	?__tdiv_to_l_+1,c
  5890  0031FC  0E00               	movlw	0
  5891  0031FE  6E15               	movwf	?__tdiv_to_l_+2,c
  5892  003200  0E00               	movlw	0
  5893  003202  6E16               	movwf	?__tdiv_to_l_+3,c
  5894  003204  0012               	return	
  5895  003206                     l5575:
  5896  003206  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  5897  003208  0EFF               	movlw	255
  5898  00320A  1613               	andwf	__tdiv_to_l_@f1,f,c
  5899  00320C  0EFF               	movlw	255
  5900  00320E  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  5901  003210  0E00               	movlw	0
  5902  003212  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  5903  003214  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  5904  003216  0EFF               	movlw	255
  5905  003218  1616               	andwf	__tdiv_to_l_@f2,f,c
  5906  00321A  0EFF               	movlw	255
  5907  00321C  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  5908  00321E  0E00               	movlw	0
  5909  003220  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  5910  003222  0E00               	movlw	0
  5911  003224  6E1C               	movwf	__tdiv_to_l_@quot,c
  5912  003226  0E00               	movlw	0
  5913  003228  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  5914  00322A  0E00               	movlw	0
  5915  00322C  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  5916  00322E  0E00               	movlw	0
  5917  003230  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  5918  003232  0E7F               	movlw	127
  5919  003234  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  5920  003236  5020               	movf	__tdiv_to_l_@cntr,w,c
  5921  003238  0F98               	addlw	152
  5922  00323A  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  5923  00323C  0E18               	movlw	24
  5924  00323E  6E20               	movwf	__tdiv_to_l_@cntr,c
  5925  003240                     l1423:
  5926  003240  90D8               	bcf	status,0,c
  5927  003242  361C               	rlcf	__tdiv_to_l_@quot,f,c
  5928  003244  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  5929  003246  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  5930  003248  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  5931  00324A  5016               	movf	__tdiv_to_l_@f2,w,c
  5932  00324C  5C13               	subwf	__tdiv_to_l_@f1,w,c
  5933  00324E  5017               	movf	__tdiv_to_l_@f2+1,w,c
  5934  003250  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  5935  003252  5018               	movf	__tdiv_to_l_@f2+2,w,c
  5936  003254  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  5937  003256  A0D8               	btfss	status,0,c
  5938  003258  D007               	goto	l1424
  5939  00325A  5016               	movf	__tdiv_to_l_@f2,w,c
  5940  00325C  5E13               	subwf	__tdiv_to_l_@f1,f,c
  5941  00325E  5017               	movf	__tdiv_to_l_@f2+1,w,c
  5942  003260  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  5943  003262  5018               	movf	__tdiv_to_l_@f2+2,w,c
  5944  003264  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  5945  003266  801C               	bsf	__tdiv_to_l_@quot,0,c
  5946  003268                     l1424:
  5947  003268  90D8               	bcf	status,0,c
  5948  00326A  3613               	rlcf	__tdiv_to_l_@f1,f,c
  5949  00326C  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  5950  00326E  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  5951  003270  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  5952  003272  D7E6               	goto	l1423
  5953  003274  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  5954  003276  D016               	goto	l5609
  5955  003278  5021               	movf	__tdiv_to_l_@exp1,w,c
  5956  00327A  0A80               	xorlw	128
  5957  00327C  0F97               	addlw	151
  5958  00327E  B0D8               	btfsc	status,0,c
  5959  003280  D009               	goto	l5605
  5960  003282  0E00               	movlw	0
  5961  003284  6E13               	movwf	?__tdiv_to_l_,c
  5962  003286  0E00               	movlw	0
  5963  003288  6E14               	movwf	?__tdiv_to_l_+1,c
  5964  00328A  0E00               	movlw	0
  5965  00328C  6E15               	movwf	?__tdiv_to_l_+2,c
  5966  00328E  0E00               	movlw	0
  5967  003290  6E16               	movwf	?__tdiv_to_l_+3,c
  5968  003292  0012               	return	
  5969  003294                     l5605:
  5970  003294  90D8               	bcf	status,0,c
  5971  003296  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  5972  003298  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  5973  00329A  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  5974  00329C  321C               	rrcf	__tdiv_to_l_@quot,f,c
  5975  00329E  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  5976  0032A0  D7F9               	goto	l5605
  5977  0032A2  D015               	goto	l1430
  5978  0032A4                     l5609:
  5979  0032A4  0E17               	movlw	23
  5980  0032A6  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  5981  0032A8  D00F               	goto	l5617
  5982  0032AA  0E00               	movlw	0
  5983  0032AC  6E13               	movwf	?__tdiv_to_l_,c
  5984  0032AE  0E00               	movlw	0
  5985  0032B0  6E14               	movwf	?__tdiv_to_l_+1,c
  5986  0032B2  0E00               	movlw	0
  5987  0032B4  6E15               	movwf	?__tdiv_to_l_+2,c
  5988  0032B6  0E00               	movlw	0
  5989  0032B8  6E16               	movwf	?__tdiv_to_l_+3,c
  5990  0032BA  0012               	return	
  5991  0032BC                     l5615:
  5992  0032BC  90D8               	bcf	status,0,c
  5993  0032BE  361C               	rlcf	__tdiv_to_l_@quot,f,c
  5994  0032C0  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  5995  0032C2  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  5996  0032C4  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  5997  0032C6  0621               	decf	__tdiv_to_l_@exp1,f,c
  5998  0032C8                     l5617:
  5999  0032C8  5021               	movf	__tdiv_to_l_@exp1,w,c
  6000  0032CA  A4D8               	btfss	status,2,c
  6001  0032CC  D7F7               	goto	l5615
  6002  0032CE                     l1430:
  6003  0032CE  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6004  0032D2  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6005  0032D6  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6006  0032DA  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6007  0032DE  0012               	return		;funcret
  6008  0032E0                     __end_of__tdiv_to_l_:
  6009                           	opt stack 0
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           postinc0	equ	0xFEE
  6017                           wreg	equ	0xFE8
  6018                           indf2	equ	0xFDF
  6019                           postinc2	equ	0xFDE
  6020                           postdec2	equ	0xFDD
  6021                           fsr2h	equ	0xFDA
  6022                           fsr2l	equ	0xFD9
  6023                           status	equ	0xFD8
  6024                           
  6025 ;; *************** function __div_to_l_ *****************
  6026 ;; Defined at:
  6027 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  f1              3   18[COMRAM] unsigned long 
  6030 ;;  f2              3   21[COMRAM] unsigned long 
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  quot            4   24[COMRAM] unsigned long 
  6033 ;;  exp1            1   29[COMRAM] unsigned char 
  6034 ;;  cntr            1   28[COMRAM] unsigned char 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  4   18[COMRAM] unsigned long 
  6037 ;; Registers used:
  6038 ;;		wreg, status,2, status,0
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6044 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6045 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6047 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6048 ;;Total ram usage:       12 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:    4
  6051 ;; This function calls:
  6052 ;;		Nothing
  6053 ;; This function is called by:
  6054 ;;		_printf
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           	psect	text27
  6059  0032E0                     __ptext27:
  6060                           	opt stack 0
  6061  0032E0                     __div_to_l_:
  6062                           	opt stack 25
  6063                           
  6064                           ;incstack = 0
  6065  0032E0  3415               	rlcf	__div_to_l_@f1+2,w,c
  6066  0032E2  3416               	rlcf	__div_to_l_@f1+3,w,c
  6067  0032E4  6E1E               	movwf	__div_to_l_@exp1,c
  6068  0032E6  501E               	movf	__div_to_l_@exp1,w,c
  6069  0032E8  A4D8               	btfss	status,2,c
  6070  0032EA  D009               	goto	l5625
  6071  0032EC  0E00               	movlw	0
  6072  0032EE  6E13               	movwf	?__div_to_l_,c
  6073  0032F0  0E00               	movlw	0
  6074  0032F2  6E14               	movwf	?__div_to_l_+1,c
  6075  0032F4  0E00               	movlw	0
  6076  0032F6  6E15               	movwf	?__div_to_l_+2,c
  6077  0032F8  0E00               	movlw	0
  6078  0032FA  6E16               	movwf	?__div_to_l_+3,c
  6079  0032FC  0012               	return	
  6080  0032FE                     l5625:
  6081  0032FE  3418               	rlcf	__div_to_l_@f2+2,w,c
  6082  003300  3419               	rlcf	__div_to_l_@f2+3,w,c
  6083  003302  6E1D               	movwf	__div_to_l_@cntr,c
  6084  003304  501D               	movf	__div_to_l_@cntr,w,c
  6085  003306  A4D8               	btfss	status,2,c
  6086  003308  D009               	goto	l5631
  6087  00330A  0E00               	movlw	0
  6088  00330C  6E13               	movwf	?__div_to_l_,c
  6089  00330E  0E00               	movlw	0
  6090  003310  6E14               	movwf	?__div_to_l_+1,c
  6091  003312  0E00               	movlw	0
  6092  003314  6E15               	movwf	?__div_to_l_+2,c
  6093  003316  0E00               	movlw	0
  6094  003318  6E16               	movwf	?__div_to_l_+3,c
  6095  00331A  0012               	return	
  6096  00331C                     l5631:
  6097  00331C  8E15               	bsf	__div_to_l_@f1+2,7,c
  6098  00331E  0EFF               	movlw	255
  6099  003320  1613               	andwf	__div_to_l_@f1,f,c
  6100  003322  0EFF               	movlw	255
  6101  003324  1614               	andwf	__div_to_l_@f1+1,f,c
  6102  003326  0EFF               	movlw	255
  6103  003328  1615               	andwf	__div_to_l_@f1+2,f,c
  6104  00332A  0E00               	movlw	0
  6105  00332C  1616               	andwf	__div_to_l_@f1+3,f,c
  6106  00332E  8E18               	bsf	__div_to_l_@f2+2,7,c
  6107  003330  0EFF               	movlw	255
  6108  003332  1616               	andwf	__div_to_l_@f2,f,c
  6109  003334  0EFF               	movlw	255
  6110  003336  1617               	andwf	__div_to_l_@f2+1,f,c
  6111  003338  0EFF               	movlw	255
  6112  00333A  1618               	andwf	__div_to_l_@f2+2,f,c
  6113  00333C  0E00               	movlw	0
  6114  00333E  1619               	andwf	__div_to_l_@f2+3,f,c
  6115  003340  0E00               	movlw	0
  6116  003342  6E19               	movwf	__div_to_l_@quot,c
  6117  003344  0E00               	movlw	0
  6118  003346  6E1A               	movwf	__div_to_l_@quot+1,c
  6119  003348  0E00               	movlw	0
  6120  00334A  6E1B               	movwf	__div_to_l_@quot+2,c
  6121  00334C  0E00               	movlw	0
  6122  00334E  6E1C               	movwf	__div_to_l_@quot+3,c
  6123  003350  0E7F               	movlw	127
  6124  003352  5E1E               	subwf	__div_to_l_@exp1,f,c
  6125  003354  501D               	movf	__div_to_l_@cntr,w,c
  6126  003356  0FA0               	addlw	160
  6127  003358  5E1E               	subwf	__div_to_l_@exp1,f,c
  6128  00335A  0E20               	movlw	32
  6129  00335C  6E1D               	movwf	__div_to_l_@cntr,c
  6130  00335E                     l5645:
  6131  00335E  90D8               	bcf	status,0,c
  6132  003360  3619               	rlcf	__div_to_l_@quot,f,c
  6133  003362  361A               	rlcf	__div_to_l_@quot+1,f,c
  6134  003364  361B               	rlcf	__div_to_l_@quot+2,f,c
  6135  003366  361C               	rlcf	__div_to_l_@quot+3,f,c
  6136  003368  5016               	movf	__div_to_l_@f2,w,c
  6137  00336A  5C13               	subwf	__div_to_l_@f1,w,c
  6138  00336C  5017               	movf	__div_to_l_@f2+1,w,c
  6139  00336E  5814               	subwfb	__div_to_l_@f1+1,w,c
  6140  003370  5018               	movf	__div_to_l_@f2+2,w,c
  6141  003372  5815               	subwfb	__div_to_l_@f1+2,w,c
  6142  003374  5019               	movf	__div_to_l_@f2+3,w,c
  6143  003376  5816               	subwfb	__div_to_l_@f1+3,w,c
  6144  003378  A0D8               	btfss	status,0,c
  6145  00337A  D009               	goto	l5653
  6146  00337C  5016               	movf	__div_to_l_@f2,w,c
  6147  00337E  5E13               	subwf	__div_to_l_@f1,f,c
  6148  003380  5017               	movf	__div_to_l_@f2+1,w,c
  6149  003382  5A14               	subwfb	__div_to_l_@f1+1,f,c
  6150  003384  5018               	movf	__div_to_l_@f2+2,w,c
  6151  003386  5A15               	subwfb	__div_to_l_@f1+2,f,c
  6152  003388  5019               	movf	__div_to_l_@f2+3,w,c
  6153  00338A  5A16               	subwfb	__div_to_l_@f1+3,f,c
  6154  00338C  8019               	bsf	__div_to_l_@quot,0,c
  6155  00338E                     l5653:
  6156  00338E  90D8               	bcf	status,0,c
  6157  003390  3613               	rlcf	__div_to_l_@f1,f,c
  6158  003392  3614               	rlcf	__div_to_l_@f1+1,f,c
  6159  003394  3615               	rlcf	__div_to_l_@f1+2,f,c
  6160  003396  3616               	rlcf	__div_to_l_@f1+3,f,c
  6161  003398  2E1D               	decfsz	__div_to_l_@cntr,f,c
  6162  00339A  D7E1               	goto	l5645
  6163  00339C  AE1E               	btfss	__div_to_l_@exp1,7,c
  6164  00339E  D016               	goto	l5669
  6165  0033A0  501E               	movf	__div_to_l_@exp1,w,c
  6166  0033A2  0A80               	xorlw	128
  6167  0033A4  0F9F               	addlw	159
  6168  0033A6  B0D8               	btfsc	status,0,c
  6169  0033A8  D009               	goto	l5665
  6170  0033AA  0E00               	movlw	0
  6171  0033AC  6E13               	movwf	?__div_to_l_,c
  6172  0033AE  0E00               	movlw	0
  6173  0033B0  6E14               	movwf	?__div_to_l_+1,c
  6174  0033B2  0E00               	movlw	0
  6175  0033B4  6E15               	movwf	?__div_to_l_+2,c
  6176  0033B6  0E00               	movlw	0
  6177  0033B8  6E16               	movwf	?__div_to_l_+3,c
  6178  0033BA  0012               	return	
  6179  0033BC                     l5665:
  6180  0033BC  90D8               	bcf	status,0,c
  6181  0033BE  321C               	rrcf	__div_to_l_@quot+3,f,c
  6182  0033C0  321B               	rrcf	__div_to_l_@quot+2,f,c
  6183  0033C2  321A               	rrcf	__div_to_l_@quot+1,f,c
  6184  0033C4  3219               	rrcf	__div_to_l_@quot,f,c
  6185  0033C6  3E1E               	incfsz	__div_to_l_@exp1,f,c
  6186  0033C8  D7F9               	goto	l5665
  6187  0033CA  D015               	goto	l1326
  6188  0033CC                     l5669:
  6189  0033CC  0E1F               	movlw	31
  6190  0033CE  641E               	cpfsgt	__div_to_l_@exp1,c
  6191  0033D0  D00F               	goto	l5677
  6192  0033D2  0E00               	movlw	0
  6193  0033D4  6E13               	movwf	?__div_to_l_,c
  6194  0033D6  0E00               	movlw	0
  6195  0033D8  6E14               	movwf	?__div_to_l_+1,c
  6196  0033DA  0E00               	movlw	0
  6197  0033DC  6E15               	movwf	?__div_to_l_+2,c
  6198  0033DE  0E00               	movlw	0
  6199  0033E0  6E16               	movwf	?__div_to_l_+3,c
  6200  0033E2  0012               	return	
  6201  0033E4                     l5675:
  6202  0033E4  90D8               	bcf	status,0,c
  6203  0033E6  3619               	rlcf	__div_to_l_@quot,f,c
  6204  0033E8  361A               	rlcf	__div_to_l_@quot+1,f,c
  6205  0033EA  361B               	rlcf	__div_to_l_@quot+2,f,c
  6206  0033EC  361C               	rlcf	__div_to_l_@quot+3,f,c
  6207  0033EE  061E               	decf	__div_to_l_@exp1,f,c
  6208  0033F0                     l5677:
  6209  0033F0  501E               	movf	__div_to_l_@exp1,w,c
  6210  0033F2  A4D8               	btfss	status,2,c
  6211  0033F4  D7F7               	goto	l5675
  6212  0033F6                     l1326:
  6213  0033F6  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  6214  0033FA  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6215  0033FE  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6216  003402  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6217  003406  0012               	return		;funcret
  6218  003408                     __end_of__div_to_l_:
  6219                           	opt stack 0
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           postinc0	equ	0xFEE
  6227                           wreg	equ	0xFE8
  6228                           indf2	equ	0xFDF
  6229                           postinc2	equ	0xFDE
  6230                           postdec2	equ	0xFDD
  6231                           fsr2h	equ	0xFDA
  6232                           fsr2l	equ	0xFD9
  6233                           status	equ	0xFD8
  6234                           
  6235 ;; *************** function ___lltoft *****************
  6236 ;; Defined at:
  6237 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  c               4   26[COMRAM] unsigned long 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  exp             1   34[COMRAM] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  3   26[COMRAM] float 
  6244 ;; Registers used:
  6245 ;;		wreg, status,2, status,0, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6251 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6253 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6254 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6255 ;;Total ram usage:        9 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    5
  6258 ;; This function calls:
  6259 ;;		___ftpack
  6260 ;; This function is called by:
  6261 ;;		_printf
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text28
  6266  003F64                     __ptext28:
  6267                           	opt stack 0
  6268  003F64                     ___lltoft:
  6269                           	opt stack 24
  6270                           
  6271                           ;incstack = 0
  6272  003F64  0E8E               	movlw	142
  6273  003F66  6E23               	movwf	___lltoft@exp,c
  6274  003F68  D006               	goto	l5729
  6275  003F6A                     l5727:
  6276  003F6A  90D8               	bcf	status,0,c
  6277  003F6C  321E               	rrcf	___lltoft@c+3,f,c
  6278  003F6E  321D               	rrcf	___lltoft@c+2,f,c
  6279  003F70  321C               	rrcf	___lltoft@c+1,f,c
  6280  003F72  321B               	rrcf	___lltoft@c,f,c
  6281  003F74  2A23               	incf	___lltoft@exp,f,c
  6282  003F76                     l5729:
  6283  003F76  0E00               	movlw	0
  6284  003F78  141B               	andwf	___lltoft@c,w,c
  6285  003F7A  6E1F               	movwf	??___lltoft& (0+255),c
  6286  003F7C  0E00               	movlw	0
  6287  003F7E  141C               	andwf	___lltoft@c+1,w,c
  6288  003F80  6E20               	movwf	(??___lltoft+1)& (0+255),c
  6289  003F82  0E00               	movlw	0
  6290  003F84  141D               	andwf	___lltoft@c+2,w,c
  6291  003F86  6E21               	movwf	(??___lltoft+2)& (0+255),c
  6292  003F88  0EFF               	movlw	255
  6293  003F8A  141E               	andwf	___lltoft@c+3,w,c
  6294  003F8C  6E22               	movwf	(??___lltoft+3)& (0+255),c
  6295  003F8E  501F               	movf	??___lltoft,w,c
  6296  003F90  1020               	iorwf	??___lltoft+1,w,c
  6297  003F92  1021               	iorwf	??___lltoft+2,w,c
  6298  003F94  1022               	iorwf	??___lltoft+3,w,c
  6299  003F96  A4D8               	btfss	status,2,c
  6300  003F98  D7E8               	goto	l5727
  6301  003F9A  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  6302  003F9E  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  6303  003FA2  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  6304  003FA6  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  6305  003FAA  0E00               	movlw	0
  6306  003FAC  6E17               	movwf	___ftpack@sign,c
  6307  003FAE  EC84  F01D         	call	___ftpack	;wreg free
  6308  003FB2  C013  F01B         	movff	?___ftpack,?___lltoft
  6309  003FB6  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  6310  003FBA  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  6311  003FBE  0012               	return	
  6312  003FC0                     __end_of___lltoft:
  6313                           	opt stack 0
  6314                           tblptru	equ	0xFF8
  6315                           tblptrh	equ	0xFF7
  6316                           tblptrl	equ	0xFF6
  6317                           tablat	equ	0xFF5
  6318                           prodh	equ	0xFF4
  6319                           prodl	equ	0xFF3
  6320                           postinc0	equ	0xFEE
  6321                           wreg	equ	0xFE8
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function ___llmod *****************
  6330 ;; Defined at:
  6331 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  dividend        4   31[COMRAM] unsigned long 
  6334 ;;  divisor         4   35[COMRAM] unsigned long 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  counter         1   39[COMRAM] unsigned char 
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  4   31[COMRAM] unsigned long 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6346 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6349 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6350 ;;Total ram usage:        9 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    4
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		_printf
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           	psect	text29
  6361  003EFE                     __ptext29:
  6362                           	opt stack 0
  6363  003EFE                     ___llmod:
  6364                           	opt stack 25
  6365                           
  6366                           ;incstack = 0
  6367  003EFE  5024               	movf	___llmod@divisor,w,c
  6368  003F00  1025               	iorwf	___llmod@divisor+1,w,c
  6369  003F02  1026               	iorwf	___llmod@divisor+2,w,c
  6370  003F04  1027               	iorwf	___llmod@divisor+3,w,c
  6371  003F06  B4D8               	btfsc	status,2,c
  6372  003F08  D024               	goto	l1515
  6373  003F0A  0E01               	movlw	1
  6374  003F0C  6E28               	movwf	___llmod@counter,c
  6375  003F0E  D006               	goto	l5715
  6376  003F10                     l5713:
  6377  003F10  90D8               	bcf	status,0,c
  6378  003F12  3624               	rlcf	___llmod@divisor,f,c
  6379  003F14  3625               	rlcf	___llmod@divisor+1,f,c
  6380  003F16  3626               	rlcf	___llmod@divisor+2,f,c
  6381  003F18  3627               	rlcf	___llmod@divisor+3,f,c
  6382  003F1A  2A28               	incf	___llmod@counter,f,c
  6383  003F1C                     l5715:
  6384  003F1C  AE27               	btfss	___llmod@divisor+3,7,c
  6385  003F1E  D7F8               	goto	l5713
  6386  003F20                     l5717:
  6387  003F20  5024               	movf	___llmod@divisor,w,c
  6388  003F22  5C20               	subwf	___llmod@dividend,w,c
  6389  003F24  5025               	movf	___llmod@divisor+1,w,c
  6390  003F26  5821               	subwfb	___llmod@dividend+1,w,c
  6391  003F28  5026               	movf	___llmod@divisor+2,w,c
  6392  003F2A  5822               	subwfb	___llmod@dividend+2,w,c
  6393  003F2C  5027               	movf	___llmod@divisor+3,w,c
  6394  003F2E  5823               	subwfb	___llmod@dividend+3,w,c
  6395  003F30  A0D8               	btfss	status,0,c
  6396  003F32  D008               	goto	l5721
  6397  003F34  5024               	movf	___llmod@divisor,w,c
  6398  003F36  5E20               	subwf	___llmod@dividend,f,c
  6399  003F38  5025               	movf	___llmod@divisor+1,w,c
  6400  003F3A  5A21               	subwfb	___llmod@dividend+1,f,c
  6401  003F3C  5026               	movf	___llmod@divisor+2,w,c
  6402  003F3E  5A22               	subwfb	___llmod@dividend+2,f,c
  6403  003F40  5027               	movf	___llmod@divisor+3,w,c
  6404  003F42  5A23               	subwfb	___llmod@dividend+3,f,c
  6405  003F44                     l5721:
  6406  003F44  90D8               	bcf	status,0,c
  6407  003F46  3227               	rrcf	___llmod@divisor+3,f,c
  6408  003F48  3226               	rrcf	___llmod@divisor+2,f,c
  6409  003F4A  3225               	rrcf	___llmod@divisor+1,f,c
  6410  003F4C  3224               	rrcf	___llmod@divisor,f,c
  6411  003F4E  2E28               	decfsz	___llmod@counter,f,c
  6412  003F50  D7E7               	goto	l5717
  6413  003F52                     l1515:
  6414  003F52  C020  F020         	movff	___llmod@dividend,?___llmod
  6415  003F56  C021  F021         	movff	___llmod@dividend+1,?___llmod+1
  6416  003F5A  C022  F022         	movff	___llmod@dividend+2,?___llmod+2
  6417  003F5E  C023  F023         	movff	___llmod@dividend+3,?___llmod+3
  6418  003F62  0012               	return		;funcret
  6419  003F64                     __end_of___llmod:
  6420                           	opt stack 0
  6421                           tblptru	equ	0xFF8
  6422                           tblptrh	equ	0xFF7
  6423                           tblptrl	equ	0xFF6
  6424                           tablat	equ	0xFF5
  6425                           prodh	equ	0xFF4
  6426                           prodl	equ	0xFF3
  6427                           postinc0	equ	0xFEE
  6428                           wreg	equ	0xFE8
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           postdec2	equ	0xFDD
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function ___lldiv *****************
  6437 ;; Defined at:
  6438 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  dividend        4   18[COMRAM] unsigned long 
  6441 ;;  divisor         4   22[COMRAM] unsigned long 
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;  quotient        4   26[COMRAM] unsigned long 
  6444 ;;  counter         1   30[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  4   18[COMRAM] unsigned long 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2, status,0
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6454 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6455 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6457 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6458 ;;Total ram usage:       13 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    4
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_printf
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text30
  6469  003E0C                     __ptext30:
  6470                           	opt stack 0
  6471  003E0C                     ___lldiv:
  6472                           	opt stack 25
  6473                           
  6474                           ;incstack = 0
  6475  003E0C  0E00               	movlw	0
  6476  003E0E  6E1B               	movwf	___lldiv@quotient,c
  6477  003E10  0E00               	movlw	0
  6478  003E12  6E1C               	movwf	___lldiv@quotient+1,c
  6479  003E14  0E00               	movlw	0
  6480  003E16  6E1D               	movwf	___lldiv@quotient+2,c
  6481  003E18  0E00               	movlw	0
  6482  003E1A  6E1E               	movwf	___lldiv@quotient+3,c
  6483  003E1C  5017               	movf	___lldiv@divisor,w,c
  6484  003E1E  1018               	iorwf	___lldiv@divisor+1,w,c
  6485  003E20  1019               	iorwf	___lldiv@divisor+2,w,c
  6486  003E22  101A               	iorwf	___lldiv@divisor+3,w,c
  6487  003E24  B4D8               	btfsc	status,2,c
  6488  003E26  D02A               	goto	l1505
  6489  003E28  0E01               	movlw	1
  6490  003E2A  6E1F               	movwf	___lldiv@counter,c
  6491  003E2C  D006               	goto	l5695
  6492  003E2E                     l5693:
  6493  003E2E  90D8               	bcf	status,0,c
  6494  003E30  3617               	rlcf	___lldiv@divisor,f,c
  6495  003E32  3618               	rlcf	___lldiv@divisor+1,f,c
  6496  003E34  3619               	rlcf	___lldiv@divisor+2,f,c
  6497  003E36  361A               	rlcf	___lldiv@divisor+3,f,c
  6498  003E38  2A1F               	incf	___lldiv@counter,f,c
  6499  003E3A                     l5695:
  6500  003E3A  AE1A               	btfss	___lldiv@divisor+3,7,c
  6501  003E3C  D7F8               	goto	l5693
  6502  003E3E                     l5697:
  6503  003E3E  90D8               	bcf	status,0,c
  6504  003E40  361B               	rlcf	___lldiv@quotient,f,c
  6505  003E42  361C               	rlcf	___lldiv@quotient+1,f,c
  6506  003E44  361D               	rlcf	___lldiv@quotient+2,f,c
  6507  003E46  361E               	rlcf	___lldiv@quotient+3,f,c
  6508  003E48  5017               	movf	___lldiv@divisor,w,c
  6509  003E4A  5C13               	subwf	___lldiv@dividend,w,c
  6510  003E4C  5018               	movf	___lldiv@divisor+1,w,c
  6511  003E4E  5814               	subwfb	___lldiv@dividend+1,w,c
  6512  003E50  5019               	movf	___lldiv@divisor+2,w,c
  6513  003E52  5815               	subwfb	___lldiv@dividend+2,w,c
  6514  003E54  501A               	movf	___lldiv@divisor+3,w,c
  6515  003E56  5816               	subwfb	___lldiv@dividend+3,w,c
  6516  003E58  A0D8               	btfss	status,0,c
  6517  003E5A  D009               	goto	l5705
  6518  003E5C  5017               	movf	___lldiv@divisor,w,c
  6519  003E5E  5E13               	subwf	___lldiv@dividend,f,c
  6520  003E60  5018               	movf	___lldiv@divisor+1,w,c
  6521  003E62  5A14               	subwfb	___lldiv@dividend+1,f,c
  6522  003E64  5019               	movf	___lldiv@divisor+2,w,c
  6523  003E66  5A15               	subwfb	___lldiv@dividend+2,f,c
  6524  003E68  501A               	movf	___lldiv@divisor+3,w,c
  6525  003E6A  5A16               	subwfb	___lldiv@dividend+3,f,c
  6526  003E6C  801B               	bsf	___lldiv@quotient,0,c
  6527  003E6E                     l5705:
  6528  003E6E  90D8               	bcf	status,0,c
  6529  003E70  321A               	rrcf	___lldiv@divisor+3,f,c
  6530  003E72  3219               	rrcf	___lldiv@divisor+2,f,c
  6531  003E74  3218               	rrcf	___lldiv@divisor+1,f,c
  6532  003E76  3217               	rrcf	___lldiv@divisor,f,c
  6533  003E78  2E1F               	decfsz	___lldiv@counter,f,c
  6534  003E7A  D7E1               	goto	l5697
  6535  003E7C                     l1505:
  6536  003E7C  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  6537  003E80  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  6538  003E84  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  6539  003E88  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  6540  003E8C  0012               	return		;funcret
  6541  003E8E                     __end_of___lldiv:
  6542                           	opt stack 0
  6543                           tblptru	equ	0xFF8
  6544                           tblptrh	equ	0xFF7
  6545                           tblptrl	equ	0xFF6
  6546                           tablat	equ	0xFF5
  6547                           prodh	equ	0xFF4
  6548                           prodl	equ	0xFF3
  6549                           postinc0	equ	0xFEE
  6550                           wreg	equ	0xFE8
  6551                           indf2	equ	0xFDF
  6552                           postinc2	equ	0xFDE
  6553                           postdec2	equ	0xFDD
  6554                           fsr2h	equ	0xFDA
  6555                           fsr2l	equ	0xFD9
  6556                           status	equ	0xFD8
  6557                           
  6558 ;; *************** function _pid_Init *****************
  6559 ;; Defined at:
  6560 ;;		line 8 in file "pid.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;		None
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;		None
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      void 
  6567 ;; Registers used:
  6568 ;;		wreg, status,2
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6578 ;;Total ram usage:        0 bytes
  6579 ;; Hardware stack levels used:    1
  6580 ;; Hardware stack levels required when called:    4
  6581 ;; This function calls:
  6582 ;;		Nothing
  6583 ;; This function is called by:
  6584 ;;		_main
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           	psect	text31
  6589  00364C                     __ptext31:
  6590                           	opt stack 0
  6591  00364C                     _pid_Init:
  6592                           	opt stack 26
  6593                           
  6594                           ;pid.c: 9: rollkp = 0;
  6595                           
  6596                           ;incstack = 0
  6597  00364C  0E00               	movlw	0
  6598  00364E  0100               	movlb	0	; () banked
  6599  003650  6FA6               	movwf	_rollkp& (0+255),b
  6600  003652  0E00               	movlw	0
  6601  003654  0100               	movlb	0	; () banked
  6602  003656  6FA7               	movwf	(_rollkp+1)& (0+255),b
  6603  003658  0E00               	movlw	0
  6604  00365A  0100               	movlb	0	; () banked
  6605  00365C  6FA8               	movwf	(_rollkp+2)& (0+255),b
  6606                           
  6607                           ;pid.c: 10: rollki = 0;
  6608  00365E  0E00               	movlw	0
  6609  003660  0100               	movlb	0	; () banked
  6610  003662  6FA3               	movwf	_rollki& (0+255),b
  6611  003664  0E00               	movlw	0
  6612  003666  0100               	movlb	0	; () banked
  6613  003668  6FA4               	movwf	(_rollki+1)& (0+255),b
  6614  00366A  0E00               	movlw	0
  6615  00366C  0100               	movlb	0	; () banked
  6616  00366E  6FA5               	movwf	(_rollki+2)& (0+255),b
  6617                           
  6618                           ;pid.c: 11: rollkd = 0;
  6619  003670  0E00               	movlw	0
  6620  003672  0100               	movlb	0	; () banked
  6621  003674  6FA0               	movwf	_rollkd& (0+255),b
  6622  003676  0E00               	movlw	0
  6623  003678  0100               	movlb	0	; () banked
  6624  00367A  6FA1               	movwf	(_rollkd+1)& (0+255),b
  6625  00367C  0E00               	movlw	0
  6626  00367E  0100               	movlb	0	; () banked
  6627  003680  6FA2               	movwf	(_rollkd+2)& (0+255),b
  6628                           
  6629                           ;pid.c: 12: rollPreviousError = 0;
  6630  003682  0E00               	movlw	0
  6631  003684  0100               	movlb	0	; () banked
  6632  003686  6F9D               	movwf	_rollPreviousError& (0+255),b
  6633  003688  0E00               	movlw	0
  6634  00368A  0100               	movlb	0	; () banked
  6635  00368C  6F9E               	movwf	(_rollPreviousError+1)& (0+255),b
  6636  00368E  0E00               	movlw	0
  6637  003690  0100               	movlb	0	; () banked
  6638  003692  6F9F               	movwf	(_rollPreviousError+2)& (0+255),b
  6639                           
  6640                           ;pid.c: 13: rollIntegral = 0;
  6641  003694  0E00               	movlw	0
  6642  003696  0100               	movlb	0	; () banked
  6643  003698  6F9A               	movwf	_rollIntegral& (0+255),b
  6644  00369A  0E00               	movlw	0
  6645  00369C  0100               	movlb	0	; () banked
  6646  00369E  6F9B               	movwf	(_rollIntegral+1)& (0+255),b
  6647  0036A0  0E00               	movlw	0
  6648  0036A2  0100               	movlb	0	; () banked
  6649  0036A4  6F9C               	movwf	(_rollIntegral+2)& (0+255),b
  6650                           
  6651                           ;pid.c: 15: pitchkp = 0;
  6652  0036A6  0E00               	movlw	0
  6653  0036A8  0100               	movlb	0	; () banked
  6654  0036AA  6F97               	movwf	_pitchkp& (0+255),b
  6655  0036AC  0E00               	movlw	0
  6656  0036AE  0100               	movlb	0	; () banked
  6657  0036B0  6F98               	movwf	(_pitchkp+1)& (0+255),b
  6658  0036B2  0E00               	movlw	0
  6659  0036B4  0100               	movlb	0	; () banked
  6660  0036B6  6F99               	movwf	(_pitchkp+2)& (0+255),b
  6661                           
  6662                           ;pid.c: 16: pitchki = 0;
  6663  0036B8  0E00               	movlw	0
  6664  0036BA  0100               	movlb	0	; () banked
  6665  0036BC  6F94               	movwf	_pitchki& (0+255),b
  6666  0036BE  0E00               	movlw	0
  6667  0036C0  0100               	movlb	0	; () banked
  6668  0036C2  6F95               	movwf	(_pitchki+1)& (0+255),b
  6669  0036C4  0E00               	movlw	0
  6670  0036C6  0100               	movlb	0	; () banked
  6671  0036C8  6F96               	movwf	(_pitchki+2)& (0+255),b
  6672                           
  6673                           ;pid.c: 17: pitchkd = 0;
  6674  0036CA  0E00               	movlw	0
  6675  0036CC  0100               	movlb	0	; () banked
  6676  0036CE  6F91               	movwf	_pitchkd& (0+255),b
  6677  0036D0  0E00               	movlw	0
  6678  0036D2  0100               	movlb	0	; () banked
  6679  0036D4  6F92               	movwf	(_pitchkd+1)& (0+255),b
  6680  0036D6  0E00               	movlw	0
  6681  0036D8  0100               	movlb	0	; () banked
  6682  0036DA  6F93               	movwf	(_pitchkd+2)& (0+255),b
  6683                           
  6684                           ;pid.c: 18: pitchPreviousError = 0;
  6685  0036DC  0E00               	movlw	0
  6686  0036DE  0100               	movlb	0	; () banked
  6687  0036E0  6F8E               	movwf	_pitchPreviousError& (0+255),b
  6688  0036E2  0E00               	movlw	0
  6689  0036E4  0100               	movlb	0	; () banked
  6690  0036E6  6F8F               	movwf	(_pitchPreviousError+1)& (0+255),b
  6691  0036E8  0E00               	movlw	0
  6692  0036EA  0100               	movlb	0	; () banked
  6693  0036EC  6F90               	movwf	(_pitchPreviousError+2)& (0+255),b
  6694                           
  6695                           ;pid.c: 19: pitchIntegral = 0;
  6696  0036EE  0E00               	movlw	0
  6697  0036F0  0100               	movlb	0	; () banked
  6698  0036F2  6F8B               	movwf	_pitchIntegral& (0+255),b
  6699  0036F4  0E00               	movlw	0
  6700  0036F6  0100               	movlb	0	; () banked
  6701  0036F8  6F8C               	movwf	(_pitchIntegral+1)& (0+255),b
  6702  0036FA  0E00               	movlw	0
  6703  0036FC  0100               	movlb	0	; () banked
  6704  0036FE  6F8D               	movwf	(_pitchIntegral+2)& (0+255),b
  6705                           
  6706                           ;pid.c: 21: yawkp = 0;
  6707  003700  0E00               	movlw	0
  6708  003702  0100               	movlb	0	; () banked
  6709  003704  6F88               	movwf	_yawkp& (0+255),b
  6710  003706  0E00               	movlw	0
  6711  003708  0100               	movlb	0	; () banked
  6712  00370A  6F89               	movwf	(_yawkp+1)& (0+255),b
  6713  00370C  0E00               	movlw	0
  6714  00370E  0100               	movlb	0	; () banked
  6715  003710  6F8A               	movwf	(_yawkp+2)& (0+255),b
  6716                           
  6717                           ;pid.c: 22: yawki = 0;
  6718  003712  0E00               	movlw	0
  6719  003714  0100               	movlb	0	; () banked
  6720  003716  6F85               	movwf	_yawki& (0+255),b
  6721  003718  0E00               	movlw	0
  6722  00371A  0100               	movlb	0	; () banked
  6723  00371C  6F86               	movwf	(_yawki+1)& (0+255),b
  6724  00371E  0E00               	movlw	0
  6725  003720  0100               	movlb	0	; () banked
  6726  003722  6F87               	movwf	(_yawki+2)& (0+255),b
  6727                           
  6728                           ;pid.c: 23: yawkd = 0;
  6729  003724  0E00               	movlw	0
  6730  003726  0100               	movlb	0	; () banked
  6731  003728  6F82               	movwf	_yawkd& (0+255),b
  6732  00372A  0E00               	movlw	0
  6733  00372C  0100               	movlb	0	; () banked
  6734  00372E  6F83               	movwf	(_yawkd+1)& (0+255),b
  6735  003730  0E00               	movlw	0
  6736  003732  0100               	movlb	0	; () banked
  6737  003734  6F84               	movwf	(_yawkd+2)& (0+255),b
  6738                           
  6739                           ;pid.c: 24: yawPreviousError = 0;
  6740  003736  0E00               	movlw	0
  6741  003738  0100               	movlb	0	; () banked
  6742  00373A  6F7F               	movwf	_yawPreviousError& (0+255),b
  6743  00373C  0E00               	movlw	0
  6744  00373E  0100               	movlb	0	; () banked
  6745  003740  6F80               	movwf	(_yawPreviousError+1)& (0+255),b
  6746  003742  0E00               	movlw	0
  6747  003744  0100               	movlb	0	; () banked
  6748  003746  6F81               	movwf	(_yawPreviousError+2)& (0+255),b
  6749                           
  6750                           ;pid.c: 25: yawIntegral = 0;
  6751  003748  0E00               	movlw	0
  6752  00374A  0101               	movlb	1	; () banked
  6753  00374C  6F09               	movwf	_yawIntegral& (0+255),b
  6754  00374E  0E00               	movlw	0
  6755  003750  0101               	movlb	1	; () banked
  6756  003752  6F0A               	movwf	(_yawIntegral+1)& (0+255),b
  6757  003754  0E00               	movlw	0
  6758  003756  0101               	movlb	1	; () banked
  6759  003758  6F0B               	movwf	(_yawIntegral+2)& (0+255),b
  6760                           
  6761                           ; BSR set to: 1
  6762  00375A  0012               	return		;funcret
  6763  00375C                     __end_of_pid_Init:
  6764                           	opt stack 0
  6765                           tblptru	equ	0xFF8
  6766                           tblptrh	equ	0xFF7
  6767                           tblptrl	equ	0xFF6
  6768                           tablat	equ	0xFF5
  6769                           prodh	equ	0xFF4
  6770                           prodl	equ	0xFF3
  6771                           postinc0	equ	0xFEE
  6772                           wreg	equ	0xFE8
  6773                           indf2	equ	0xFDF
  6774                           postinc2	equ	0xFDE
  6775                           postdec2	equ	0xFDD
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _pid *****************
  6781 ;; Defined at:
  6782 ;;		line 28 in file "pid.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  desiredRoll     3   46[BANK0 ] float 
  6785 ;;  desiredPitch    3   49[BANK0 ] float 
  6786 ;;  desiredYaw      3   52[BANK0 ] float 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  1    wreg      void 
  6791 ;; Registers used:
  6792 ;;		wreg, status,2, status,0, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6798 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6801 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6802 ;;Total ram usage:       11 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    7
  6805 ;; This function calls:
  6806 ;;		_pitchPid
  6807 ;;		_rollPid
  6808 ;;		_yawPid
  6809 ;; This function is called by:
  6810 ;;		_main
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text32
  6815  00352E                     __ptext32:
  6816                           	opt stack 0
  6817  00352E                     _pid:
  6818                           	opt stack 23
  6819                           
  6820                           ;pid.c: 30: rollPid( desiredRoll );
  6821                           
  6822                           ; BSR set to: 1
  6823                           ;incstack = 0
  6824  00352E  C0EF  F0E3         	movff	pid@desiredRoll,rollPid@desiredRoll
  6825  003532  C0F0  F0E4         	movff	pid@desiredRoll+1,rollPid@desiredRoll+1
  6826  003536  C0F1  F0E5         	movff	pid@desiredRoll+2,rollPid@desiredRoll+2
  6827  00353A  ECDC  F016         	call	_rollPid	;wreg free
  6828                           
  6829                           ;pid.c: 31: pitchPid( desiredPitch );
  6830  00353E  C0F2  F013         	movff	pid@desiredPitch,pitchPid@desiredPitch
  6831  003542  C0F3  F014         	movff	pid@desiredPitch+1,pitchPid@desiredPitch+1
  6832  003546  C0F4  F015         	movff	pid@desiredPitch+2,pitchPid@desiredPitch+2
  6833  00354A  ECB6  F022         	call	_pitchPid	;wreg free
  6834                           
  6835                           ;pid.c: 32: yawPid( desiredYaw );
  6836  00354E  C0F5  F013         	movff	pid@desiredYaw,yawPid@desiredYaw
  6837  003552  C0F6  F014         	movff	pid@desiredYaw+1,yawPid@desiredYaw+1
  6838  003556  C0F7  F015         	movff	pid@desiredYaw+2,yawPid@desiredYaw+2
  6839  00355A  ECB5  F022         	call	_yawPid	;wreg free
  6840                           
  6841                           ;pid.c: 35: extern int throttle;
  6842                           ;pid.c: 36: throttle1 = throttle - rollAdj;
  6843  00355E  C0B5  F0F8         	movff	_rollAdj,??_pid
  6844  003562  C0B6  F0F9         	movff	_rollAdj+1,??_pid+1
  6845  003566  0100               	movlb	0	; () banked
  6846  003568  1FF8               	comf	??_pid& (0+255),f,b
  6847  00356A  1FF9               	comf	(??_pid+1)& (0+255),f,b
  6848  00356C  4BF8               	infsnz	??_pid& (0+255),f,b
  6849  00356E  2BF9               	incf	(??_pid+1)& (0+255),f,b
  6850  003570  0100               	movlb	0	; () banked
  6851  003572  51A9               	movf	_throttle& (0+255),w,b
  6852  003574  0100               	movlb	0	; () banked
  6853  003576  25F8               	addwf	??_pid& (0+255),w,b
  6854  003578  6E44               	movwf	_throttle1,c
  6855  00357A  0100               	movlb	0	; () banked
  6856  00357C  51AA               	movf	(_throttle+1)& (0+255),w,b
  6857  00357E  0100               	movlb	0	; () banked
  6858  003580  21F9               	addwfc	(??_pid+1)& (0+255),w,b
  6859  003582  6E45               	movwf	_throttle1+1,c
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;pid.c: 37: throttle2 = throttle + rollAdj;
  6863  003584  0100               	movlb	0	; () banked
  6864  003586  51B5               	movf	_rollAdj& (0+255),w,b
  6865  003588  0100               	movlb	0	; () banked
  6866  00358A  25A9               	addwf	_throttle& (0+255),w,b
  6867  00358C  6E42               	movwf	_throttle2,c
  6868  00358E  0100               	movlb	0	; () banked
  6869  003590  51B6               	movf	(_rollAdj+1)& (0+255),w,b
  6870  003592  0100               	movlb	0	; () banked
  6871  003594  21AA               	addwfc	(_throttle+1)& (0+255),w,b
  6872  003596  6E43               	movwf	_throttle2+1,c
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;pid.c: 38: throttle3 = throttle + rollAdj;
  6876  003598  0100               	movlb	0	; () banked
  6877  00359A  51B5               	movf	_rollAdj& (0+255),w,b
  6878  00359C  0100               	movlb	0	; () banked
  6879  00359E  25A9               	addwf	_throttle& (0+255),w,b
  6880  0035A0  0100               	movlb	0	; () banked
  6881  0035A2  6FAF               	movwf	_throttle3& (0+255),b
  6882  0035A4  0100               	movlb	0	; () banked
  6883  0035A6  51B6               	movf	(_rollAdj+1)& (0+255),w,b
  6884  0035A8  0100               	movlb	0	; () banked
  6885  0035AA  21AA               	addwfc	(_throttle+1)& (0+255),w,b
  6886  0035AC  0100               	movlb	0	; () banked
  6887  0035AE  6FB0               	movwf	(_throttle3+1)& (0+255),b
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;pid.c: 39: throttle4 = throttle - rollAdj;
  6891  0035B0  C0B5  F0F8         	movff	_rollAdj,??_pid
  6892  0035B4  C0B6  F0F9         	movff	_rollAdj+1,??_pid+1
  6893  0035B8  0100               	movlb	0	; () banked
  6894  0035BA  1FF8               	comf	??_pid& (0+255),f,b
  6895  0035BC  1FF9               	comf	(??_pid+1)& (0+255),f,b
  6896  0035BE  4BF8               	infsnz	??_pid& (0+255),f,b
  6897  0035C0  2BF9               	incf	(??_pid+1)& (0+255),f,b
  6898  0035C2  0100               	movlb	0	; () banked
  6899  0035C4  51A9               	movf	_throttle& (0+255),w,b
  6900  0035C6  0100               	movlb	0	; () banked
  6901  0035C8  25F8               	addwf	??_pid& (0+255),w,b
  6902  0035CA  0100               	movlb	0	; () banked
  6903  0035CC  6FAD               	movwf	_throttle4& (0+255),b
  6904  0035CE  0100               	movlb	0	; () banked
  6905  0035D0  51AA               	movf	(_throttle+1)& (0+255),w,b
  6906  0035D2  0100               	movlb	0	; () banked
  6907  0035D4  21F9               	addwfc	(??_pid+1)& (0+255),w,b
  6908  0035D6  0100               	movlb	0	; () banked
  6909  0035D8  6FAE               	movwf	(_throttle4+1)& (0+255),b
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;pid.c: 42: if ( throttle1 < 0 ) {
  6913  0035DA  AE45               	btfss	_throttle1+1,7,c
  6914  0035DC  D009               	goto	l5863
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;pid.c: 43: throttle1 = 0;
  6918  0035DE  0E00               	movlw	0
  6919  0035E0  6E45               	movwf	_throttle1+1,c
  6920  0035E2  0E00               	movlw	0
  6921  0035E4  6E44               	movwf	_throttle1,c
  6922                           
  6923                           ;pid.c: 44: throttle4 = 0;
  6924  0035E6  0E00               	movlw	0
  6925  0035E8  0100               	movlb	0	; () banked
  6926  0035EA  6FAE               	movwf	(_throttle4+1)& (0+255),b
  6927  0035EC  0E00               	movlw	0
  6928  0035EE  6FAD               	movwf	_throttle4& (0+255),b
  6929  0035F0                     l5863:
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;pid.c: 45: }
  6933                           ;pid.c: 46: if ( throttle1 > 300 ) {
  6934  0035F0  BE45               	btfsc	_throttle1+1,7,c
  6935  0035F2  D00F               	goto	l5867
  6936  0035F4  0E2D               	movlw	45
  6937  0035F6  5C44               	subwf	_throttle1,w,c
  6938  0035F8  0E01               	movlw	1
  6939  0035FA  5845               	subwfb	_throttle1+1,w,c
  6940  0035FC  A0D8               	btfss	status,0,c
  6941  0035FE  D009               	goto	l5867
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;pid.c: 47: throttle1 = 300;
  6945  003600  0E01               	movlw	1
  6946  003602  6E45               	movwf	_throttle1+1,c
  6947  003604  0E2C               	movlw	44
  6948  003606  6E44               	movwf	_throttle1,c
  6949                           
  6950                           ;pid.c: 48: throttle4 = 300;
  6951  003608  0E01               	movlw	1
  6952  00360A  0100               	movlb	0	; () banked
  6953  00360C  6FAE               	movwf	(_throttle4+1)& (0+255),b
  6954  00360E  0E2C               	movlw	44
  6955  003610  6FAD               	movwf	_throttle4& (0+255),b
  6956  003612                     l5867:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;pid.c: 49: }
  6960                           ;pid.c: 51: if ( throttle2 < 0 ) {
  6961  003612  AE43               	btfss	_throttle2+1,7,c
  6962  003614  D009               	goto	l5871
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;pid.c: 52: throttle2 = 0;
  6966  003616  0E00               	movlw	0
  6967  003618  6E43               	movwf	_throttle2+1,c
  6968  00361A  0E00               	movlw	0
  6969  00361C  6E42               	movwf	_throttle2,c
  6970                           
  6971                           ;pid.c: 53: throttle3 = 0;
  6972  00361E  0E00               	movlw	0
  6973  003620  0100               	movlb	0	; () banked
  6974  003622  6FB0               	movwf	(_throttle3+1)& (0+255),b
  6975  003624  0E00               	movlw	0
  6976  003626  6FAF               	movwf	_throttle3& (0+255),b
  6977  003628                     l5871:
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;pid.c: 54: }
  6981                           ;pid.c: 55: if ( throttle2 > 300 ) {
  6982  003628  BE43               	btfsc	_throttle2+1,7,c
  6983  00362A  0012               	return	
  6984  00362C  0E2D               	movlw	45
  6985  00362E  5C42               	subwf	_throttle2,w,c
  6986  003630  0E01               	movlw	1
  6987  003632  5843               	subwfb	_throttle2+1,w,c
  6988  003634  A0D8               	btfss	status,0,c
  6989  003636  0012               	return	
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;pid.c: 56: throttle2 = 300;
  6993  003638  0E01               	movlw	1
  6994  00363A  6E43               	movwf	_throttle2+1,c
  6995  00363C  0E2C               	movlw	44
  6996  00363E  6E42               	movwf	_throttle2,c
  6997                           
  6998                           ;pid.c: 57: throttle3 = 300;
  6999  003640  0E01               	movlw	1
  7000  003642  0100               	movlb	0	; () banked
  7001  003644  6FB0               	movwf	(_throttle3+1)& (0+255),b
  7002  003646  0E2C               	movlw	44
  7003  003648  6FAF               	movwf	_throttle3& (0+255),b
  7004  00364A  0012               	return	
  7005  00364C                     __end_of_pid:
  7006                           	opt stack 0
  7007                           tblptru	equ	0xFF8
  7008                           tblptrh	equ	0xFF7
  7009                           tblptrl	equ	0xFF6
  7010                           tablat	equ	0xFF5
  7011                           prodh	equ	0xFF4
  7012                           prodl	equ	0xFF3
  7013                           postinc0	equ	0xFEE
  7014                           wreg	equ	0xFE8
  7015                           indf2	equ	0xFDF
  7016                           postinc2	equ	0xFDE
  7017                           postdec2	equ	0xFDD
  7018                           fsr2h	equ	0xFDA
  7019                           fsr2l	equ	0xFD9
  7020                           status	equ	0xFD8
  7021                           
  7022 ;; *************** function _yawPid *****************
  7023 ;; Defined at:
  7024 ;;		line 82 in file "pid.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  desiredYaw      3   18[COMRAM] float 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;		None
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      void 
  7031 ;; Registers used:
  7032 ;;		None
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7038 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7041 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7042 ;;Total ram usage:        3 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    4
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_pid
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text33
  7053  00456A                     __ptext33:
  7054                           	opt stack 0
  7055  00456A                     _yawPid:
  7056                           	opt stack 25
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;incstack = 0
  7060  00456A  0012               	return		;funcret
  7061  00456C                     __end_of_yawPid:
  7062                           	opt stack 0
  7063                           tblptru	equ	0xFF8
  7064                           tblptrh	equ	0xFF7
  7065                           tblptrl	equ	0xFF6
  7066                           tablat	equ	0xFF5
  7067                           prodh	equ	0xFF4
  7068                           prodl	equ	0xFF3
  7069                           postinc0	equ	0xFEE
  7070                           wreg	equ	0xFE8
  7071                           indf2	equ	0xFDF
  7072                           postinc2	equ	0xFDE
  7073                           postdec2	equ	0xFDD
  7074                           fsr2h	equ	0xFDA
  7075                           fsr2l	equ	0xFD9
  7076                           status	equ	0xFD8
  7077                           
  7078 ;; *************** function _rollPid *****************
  7079 ;; Defined at:
  7080 ;;		line 61 in file "pid.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;  desiredRoll     3   34[BANK0 ] float 
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;  rollError       3   43[BANK0 ] float 
  7085 ;;  changeInErro    3   37[BANK0 ] float 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      void 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7095 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7096 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7098 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7099 ;;Total ram usage:       12 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    6
  7102 ;; This function calls:
  7103 ;;		___ftadd
  7104 ;;		___ftmul
  7105 ;;		___ftneg
  7106 ;;		___fttol
  7107 ;; This function is called by:
  7108 ;;		_pid
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text34
  7113  002DB8                     __ptext34:
  7114                           	opt stack 0
  7115  002DB8                     _rollPid:
  7116                           	opt stack 23
  7117                           
  7118                           ;pid.c: 63: float rollError;
  7119                           ;pid.c: 64: float changeInError;
  7120                           ;pid.c: 67: rollError = desiredRoll - roll;
  7121                           
  7122                           ;incstack = 0
  7123  002DB8  C06A  F036         	movff	_roll,___ftneg@f1
  7124  002DBC  C06B  F037         	movff	_roll+1,___ftneg@f1+1
  7125  002DC0  C06C  F038         	movff	_roll+2,___ftneg@f1+2
  7126  002DC4  ECAE  F021         	call	___ftneg	;wreg free
  7127  002DC8  C036  F0C8         	movff	?___ftneg,___ftadd@f1
  7128  002DCC  C037  F0C9         	movff	?___ftneg+1,___ftadd@f1+1
  7129  002DD0  C038  F0CA         	movff	?___ftneg+2,___ftadd@f1+2
  7130  002DD4  C0E3  F0CB         	movff	rollPid@desiredRoll,___ftadd@f2
  7131  002DD8  C0E4  F0CC         	movff	rollPid@desiredRoll+1,___ftadd@f2+1
  7132  002DDC  C0E5  F0CD         	movff	rollPid@desiredRoll+2,___ftadd@f2+2
  7133  002DE0  ECF6  F012         	call	___ftadd	;wreg free
  7134  002DE4  C0C8  F0EC         	movff	?___ftadd,rollPid@rollError
  7135  002DE8  C0C9  F0ED         	movff	?___ftadd+1,rollPid@rollError+1
  7136  002DEC  C0CA  F0EE         	movff	?___ftadd+2,rollPid@rollError+2
  7137                           
  7138                           ;pid.c: 68: changeInError = rollPreviousError - rollError;
  7139  002DF0  C0EC  F036         	movff	rollPid@rollError,___ftneg@f1
  7140  002DF4  C0ED  F037         	movff	rollPid@rollError+1,___ftneg@f1+1
  7141  002DF8  C0EE  F038         	movff	rollPid@rollError+2,___ftneg@f1+2
  7142  002DFC  ECAE  F021         	call	___ftneg	;wreg free
  7143  002E00  C036  F0C8         	movff	?___ftneg,___ftadd@f1
  7144  002E04  C037  F0C9         	movff	?___ftneg+1,___ftadd@f1+1
  7145  002E08  C038  F0CA         	movff	?___ftneg+2,___ftadd@f1+2
  7146  002E0C  C09D  F0CB         	movff	_rollPreviousError,___ftadd@f2
  7147  002E10  C09E  F0CC         	movff	_rollPreviousError+1,___ftadd@f2+1
  7148  002E14  C09F  F0CD         	movff	_rollPreviousError+2,___ftadd@f2+2
  7149  002E18  ECF6  F012         	call	___ftadd	;wreg free
  7150  002E1C  C0C8  F0E6         	movff	?___ftadd,rollPid@changeInError
  7151  002E20  C0C9  F0E7         	movff	?___ftadd+1,rollPid@changeInError+1
  7152  002E24  C0CA  F0E8         	movff	?___ftadd+2,rollPid@changeInError+2
  7153                           
  7154                           ;pid.c: 69: rollIntegral += rollError;
  7155  002E28  C09A  F0C8         	movff	_rollIntegral,___ftadd@f1
  7156  002E2C  C09B  F0C9         	movff	_rollIntegral+1,___ftadd@f1+1
  7157  002E30  C09C  F0CA         	movff	_rollIntegral+2,___ftadd@f1+2
  7158  002E34  C0EC  F0CB         	movff	rollPid@rollError,___ftadd@f2
  7159  002E38  C0ED  F0CC         	movff	rollPid@rollError+1,___ftadd@f2+1
  7160  002E3C  C0EE  F0CD         	movff	rollPid@rollError+2,___ftadd@f2+2
  7161  002E40  ECF6  F012         	call	___ftadd	;wreg free
  7162  002E44  C0C8  F09A         	movff	?___ftadd,_rollIntegral
  7163  002E48  C0C9  F09B         	movff	?___ftadd+1,_rollIntegral+1
  7164  002E4C  C0CA  F09C         	movff	?___ftadd+2,_rollIntegral+2
  7165                           
  7166                           ;pid.c: 72: rollAdj = (int)((rollkp*rollError) - (rollkd*changeInError) + (rollki * roll
      +                          Integral));
  7167  002E50  C09A  F02A         	movff	_rollIntegral,___ftmul@f2
  7168  002E54  C09B  F02B         	movff	_rollIntegral+1,___ftmul@f2+1
  7169  002E58  C09C  F02C         	movff	_rollIntegral+2,___ftmul@f2+2
  7170  002E5C  C0A3  F027         	movff	_rollki,___ftmul@f1
  7171  002E60  C0A4  F028         	movff	_rollki+1,___ftmul@f1+1
  7172  002E64  C0A5  F029         	movff	_rollki+2,___ftmul@f1+2
  7173  002E68  EC2D  F01C         	call	___ftmul	;wreg free
  7174  002E6C  C027  F0CB         	movff	?___ftmul,___ftadd@f2
  7175  002E70  C028  F0CC         	movff	?___ftmul+1,___ftadd@f2+1
  7176  002E74  C029  F0CD         	movff	?___ftmul+2,___ftadd@f2+2
  7177  002E78  C0EC  F02A         	movff	rollPid@rollError,___ftmul@f2
  7178  002E7C  C0ED  F02B         	movff	rollPid@rollError+1,___ftmul@f2+1
  7179  002E80  C0EE  F02C         	movff	rollPid@rollError+2,___ftmul@f2+2
  7180  002E84  C0A6  F027         	movff	_rollkp,___ftmul@f1
  7181  002E88  C0A7  F028         	movff	_rollkp+1,___ftmul@f1+1
  7182  002E8C  C0A8  F029         	movff	_rollkp+2,___ftmul@f1+2
  7183  002E90  EC2D  F01C         	call	___ftmul	;wreg free
  7184  002E94  C027  F0C8         	movff	?___ftmul,___ftadd@f1
  7185  002E98  C028  F0C9         	movff	?___ftmul+1,___ftadd@f1+1
  7186  002E9C  C029  F0CA         	movff	?___ftmul+2,___ftadd@f1+2
  7187  002EA0  ECF6  F012         	call	___ftadd	;wreg free
  7188  002EA4  C0C8  F0E9         	movff	?___ftadd,_rollPid$2963
  7189  002EA8  C0C9  F0EA         	movff	?___ftadd+1,_rollPid$2963+1
  7190  002EAC  C0CA  F0EB         	movff	?___ftadd+2,_rollPid$2963+2
  7191                           
  7192                           ;pid.c: 72: rollAdj = (int)((rollkp*rollError) - (rollkd*changeInError) + (rollki * roll
      +                          Integral));
  7193  002EB0  C0E6  F02A         	movff	rollPid@changeInError,___ftmul@f2
  7194  002EB4  C0E7  F02B         	movff	rollPid@changeInError+1,___ftmul@f2+1
  7195  002EB8  C0E8  F02C         	movff	rollPid@changeInError+2,___ftmul@f2+2
  7196  002EBC  C0A0  F027         	movff	_rollkd,___ftmul@f1
  7197  002EC0  C0A1  F028         	movff	_rollkd+1,___ftmul@f1+1
  7198  002EC4  C0A2  F029         	movff	_rollkd+2,___ftmul@f1+2
  7199  002EC8  EC2D  F01C         	call	___ftmul	;wreg free
  7200  002ECC  C027  F036         	movff	?___ftmul,___ftneg@f1
  7201  002ED0  C028  F037         	movff	?___ftmul+1,___ftneg@f1+1
  7202  002ED4  C029  F038         	movff	?___ftmul+2,___ftneg@f1+2
  7203  002ED8  ECAE  F021         	call	___ftneg	;wreg free
  7204  002EDC  C036  F0CB         	movff	?___ftneg,___ftadd@f2
  7205  002EE0  C037  F0CC         	movff	?___ftneg+1,___ftadd@f2+1
  7206  002EE4  C038  F0CD         	movff	?___ftneg+2,___ftadd@f2+2
  7207  002EE8  C0E9  F0C8         	movff	_rollPid$2963,___ftadd@f1
  7208  002EEC  C0EA  F0C9         	movff	_rollPid$2963+1,___ftadd@f1+1
  7209  002EF0  C0EB  F0CA         	movff	_rollPid$2963+2,___ftadd@f1+2
  7210  002EF4  ECF6  F012         	call	___ftadd	;wreg free
  7211  002EF8  C0C8  F0D4         	movff	?___ftadd,___fttol@f1
  7212  002EFC  C0C9  F0D5         	movff	?___ftadd+1,___fttol@f1+1
  7213  002F00  C0CA  F0D6         	movff	?___ftadd+2,___fttol@f1+2
  7214  002F04  EC35  F018         	call	___fttol	;wreg free
  7215  002F08  C0D4  F0B5         	movff	?___fttol,_rollAdj
  7216  002F0C  C0D5  F0B6         	movff	?___fttol+1,_rollAdj+1
  7217                           
  7218                           ;pid.c: 75: rollPreviousError = rollError;
  7219  002F10  C0EC  F09D         	movff	rollPid@rollError,_rollPreviousError
  7220  002F14  C0ED  F09E         	movff	rollPid@rollError+1,_rollPreviousError+1
  7221  002F18  C0EE  F09F         	movff	rollPid@rollError+2,_rollPreviousError+2
  7222  002F1C  0012               	return		;funcret
  7223  002F1E                     __end_of_rollPid:
  7224                           	opt stack 0
  7225                           tblptru	equ	0xFF8
  7226                           tblptrh	equ	0xFF7
  7227                           tblptrl	equ	0xFF6
  7228                           tablat	equ	0xFF5
  7229                           prodh	equ	0xFF4
  7230                           prodl	equ	0xFF3
  7231                           postinc0	equ	0xFEE
  7232                           wreg	equ	0xFE8
  7233                           indf2	equ	0xFDF
  7234                           postinc2	equ	0xFDE
  7235                           postdec2	equ	0xFDD
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function ___fttol *****************
  7241 ;; Defined at:
  7242 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  f1              3   19[BANK0 ] float 
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  lval            4   29[BANK0 ] unsigned long 
  7247 ;;  exp1            1   33[BANK0 ] unsigned char 
  7248 ;;  sign1           1   28[BANK0 ] unsigned char 
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  4   19[BANK0 ] long 
  7251 ;; Registers used:
  7252 ;;		wreg, status,2, status,0
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7258 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7259 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7260 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7261 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7262 ;;Total ram usage:       15 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    4
  7265 ;; This function calls:
  7266 ;;		Nothing
  7267 ;; This function is called by:
  7268 ;;		_main
  7269 ;;		_rollPid
  7270 ;;		_printf
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text35
  7275  00306A                     __ptext35:
  7276                           	opt stack 0
  7277  00306A                     ___fttol:
  7278                           	opt stack 25
  7279                           
  7280                           ;incstack = 0
  7281  00306A  C0D6  F0D8         	movff	___fttol@f1+2,??___fttol
  7282  00306E  0100               	movlb	0	; () banked
  7283  003070  6BD9               	clrf	(??___fttol+1)& (0+255),b
  7284  003072  6BDA               	clrf	(??___fttol+2)& (0+255),b
  7285  003074  0100               	movlb	0	; () banked
  7286  003076  35D5               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7287  003078  0100               	movlb	0	; () banked
  7288  00307A  37D8               	rlcf	??___fttol& (0+255),f,b
  7289  00307C  E301               	bnc	u4571
  7290  00307E  81D9               	bsf	(??___fttol+1)& (0+255),0,b
  7291  003080                     u4571:
  7292  003080  0100               	movlb	0	; () banked
  7293  003082  51D8               	movf	??___fttol& (0+255),w,b
  7294  003084  0100               	movlb	0	; () banked
  7295  003086  6FE2               	movwf	___fttol@exp1& (0+255),b
  7296  003088  0100               	movlb	0	; () banked
  7297  00308A  51E2               	movf	___fttol@exp1& (0+255),w,b
  7298  00308C  A4D8               	btfss	status,2,c
  7299  00308E  D00A               	goto	l5321
  7300                           
  7301                           ; BSR set to: 0
  7302  003090  0E00               	movlw	0
  7303  003092  0100               	movlb	0	; () banked
  7304  003094  6FD4               	movwf	?___fttol& (0+255),b
  7305  003096  0E00               	movlw	0
  7306  003098  6FD5               	movwf	(?___fttol+1)& (0+255),b
  7307  00309A  0E00               	movlw	0
  7308  00309C  6FD6               	movwf	(?___fttol+2)& (0+255),b
  7309  00309E  0E00               	movlw	0
  7310  0030A0  6FD7               	movwf	(?___fttol+3)& (0+255),b
  7311                           
  7312                           ; BSR set to: 0
  7313  0030A2  0012               	return	
  7314  0030A4                     l5321:
  7315                           
  7316                           ; BSR set to: 0
  7317  0030A4  0E17               	movlw	23
  7318  0030A6  0100               	movlb	0	; () banked
  7319  0030A8  6FD8               	movwf	??___fttol& (0+255),b
  7320  0030AA  C0D4  F0D9         	movff	___fttol@f1,??___fttol+1
  7321  0030AE  C0D5  F0DA         	movff	___fttol@f1+1,??___fttol+2
  7322  0030B2  C0D6  F0DB         	movff	___fttol@f1+2,??___fttol+3
  7323  0030B6  0100               	movlb	0	; () banked
  7324  0030B8  29D8               	incf	??___fttol& (0+255),w,b
  7325  0030BA  0100               	movlb	0	; () banked
  7326  0030BC  6FDC               	movwf	(??___fttol+4)& (0+255),b
  7327  0030BE  D005               	goto	u4590
  7328  0030C0                     u4595:
  7329  0030C0  0100               	movlb	0	; () banked
  7330  0030C2  90D8               	bcf	status,0,c
  7331  0030C4  33DB               	rrcf	(??___fttol+3)& (0+255),f,b
  7332  0030C6  33DA               	rrcf	(??___fttol+2)& (0+255),f,b
  7333  0030C8  33D9               	rrcf	(??___fttol+1)& (0+255),f,b
  7334  0030CA                     u4590:
  7335  0030CA  0100               	movlb	0	; () banked
  7336  0030CC  2FDC               	decfsz	(??___fttol+4)& (0+255),f,b
  7337  0030CE  D7F8               	goto	u4595
  7338  0030D0  0100               	movlb	0	; () banked
  7339  0030D2  51D9               	movf	(??___fttol+1)& (0+255),w,b
  7340  0030D4  0100               	movlb	0	; () banked
  7341  0030D6  6FDD               	movwf	___fttol@sign1& (0+255),b
  7342                           
  7343                           ; BSR set to: 0
  7344  0030D8  0100               	movlb	0	; () banked
  7345  0030DA  8FD5               	bsf	(___fttol@f1+1)& (0+255),7,b
  7346                           
  7347                           ; BSR set to: 0
  7348  0030DC  0EFF               	movlw	255
  7349  0030DE  0100               	movlb	0	; () banked
  7350  0030E0  17D4               	andwf	___fttol@f1& (0+255),f,b
  7351  0030E2  0EFF               	movlw	255
  7352  0030E4  0100               	movlb	0	; () banked
  7353  0030E6  17D5               	andwf	(___fttol@f1+1)& (0+255),f,b
  7354  0030E8  0E00               	movlw	0
  7355  0030EA  0100               	movlb	0	; () banked
  7356  0030EC  17D6               	andwf	(___fttol@f1+2)& (0+255),f,b
  7357                           
  7358                           ; BSR set to: 0
  7359  0030EE  0100               	movlb	0	; () banked
  7360  0030F0  51D4               	movf	___fttol@f1& (0+255),w,b
  7361  0030F2  0100               	movlb	0	; () banked
  7362  0030F4  6FDE               	movwf	___fttol@lval& (0+255),b
  7363  0030F6  0100               	movlb	0	; () banked
  7364  0030F8  51D5               	movf	(___fttol@f1+1)& (0+255),w,b
  7365  0030FA  0100               	movlb	0	; () banked
  7366  0030FC  6FDF               	movwf	(___fttol@lval+1)& (0+255),b
  7367  0030FE  0100               	movlb	0	; () banked
  7368  003100  51D6               	movf	(___fttol@f1+2)& (0+255),w,b
  7369  003102  0100               	movlb	0	; () banked
  7370  003104  6FE0               	movwf	(___fttol@lval+2)& (0+255),b
  7371  003106  0100               	movlb	0	; () banked
  7372  003108  6BE1               	clrf	(___fttol@lval+3)& (0+255),b
  7373                           
  7374                           ; BSR set to: 0
  7375  00310A  0E8E               	movlw	142
  7376  00310C  0100               	movlb	0	; () banked
  7377  00310E  5FE2               	subwf	___fttol@exp1& (0+255),f,b
  7378                           
  7379                           ; BSR set to: 0
  7380  003110  0100               	movlb	0	; () banked
  7381  003112  AFE2               	btfss	___fttol@exp1& (0+255),7,b
  7382  003114  D01A               	goto	l5343
  7383                           
  7384                           ; BSR set to: 0
  7385  003116  0100               	movlb	0	; () banked
  7386  003118  51E2               	movf	___fttol@exp1& (0+255),w,b
  7387  00311A  0A80               	xorlw	128
  7388  00311C  0F8F               	addlw	143
  7389  00311E  B0D8               	btfsc	status,0,c
  7390  003120  D00A               	goto	l5339
  7391                           
  7392                           ; BSR set to: 0
  7393  003122  0E00               	movlw	0
  7394  003124  0100               	movlb	0	; () banked
  7395  003126  6FD4               	movwf	?___fttol& (0+255),b
  7396  003128  0E00               	movlw	0
  7397  00312A  6FD5               	movwf	(?___fttol+1)& (0+255),b
  7398  00312C  0E00               	movlw	0
  7399  00312E  6FD6               	movwf	(?___fttol+2)& (0+255),b
  7400  003130  0E00               	movlw	0
  7401  003132  6FD7               	movwf	(?___fttol+3)& (0+255),b
  7402                           
  7403                           ; BSR set to: 0
  7404  003134  0012               	return	
  7405  003136                     l5339:
  7406                           
  7407                           ; BSR set to: 0
  7408  003136  0100               	movlb	0	; () banked
  7409  003138  90D8               	bcf	status,0,c
  7410  00313A  33E1               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7411  00313C  33E0               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7412  00313E  33DF               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7413  003140  33DE               	rrcf	___fttol@lval& (0+255),f,b
  7414                           
  7415                           ; BSR set to: 0
  7416  003142  0100               	movlb	0	; () banked
  7417  003144  3FE2               	incfsz	___fttol@exp1& (0+255),f,b
  7418  003146  D7F7               	goto	l5339
  7419                           
  7420                           ; BSR set to: 0
  7421  003148  D01B               	goto	l5353
  7422  00314A                     l5343:
  7423                           
  7424                           ; BSR set to: 0
  7425  00314A  0E17               	movlw	23
  7426  00314C  0100               	movlb	0	; () banked
  7427  00314E  65E2               	cpfsgt	___fttol@exp1& (0+255),b
  7428  003150  D012               	goto	l5351
  7429                           
  7430                           ; BSR set to: 0
  7431  003152  0E00               	movlw	0
  7432  003154  0100               	movlb	0	; () banked
  7433  003156  6FD4               	movwf	?___fttol& (0+255),b
  7434  003158  0E00               	movlw	0
  7435  00315A  6FD5               	movwf	(?___fttol+1)& (0+255),b
  7436  00315C  0E00               	movlw	0
  7437  00315E  6FD6               	movwf	(?___fttol+2)& (0+255),b
  7438  003160  0E00               	movlw	0
  7439  003162  6FD7               	movwf	(?___fttol+3)& (0+255),b
  7440                           
  7441                           ; BSR set to: 0
  7442  003164  0012               	return	
  7443  003166                     l5349:
  7444                           
  7445                           ; BSR set to: 0
  7446  003166  0100               	movlb	0	; () banked
  7447  003168  90D8               	bcf	status,0,c
  7448  00316A  37DE               	rlcf	___fttol@lval& (0+255),f,b
  7449  00316C  37DF               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7450  00316E  37E0               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7451  003170  37E1               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7452  003172  0100               	movlb	0	; () banked
  7453  003174  07E2               	decf	___fttol@exp1& (0+255),f,b
  7454  003176                     l5351:
  7455                           
  7456                           ; BSR set to: 0
  7457  003176  0100               	movlb	0	; () banked
  7458  003178  51E2               	movf	___fttol@exp1& (0+255),w,b
  7459  00317A  0100               	movlb	0	; () banked
  7460  00317C  A4D8               	btfss	status,2,c
  7461  00317E  D7F3               	goto	l5349
  7462  003180                     l5353:
  7463                           
  7464                           ; BSR set to: 0
  7465  003180  0100               	movlb	0	; () banked
  7466  003182  51DD               	movf	___fttol@sign1& (0+255),w,b
  7467  003184  0100               	movlb	0	; () banked
  7468  003186  B4D8               	btfsc	status,2,c
  7469  003188  D009               	goto	l5357
  7470                           
  7471                           ; BSR set to: 0
  7472  00318A  0100               	movlb	0	; () banked
  7473  00318C  1FE1               	comf	(___fttol@lval+3)& (0+255),f,b
  7474  00318E  1FE0               	comf	(___fttol@lval+2)& (0+255),f,b
  7475  003190  1FDF               	comf	(___fttol@lval+1)& (0+255),f,b
  7476  003192  6DDE               	negf	___fttol@lval& (0+255),b
  7477  003194  0E00               	movlw	0
  7478  003196  23DF               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7479  003198  23E0               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7480  00319A  23E1               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7481  00319C                     l5357:
  7482                           
  7483                           ; BSR set to: 0
  7484  00319C  C0DE  F0D4         	movff	___fttol@lval,?___fttol
  7485  0031A0  C0DF  F0D5         	movff	___fttol@lval+1,?___fttol+1
  7486  0031A4  C0E0  F0D6         	movff	___fttol@lval+2,?___fttol+2
  7487  0031A8  C0E1  F0D7         	movff	___fttol@lval+3,?___fttol+3
  7488  0031AC  0012               	return	
  7489  0031AE                     __end_of___fttol:
  7490                           	opt stack 0
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           postinc0	equ	0xFEE
  7498                           wreg	equ	0xFE8
  7499                           indf2	equ	0xFDF
  7500                           postinc2	equ	0xFDE
  7501                           postdec2	equ	0xFDD
  7502                           fsr2h	equ	0xFDA
  7503                           fsr2l	equ	0xFD9
  7504                           status	equ	0xFD8
  7505                           
  7506 ;; *************** function _pitchPid *****************
  7507 ;; Defined at:
  7508 ;;		line 78 in file "pid.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  desiredPitch    3   18[COMRAM] float 
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      void 
  7515 ;; Registers used:
  7516 ;;		None
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7522 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7525 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7526 ;;Total ram usage:        3 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; Hardware stack levels required when called:    4
  7529 ;; This function calls:
  7530 ;;		Nothing
  7531 ;; This function is called by:
  7532 ;;		_pid
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           	psect	text36
  7537  00456C                     __ptext36:
  7538                           	opt stack 0
  7539  00456C                     _pitchPid:
  7540                           	opt stack 25
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;incstack = 0
  7544  00456C  0012               	return		;funcret
  7545  00456E                     __end_of_pitchPid:
  7546                           	opt stack 0
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodh	equ	0xFF4
  7552                           prodl	equ	0xFF3
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           indf2	equ	0xFDF
  7556                           postinc2	equ	0xFDE
  7557                           postdec2	equ	0xFDD
  7558                           fsr2h	equ	0xFDA
  7559                           fsr2l	equ	0xFD9
  7560                           status	equ	0xFD8
  7561                           
  7562 ;; *************** function _kalman_Init *****************
  7563 ;; Defined at:
  7564 ;;		line 13 in file "kalman.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;		None
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;		None
  7569 ;; Return value:  Size  Location     Type
  7570 ;;                  1    wreg      void 
  7571 ;; Registers used:
  7572 ;;		wreg, status,2
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7582 ;;Total ram usage:        0 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    4
  7585 ;; This function calls:
  7586 ;;		Nothing
  7587 ;; This function is called by:
  7588 ;;		_main
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text37
  7593  002C2A                     __ptext37:
  7594                           	opt stack 0
  7595  002C2A                     _kalman_Init:
  7596                           	opt stack 26
  7597                           
  7598                           ;kalman.c: 16: axState.x = ax;
  7599                           
  7600                           ;incstack = 0
  7601  002C2A  C07C  F15D         	movff	_ax,_axState+6
  7602  002C2E  C07D  F15E         	movff	_ax+1,_axState+7
  7603  002C32  C07E  F15F         	movff	_ax+2,_axState+8
  7604                           
  7605                           ;kalman.c: 17: axState.p = 1;
  7606  002C36  0E00               	movlw	0
  7607  002C38  0101               	movlb	1	; () banked
  7608  002C3A  6F60               	movwf	(_axState+9)& (0+255),b
  7609  002C3C  0E80               	movlw	128
  7610  002C3E  0101               	movlb	1	; () banked
  7611  002C40  6F61               	movwf	(_axState+10)& (0+255),b
  7612  002C42  0E3F               	movlw	63
  7613  002C44  0101               	movlb	1	; () banked
  7614  002C46  6F62               	movwf	(_axState+11)& (0+255),b
  7615                           
  7616                           ;kalman.c: 18: axState.q = .001;
  7617  002C48  0E12               	movlw	18
  7618  002C4A  0101               	movlb	1	; () banked
  7619  002C4C  6F57               	movwf	_axState& (0+255),b
  7620  002C4E  0E83               	movlw	131
  7621  002C50  0101               	movlb	1	; () banked
  7622  002C52  6F58               	movwf	(_axState+1)& (0+255),b
  7623  002C54  0E3A               	movlw	58
  7624  002C56  0101               	movlb	1	; () banked
  7625  002C58  6F59               	movwf	(_axState+2)& (0+255),b
  7626                           
  7627                           ;kalman.c: 19: axState.r = .3;
  7628  002C5A  0E9A               	movlw	154
  7629  002C5C  0101               	movlb	1	; () banked
  7630  002C5E  6F5A               	movwf	(_axState+3)& (0+255),b
  7631  002C60  0E99               	movlw	153
  7632  002C62  0101               	movlb	1	; () banked
  7633  002C64  6F5B               	movwf	(_axState+4)& (0+255),b
  7634  002C66  0E3E               	movlw	62
  7635  002C68  0101               	movlb	1	; () banked
  7636  002C6A  6F5C               	movwf	(_axState+5)& (0+255),b
  7637                           
  7638                           ; BSR set to: 1
  7639                           ;kalman.c: 21: ayState.x = ay;
  7640  002C6C  C079  F14E         	movff	_ay,_ayState+6
  7641  002C70  C07A  F14F         	movff	_ay+1,_ayState+7
  7642  002C74  C07B  F150         	movff	_ay+2,_ayState+8
  7643                           
  7644                           ;kalman.c: 22: ayState.p = 1;
  7645  002C78  0E00               	movlw	0
  7646  002C7A  0101               	movlb	1	; () banked
  7647  002C7C  6F51               	movwf	(_ayState+9)& (0+255),b
  7648  002C7E  0E80               	movlw	128
  7649  002C80  0101               	movlb	1	; () banked
  7650  002C82  6F52               	movwf	(_ayState+10)& (0+255),b
  7651  002C84  0E3F               	movlw	63
  7652  002C86  0101               	movlb	1	; () banked
  7653  002C88  6F53               	movwf	(_ayState+11)& (0+255),b
  7654                           
  7655                           ;kalman.c: 23: ayState.q = .001;
  7656  002C8A  0E12               	movlw	18
  7657  002C8C  0101               	movlb	1	; () banked
  7658  002C8E  6F48               	movwf	_ayState& (0+255),b
  7659  002C90  0E83               	movlw	131
  7660  002C92  0101               	movlb	1	; () banked
  7661  002C94  6F49               	movwf	(_ayState+1)& (0+255),b
  7662  002C96  0E3A               	movlw	58
  7663  002C98  0101               	movlb	1	; () banked
  7664  002C9A  6F4A               	movwf	(_ayState+2)& (0+255),b
  7665                           
  7666                           ;kalman.c: 24: ayState.r = .3;
  7667  002C9C  0E9A               	movlw	154
  7668  002C9E  0101               	movlb	1	; () banked
  7669  002CA0  6F4B               	movwf	(_ayState+3)& (0+255),b
  7670  002CA2  0E99               	movlw	153
  7671  002CA4  0101               	movlb	1	; () banked
  7672  002CA6  6F4C               	movwf	(_ayState+4)& (0+255),b
  7673  002CA8  0E3E               	movlw	62
  7674  002CAA  0101               	movlb	1	; () banked
  7675  002CAC  6F4D               	movwf	(_ayState+5)& (0+255),b
  7676                           
  7677                           ; BSR set to: 1
  7678                           ;kalman.c: 26: azState.x = az;
  7679  002CAE  C076  F13F         	movff	_az,_azState+6
  7680  002CB2  C077  F140         	movff	_az+1,_azState+7
  7681  002CB6  C078  F141         	movff	_az+2,_azState+8
  7682                           
  7683                           ;kalman.c: 27: azState.p =1;
  7684  002CBA  0E00               	movlw	0
  7685  002CBC  0101               	movlb	1	; () banked
  7686  002CBE  6F42               	movwf	(_azState+9)& (0+255),b
  7687  002CC0  0E80               	movlw	128
  7688  002CC2  0101               	movlb	1	; () banked
  7689  002CC4  6F43               	movwf	(_azState+10)& (0+255),b
  7690  002CC6  0E3F               	movlw	63
  7691  002CC8  0101               	movlb	1	; () banked
  7692  002CCA  6F44               	movwf	(_azState+11)& (0+255),b
  7693                           
  7694                           ;kalman.c: 28: azState.q = .015;
  7695  002CCC  0EC3               	movlw	195
  7696  002CCE  0101               	movlb	1	; () banked
  7697  002CD0  6F39               	movwf	_azState& (0+255),b
  7698  002CD2  0E75               	movlw	117
  7699  002CD4  0101               	movlb	1	; () banked
  7700  002CD6  6F3A               	movwf	(_azState+1)& (0+255),b
  7701  002CD8  0E3C               	movlw	60
  7702  002CDA  0101               	movlb	1	; () banked
  7703  002CDC  6F3B               	movwf	(_azState+2)& (0+255),b
  7704                           
  7705                           ;kalman.c: 29: azState.r = .3;
  7706  002CDE  0E9A               	movlw	154
  7707  002CE0  0101               	movlb	1	; () banked
  7708  002CE2  6F3C               	movwf	(_azState+3)& (0+255),b
  7709  002CE4  0E99               	movlw	153
  7710  002CE6  0101               	movlb	1	; () banked
  7711  002CE8  6F3D               	movwf	(_azState+4)& (0+255),b
  7712  002CEA  0E3E               	movlw	62
  7713  002CEC  0101               	movlb	1	; () banked
  7714  002CEE  6F3E               	movwf	(_azState+5)& (0+255),b
  7715                           
  7716                           ; BSR set to: 1
  7717                           ;kalman.c: 32: gxState.x = gx;
  7718  002CF0  C073  F130         	movff	_gx,_gxState+6
  7719  002CF4  C074  F131         	movff	_gx+1,_gxState+7
  7720  002CF8  C075  F132         	movff	_gx+2,_gxState+8
  7721                           
  7722                           ;kalman.c: 33: gxState.p = 1;
  7723  002CFC  0E00               	movlw	0
  7724  002CFE  0101               	movlb	1	; () banked
  7725  002D00  6F33               	movwf	(_gxState+9)& (0+255),b
  7726  002D02  0E80               	movlw	128
  7727  002D04  0101               	movlb	1	; () banked
  7728  002D06  6F34               	movwf	(_gxState+10)& (0+255),b
  7729  002D08  0E3F               	movlw	63
  7730  002D0A  0101               	movlb	1	; () banked
  7731  002D0C  6F35               	movwf	(_gxState+11)& (0+255),b
  7732                           
  7733                           ;kalman.c: 34: gxState.q = .07;
  7734  002D0E  0E5C               	movlw	92
  7735  002D10  0101               	movlb	1	; () banked
  7736  002D12  6F2A               	movwf	_gxState& (0+255),b
  7737  002D14  0E8F               	movlw	143
  7738  002D16  0101               	movlb	1	; () banked
  7739  002D18  6F2B               	movwf	(_gxState+1)& (0+255),b
  7740  002D1A  0E3D               	movlw	61
  7741  002D1C  0101               	movlb	1	; () banked
  7742  002D1E  6F2C               	movwf	(_gxState+2)& (0+255),b
  7743                           
  7744                           ;kalman.c: 35: gxState.r = .75;
  7745  002D20  0E00               	movlw	0
  7746  002D22  0101               	movlb	1	; () banked
  7747  002D24  6F2D               	movwf	(_gxState+3)& (0+255),b
  7748  002D26  0E40               	movlw	64
  7749  002D28  0101               	movlb	1	; () banked
  7750  002D2A  6F2E               	movwf	(_gxState+4)& (0+255),b
  7751  002D2C  0E3F               	movlw	63
  7752  002D2E  0101               	movlb	1	; () banked
  7753  002D30  6F2F               	movwf	(_gxState+5)& (0+255),b
  7754                           
  7755                           ; BSR set to: 1
  7756                           ;kalman.c: 37: gyState.x = gy;
  7757  002D32  C070  F121         	movff	_gy,_gyState+6
  7758  002D36  C071  F122         	movff	_gy+1,_gyState+7
  7759  002D3A  C072  F123         	movff	_gy+2,_gyState+8
  7760                           
  7761                           ;kalman.c: 38: gyState.p =1;
  7762  002D3E  0E00               	movlw	0
  7763  002D40  0101               	movlb	1	; () banked
  7764  002D42  6F24               	movwf	(_gyState+9)& (0+255),b
  7765  002D44  0E80               	movlw	128
  7766  002D46  0101               	movlb	1	; () banked
  7767  002D48  6F25               	movwf	(_gyState+10)& (0+255),b
  7768  002D4A  0E3F               	movlw	63
  7769  002D4C  0101               	movlb	1	; () banked
  7770  002D4E  6F26               	movwf	(_gyState+11)& (0+255),b
  7771                           
  7772                           ;kalman.c: 39: gyState.q = .07;
  7773  002D50  0E5C               	movlw	92
  7774  002D52  0101               	movlb	1	; () banked
  7775  002D54  6F1B               	movwf	_gyState& (0+255),b
  7776  002D56  0E8F               	movlw	143
  7777  002D58  0101               	movlb	1	; () banked
  7778  002D5A  6F1C               	movwf	(_gyState+1)& (0+255),b
  7779  002D5C  0E3D               	movlw	61
  7780  002D5E  0101               	movlb	1	; () banked
  7781  002D60  6F1D               	movwf	(_gyState+2)& (0+255),b
  7782                           
  7783                           ;kalman.c: 40: gyState.r = .75;
  7784  002D62  0E00               	movlw	0
  7785  002D64  0101               	movlb	1	; () banked
  7786  002D66  6F1E               	movwf	(_gyState+3)& (0+255),b
  7787  002D68  0E40               	movlw	64
  7788  002D6A  0101               	movlb	1	; () banked
  7789  002D6C  6F1F               	movwf	(_gyState+4)& (0+255),b
  7790  002D6E  0E3F               	movlw	63
  7791  002D70  0101               	movlb	1	; () banked
  7792  002D72  6F20               	movwf	(_gyState+5)& (0+255),b
  7793                           
  7794                           ; BSR set to: 1
  7795                           ;kalman.c: 42: gzState.x = gz;
  7796  002D74  C06D  F112         	movff	_gz,_gzState+6
  7797  002D78  C06E  F113         	movff	_gz+1,_gzState+7
  7798  002D7C  C06F  F114         	movff	_gz+2,_gzState+8
  7799                           
  7800                           ;kalman.c: 43: gzState.p = 1;
  7801  002D80  0E00               	movlw	0
  7802  002D82  0101               	movlb	1	; () banked
  7803  002D84  6F15               	movwf	(_gzState+9)& (0+255),b
  7804  002D86  0E80               	movlw	128
  7805  002D88  0101               	movlb	1	; () banked
  7806  002D8A  6F16               	movwf	(_gzState+10)& (0+255),b
  7807  002D8C  0E3F               	movlw	63
  7808  002D8E  0101               	movlb	1	; () banked
  7809  002D90  6F17               	movwf	(_gzState+11)& (0+255),b
  7810                           
  7811                           ;kalman.c: 44: gzState.q = .07;
  7812  002D92  0E5C               	movlw	92
  7813  002D94  0101               	movlb	1	; () banked
  7814  002D96  6F0C               	movwf	_gzState& (0+255),b
  7815  002D98  0E8F               	movlw	143
  7816  002D9A  0101               	movlb	1	; () banked
  7817  002D9C  6F0D               	movwf	(_gzState+1)& (0+255),b
  7818  002D9E  0E3D               	movlw	61
  7819  002DA0  0101               	movlb	1	; () banked
  7820  002DA2  6F0E               	movwf	(_gzState+2)& (0+255),b
  7821                           
  7822                           ;kalman.c: 45: gzState.r = .75;
  7823  002DA4  0E00               	movlw	0
  7824  002DA6  0101               	movlb	1	; () banked
  7825  002DA8  6F0F               	movwf	(_gzState+3)& (0+255),b
  7826  002DAA  0E40               	movlw	64
  7827  002DAC  0101               	movlb	1	; () banked
  7828  002DAE  6F10               	movwf	(_gzState+4)& (0+255),b
  7829  002DB0  0E3F               	movlw	63
  7830  002DB2  0101               	movlb	1	; () banked
  7831  002DB4  6F11               	movwf	(_gzState+5)& (0+255),b
  7832                           
  7833                           ; BSR set to: 1
  7834  002DB6  0012               	return		;funcret
  7835  002DB8                     __end_of_kalman_Init:
  7836                           	opt stack 0
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           postinc0	equ	0xFEE
  7844                           wreg	equ	0xFE8
  7845                           indf2	equ	0xFDF
  7846                           postinc2	equ	0xFDE
  7847                           postdec2	equ	0xFDD
  7848                           fsr2h	equ	0xFDA
  7849                           fsr2l	equ	0xFD9
  7850                           status	equ	0xFD8
  7851                           
  7852 ;; *************** function _interrupt_Init *****************
  7853 ;; Defined at:
  7854 ;;		line 81 in file "main.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;		None
  7857 ;; Auto vars:     Size  Location     Type
  7858 ;;		None
  7859 ;; Return value:  Size  Location     Type
  7860 ;;                  1    wreg      void 
  7861 ;; Registers used:
  7862 ;;		None
  7863 ;; Tracked objects:
  7864 ;;		On entry : 0/0
  7865 ;;		On exit  : 0/0
  7866 ;;		Unchanged: 0/0
  7867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7872 ;;Total ram usage:        0 bytes
  7873 ;; Hardware stack levels used:    1
  7874 ;; Hardware stack levels required when called:    4
  7875 ;; This function calls:
  7876 ;;		Nothing
  7877 ;; This function is called by:
  7878 ;;		_main
  7879 ;; This function uses a non-reentrant model
  7880 ;;
  7881                           
  7882                           	psect	text38
  7883  004554                     __ptext38:
  7884                           	opt stack 0
  7885  004554                     _interrupt_Init:
  7886                           	opt stack 26
  7887                           
  7888                           ;main.c: 83: INTCONbits.GIE = 1;
  7889                           
  7890                           ; BSR set to: 1
  7891                           ;incstack = 0
  7892  004554  8EF2               	bsf	intcon,7,c	;volatile
  7893                           
  7894                           ;main.c: 86: INTCONbits.PEIE = 1;
  7895  004556  8CF2               	bsf	intcon,6,c	;volatile
  7896  004558  0012               	return		;funcret
  7897  00455A                     __end_of_interrupt_Init:
  7898                           	opt stack 0
  7899                           tblptru	equ	0xFF8
  7900                           tblptrh	equ	0xFF7
  7901                           tblptrl	equ	0xFF6
  7902                           tablat	equ	0xFF5
  7903                           prodh	equ	0xFF4
  7904                           prodl	equ	0xFF3
  7905                           intcon	equ	0xFF2
  7906                           postinc0	equ	0xFEE
  7907                           wreg	equ	0xFE8
  7908                           indf2	equ	0xFDF
  7909                           postinc2	equ	0xFDE
  7910                           postdec2	equ	0xFDD
  7911                           fsr2h	equ	0xFDA
  7912                           fsr2l	equ	0xFD9
  7913                           status	equ	0xFD8
  7914                           
  7915 ;; *************** function _filterData *****************
  7916 ;; Defined at:
  7917 ;;		line 60 in file "kalman.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;		None
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;		None
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  1    wreg      void 
  7924 ;; Registers used:
  7925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7935 ;;Total ram usage:        0 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    7
  7938 ;; This function calls:
  7939 ;;		_kalmanUpdate
  7940 ;; This function is called by:
  7941 ;;		_main
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           	psect	text39
  7946  00394E                     __ptext39:
  7947                           	opt stack 0
  7948  00394E                     _filterData:
  7949                           	opt stack 23
  7950                           
  7951                           ;kalman.c: 61: kalmanUpdate(&axState, ax);
  7952                           
  7953                           ;incstack = 0
  7954  00394E  0E57               	movlw	low _axState
  7955  003950  0100               	movlb	0	; () banked
  7956  003952  6FE3               	movwf	kalmanUpdate@state& (0+255),b
  7957  003954  0E01               	movlw	high _axState
  7958  003956  0100               	movlb	0	; () banked
  7959  003958  6FE4               	movwf	(kalmanUpdate@state+1)& (0+255),b
  7960  00395A  C07C  F0E5         	movff	_ax,kalmanUpdate@measurement
  7961  00395E  C07D  F0E6         	movff	_ax+1,kalmanUpdate@measurement+1
  7962  003962  C07E  F0E7         	movff	_ax+2,kalmanUpdate@measurement+2
  7963  003966  EC2A  F014         	call	_kalmanUpdate	;wreg free
  7964                           
  7965                           ;kalman.c: 62: kalmanUpdate(&ayState, ay);
  7966  00396A  0E48               	movlw	low _ayState
  7967  00396C  0100               	movlb	0	; () banked
  7968  00396E  6FE3               	movwf	kalmanUpdate@state& (0+255),b
  7969  003970  0E01               	movlw	high _ayState
  7970  003972  0100               	movlb	0	; () banked
  7971  003974  6FE4               	movwf	(kalmanUpdate@state+1)& (0+255),b
  7972  003976  C079  F0E5         	movff	_ay,kalmanUpdate@measurement
  7973  00397A  C07A  F0E6         	movff	_ay+1,kalmanUpdate@measurement+1
  7974  00397E  C07B  F0E7         	movff	_ay+2,kalmanUpdate@measurement+2
  7975  003982  EC2A  F014         	call	_kalmanUpdate	;wreg free
  7976                           
  7977                           ;kalman.c: 63: kalmanUpdate(&azState, az);
  7978  003986  0E39               	movlw	low _azState
  7979  003988  0100               	movlb	0	; () banked
  7980  00398A  6FE3               	movwf	kalmanUpdate@state& (0+255),b
  7981  00398C  0E01               	movlw	high _azState
  7982  00398E  0100               	movlb	0	; () banked
  7983  003990  6FE4               	movwf	(kalmanUpdate@state+1)& (0+255),b
  7984  003992  C076  F0E5         	movff	_az,kalmanUpdate@measurement
  7985  003996  C077  F0E6         	movff	_az+1,kalmanUpdate@measurement+1
  7986  00399A  C078  F0E7         	movff	_az+2,kalmanUpdate@measurement+2
  7987  00399E  EC2A  F014         	call	_kalmanUpdate	;wreg free
  7988                           
  7989                           ;kalman.c: 64: kalmanUpdate(&gxState, gx);
  7990  0039A2  0E2A               	movlw	low _gxState
  7991  0039A4  0100               	movlb	0	; () banked
  7992  0039A6  6FE3               	movwf	kalmanUpdate@state& (0+255),b
  7993  0039A8  0E01               	movlw	high _gxState
  7994  0039AA  0100               	movlb	0	; () banked
  7995  0039AC  6FE4               	movwf	(kalmanUpdate@state+1)& (0+255),b
  7996  0039AE  C073  F0E5         	movff	_gx,kalmanUpdate@measurement
  7997  0039B2  C074  F0E6         	movff	_gx+1,kalmanUpdate@measurement+1
  7998  0039B6  C075  F0E7         	movff	_gx+2,kalmanUpdate@measurement+2
  7999  0039BA  EC2A  F014         	call	_kalmanUpdate	;wreg free
  8000                           
  8001                           ;kalman.c: 65: kalmanUpdate(&gyState, gy);
  8002  0039BE  0E1B               	movlw	low _gyState
  8003  0039C0  0100               	movlb	0	; () banked
  8004  0039C2  6FE3               	movwf	kalmanUpdate@state& (0+255),b
  8005  0039C4  0E01               	movlw	high _gyState
  8006  0039C6  0100               	movlb	0	; () banked
  8007  0039C8  6FE4               	movwf	(kalmanUpdate@state+1)& (0+255),b
  8008  0039CA  C070  F0E5         	movff	_gy,kalmanUpdate@measurement
  8009  0039CE  C071  F0E6         	movff	_gy+1,kalmanUpdate@measurement+1
  8010  0039D2  C072  F0E7         	movff	_gy+2,kalmanUpdate@measurement+2
  8011  0039D6  EC2A  F014         	call	_kalmanUpdate	;wreg free
  8012                           
  8013                           ;kalman.c: 66: kalmanUpdate(&gzState, gz);
  8014  0039DA  0E0C               	movlw	low _gzState
  8015  0039DC  0100               	movlb	0	; () banked
  8016  0039DE  6FE3               	movwf	kalmanUpdate@state& (0+255),b
  8017  0039E0  0E01               	movlw	high _gzState
  8018  0039E2  0100               	movlb	0	; () banked
  8019  0039E4  6FE4               	movwf	(kalmanUpdate@state+1)& (0+255),b
  8020  0039E6  C06D  F0E5         	movff	_gz,kalmanUpdate@measurement
  8021  0039EA  C06E  F0E6         	movff	_gz+1,kalmanUpdate@measurement+1
  8022  0039EE  C06F  F0E7         	movff	_gz+2,kalmanUpdate@measurement+2
  8023  0039F2  EC2A  F014         	call	_kalmanUpdate	;wreg free
  8024                           
  8025                           ;kalman.c: 68: ax = axState.x;
  8026  0039F6  C15D  F07C         	movff	_axState+6,_ax
  8027  0039FA  C15E  F07D         	movff	_axState+7,_ax+1
  8028  0039FE  C15F  F07E         	movff	_axState+8,_ax+2
  8029                           
  8030                           ;kalman.c: 69: ay = ayState.x;
  8031  003A02  C14E  F079         	movff	_ayState+6,_ay
  8032  003A06  C14F  F07A         	movff	_ayState+7,_ay+1
  8033  003A0A  C150  F07B         	movff	_ayState+8,_ay+2
  8034                           
  8035                           ;kalman.c: 70: az = azState.x;
  8036  003A0E  C13F  F076         	movff	_azState+6,_az
  8037  003A12  C140  F077         	movff	_azState+7,_az+1
  8038  003A16  C141  F078         	movff	_azState+8,_az+2
  8039                           
  8040                           ;kalman.c: 71: gx = gxState.x;
  8041  003A1A  C130  F073         	movff	_gxState+6,_gx
  8042  003A1E  C131  F074         	movff	_gxState+7,_gx+1
  8043  003A22  C132  F075         	movff	_gxState+8,_gx+2
  8044                           
  8045                           ;kalman.c: 72: gy = gyState.x;
  8046  003A26  C121  F070         	movff	_gyState+6,_gy
  8047  003A2A  C122  F071         	movff	_gyState+7,_gy+1
  8048  003A2E  C123  F072         	movff	_gyState+8,_gy+2
  8049                           
  8050                           ;kalman.c: 73: gz = gzState.x;
  8051  003A32  C112  F06D         	movff	_gzState+6,_gz
  8052  003A36  C113  F06E         	movff	_gzState+7,_gz+1
  8053  003A3A  C114  F06F         	movff	_gzState+8,_gz+2
  8054  003A3E  0012               	return		;funcret
  8055  003A40                     __end_of_filterData:
  8056                           	opt stack 0
  8057                           tblptru	equ	0xFF8
  8058                           tblptrh	equ	0xFF7
  8059                           tblptrl	equ	0xFF6
  8060                           tablat	equ	0xFF5
  8061                           prodh	equ	0xFF4
  8062                           prodl	equ	0xFF3
  8063                           intcon	equ	0xFF2
  8064                           postinc0	equ	0xFEE
  8065                           wreg	equ	0xFE8
  8066                           indf2	equ	0xFDF
  8067                           postinc2	equ	0xFDE
  8068                           postdec2	equ	0xFDD
  8069                           fsr2h	equ	0xFDA
  8070                           fsr2l	equ	0xFD9
  8071                           status	equ	0xFD8
  8072                           
  8073 ;; *************** function _kalmanUpdate *****************
  8074 ;; Defined at:
  8075 ;;		line 49 in file "kalman.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  state           2   34[BANK0 ] PTR struct .
  8078 ;;		 -> gzState(15), gyState(15), gxState(15), azState(15), 
  8079 ;;		 -> ayState(15), axState(15), 
  8080 ;;  measurement     3   36[BANK0 ] float 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;		None
  8083 ;; Return value:  Size  Location     Type
  8084 ;;                  1    wreg      void 
  8085 ;; Registers used:
  8086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8092 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8093 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8095 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8096 ;;Total ram usage:        8 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    6
  8099 ;; This function calls:
  8100 ;;		___ftadd
  8101 ;;		___ftdiv
  8102 ;;		___ftmul
  8103 ;;		___ftneg
  8104 ;; This function is called by:
  8105 ;;		_filterData
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text40
  8110  002854                     __ptext40:
  8111                           	opt stack 0
  8112  002854                     _kalmanUpdate:
  8113                           	opt stack 23
  8114                           
  8115                           ;kalman.c: 52: state->p = state->p + state->q;
  8116                           
  8117                           ;incstack = 0
  8118  002854  0100               	movlb	0	; () banked
  8119  002856  EE20 F009          	lfsr	2,9
  8120  00285A  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8121  00285C  26D9               	addwf	fsr2l,f,c
  8122  00285E  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8123  002860  22DA               	addwfc	fsr2h,f,c
  8124  002862  CFDE F0C8          	movff	postinc2,___ftadd@f1
  8125  002866  CFDE F0C9          	movff	postinc2,___ftadd@f1+1
  8126  00286A  CFDD F0CA          	movff	postdec2,___ftadd@f1+2
  8127  00286E  C0E3  FFD9         	movff	kalmanUpdate@state,fsr2l
  8128  002872  C0E4  FFDA         	movff	kalmanUpdate@state+1,fsr2h
  8129  002876  CFDE F0CB          	movff	postinc2,___ftadd@f2
  8130  00287A  CFDE F0CC          	movff	postinc2,___ftadd@f2+1
  8131  00287E  CFDD F0CD          	movff	postdec2,___ftadd@f2+2
  8132  002882  ECF6  F012         	call	___ftadd	;wreg free
  8133  002886  0100               	movlb	0	; () banked
  8134  002888  EE20 F009          	lfsr	2,9
  8135  00288C  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8136  00288E  26D9               	addwf	fsr2l,f,c
  8137  002890  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8138  002892  22DA               	addwfc	fsr2h,f,c
  8139  002894  C0C8  FFDE         	movff	?___ftadd,postinc2
  8140  002898  C0C9  FFDE         	movff	?___ftadd+1,postinc2
  8141  00289C  C0CA  FFDE         	movff	?___ftadd+2,postinc2
  8142                           
  8143                           ;kalman.c: 55: state->k = state->p / (state->p + state->r);
  8144  0028A0  0100               	movlb	0	; () banked
  8145  0028A2  EE20 F009          	lfsr	2,9
  8146  0028A6  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8147  0028A8  26D9               	addwf	fsr2l,f,c
  8148  0028AA  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8149  0028AC  22DA               	addwfc	fsr2h,f,c
  8150  0028AE  CFDE F0D4          	movff	postinc2,___ftdiv@f1
  8151  0028B2  CFDE F0D5          	movff	postinc2,___ftdiv@f1+1
  8152  0028B6  CFDD F0D6          	movff	postdec2,___ftdiv@f1+2
  8153  0028BA  0100               	movlb	0	; () banked
  8154  0028BC  EE20 F003          	lfsr	2,3
  8155  0028C0  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8156  0028C2  26D9               	addwf	fsr2l,f,c
  8157  0028C4  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8158  0028C6  22DA               	addwfc	fsr2h,f,c
  8159  0028C8  CFDE F0CB          	movff	postinc2,___ftadd@f2
  8160  0028CC  CFDE F0CC          	movff	postinc2,___ftadd@f2+1
  8161  0028D0  CFDD F0CD          	movff	postdec2,___ftadd@f2+2
  8162  0028D4  0100               	movlb	0	; () banked
  8163  0028D6  EE20 F009          	lfsr	2,9
  8164  0028DA  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8165  0028DC  26D9               	addwf	fsr2l,f,c
  8166  0028DE  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8167  0028E0  22DA               	addwfc	fsr2h,f,c
  8168  0028E2  CFDE F0C8          	movff	postinc2,___ftadd@f1
  8169  0028E6  CFDE F0C9          	movff	postinc2,___ftadd@f1+1
  8170  0028EA  CFDD F0CA          	movff	postdec2,___ftadd@f1+2
  8171  0028EE  ECF6  F012         	call	___ftadd	;wreg free
  8172  0028F2  C0C8  F0D7         	movff	?___ftadd,___ftdiv@f2
  8173  0028F6  C0C9  F0D8         	movff	?___ftadd+1,___ftdiv@f2+1
  8174  0028FA  C0CA  F0D9         	movff	?___ftadd+2,___ftdiv@f2+2
  8175  0028FE  EC8F  F017         	call	___ftdiv	;wreg free
  8176  002902  0100               	movlb	0	; () banked
  8177  002904  EE20 F00C          	lfsr	2,12
  8178  002908  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8179  00290A  26D9               	addwf	fsr2l,f,c
  8180  00290C  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8181  00290E  22DA               	addwfc	fsr2h,f,c
  8182  002910  C0D4  FFDE         	movff	?___ftdiv,postinc2
  8183  002914  C0D5  FFDE         	movff	?___ftdiv+1,postinc2
  8184  002918  C0D6  FFDE         	movff	?___ftdiv+2,postinc2
  8185                           
  8186                           ;kalman.c: 56: state->x = state->x + state->k * (measurement - state->x);
  8187  00291C  0100               	movlb	0	; () banked
  8188  00291E  EE20 F00C          	lfsr	2,12
  8189  002922  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8190  002924  26D9               	addwf	fsr2l,f,c
  8191  002926  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8192  002928  22DA               	addwfc	fsr2h,f,c
  8193  00292A  CFDE F02A          	movff	postinc2,___ftmul@f2
  8194  00292E  CFDE F02B          	movff	postinc2,___ftmul@f2+1
  8195  002932  CFDD F02C          	movff	postdec2,___ftmul@f2+2
  8196  002936  C0E5  F0CB         	movff	kalmanUpdate@measurement,___ftadd@f2
  8197  00293A  C0E6  F0CC         	movff	kalmanUpdate@measurement+1,___ftadd@f2+1
  8198  00293E  C0E7  F0CD         	movff	kalmanUpdate@measurement+2,___ftadd@f2+2
  8199  002942  0100               	movlb	0	; () banked
  8200  002944  EE20 F006          	lfsr	2,6
  8201  002948  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8202  00294A  26D9               	addwf	fsr2l,f,c
  8203  00294C  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8204  00294E  22DA               	addwfc	fsr2h,f,c
  8205  002950  CFDE F036          	movff	postinc2,___ftneg@f1
  8206  002954  CFDE F037          	movff	postinc2,___ftneg@f1+1
  8207  002958  CFDD F038          	movff	postdec2,___ftneg@f1+2
  8208  00295C  ECAE  F021         	call	___ftneg	;wreg free
  8209  002960  C036  F0C8         	movff	?___ftneg,___ftadd@f1
  8210  002964  C037  F0C9         	movff	?___ftneg+1,___ftadd@f1+1
  8211  002968  C038  F0CA         	movff	?___ftneg+2,___ftadd@f1+2
  8212  00296C  ECF6  F012         	call	___ftadd	;wreg free
  8213  002970  C0C8  F027         	movff	?___ftadd,___ftmul@f1
  8214  002974  C0C9  F028         	movff	?___ftadd+1,___ftmul@f1+1
  8215  002978  C0CA  F029         	movff	?___ftadd+2,___ftmul@f1+2
  8216  00297C  EC2D  F01C         	call	___ftmul	;wreg free
  8217  002980  C027  F0E8         	movff	?___ftmul,_kalmanUpdate$2964
  8218  002984  C028  F0E9         	movff	?___ftmul+1,_kalmanUpdate$2964+1
  8219  002988  C029  F0EA         	movff	?___ftmul+2,_kalmanUpdate$2964+2
  8220                           
  8221                           ;kalman.c: 56: state->x = state->x + state->k * (measurement - state->x);
  8222  00298C  C0E8  F0C8         	movff	_kalmanUpdate$2964,___ftadd@f1
  8223  002990  C0E9  F0C9         	movff	_kalmanUpdate$2964+1,___ftadd@f1+1
  8224  002994  C0EA  F0CA         	movff	_kalmanUpdate$2964+2,___ftadd@f1+2
  8225  002998  0100               	movlb	0	; () banked
  8226  00299A  EE20 F006          	lfsr	2,6
  8227  00299E  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8228  0029A0  26D9               	addwf	fsr2l,f,c
  8229  0029A2  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8230  0029A4  22DA               	addwfc	fsr2h,f,c
  8231  0029A6  CFDE F0CB          	movff	postinc2,___ftadd@f2
  8232  0029AA  CFDE F0CC          	movff	postinc2,___ftadd@f2+1
  8233  0029AE  CFDD F0CD          	movff	postdec2,___ftadd@f2+2
  8234  0029B2  ECF6  F012         	call	___ftadd	;wreg free
  8235  0029B6  0100               	movlb	0	; () banked
  8236  0029B8  EE20 F006          	lfsr	2,6
  8237  0029BC  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8238  0029BE  26D9               	addwf	fsr2l,f,c
  8239  0029C0  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8240  0029C2  22DA               	addwfc	fsr2h,f,c
  8241  0029C4  C0C8  FFDE         	movff	?___ftadd,postinc2
  8242  0029C8  C0C9  FFDE         	movff	?___ftadd+1,postinc2
  8243  0029CC  C0CA  FFDE         	movff	?___ftadd+2,postinc2
  8244                           
  8245                           ;kalman.c: 57: state->p = (1 - state->k) * state->p;
  8246  0029D0  0E00               	movlw	0
  8247  0029D2  0100               	movlb	0	; () banked
  8248  0029D4  6FCB               	movwf	___ftadd@f2& (0+255),b
  8249  0029D6  0E80               	movlw	128
  8250  0029D8  0100               	movlb	0	; () banked
  8251  0029DA  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  8252  0029DC  0E3F               	movlw	63
  8253  0029DE  0100               	movlb	0	; () banked
  8254  0029E0  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  8255  0029E2  0100               	movlb	0	; () banked
  8256  0029E4  EE20 F00C          	lfsr	2,12
  8257  0029E8  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8258  0029EA  26D9               	addwf	fsr2l,f,c
  8259  0029EC  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8260  0029EE  22DA               	addwfc	fsr2h,f,c
  8261  0029F0  CFDE F036          	movff	postinc2,___ftneg@f1
  8262  0029F4  CFDE F037          	movff	postinc2,___ftneg@f1+1
  8263  0029F8  CFDD F038          	movff	postdec2,___ftneg@f1+2
  8264  0029FC  ECAE  F021         	call	___ftneg	;wreg free
  8265  002A00  C036  F0C8         	movff	?___ftneg,___ftadd@f1
  8266  002A04  C037  F0C9         	movff	?___ftneg+1,___ftadd@f1+1
  8267  002A08  C038  F0CA         	movff	?___ftneg+2,___ftadd@f1+2
  8268  002A0C  ECF6  F012         	call	___ftadd	;wreg free
  8269  002A10  C0C8  F027         	movff	?___ftadd,___ftmul@f1
  8270  002A14  C0C9  F028         	movff	?___ftadd+1,___ftmul@f1+1
  8271  002A18  C0CA  F029         	movff	?___ftadd+2,___ftmul@f1+2
  8272  002A1C  0100               	movlb	0	; () banked
  8273  002A1E  EE20 F009          	lfsr	2,9
  8274  002A22  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8275  002A24  26D9               	addwf	fsr2l,f,c
  8276  002A26  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8277  002A28  22DA               	addwfc	fsr2h,f,c
  8278  002A2A  CFDE F02A          	movff	postinc2,___ftmul@f2
  8279  002A2E  CFDE F02B          	movff	postinc2,___ftmul@f2+1
  8280  002A32  CFDD F02C          	movff	postdec2,___ftmul@f2+2
  8281  002A36  EC2D  F01C         	call	___ftmul	;wreg free
  8282  002A3A  0100               	movlb	0	; () banked
  8283  002A3C  EE20 F009          	lfsr	2,9
  8284  002A40  51E3               	movf	kalmanUpdate@state& (0+255),w,b
  8285  002A42  26D9               	addwf	fsr2l,f,c
  8286  002A44  51E4               	movf	(kalmanUpdate@state+1)& (0+255),w,b
  8287  002A46  22DA               	addwfc	fsr2h,f,c
  8288  002A48  C027  FFDE         	movff	?___ftmul,postinc2
  8289  002A4C  C028  FFDE         	movff	?___ftmul+1,postinc2
  8290  002A50  C029  FFDE         	movff	?___ftmul+2,postinc2
  8291                           
  8292                           ; BSR set to: 0
  8293  002A54  0012               	return		;funcret
  8294  002A56                     __end_of_kalmanUpdate:
  8295                           	opt stack 0
  8296                           tblptru	equ	0xFF8
  8297                           tblptrh	equ	0xFF7
  8298                           tblptrl	equ	0xFF6
  8299                           tablat	equ	0xFF5
  8300                           prodh	equ	0xFF4
  8301                           prodl	equ	0xFF3
  8302                           intcon	equ	0xFF2
  8303                           postinc0	equ	0xFEE
  8304                           wreg	equ	0xFE8
  8305                           indf2	equ	0xFDF
  8306                           postinc2	equ	0xFDE
  8307                           postdec2	equ	0xFDD
  8308                           fsr2h	equ	0xFDA
  8309                           fsr2l	equ	0xFD9
  8310                           status	equ	0xFD8
  8311                           
  8312 ;; *************** function _computeRollPitch *****************
  8313 ;; Defined at:
  8314 ;;		line 14 in file "calculations.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;		None
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;  dt              3    0[BANK1 ] float 
  8319 ;;  tmr0val         2   12[BANK1 ] unsigned int 
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      void 
  8322 ;; Registers used:
  8323 ;;		wreg, status,2, status,0, cstack
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8330 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8332 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8333 ;;Total ram usage:       14 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    7
  8336 ;; This function calls:
  8337 ;;		_TMR0_Read16bitTimer
  8338 ;;		_TMR0_StartTimer
  8339 ;;		_TMR0_StopTimer
  8340 ;;		_TMR0_Write16bitTimer
  8341 ;;		___ftadd
  8342 ;;		___ftmul
  8343 ;;		___ftneg
  8344 ;;		___ftsub
  8345 ;;		___lwtoft
  8346 ;;		_fastatan2
  8347 ;; This function is called by:
  8348 ;;		_main
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text41
  8353  002A56                     __ptext41:
  8354                           	opt stack 0
  8355  002A56                     _computeRollPitch:
  8356                           	opt stack 23
  8357                           
  8358                           ;calculations.c: 16: TMR0_StopTimer();
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;incstack = 0
  8362  002A56  ECAF  F022         	call	_TMR0_StopTimer	;wreg free
  8363                           
  8364                           ;calculations.c: 17: uint16_t tmr0val = TMR0_Read16bitTimer();
  8365  002A5A  EC0F  F022         	call	_TMR0_Read16bitTimer	;wreg free
  8366  002A5E  C013  F17E         	movff	?_TMR0_Read16bitTimer,computeRollPitch@tmr0val
  8367  002A62  C014  F17F         	movff	?_TMR0_Read16bitTimer+1,computeRollPitch@tmr0val+1
  8368                           
  8369                           ;calculations.c: 18: float dt = ((float)tmr0val) * .0000001666667;
  8370  002A66  C17E  F01B         	movff	computeRollPitch@tmr0val,___lwtoft@c
  8371  002A6A  C17F  F01C         	movff	computeRollPitch@tmr0val+1,___lwtoft@c+1
  8372  002A6E  ECC0  F021         	call	___lwtoft	;wreg free
  8373  002A72  C01B  F027         	movff	?___lwtoft,___ftmul@f1
  8374  002A76  C01C  F028         	movff	?___lwtoft+1,___ftmul@f1+1
  8375  002A7A  C01D  F029         	movff	?___lwtoft+2,___ftmul@f1+2
  8376  002A7E  0EF5               	movlw	245
  8377  002A80  6E2A               	movwf	___ftmul@f2,c
  8378  002A82  0E32               	movlw	50
  8379  002A84  6E2B               	movwf	___ftmul@f2+1,c
  8380  002A86  0E34               	movlw	52
  8381  002A88  6E2C               	movwf	___ftmul@f2+2,c
  8382  002A8A  EC2D  F01C         	call	___ftmul	;wreg free
  8383  002A8E  C027  F172         	movff	?___ftmul,computeRollPitch@dt
  8384  002A92  C028  F173         	movff	?___ftmul+1,computeRollPitch@dt+1
  8385  002A96  C029  F174         	movff	?___ftmul+2,computeRollPitch@dt+2
  8386                           
  8387                           ;calculations.c: 21: rollAcc = rollAcc * (.8) + fastatan2(-ay, az)*(1-.8);
  8388  002A9A  C079  F036         	movff	_ay,___ftneg@f1
  8389  002A9E  C07A  F037         	movff	_ay+1,___ftneg@f1+1
  8390  002AA2  C07B  F038         	movff	_ay+2,___ftneg@f1+2
  8391  002AA6  ECAE  F021         	call	___ftneg	;wreg free
  8392  002AAA  C036  F175         	movff	?___ftneg,_computeRollPitch$2957
  8393  002AAE  C037  F176         	movff	?___ftneg+1,_computeRollPitch$2957+1
  8394  002AB2  C038  F177         	movff	?___ftneg+2,_computeRollPitch$2957+2
  8395                           
  8396                           ;calculations.c: 21: rollAcc = rollAcc * (.8) + fastatan2(-ay, az)*(1-.8);
  8397  002AB6  C076  F0E6         	movff	_az,fastatan2@y
  8398  002ABA  C077  F0E7         	movff	_az+1,fastatan2@y+1
  8399  002ABE  C078  F0E8         	movff	_az+2,fastatan2@y+2
  8400  002AC2  C175  F0E3         	movff	_computeRollPitch$2957,fastatan2@x
  8401  002AC6  C176  F0E4         	movff	_computeRollPitch$2957+1,fastatan2@x+1
  8402  002ACA  C177  F0E5         	movff	_computeRollPitch$2957+2,fastatan2@x+2
  8403  002ACE  EC9A  F00E         	call	_fastatan2	;wreg free
  8404  002AD2  C0E3  F178         	movff	?_fastatan2,_computeRollPitch$2958
  8405  002AD6  C0E4  F179         	movff	?_fastatan2+1,_computeRollPitch$2958+1
  8406  002ADA  C0E5  F17A         	movff	?_fastatan2+2,_computeRollPitch$2958+2
  8407                           
  8408                           ;calculations.c: 21: rollAcc = rollAcc * (.8) + fastatan2(-ay, az)*(1-.8);
  8409  002ADE  0ECD               	movlw	205
  8410  002AE0  6E2A               	movwf	___ftmul@f2,c
  8411  002AE2  0E4C               	movlw	76
  8412  002AE4  6E2B               	movwf	___ftmul@f2+1,c
  8413  002AE6  0E3F               	movlw	63
  8414  002AE8  6E2C               	movwf	___ftmul@f2+2,c
  8415  002AEA  C067  F027         	movff	_rollAcc,___ftmul@f1
  8416  002AEE  C068  F028         	movff	_rollAcc+1,___ftmul@f1+1
  8417  002AF2  C069  F029         	movff	_rollAcc+2,___ftmul@f1+2
  8418  002AF6  EC2D  F01C         	call	___ftmul	;wreg free
  8419  002AFA  C027  F0C8         	movff	?___ftmul,___ftadd@f1
  8420  002AFE  C028  F0C9         	movff	?___ftmul+1,___ftadd@f1+1
  8421  002B02  C029  F0CA         	movff	?___ftmul+2,___ftadd@f1+2
  8422  002B06  0ECD               	movlw	205
  8423  002B08  6E2A               	movwf	___ftmul@f2,c
  8424  002B0A  0E4C               	movlw	76
  8425  002B0C  6E2B               	movwf	___ftmul@f2+1,c
  8426  002B0E  0E3E               	movlw	62
  8427  002B10  6E2C               	movwf	___ftmul@f2+2,c
  8428  002B12  C178  F027         	movff	_computeRollPitch$2958,___ftmul@f1
  8429  002B16  C179  F028         	movff	_computeRollPitch$2958+1,___ftmul@f1+1
  8430  002B1A  C17A  F029         	movff	_computeRollPitch$2958+2,___ftmul@f1+2
  8431  002B1E  EC2D  F01C         	call	___ftmul	;wreg free
  8432  002B22  C027  F0CB         	movff	?___ftmul,___ftadd@f2
  8433  002B26  C028  F0CC         	movff	?___ftmul+1,___ftadd@f2+1
  8434  002B2A  C029  F0CD         	movff	?___ftmul+2,___ftadd@f2+2
  8435  002B2E  ECF6  F012         	call	___ftadd	;wreg free
  8436  002B32  C0C8  F067         	movff	?___ftadd,_rollAcc
  8437  002B36  C0C9  F068         	movff	?___ftadd+1,_rollAcc+1
  8438  002B3A  C0CA  F069         	movff	?___ftadd+2,_rollAcc+2
  8439                           
  8440                           ;calculations.c: 22: roll -= (gx*.0175) * dt;
  8441  002B3E  C172  F02A         	movff	computeRollPitch@dt,___ftmul@f2
  8442  002B42  C173  F02B         	movff	computeRollPitch@dt+1,___ftmul@f2+1
  8443  002B46  C174  F02C         	movff	computeRollPitch@dt+2,___ftmul@f2+2
  8444  002B4A  C073  F027         	movff	_gx,___ftmul@f1
  8445  002B4E  C074  F028         	movff	_gx+1,___ftmul@f1+1
  8446  002B52  C075  F029         	movff	_gx+2,___ftmul@f1+2
  8447  002B56  EC2D  F01C         	call	___ftmul	;wreg free
  8448  002B5A  C027  F17B         	movff	?___ftmul,_computeRollPitch$2959
  8449  002B5E  C028  F17C         	movff	?___ftmul+1,_computeRollPitch$2959+1
  8450  002B62  C029  F17D         	movff	?___ftmul+2,_computeRollPitch$2959+2
  8451                           
  8452                           ;calculations.c: 22: roll -= (gx*.0175) * dt;
  8453  002B66  C06A  F0D4         	movff	_roll,___ftsub@f1
  8454  002B6A  C06B  F0D5         	movff	_roll+1,___ftsub@f1+1
  8455  002B6E  C06C  F0D6         	movff	_roll+2,___ftsub@f1+2
  8456  002B72  0E5C               	movlw	92
  8457  002B74  6E2A               	movwf	___ftmul@f2,c
  8458  002B76  0E8F               	movlw	143
  8459  002B78  6E2B               	movwf	___ftmul@f2+1,c
  8460  002B7A  0E3C               	movlw	60
  8461  002B7C  6E2C               	movwf	___ftmul@f2+2,c
  8462  002B7E  C17B  F027         	movff	_computeRollPitch$2959,___ftmul@f1
  8463  002B82  C17C  F028         	movff	_computeRollPitch$2959+1,___ftmul@f1+1
  8464  002B86  C17D  F029         	movff	_computeRollPitch$2959+2,___ftmul@f1+2
  8465  002B8A  EC2D  F01C         	call	___ftmul	;wreg free
  8466  002B8E  C027  F0D7         	movff	?___ftmul,___ftsub@f2
  8467  002B92  C028  F0D8         	movff	?___ftmul+1,___ftsub@f2+1
  8468  002B96  C029  F0D9         	movff	?___ftmul+2,___ftsub@f2+2
  8469  002B9A  ECE0  F01F         	call	___ftsub	;wreg free
  8470  002B9E  C0D4  F06A         	movff	?___ftsub,_roll
  8471  002BA2  C0D5  F06B         	movff	?___ftsub+1,_roll+1
  8472  002BA6  C0D6  F06C         	movff	?___ftsub+2,_roll+2
  8473                           
  8474                           ;calculations.c: 24: if (accCounter >= 20) {
  8475  002BAA  0E13               	movlw	19
  8476  002BAC  0100               	movlb	0	; () banked
  8477  002BAE  65B9               	cpfsgt	_accCounter& (0+255),b
  8478  002BB0  D033               	goto	l5841
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;calculations.c: 25: accCounter = 0;
  8482  002BB2  0E00               	movlw	0
  8483  002BB4  0100               	movlb	0	; () banked
  8484  002BB6  6FB9               	movwf	_accCounter& (0+255),b
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;calculations.c: 26: roll = roll*.985 + rollAcc*(1-.985);
  8488  002BB8  0E29               	movlw	41
  8489  002BBA  6E2A               	movwf	___ftmul@f2,c
  8490  002BBC  0E7C               	movlw	124
  8491  002BBE  6E2B               	movwf	___ftmul@f2+1,c
  8492  002BC0  0E3F               	movlw	63
  8493  002BC2  6E2C               	movwf	___ftmul@f2+2,c
  8494  002BC4  C06A  F027         	movff	_roll,___ftmul@f1
  8495  002BC8  C06B  F028         	movff	_roll+1,___ftmul@f1+1
  8496  002BCC  C06C  F029         	movff	_roll+2,___ftmul@f1+2
  8497  002BD0  EC2D  F01C         	call	___ftmul	;wreg free
  8498  002BD4  C027  F0C8         	movff	?___ftmul,___ftadd@f1
  8499  002BD8  C028  F0C9         	movff	?___ftmul+1,___ftadd@f1+1
  8500  002BDC  C029  F0CA         	movff	?___ftmul+2,___ftadd@f1+2
  8501  002BE0  0EC3               	movlw	195
  8502  002BE2  6E2A               	movwf	___ftmul@f2,c
  8503  002BE4  0E75               	movlw	117
  8504  002BE6  6E2B               	movwf	___ftmul@f2+1,c
  8505  002BE8  0E3C               	movlw	60
  8506  002BEA  6E2C               	movwf	___ftmul@f2+2,c
  8507  002BEC  C067  F027         	movff	_rollAcc,___ftmul@f1
  8508  002BF0  C068  F028         	movff	_rollAcc+1,___ftmul@f1+1
  8509  002BF4  C069  F029         	movff	_rollAcc+2,___ftmul@f1+2
  8510  002BF8  EC2D  F01C         	call	___ftmul	;wreg free
  8511  002BFC  C027  F0CB         	movff	?___ftmul,___ftadd@f2
  8512  002C00  C028  F0CC         	movff	?___ftmul+1,___ftadd@f2+1
  8513  002C04  C029  F0CD         	movff	?___ftmul+2,___ftadd@f2+2
  8514  002C08  ECF6  F012         	call	___ftadd	;wreg free
  8515  002C0C  C0C8  F06A         	movff	?___ftadd,_roll
  8516  002C10  C0C9  F06B         	movff	?___ftadd+1,_roll+1
  8517  002C14  C0CA  F06C         	movff	?___ftadd+2,_roll+2
  8518  002C18                     l5841:
  8519                           
  8520                           ;calculations.c: 27: }
  8521                           ;calculations.c: 30: TMR0_Write16bitTimer(0);
  8522  002C18  0E00               	movlw	0
  8523  002C1A  6E14               	movwf	TMR0_Write16bitTimer@timerVal+1,c
  8524  002C1C  0E00               	movlw	0
  8525  002C1E  6E13               	movwf	TMR0_Write16bitTimer@timerVal,c
  8526  002C20  ECA2  F022         	call	_TMR0_Write16bitTimer	;wreg free
  8527                           
  8528                           ;calculations.c: 31: TMR0_StartTimer();
  8529  002C24  ECB3  F022         	call	_TMR0_StartTimer	;wreg free
  8530  002C28  0012               	return		;funcret
  8531  002C2A                     __end_of_computeRollPitch:
  8532                           	opt stack 0
  8533                           tblptru	equ	0xFF8
  8534                           tblptrh	equ	0xFF7
  8535                           tblptrl	equ	0xFF6
  8536                           tablat	equ	0xFF5
  8537                           prodh	equ	0xFF4
  8538                           prodl	equ	0xFF3
  8539                           intcon	equ	0xFF2
  8540                           postinc0	equ	0xFEE
  8541                           wreg	equ	0xFE8
  8542                           indf2	equ	0xFDF
  8543                           postinc2	equ	0xFDE
  8544                           postdec2	equ	0xFDD
  8545                           fsr2h	equ	0xFDA
  8546                           fsr2l	equ	0xFD9
  8547                           status	equ	0xFD8
  8548                           
  8549 ;; *************** function _fastatan2 *****************
  8550 ;; Defined at:
  8551 ;;		line 34 in file "calculations.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  x               3   34[BANK0 ] float 
  8554 ;;  y               3   37[BANK0 ] float 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;  r               3   55[BANK0 ] float 
  8557 ;;  a               3   52[BANK0 ] float 
  8558 ;;  s               3   49[BANK0 ] float 
  8559 ;; Return value:  Size  Location     Type
  8560 ;;                  3   34[BANK0 ] float 
  8561 ;; Registers used:
  8562 ;;		wreg, status,2, status,0, cstack
  8563 ;; Tracked objects:
  8564 ;;		On entry : 0/0
  8565 ;;		On exit  : 0/0
  8566 ;;		Unchanged: 0/0
  8567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8568 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8569 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8571 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8572 ;;Total ram usage:       24 bytes
  8573 ;; Hardware stack levels used:    1
  8574 ;; Hardware stack levels required when called:    6
  8575 ;; This function calls:
  8576 ;;		___ftadd
  8577 ;;		___ftdiv
  8578 ;;		___ftge
  8579 ;;		___ftmul
  8580 ;;		___ftneg
  8581 ;;		_fabs
  8582 ;;		_maximum
  8583 ;;		_minimum
  8584 ;; This function is called by:
  8585 ;;		_computeRollPitch
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           	psect	text42
  8590  001D34                     __ptext42:
  8591                           	opt stack 0
  8592  001D34                     _fastatan2:
  8593                           	opt stack 23
  8594                           
  8595                           ;calculations.c: 35: float a;
  8596                           ;calculations.c: 36: float s;
  8597                           ;calculations.c: 37: float r;
  8598                           ;calculations.c: 39: a = minimum( fabs(x), fabs(y) ) / maximum( fabs(x), fabs(y) );
  8599                           
  8600                           ;incstack = 0
  8601  001D34  C0E6  F0C1         	movff	fastatan2@y,fabs@d
  8602  001D38  C0E7  F0C2         	movff	fastatan2@y+1,fabs@d+1
  8603  001D3C  C0E8  F0C3         	movff	fastatan2@y+2,fabs@d+2
  8604  001D40  ECCC  F020         	call	_fabs	;wreg free
  8605  001D44  C0C1  F0D0         	movff	?_fabs,minimum@y
  8606  001D48  C0C2  F0D1         	movff	?_fabs+1,minimum@y+1
  8607  001D4C  C0C3  F0D2         	movff	?_fabs+2,minimum@y+2
  8608  001D50  C0E3  F0C1         	movff	fastatan2@x,fabs@d
  8609  001D54  C0E4  F0C2         	movff	fastatan2@x+1,fabs@d+1
  8610  001D58  C0E5  F0C3         	movff	fastatan2@x+2,fabs@d+2
  8611  001D5C  ECCC  F020         	call	_fabs	;wreg free
  8612  001D60  C0C1  F0CD         	movff	?_fabs,minimum@x
  8613  001D64  C0C2  F0CE         	movff	?_fabs+1,minimum@x+1
  8614  001D68  C0C3  F0CF         	movff	?_fabs+2,minimum@x+2
  8615  001D6C  EC06  F020         	call	_minimum	;wreg free
  8616  001D70  C0CD  F0D4         	movff	?_minimum,___ftdiv@f1
  8617  001D74  C0CE  F0D5         	movff	?_minimum+1,___ftdiv@f1+1
  8618  001D78  C0CF  F0D6         	movff	?_minimum+2,___ftdiv@f1+2
  8619  001D7C  C0E6  F0C1         	movff	fastatan2@y,fabs@d
  8620  001D80  C0E7  F0C2         	movff	fastatan2@y+1,fabs@d+1
  8621  001D84  C0E8  F0C3         	movff	fastatan2@y+2,fabs@d+2
  8622  001D88  ECCC  F020         	call	_fabs	;wreg free
  8623  001D8C  C0C1  F0D0         	movff	?_fabs,maximum@y
  8624  001D90  C0C2  F0D1         	movff	?_fabs+1,maximum@y+1
  8625  001D94  C0C3  F0D2         	movff	?_fabs+2,maximum@y+2
  8626  001D98  C0E3  F0C1         	movff	fastatan2@x,fabs@d
  8627  001D9C  C0E4  F0C2         	movff	fastatan2@x+1,fabs@d+1
  8628  001DA0  C0E5  F0C3         	movff	fastatan2@x+2,fabs@d+2
  8629  001DA4  ECCC  F020         	call	_fabs	;wreg free
  8630  001DA8  C0C1  F0CD         	movff	?_fabs,maximum@x
  8631  001DAC  C0C2  F0CE         	movff	?_fabs+1,maximum@x+1
  8632  001DB0  C0C3  F0CF         	movff	?_fabs+2,maximum@x+2
  8633  001DB4  EC25  F020         	call	_maximum	;wreg free
  8634  001DB8  C0CD  F0D7         	movff	?_maximum,___ftdiv@f2
  8635  001DBC  C0CE  F0D8         	movff	?_maximum+1,___ftdiv@f2+1
  8636  001DC0  C0CF  F0D9         	movff	?_maximum+2,___ftdiv@f2+2
  8637  001DC4  EC8F  F017         	call	___ftdiv	;wreg free
  8638  001DC8  C0D4  F0F5         	movff	?___ftdiv,fastatan2@a
  8639  001DCC  C0D5  F0F6         	movff	?___ftdiv+1,fastatan2@a+1
  8640  001DD0  C0D6  F0F7         	movff	?___ftdiv+2,fastatan2@a+2
  8641                           
  8642                           ;calculations.c: 40: s = a*a;
  8643  001DD4  C0F5  F027         	movff	fastatan2@a,___ftmul@f1
  8644  001DD8  C0F6  F028         	movff	fastatan2@a+1,___ftmul@f1+1
  8645  001DDC  C0F7  F029         	movff	fastatan2@a+2,___ftmul@f1+2
  8646  001DE0  C0F5  F02A         	movff	fastatan2@a,___ftmul@f2
  8647  001DE4  C0F6  F02B         	movff	fastatan2@a+1,___ftmul@f2+1
  8648  001DE8  C0F7  F02C         	movff	fastatan2@a+2,___ftmul@f2+2
  8649  001DEC  EC2D  F01C         	call	___ftmul	;wreg free
  8650  001DF0  C027  F0F2         	movff	?___ftmul,fastatan2@s
  8651  001DF4  C028  F0F3         	movff	?___ftmul+1,fastatan2@s+1
  8652  001DF8  C029  F0F4         	movff	?___ftmul+2,fastatan2@s+2
  8653                           
  8654                           ;calculations.c: 41: r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + 
      +                          a;
  8655  001DFC  0E23               	movlw	35
  8656  001DFE  0100               	movlb	0	; () banked
  8657  001E00  6FCB               	movwf	___ftadd@f2& (0+255),b
  8658  001E02  0E23               	movlw	35
  8659  001E04  0100               	movlb	0	; () banked
  8660  001E06  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  8661  001E08  0E3E               	movlw	62
  8662  001E0A  0100               	movlb	0	; () banked
  8663  001E0C  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  8664  001E0E  0E73               	movlw	115
  8665  001E10  6E2A               	movwf	___ftmul@f2,c
  8666  001E12  0E3E               	movlw	62
  8667  001E14  6E2B               	movwf	___ftmul@f2+1,c
  8668  001E16  0EBD               	movlw	189
  8669  001E18  6E2C               	movwf	___ftmul@f2+2,c
  8670  001E1A  C0F2  F027         	movff	fastatan2@s,___ftmul@f1
  8671  001E1E  C0F3  F028         	movff	fastatan2@s+1,___ftmul@f1+1
  8672  001E22  C0F4  F029         	movff	fastatan2@s+2,___ftmul@f1+2
  8673  001E26  EC2D  F01C         	call	___ftmul	;wreg free
  8674  001E2A  C027  F0C8         	movff	?___ftmul,___ftadd@f1
  8675  001E2E  C028  F0C9         	movff	?___ftmul+1,___ftadd@f1+1
  8676  001E32  C029  F0CA         	movff	?___ftmul+2,___ftadd@f1+2
  8677  001E36  ECF6  F012         	call	___ftadd	;wreg free
  8678  001E3A  C0C8  F0E9         	movff	?___ftadd,_fastatan2$2960
  8679  001E3E  C0C9  F0EA         	movff	?___ftadd+1,_fastatan2$2960+1
  8680  001E42  C0CA  F0EB         	movff	?___ftadd+2,_fastatan2$2960+2
  8681                           
  8682                           ;calculations.c: 41: r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + 
      +                          a;
  8683  001E46  0EBE               	movlw	190
  8684  001E48  0100               	movlb	0	; () banked
  8685  001E4A  6FCB               	movwf	___ftadd@f2& (0+255),b
  8686  001E4C  0EA7               	movlw	167
  8687  001E4E  0100               	movlb	0	; () banked
  8688  001E50  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  8689  001E52  0EBE               	movlw	190
  8690  001E54  0100               	movlb	0	; () banked
  8691  001E56  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  8692  001E58  C0F2  F02A         	movff	fastatan2@s,___ftmul@f2
  8693  001E5C  C0F3  F02B         	movff	fastatan2@s+1,___ftmul@f2+1
  8694  001E60  C0F4  F02C         	movff	fastatan2@s+2,___ftmul@f2+2
  8695  001E64  C0E9  F027         	movff	_fastatan2$2960,___ftmul@f1
  8696  001E68  C0EA  F028         	movff	_fastatan2$2960+1,___ftmul@f1+1
  8697  001E6C  C0EB  F029         	movff	_fastatan2$2960+2,___ftmul@f1+2
  8698  001E70  EC2D  F01C         	call	___ftmul	;wreg free
  8699  001E74  C027  F0C8         	movff	?___ftmul,___ftadd@f1
  8700  001E78  C028  F0C9         	movff	?___ftmul+1,___ftadd@f1+1
  8701  001E7C  C029  F0CA         	movff	?___ftmul+2,___ftadd@f1+2
  8702  001E80  ECF6  F012         	call	___ftadd	;wreg free
  8703  001E84  C0C8  F0EC         	movff	?___ftadd,_fastatan2$2961
  8704  001E88  C0C9  F0ED         	movff	?___ftadd+1,_fastatan2$2961+1
  8705  001E8C  C0CA  F0EE         	movff	?___ftadd+2,_fastatan2$2961+2
  8706                           
  8707                           ;calculations.c: 41: r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + 
      +                          a;
  8708  001E90  C0F2  F02A         	movff	fastatan2@s,___ftmul@f2
  8709  001E94  C0F3  F02B         	movff	fastatan2@s+1,___ftmul@f2+1
  8710  001E98  C0F4  F02C         	movff	fastatan2@s+2,___ftmul@f2+2
  8711  001E9C  C0EC  F027         	movff	_fastatan2$2961,___ftmul@f1
  8712  001EA0  C0ED  F028         	movff	_fastatan2$2961+1,___ftmul@f1+1
  8713  001EA4  C0EE  F029         	movff	_fastatan2$2961+2,___ftmul@f1+2
  8714  001EA8  EC2D  F01C         	call	___ftmul	;wreg free
  8715  001EAC  C027  F0EF         	movff	?___ftmul,_fastatan2$2962
  8716  001EB0  C028  F0F0         	movff	?___ftmul+1,_fastatan2$2962+1
  8717  001EB4  C029  F0F1         	movff	?___ftmul+2,_fastatan2$2962+2
  8718                           
  8719                           ;calculations.c: 41: r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + 
      +                          a;
  8720  001EB8  C0F5  F02A         	movff	fastatan2@a,___ftmul@f2
  8721  001EBC  C0F6  F02B         	movff	fastatan2@a+1,___ftmul@f2+1
  8722  001EC0  C0F7  F02C         	movff	fastatan2@a+2,___ftmul@f2+2
  8723  001EC4  C0EF  F027         	movff	_fastatan2$2962,___ftmul@f1
  8724  001EC8  C0F0  F028         	movff	_fastatan2$2962+1,___ftmul@f1+1
  8725  001ECC  C0F1  F029         	movff	_fastatan2$2962+2,___ftmul@f1+2
  8726  001ED0  EC2D  F01C         	call	___ftmul	;wreg free
  8727  001ED4  C027  F0C8         	movff	?___ftmul,___ftadd@f1
  8728  001ED8  C028  F0C9         	movff	?___ftmul+1,___ftadd@f1+1
  8729  001EDC  C029  F0CA         	movff	?___ftmul+2,___ftadd@f1+2
  8730  001EE0  C0F5  F0CB         	movff	fastatan2@a,___ftadd@f2
  8731  001EE4  C0F6  F0CC         	movff	fastatan2@a+1,___ftadd@f2+1
  8732  001EE8  C0F7  F0CD         	movff	fastatan2@a+2,___ftadd@f2+2
  8733  001EEC  ECF6  F012         	call	___ftadd	;wreg free
  8734  001EF0  C0C8  F0F8         	movff	?___ftadd,fastatan2@r
  8735  001EF4  C0C9  F0F9         	movff	?___ftadd+1,fastatan2@r+1
  8736  001EF8  C0CA  F0FA         	movff	?___ftadd+2,fastatan2@r+2
  8737                           
  8738                           ;calculations.c: 43: if ( fabs(y) > fabs(x) ) {
  8739  001EFC  C0E3  F0C1         	movff	fastatan2@x,fabs@d
  8740  001F00  C0E4  F0C2         	movff	fastatan2@x+1,fabs@d+1
  8741  001F04  C0E5  F0C3         	movff	fastatan2@x+2,fabs@d+2
  8742  001F08  ECCC  F020         	call	_fabs	;wreg free
  8743  001F0C  C0C1  F0C4         	movff	?_fabs,___ftge@ff1
  8744  001F10  C0C2  F0C5         	movff	?_fabs+1,___ftge@ff1+1
  8745  001F14  C0C3  F0C6         	movff	?_fabs+2,___ftge@ff1+2
  8746  001F18  C0E6  F0C1         	movff	fastatan2@y,fabs@d
  8747  001F1C  C0E7  F0C2         	movff	fastatan2@y+1,fabs@d+1
  8748  001F20  C0E8  F0C3         	movff	fastatan2@y+2,fabs@d+2
  8749  001F24  ECCC  F020         	call	_fabs	;wreg free
  8750  001F28  C0C1  F0C7         	movff	?_fabs,___ftge@ff2
  8751  001F2C  C0C2  F0C8         	movff	?_fabs+1,___ftge@ff2+1
  8752  001F30  C0C3  F0C9         	movff	?_fabs+2,___ftge@ff2+2
  8753  001F34  EC20  F01D         	call	___ftge	;wreg free
  8754  001F38  0100               	movlb	0	; () banked
  8755  001F3A  B0D8               	btfsc	status,0,c
  8756  001F3C  D01F               	goto	l5473
  8757                           
  8758                           ; BSR set to: 0
  8759                           ;calculations.c: 44: r = 1.57079637 - r;
  8760  001F3E  C0F8  F036         	movff	fastatan2@r,___ftneg@f1
  8761  001F42  C0F9  F037         	movff	fastatan2@r+1,___ftneg@f1+1
  8762  001F46  C0FA  F038         	movff	fastatan2@r+2,___ftneg@f1+2
  8763  001F4A  ECAE  F021         	call	___ftneg	;wreg free
  8764  001F4E  C036  F0C8         	movff	?___ftneg,___ftadd@f1
  8765  001F52  C037  F0C9         	movff	?___ftneg+1,___ftadd@f1+1
  8766  001F56  C038  F0CA         	movff	?___ftneg+2,___ftadd@f1+2
  8767  001F5A  0E10               	movlw	16
  8768  001F5C  0100               	movlb	0	; () banked
  8769  001F5E  6FCB               	movwf	___ftadd@f2& (0+255),b
  8770  001F60  0EC9               	movlw	201
  8771  001F62  0100               	movlb	0	; () banked
  8772  001F64  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  8773  001F66  0E3F               	movlw	63
  8774  001F68  0100               	movlb	0	; () banked
  8775  001F6A  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  8776  001F6C  ECF6  F012         	call	___ftadd	;wreg free
  8777  001F70  C0C8  F0F8         	movff	?___ftadd,fastatan2@r
  8778  001F74  C0C9  F0F9         	movff	?___ftadd+1,fastatan2@r+1
  8779  001F78  C0CA  F0FA         	movff	?___ftadd+2,fastatan2@r+2
  8780  001F7C                     l5473:
  8781                           
  8782                           ;calculations.c: 45: }
  8783                           ;calculations.c: 46: if ( x < 0 ) {
  8784  001F7C  0100               	movlb	0	; () banked
  8785  001F7E  AFE5               	btfss	(fastatan2@x+2)& (0+255),7,b
  8786  001F80  D01F               	goto	l5477
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;calculations.c: 47: r = 3.14159274 - r;
  8790  001F82  C0F8  F036         	movff	fastatan2@r,___ftneg@f1
  8791  001F86  C0F9  F037         	movff	fastatan2@r+1,___ftneg@f1+1
  8792  001F8A  C0FA  F038         	movff	fastatan2@r+2,___ftneg@f1+2
  8793  001F8E  ECAE  F021         	call	___ftneg	;wreg free
  8794  001F92  C036  F0C8         	movff	?___ftneg,___ftadd@f1
  8795  001F96  C037  F0C9         	movff	?___ftneg+1,___ftadd@f1+1
  8796  001F9A  C038  F0CA         	movff	?___ftneg+2,___ftadd@f1+2
  8797  001F9E  0E10               	movlw	16
  8798  001FA0  0100               	movlb	0	; () banked
  8799  001FA2  6FCB               	movwf	___ftadd@f2& (0+255),b
  8800  001FA4  0E49               	movlw	73
  8801  001FA6  0100               	movlb	0	; () banked
  8802  001FA8  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  8803  001FAA  0E40               	movlw	64
  8804  001FAC  0100               	movlb	0	; () banked
  8805  001FAE  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  8806  001FB0  ECF6  F012         	call	___ftadd	;wreg free
  8807  001FB4  C0C8  F0F8         	movff	?___ftadd,fastatan2@r
  8808  001FB8  C0C9  F0F9         	movff	?___ftadd+1,fastatan2@r+1
  8809  001FBC  C0CA  F0FA         	movff	?___ftadd+2,fastatan2@r+2
  8810  001FC0                     l5477:
  8811                           
  8812                           ;calculations.c: 48: }
  8813                           ;calculations.c: 49: if ( y < 0 ) {
  8814  001FC0  0100               	movlb	0	; () banked
  8815  001FC2  AFE8               	btfss	(fastatan2@y+2)& (0+255),7,b
  8816  001FC4  D00E               	goto	l826
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;calculations.c: 50: r = -r;
  8820  001FC6  C0F8  F036         	movff	fastatan2@r,___ftneg@f1
  8821  001FCA  C0F9  F037         	movff	fastatan2@r+1,___ftneg@f1+1
  8822  001FCE  C0FA  F038         	movff	fastatan2@r+2,___ftneg@f1+2
  8823  001FD2  ECAE  F021         	call	___ftneg	;wreg free
  8824  001FD6  C036  F0F8         	movff	?___ftneg,fastatan2@r
  8825  001FDA  C037  F0F9         	movff	?___ftneg+1,fastatan2@r+1
  8826  001FDE  C038  F0FA         	movff	?___ftneg+2,fastatan2@r+2
  8827  001FE2                     l826:
  8828                           
  8829                           ;calculations.c: 51: }
  8830                           ;calculations.c: 53: r = (r * 180.0)/3.14159;
  8831  001FE2  0E00               	movlw	0
  8832  001FE4  6E2A               	movwf	___ftmul@f2,c
  8833  001FE6  0E34               	movlw	52
  8834  001FE8  6E2B               	movwf	___ftmul@f2+1,c
  8835  001FEA  0E43               	movlw	67
  8836  001FEC  6E2C               	movwf	___ftmul@f2+2,c
  8837  001FEE  C0F8  F027         	movff	fastatan2@r,___ftmul@f1
  8838  001FF2  C0F9  F028         	movff	fastatan2@r+1,___ftmul@f1+1
  8839  001FF6  C0FA  F029         	movff	fastatan2@r+2,___ftmul@f1+2
  8840  001FFA  EC2D  F01C         	call	___ftmul	;wreg free
  8841  001FFE  C027  F0D4         	movff	?___ftmul,___ftdiv@f1
  8842  002002  C028  F0D5         	movff	?___ftmul+1,___ftdiv@f1+1
  8843  002006  C029  F0D6         	movff	?___ftmul+2,___ftdiv@f1+2
  8844  00200A  0E10               	movlw	16
  8845  00200C  0100               	movlb	0	; () banked
  8846  00200E  6FD7               	movwf	___ftdiv@f2& (0+255),b
  8847  002010  0E49               	movlw	73
  8848  002012  0100               	movlb	0	; () banked
  8849  002014  6FD8               	movwf	(___ftdiv@f2+1)& (0+255),b
  8850  002016  0E40               	movlw	64
  8851  002018  0100               	movlb	0	; () banked
  8852  00201A  6FD9               	movwf	(___ftdiv@f2+2)& (0+255),b
  8853  00201C  EC8F  F017         	call	___ftdiv	;wreg free
  8854  002020  C0D4  F0F8         	movff	?___ftdiv,fastatan2@r
  8855  002024  C0D5  F0F9         	movff	?___ftdiv+1,fastatan2@r+1
  8856  002028  C0D6  F0FA         	movff	?___ftdiv+2,fastatan2@r+2
  8857                           
  8858                           ;calculations.c: 54: r = -r + 90;
  8859  00202C  C0F8  F036         	movff	fastatan2@r,___ftneg@f1
  8860  002030  C0F9  F037         	movff	fastatan2@r+1,___ftneg@f1+1
  8861  002034  C0FA  F038         	movff	fastatan2@r+2,___ftneg@f1+2
  8862  002038  ECAE  F021         	call	___ftneg	;wreg free
  8863  00203C  C036  F0C8         	movff	?___ftneg,___ftadd@f1
  8864  002040  C037  F0C9         	movff	?___ftneg+1,___ftadd@f1+1
  8865  002044  C038  F0CA         	movff	?___ftneg+2,___ftadd@f1+2
  8866  002048  0E00               	movlw	0
  8867  00204A  0100               	movlb	0	; () banked
  8868  00204C  6FCB               	movwf	___ftadd@f2& (0+255),b
  8869  00204E  0EB4               	movlw	180
  8870  002050  0100               	movlb	0	; () banked
  8871  002052  6FCC               	movwf	(___ftadd@f2+1)& (0+255),b
  8872  002054  0E42               	movlw	66
  8873  002056  0100               	movlb	0	; () banked
  8874  002058  6FCD               	movwf	(___ftadd@f2+2)& (0+255),b
  8875  00205A  ECF6  F012         	call	___ftadd	;wreg free
  8876  00205E  C0C8  F0F8         	movff	?___ftadd,fastatan2@r
  8877  002062  C0C9  F0F9         	movff	?___ftadd+1,fastatan2@r+1
  8878  002066  C0CA  F0FA         	movff	?___ftadd+2,fastatan2@r+2
  8879                           
  8880                           ;calculations.c: 56: return r;
  8881  00206A  C0F8  F0E3         	movff	fastatan2@r,?_fastatan2
  8882  00206E  C0F9  F0E4         	movff	fastatan2@r+1,?_fastatan2+1
  8883  002072  C0FA  F0E5         	movff	fastatan2@r+2,?_fastatan2+2
  8884  002076  0012               	return	
  8885  002078                     __end_of_fastatan2:
  8886                           	opt stack 0
  8887                           tblptru	equ	0xFF8
  8888                           tblptrh	equ	0xFF7
  8889                           tblptrl	equ	0xFF6
  8890                           tablat	equ	0xFF5
  8891                           prodh	equ	0xFF4
  8892                           prodl	equ	0xFF3
  8893                           intcon	equ	0xFF2
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           postdec2	equ	0xFDD
  8899                           fsr2h	equ	0xFDA
  8900                           fsr2l	equ	0xFD9
  8901                           status	equ	0xFD8
  8902                           
  8903 ;; *************** function _minimum *****************
  8904 ;; Defined at:
  8905 ;;		line 67 in file "calculations.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;  x               3   12[BANK0 ] float 
  8908 ;;  y               3   15[BANK0 ] float 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;		None
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  3   12[BANK0 ] float 
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8920 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8923 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8924 ;;Total ram usage:        6 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    5
  8927 ;; This function calls:
  8928 ;;		___ftge
  8929 ;; This function is called by:
  8930 ;;		_fastatan2
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           	psect	text43
  8935  00400C                     __ptext43:
  8936                           	opt stack 0
  8937  00400C                     _minimum:
  8938                           	opt stack 23
  8939                           
  8940                           ;calculations.c: 68: if ( x < y ) {
  8941                           
  8942                           ;incstack = 0
  8943  00400C  C0CD  F0C4         	movff	minimum@x,___ftge@ff1
  8944  004010  C0CE  F0C5         	movff	minimum@x+1,___ftge@ff1+1
  8945  004014  C0CF  F0C6         	movff	minimum@x+2,___ftge@ff1+2
  8946  004018  C0D0  F0C7         	movff	minimum@y,___ftge@ff2
  8947  00401C  C0D1  F0C8         	movff	minimum@y+1,___ftge@ff2+1
  8948  004020  C0D2  F0C9         	movff	minimum@y+2,___ftge@ff2+2
  8949  004024  EC20  F01D         	call	___ftge	;wreg free
  8950  004028  0100               	movlb	0	; () banked
  8951  00402A  B0D8               	btfsc	status,0,c
  8952  00402C  D007               	goto	l835
  8953                           
  8954                           ; BSR set to: 0
  8955                           ;calculations.c: 69: return x;
  8956  00402E  C0CD  F0CD         	movff	minimum@x,?_minimum
  8957  004032  C0CE  F0CE         	movff	minimum@x+1,?_minimum+1
  8958  004036  C0CF  F0CF         	movff	minimum@x+2,?_minimum+2
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;calculations.c: 70: } else {
  8962  00403A  0012               	return	
  8963  00403C                     l835:
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;calculations.c: 71: return y;
  8967  00403C  C0D0  F0CD         	movff	minimum@y,?_minimum
  8968  004040  C0D1  F0CE         	movff	minimum@y+1,?_minimum+1
  8969  004044  C0D2  F0CF         	movff	minimum@y+2,?_minimum+2
  8970  004048  0012               	return	
  8971  00404A                     __end_of_minimum:
  8972                           	opt stack 0
  8973                           tblptru	equ	0xFF8
  8974                           tblptrh	equ	0xFF7
  8975                           tblptrl	equ	0xFF6
  8976                           tablat	equ	0xFF5
  8977                           prodh	equ	0xFF4
  8978                           prodl	equ	0xFF3
  8979                           intcon	equ	0xFF2
  8980                           postinc0	equ	0xFEE
  8981                           wreg	equ	0xFE8
  8982                           indf2	equ	0xFDF
  8983                           postinc2	equ	0xFDE
  8984                           postdec2	equ	0xFDD
  8985                           fsr2h	equ	0xFDA
  8986                           fsr2l	equ	0xFD9
  8987                           status	equ	0xFD8
  8988                           
  8989 ;; *************** function _maximum *****************
  8990 ;; Defined at:
  8991 ;;		line 59 in file "calculations.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;  x               3   12[BANK0 ] float 
  8994 ;;  y               3   15[BANK0 ] float 
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;		None
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  3   12[BANK0 ] float 
  8999 ;; Registers used:
  9000 ;;		wreg, status,2, status,0, cstack
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9006 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9009 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9010 ;;Total ram usage:        6 bytes
  9011 ;; Hardware stack levels used:    1
  9012 ;; Hardware stack levels required when called:    5
  9013 ;; This function calls:
  9014 ;;		___ftge
  9015 ;; This function is called by:
  9016 ;;		_fastatan2
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           	psect	text44
  9021  00404A                     __ptext44:
  9022                           	opt stack 0
  9023  00404A                     _maximum:
  9024                           	opt stack 23
  9025                           
  9026                           ;calculations.c: 60: if ( x > y ) {
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;incstack = 0
  9030  00404A  C0D0  F0C4         	movff	maximum@y,___ftge@ff1
  9031  00404E  C0D1  F0C5         	movff	maximum@y+1,___ftge@ff1+1
  9032  004052  C0D2  F0C6         	movff	maximum@y+2,___ftge@ff1+2
  9033  004056  C0CD  F0C7         	movff	maximum@x,___ftge@ff2
  9034  00405A  C0CE  F0C8         	movff	maximum@x+1,___ftge@ff2+1
  9035  00405E  C0CF  F0C9         	movff	maximum@x+2,___ftge@ff2+2
  9036  004062  EC20  F01D         	call	___ftge	;wreg free
  9037  004066  0100               	movlb	0	; () banked
  9038  004068  B0D8               	btfsc	status,0,c
  9039  00406A  D007               	goto	l830
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;calculations.c: 61: return x;
  9043  00406C  C0CD  F0CD         	movff	maximum@x,?_maximum
  9044  004070  C0CE  F0CE         	movff	maximum@x+1,?_maximum+1
  9045  004074  C0CF  F0CF         	movff	maximum@x+2,?_maximum+2
  9046                           
  9047                           ; BSR set to: 0
  9048                           ;calculations.c: 62: } else {
  9049  004078  0012               	return	
  9050  00407A                     l830:
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;calculations.c: 63: return y;
  9054  00407A  C0D0  F0CD         	movff	maximum@y,?_maximum
  9055  00407E  C0D1  F0CE         	movff	maximum@y+1,?_maximum+1
  9056  004082  C0D2  F0CF         	movff	maximum@y+2,?_maximum+2
  9057  004086  0012               	return	
  9058  004088                     __end_of_maximum:
  9059                           	opt stack 0
  9060                           tblptru	equ	0xFF8
  9061                           tblptrh	equ	0xFF7
  9062                           tblptrl	equ	0xFF6
  9063                           tablat	equ	0xFF5
  9064                           prodh	equ	0xFF4
  9065                           prodl	equ	0xFF3
  9066                           intcon	equ	0xFF2
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function ___ftge *****************
  9077 ;; Defined at:
  9078 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  ff1             3    3[BANK0 ] float 
  9081 ;;  ff2             3    6[BANK0 ] float 
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;		None
  9084 ;; Return value:  Size  Location     Type
  9085 ;;		None               void
  9086 ;; Registers used:
  9087 ;;		wreg, status,2, status,0
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9093 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9095 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9096 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9097 ;;Total ram usage:        9 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    4
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;;		_fastatan2
  9104 ;;		_maximum
  9105 ;;		_minimum
  9106 ;;		_printf
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           	psect	text45
  9111  003A40                     __ptext45:
  9112                           	opt stack 0
  9113  003A40                     ___ftge:
  9114                           	opt stack 25
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;incstack = 0
  9118  003A40  0100               	movlb	0	; () banked
  9119  003A42  AFC6               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9120  003A44  D01D               	goto	l4969
  9121                           
  9122                           ; BSR set to: 0
  9123  003A46  C0C4  F0CA         	movff	___ftge@ff1,??___ftge
  9124  003A4A  C0C5  F0CB         	movff	___ftge@ff1+1,??___ftge+1
  9125  003A4E  C0C6  F0CC         	movff	___ftge@ff1+2,??___ftge+2
  9126  003A52  0100               	movlb	0	; () banked
  9127  003A54  1FCA               	comf	??___ftge& (0+255),f,b
  9128  003A56  1FCB               	comf	(??___ftge+1)& (0+255),f,b
  9129  003A58  1FCC               	comf	(??___ftge+2)& (0+255),f,b
  9130  003A5A  2BCA               	incf	??___ftge& (0+255),f,b
  9131  003A5C  0E00               	movlw	0
  9132  003A5E  23CB               	addwfc	(??___ftge+1)& (0+255),f,b
  9133  003A60  23CC               	addwfc	(??___ftge+2)& (0+255),f,b
  9134  003A62  0E00               	movlw	0
  9135  003A64  0100               	movlb	0	; () banked
  9136  003A66  25CA               	addwf	??___ftge& (0+255),w,b
  9137  003A68  0100               	movlb	0	; () banked
  9138  003A6A  6FC4               	movwf	___ftge@ff1& (0+255),b
  9139  003A6C  0E00               	movlw	0
  9140  003A6E  0100               	movlb	0	; () banked
  9141  003A70  21CB               	addwfc	(??___ftge+1)& (0+255),w,b
  9142  003A72  0100               	movlb	0	; () banked
  9143  003A74  6FC5               	movwf	(___ftge@ff1+1)& (0+255),b
  9144  003A76  0E80               	movlw	128
  9145  003A78  0100               	movlb	0	; () banked
  9146  003A7A  21CC               	addwfc	(??___ftge+2)& (0+255),w,b
  9147  003A7C  0100               	movlb	0	; () banked
  9148  003A7E  6FC6               	movwf	(___ftge@ff1+2)& (0+255),b
  9149  003A80                     l4969:
  9150                           
  9151                           ; BSR set to: 0
  9152  003A80  0100               	movlb	0	; () banked
  9153  003A82  AFC9               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9154  003A84  D01D               	goto	l4973
  9155                           
  9156                           ; BSR set to: 0
  9157  003A86  C0C7  F0CA         	movff	___ftge@ff2,??___ftge
  9158  003A8A  C0C8  F0CB         	movff	___ftge@ff2+1,??___ftge+1
  9159  003A8E  C0C9  F0CC         	movff	___ftge@ff2+2,??___ftge+2
  9160  003A92  0100               	movlb	0	; () banked
  9161  003A94  1FCA               	comf	??___ftge& (0+255),f,b
  9162  003A96  1FCB               	comf	(??___ftge+1)& (0+255),f,b
  9163  003A98  1FCC               	comf	(??___ftge+2)& (0+255),f,b
  9164  003A9A  2BCA               	incf	??___ftge& (0+255),f,b
  9165  003A9C  0E00               	movlw	0
  9166  003A9E  23CB               	addwfc	(??___ftge+1)& (0+255),f,b
  9167  003AA0  23CC               	addwfc	(??___ftge+2)& (0+255),f,b
  9168  003AA2  0E00               	movlw	0
  9169  003AA4  0100               	movlb	0	; () banked
  9170  003AA6  25CA               	addwf	??___ftge& (0+255),w,b
  9171  003AA8  0100               	movlb	0	; () banked
  9172  003AAA  6FC7               	movwf	___ftge@ff2& (0+255),b
  9173  003AAC  0E00               	movlw	0
  9174  003AAE  0100               	movlb	0	; () banked
  9175  003AB0  21CB               	addwfc	(??___ftge+1)& (0+255),w,b
  9176  003AB2  0100               	movlb	0	; () banked
  9177  003AB4  6FC8               	movwf	(___ftge@ff2+1)& (0+255),b
  9178  003AB6  0E80               	movlw	128
  9179  003AB8  0100               	movlb	0	; () banked
  9180  003ABA  21CC               	addwfc	(??___ftge+2)& (0+255),w,b
  9181  003ABC  0100               	movlb	0	; () banked
  9182  003ABE  6FC9               	movwf	(___ftge@ff2+2)& (0+255),b
  9183  003AC0                     l4973:
  9184                           
  9185                           ; BSR set to: 0
  9186  003AC0  0E00               	movlw	0
  9187  003AC2  0100               	movlb	0	; () banked
  9188  003AC4  1BC4               	xorwf	___ftge@ff1& (0+255),f,b
  9189  003AC6  0E00               	movlw	0
  9190  003AC8  0100               	movlb	0	; () banked
  9191  003ACA  1BC5               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9192  003ACC  0E80               	movlw	128
  9193  003ACE  0100               	movlb	0	; () banked
  9194  003AD0  1BC6               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9195                           
  9196                           ; BSR set to: 0
  9197  003AD2  0E00               	movlw	0
  9198  003AD4  0100               	movlb	0	; () banked
  9199  003AD6  1BC7               	xorwf	___ftge@ff2& (0+255),f,b
  9200  003AD8  0E00               	movlw	0
  9201  003ADA  0100               	movlb	0	; () banked
  9202  003ADC  1BC8               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9203  003ADE  0E80               	movlw	128
  9204  003AE0  0100               	movlb	0	; () banked
  9205  003AE2  1BC9               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9206  003AE4  0100               	movlb	0	; () banked
  9207  003AE6  51C7               	movf	___ftge@ff2& (0+255),w,b
  9208  003AE8  0100               	movlb	0	; () banked
  9209  003AEA  5DC4               	subwf	___ftge@ff1& (0+255),w,b
  9210  003AEC  0100               	movlb	0	; () banked
  9211  003AEE  51C8               	movf	(___ftge@ff2+1)& (0+255),w,b
  9212  003AF0  0100               	movlb	0	; () banked
  9213  003AF2  59C5               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9214  003AF4  0100               	movlb	0	; () banked
  9215  003AF6  51C9               	movf	(___ftge@ff2+2)& (0+255),w,b
  9216  003AF8  0100               	movlb	0	; () banked
  9217  003AFA  59C6               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9218  003AFC  B0D8               	btfsc	status,0,c
  9219  003AFE  D002               	goto	l4979
  9220                           
  9221                           ; BSR set to: 0
  9222  003B00  90D8               	bcf	status,0,c
  9223  003B02  0012               	return	
  9224  003B04                     l4979:
  9225                           
  9226                           ; BSR set to: 0
  9227  003B04  80D8               	bsf	status,0,c
  9228                           
  9229                           ; BSR set to: 0
  9230  003B06  0012               	return	
  9231  003B08                     __end_of___ftge:
  9232                           	opt stack 0
  9233                           tblptru	equ	0xFF8
  9234                           tblptrh	equ	0xFF7
  9235                           tblptrl	equ	0xFF6
  9236                           tablat	equ	0xFF5
  9237                           prodh	equ	0xFF4
  9238                           prodl	equ	0xFF3
  9239                           intcon	equ	0xFF2
  9240                           postinc0	equ	0xFEE
  9241                           wreg	equ	0xFE8
  9242                           indf2	equ	0xFDF
  9243                           postinc2	equ	0xFDE
  9244                           postdec2	equ	0xFDD
  9245                           fsr2h	equ	0xFDA
  9246                           fsr2l	equ	0xFD9
  9247                           status	equ	0xFD8
  9248                           
  9249 ;; *************** function _fabs *****************
  9250 ;; Defined at:
  9251 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fabs.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;  d               3    0[BANK0 ] float 
  9254 ;; Auto vars:     Size  Location     Type
  9255 ;;		None
  9256 ;; Return value:  Size  Location     Type
  9257 ;;                  3    0[BANK0 ] float 
  9258 ;; Registers used:
  9259 ;;		wreg, status,2, status,0, cstack
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9265 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9268 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9269 ;;Total ram usage:        3 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; Hardware stack levels required when called:    5
  9272 ;; This function calls:
  9273 ;;		___ftneg
  9274 ;; This function is called by:
  9275 ;;		_fastatan2
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           	psect	text46
  9280  004198                     __ptext46:
  9281                           	opt stack 0
  9282  004198                     _fabs:
  9283                           	opt stack 23
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;incstack = 0
  9287  004198  0100               	movlb	0	; () banked
  9288  00419A  AFC3               	btfss	(fabs@d+2)& (0+255),7,b
  9289  00419C  D00F               	goto	l1312
  9290                           
  9291                           ; BSR set to: 0
  9292  00419E  C0C1  F036         	movff	fabs@d,___ftneg@f1
  9293  0041A2  C0C2  F037         	movff	fabs@d+1,___ftneg@f1+1
  9294  0041A6  C0C3  F038         	movff	fabs@d+2,___ftneg@f1+2
  9295  0041AA  ECAE  F021         	call	___ftneg	;wreg free
  9296  0041AE  C036  F0C1         	movff	?___ftneg,?_fabs
  9297  0041B2  C037  F0C2         	movff	?___ftneg+1,?_fabs+1
  9298  0041B6  C038  F0C3         	movff	?___ftneg+2,?_fabs+2
  9299  0041BA  0012               	return	
  9300  0041BC                     l1312:
  9301                           
  9302                           ; BSR set to: 0
  9303  0041BC  C0C1  F0C1         	movff	fabs@d,?_fabs
  9304  0041C0  C0C2  F0C2         	movff	fabs@d+1,?_fabs+1
  9305  0041C4  C0C3  F0C3         	movff	fabs@d+2,?_fabs+2
  9306  0041C8  0012               	return		;funcret
  9307  0041CA                     __end_of_fabs:
  9308                           	opt stack 0
  9309                           tblptru	equ	0xFF8
  9310                           tblptrh	equ	0xFF7
  9311                           tblptrl	equ	0xFF6
  9312                           tablat	equ	0xFF5
  9313                           prodh	equ	0xFF4
  9314                           prodl	equ	0xFF3
  9315                           intcon	equ	0xFF2
  9316                           postinc0	equ	0xFEE
  9317                           wreg	equ	0xFE8
  9318                           indf2	equ	0xFDF
  9319                           postinc2	equ	0xFDE
  9320                           postdec2	equ	0xFDD
  9321                           fsr2h	equ	0xFDA
  9322                           fsr2l	equ	0xFD9
  9323                           status	equ	0xFD8
  9324                           
  9325 ;; *************** function ___ftneg *****************
  9326 ;; Defined at:
  9327 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  f1              3   53[COMRAM] float 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;		None
  9332 ;; Return value:  Size  Location     Type
  9333 ;;                  3   53[COMRAM] float 
  9334 ;; Registers used:
  9335 ;;		wreg, status,2, status,0
  9336 ;; Tracked objects:
  9337 ;;		On entry : 0/0
  9338 ;;		On exit  : 0/0
  9339 ;;		Unchanged: 0/0
  9340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9341 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9344 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9345 ;;Total ram usage:        3 bytes
  9346 ;; Hardware stack levels used:    1
  9347 ;; Hardware stack levels required when called:    4
  9348 ;; This function calls:
  9349 ;;		Nothing
  9350 ;; This function is called by:
  9351 ;;		_computeRollPitch
  9352 ;;		_fastatan2
  9353 ;;		_rollPid
  9354 ;;		_kalmanUpdate
  9355 ;;		_printf
  9356 ;;		_fabs
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           	psect	text47
  9361  00435C                     __ptext47:
  9362                           	opt stack 0
  9363  00435C                     ___ftneg:
  9364                           	opt stack 25
  9365                           
  9366                           ;incstack = 0
  9367  00435C  5036               	movf	___ftneg@f1,w,c
  9368  00435E  1037               	iorwf	___ftneg@f1+1,w,c
  9369  004360  1038               	iorwf	___ftneg@f1+2,w,c
  9370  004362  B4D8               	btfsc	status,2,c
  9371  004364  D006               	goto	l1455
  9372  004366  0E00               	movlw	0
  9373  004368  1A36               	xorwf	___ftneg@f1,f,c
  9374  00436A  0E00               	movlw	0
  9375  00436C  1A37               	xorwf	___ftneg@f1+1,f,c
  9376  00436E  0E80               	movlw	128
  9377  004370  1A38               	xorwf	___ftneg@f1+2,f,c
  9378  004372                     l1455:
  9379  004372  C036  F036         	movff	___ftneg@f1,?___ftneg
  9380  004376  C037  F037         	movff	___ftneg@f1+1,?___ftneg+1
  9381  00437A  C038  F038         	movff	___ftneg@f1+2,?___ftneg+2
  9382  00437E  0012               	return		;funcret
  9383  004380                     __end_of___ftneg:
  9384                           	opt stack 0
  9385                           tblptru	equ	0xFF8
  9386                           tblptrh	equ	0xFF7
  9387                           tblptrl	equ	0xFF6
  9388                           tablat	equ	0xFF5
  9389                           prodh	equ	0xFF4
  9390                           prodl	equ	0xFF3
  9391                           intcon	equ	0xFF2
  9392                           postinc0	equ	0xFEE
  9393                           wreg	equ	0xFE8
  9394                           indf2	equ	0xFDF
  9395                           postinc2	equ	0xFDE
  9396                           postdec2	equ	0xFDD
  9397                           fsr2h	equ	0xFDA
  9398                           fsr2l	equ	0xFD9
  9399                           status	equ	0xFD8
  9400                           
  9401 ;; *************** function ___ftmul *****************
  9402 ;; Defined at:
  9403 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;  f1              3   38[COMRAM] float 
  9406 ;;  f2              3   41[COMRAM] float 
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  9409 ;;  sign            1   52[COMRAM] unsigned char 
  9410 ;;  cntr            1   51[COMRAM] unsigned char 
  9411 ;;  exp             1   47[COMRAM] unsigned char 
  9412 ;; Return value:  Size  Location     Type
  9413 ;;                  3   38[COMRAM] float 
  9414 ;; Registers used:
  9415 ;;		wreg, status,2, status,0, cstack
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9421 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9422 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9423 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9424 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9425 ;;Total ram usage:       15 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    5
  9428 ;; This function calls:
  9429 ;;		___ftpack
  9430 ;; This function is called by:
  9431 ;;		_main
  9432 ;;		_computeRollPitch
  9433 ;;		_fastatan2
  9434 ;;		_rollPid
  9435 ;;		_kalmanUpdate
  9436 ;;		_fround
  9437 ;;		_scale
  9438 ;;		_printf
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           	psect	text48
  9443  00385A                     __ptext48:
  9444                           	opt stack 0
  9445  00385A                     ___ftmul:
  9446                           	opt stack 23
  9447                           
  9448                           ;incstack = 0
  9449  00385A  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  9450  00385E  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  9451  003860  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  9452  003862  3428               	rlcf	___ftmul@f1+1,w,c
  9453  003864  362D               	rlcf	??___ftmul& (0+255),f,c
  9454  003866  E301               	bnc	u4381
  9455  003868  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  9456  00386A                     u4381:
  9457  00386A  502D               	movf	??___ftmul,w,c
  9458  00386C  6E30               	movwf	___ftmul@exp,c
  9459  00386E  5030               	movf	___ftmul@exp,w,c
  9460  003870  A4D8               	btfss	status,2,c
  9461  003872  D007               	goto	l5181
  9462  003874  0E00               	movlw	0
  9463  003876  6E27               	movwf	?___ftmul,c
  9464  003878  0E00               	movlw	0
  9465  00387A  6E28               	movwf	?___ftmul+1,c
  9466  00387C  0E00               	movlw	0
  9467  00387E  6E29               	movwf	?___ftmul+2,c
  9468  003880  0012               	return	
  9469  003882                     l5181:
  9470  003882  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  9471  003886  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  9472  003888  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  9473  00388A  342B               	rlcf	___ftmul@f2+1,w,c
  9474  00388C  362D               	rlcf	??___ftmul& (0+255),f,c
  9475  00388E  E301               	bnc	u4401
  9476  003890  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  9477  003892                     u4401:
  9478  003892  502D               	movf	??___ftmul,w,c
  9479  003894  6E35               	movwf	___ftmul@sign,c
  9480  003896  5035               	movf	___ftmul@sign,w,c
  9481  003898  A4D8               	btfss	status,2,c
  9482  00389A  D007               	goto	l5187
  9483  00389C  0E00               	movlw	0
  9484  00389E  6E27               	movwf	?___ftmul,c
  9485  0038A0  0E00               	movlw	0
  9486  0038A2  6E28               	movwf	?___ftmul+1,c
  9487  0038A4  0E00               	movlw	0
  9488  0038A6  6E29               	movwf	?___ftmul+2,c
  9489  0038A8  0012               	return	
  9490  0038AA                     l5187:
  9491  0038AA  5035               	movf	___ftmul@sign,w,c
  9492  0038AC  0F7B               	addlw	123
  9493  0038AE  2630               	addwf	___ftmul@exp,f,c
  9494  0038B0  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  9495  0038B4  502C               	movf	___ftmul@f2+2,w,c
  9496  0038B6  1A35               	xorwf	___ftmul@sign,f,c
  9497  0038B8  0E80               	movlw	128
  9498  0038BA  1635               	andwf	___ftmul@sign,f,c
  9499  0038BC  8E28               	bsf	___ftmul@f1+1,7,c
  9500  0038BE  8E2B               	bsf	___ftmul@f2+1,7,c
  9501  0038C0  0EFF               	movlw	255
  9502  0038C2  162A               	andwf	___ftmul@f2,f,c
  9503  0038C4  0EFF               	movlw	255
  9504  0038C6  162B               	andwf	___ftmul@f2+1,f,c
  9505  0038C8  0E00               	movlw	0
  9506  0038CA  162C               	andwf	___ftmul@f2+2,f,c
  9507  0038CC  0E00               	movlw	0
  9508  0038CE  6E31               	movwf	___ftmul@f3_as_product,c
  9509  0038D0  0E00               	movlw	0
  9510  0038D2  6E32               	movwf	___ftmul@f3_as_product+1,c
  9511  0038D4  0E00               	movlw	0
  9512  0038D6  6E33               	movwf	___ftmul@f3_as_product+2,c
  9513  0038D8  0E07               	movlw	7
  9514  0038DA  6E34               	movwf	___ftmul@cntr,c
  9515  0038DC                     l5201:
  9516  0038DC  A027               	btfss	___ftmul@f1,0,c
  9517  0038DE  D006               	goto	l5205
  9518  0038E0  502A               	movf	___ftmul@f2,w,c
  9519  0038E2  2631               	addwf	___ftmul@f3_as_product,f,c
  9520  0038E4  502B               	movf	___ftmul@f2+1,w,c
  9521  0038E6  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  9522  0038E8  502C               	movf	___ftmul@f2+2,w,c
  9523  0038EA  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  9524  0038EC                     l5205:
  9525  0038EC  90D8               	bcf	status,0,c
  9526  0038EE  3229               	rrcf	___ftmul@f1+2,f,c
  9527  0038F0  3228               	rrcf	___ftmul@f1+1,f,c
  9528  0038F2  3227               	rrcf	___ftmul@f1,f,c
  9529  0038F4  90D8               	bcf	status,0,c
  9530  0038F6  362A               	rlcf	___ftmul@f2,f,c
  9531  0038F8  362B               	rlcf	___ftmul@f2+1,f,c
  9532  0038FA  362C               	rlcf	___ftmul@f2+2,f,c
  9533  0038FC  2E34               	decfsz	___ftmul@cntr,f,c
  9534  0038FE  D7EE               	goto	l5201
  9535  003900  0E09               	movlw	9
  9536  003902  6E34               	movwf	___ftmul@cntr,c
  9537  003904                     l5211:
  9538  003904  A027               	btfss	___ftmul@f1,0,c
  9539  003906  D006               	goto	l5215
  9540  003908  502A               	movf	___ftmul@f2,w,c
  9541  00390A  2631               	addwf	___ftmul@f3_as_product,f,c
  9542  00390C  502B               	movf	___ftmul@f2+1,w,c
  9543  00390E  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  9544  003910  502C               	movf	___ftmul@f2+2,w,c
  9545  003912  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  9546  003914                     l5215:
  9547  003914  90D8               	bcf	status,0,c
  9548  003916  3229               	rrcf	___ftmul@f1+2,f,c
  9549  003918  3228               	rrcf	___ftmul@f1+1,f,c
  9550  00391A  3227               	rrcf	___ftmul@f1,f,c
  9551  00391C  90D8               	bcf	status,0,c
  9552  00391E  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  9553  003920  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  9554  003922  3231               	rrcf	___ftmul@f3_as_product,f,c
  9555  003924  2E34               	decfsz	___ftmul@cntr,f,c
  9556  003926  D7EE               	goto	l5211
  9557  003928  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  9558  00392C  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9559  003930  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9560  003934  C030  F016         	movff	___ftmul@exp,___ftpack@exp
  9561  003938  C035  F017         	movff	___ftmul@sign,___ftpack@sign
  9562  00393C  EC84  F01D         	call	___ftpack	;wreg free
  9563  003940  C013  F027         	movff	?___ftpack,?___ftmul
  9564  003944  C014  F028         	movff	?___ftpack+1,?___ftmul+1
  9565  003948  C015  F029         	movff	?___ftpack+2,?___ftmul+2
  9566  00394C  0012               	return	
  9567  00394E                     __end_of___ftmul:
  9568                           	opt stack 0
  9569                           tblptru	equ	0xFF8
  9570                           tblptrh	equ	0xFF7
  9571                           tblptrl	equ	0xFF6
  9572                           tablat	equ	0xFF5
  9573                           prodh	equ	0xFF4
  9574                           prodl	equ	0xFF3
  9575                           intcon	equ	0xFF2
  9576                           postinc0	equ	0xFEE
  9577                           wreg	equ	0xFE8
  9578                           indf2	equ	0xFDF
  9579                           postinc2	equ	0xFDE
  9580                           postdec2	equ	0xFDD
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function ___ftdiv *****************
  9586 ;; Defined at:
  9587 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;  f1              3   19[BANK0 ] float 
  9590 ;;  f2              3   22[BANK0 ] float 
  9591 ;; Auto vars:     Size  Location     Type
  9592 ;;  f3              3   29[BANK0 ] float 
  9593 ;;  sign            1   33[BANK0 ] unsigned char 
  9594 ;;  exp             1   32[BANK0 ] unsigned char 
  9595 ;;  cntr            1   28[BANK0 ] unsigned char 
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  3   19[BANK0 ] float 
  9598 ;; Registers used:
  9599 ;;		wreg, status,2, status,0, cstack
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9605 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9606 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9607 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9608 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9609 ;;Total ram usage:       15 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    5
  9612 ;; This function calls:
  9613 ;;		___ftpack
  9614 ;; This function is called by:
  9615 ;;		_readAccel
  9616 ;;		_fastatan2
  9617 ;;		_kalmanUpdate
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text49
  9622  002F1E                     __ptext49:
  9623                           	opt stack 0
  9624  002F1E                     ___ftdiv:
  9625                           	opt stack 23
  9626                           
  9627                           ;incstack = 0
  9628  002F1E  C0D6  F0DA         	movff	___ftdiv@f1+2,??___ftdiv
  9629  002F22  0100               	movlb	0	; () banked
  9630  002F24  6BDB               	clrf	(??___ftdiv+1)& (0+255),b
  9631  002F26  6BDC               	clrf	(??___ftdiv+2)& (0+255),b
  9632  002F28  0100               	movlb	0	; () banked
  9633  002F2A  35D5               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9634  002F2C  0100               	movlb	0	; () banked
  9635  002F2E  37DA               	rlcf	??___ftdiv& (0+255),f,b
  9636  002F30  E301               	bnc	u4331
  9637  002F32  81DB               	bsf	(??___ftdiv+1)& (0+255),0,b
  9638  002F34                     u4331:
  9639  002F34  0100               	movlb	0	; () banked
  9640  002F36  51DA               	movf	??___ftdiv& (0+255),w,b
  9641  002F38  0100               	movlb	0	; () banked
  9642  002F3A  6FE1               	movwf	___ftdiv@exp& (0+255),b
  9643  002F3C  0100               	movlb	0	; () banked
  9644  002F3E  51E1               	movf	___ftdiv@exp& (0+255),w,b
  9645  002F40  A4D8               	btfss	status,2,c
  9646  002F42  D00A               	goto	l5135
  9647                           
  9648                           ; BSR set to: 0
  9649  002F44  0E00               	movlw	0
  9650  002F46  0100               	movlb	0	; () banked
  9651  002F48  6FD4               	movwf	?___ftdiv& (0+255),b
  9652  002F4A  0E00               	movlw	0
  9653  002F4C  0100               	movlb	0	; () banked
  9654  002F4E  6FD5               	movwf	(?___ftdiv+1)& (0+255),b
  9655  002F50  0E00               	movlw	0
  9656  002F52  0100               	movlb	0	; () banked
  9657  002F54  6FD6               	movwf	(?___ftdiv+2)& (0+255),b
  9658                           
  9659                           ; BSR set to: 0
  9660  002F56  0012               	return	
  9661  002F58                     l5135:
  9662                           
  9663                           ; BSR set to: 0
  9664  002F58  C0D9  F0DA         	movff	___ftdiv@f2+2,??___ftdiv
  9665  002F5C  0100               	movlb	0	; () banked
  9666  002F5E  6BDB               	clrf	(??___ftdiv+1)& (0+255),b
  9667  002F60  6BDC               	clrf	(??___ftdiv+2)& (0+255),b
  9668  002F62  0100               	movlb	0	; () banked
  9669  002F64  35D8               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9670  002F66  0100               	movlb	0	; () banked
  9671  002F68  37DA               	rlcf	??___ftdiv& (0+255),f,b
  9672  002F6A  E301               	bnc	u4351
  9673  002F6C  81DB               	bsf	(??___ftdiv+1)& (0+255),0,b
  9674  002F6E                     u4351:
  9675  002F6E  0100               	movlb	0	; () banked
  9676  002F70  51DA               	movf	??___ftdiv& (0+255),w,b
  9677  002F72  0100               	movlb	0	; () banked
  9678  002F74  6FE2               	movwf	___ftdiv@sign& (0+255),b
  9679  002F76  0100               	movlb	0	; () banked
  9680  002F78  51E2               	movf	___ftdiv@sign& (0+255),w,b
  9681  002F7A  A4D8               	btfss	status,2,c
  9682  002F7C  D00A               	goto	l5141
  9683                           
  9684                           ; BSR set to: 0
  9685  002F7E  0E00               	movlw	0
  9686  002F80  0100               	movlb	0	; () banked
  9687  002F82  6FD4               	movwf	?___ftdiv& (0+255),b
  9688  002F84  0E00               	movlw	0
  9689  002F86  0100               	movlb	0	; () banked
  9690  002F88  6FD5               	movwf	(?___ftdiv+1)& (0+255),b
  9691  002F8A  0E00               	movlw	0
  9692  002F8C  0100               	movlb	0	; () banked
  9693  002F8E  6FD6               	movwf	(?___ftdiv+2)& (0+255),b
  9694                           
  9695                           ; BSR set to: 0
  9696  002F90  0012               	return	
  9697  002F92                     l5141:
  9698                           
  9699                           ; BSR set to: 0
  9700  002F92  0E00               	movlw	0
  9701  002F94  0100               	movlb	0	; () banked
  9702  002F96  6FDE               	movwf	___ftdiv@f3& (0+255),b
  9703  002F98  0E00               	movlw	0
  9704  002F9A  0100               	movlb	0	; () banked
  9705  002F9C  6FDF               	movwf	(___ftdiv@f3+1)& (0+255),b
  9706  002F9E  0E00               	movlw	0
  9707  002FA0  0100               	movlb	0	; () banked
  9708  002FA2  6FE0               	movwf	(___ftdiv@f3+2)& (0+255),b
  9709                           
  9710                           ; BSR set to: 0
  9711  002FA4  0100               	movlb	0	; () banked
  9712  002FA6  51E2               	movf	___ftdiv@sign& (0+255),w,b
  9713  002FA8  0F89               	addlw	137
  9714  002FAA  0100               	movlb	0	; () banked
  9715  002FAC  5FE1               	subwf	___ftdiv@exp& (0+255),f,b
  9716                           
  9717                           ; BSR set to: 0
  9718  002FAE  C0D6  F0E2         	movff	___ftdiv@f1+2,___ftdiv@sign
  9719                           
  9720                           ; BSR set to: 0
  9721  002FB2  0100               	movlb	0	; () banked
  9722  002FB4  51D9               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9723  002FB6  0100               	movlb	0	; () banked
  9724  002FB8  1BE2               	xorwf	___ftdiv@sign& (0+255),f,b
  9725                           
  9726                           ; BSR set to: 0
  9727  002FBA  0E80               	movlw	128
  9728  002FBC  0100               	movlb	0	; () banked
  9729  002FBE  17E2               	andwf	___ftdiv@sign& (0+255),f,b
  9730                           
  9731                           ; BSR set to: 0
  9732  002FC0  0100               	movlb	0	; () banked
  9733  002FC2  8FD5               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9734                           
  9735                           ; BSR set to: 0
  9736  002FC4  0EFF               	movlw	255
  9737  002FC6  0100               	movlb	0	; () banked
  9738  002FC8  17D4               	andwf	___ftdiv@f1& (0+255),f,b
  9739  002FCA  0EFF               	movlw	255
  9740  002FCC  0100               	movlb	0	; () banked
  9741  002FCE  17D5               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9742  002FD0  0E00               	movlw	0
  9743  002FD2  0100               	movlb	0	; () banked
  9744  002FD4  17D6               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9745                           
  9746                           ; BSR set to: 0
  9747  002FD6  0100               	movlb	0	; () banked
  9748  002FD8  8FD8               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9749                           
  9750                           ; BSR set to: 0
  9751  002FDA  0EFF               	movlw	255
  9752  002FDC  0100               	movlb	0	; () banked
  9753  002FDE  17D7               	andwf	___ftdiv@f2& (0+255),f,b
  9754  002FE0  0EFF               	movlw	255
  9755  002FE2  0100               	movlb	0	; () banked
  9756  002FE4  17D8               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9757  002FE6  0E00               	movlw	0
  9758  002FE8  0100               	movlb	0	; () banked
  9759  002FEA  17D9               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9760                           
  9761                           ; BSR set to: 0
  9762  002FEC  0E18               	movlw	24
  9763  002FEE  0100               	movlb	0	; () banked
  9764  002FF0  6FDD               	movwf	___ftdiv@cntr& (0+255),b
  9765  002FF2                     l5161:
  9766                           
  9767                           ; BSR set to: 0
  9768  002FF2  0100               	movlb	0	; () banked
  9769  002FF4  90D8               	bcf	status,0,c
  9770  002FF6  37DE               	rlcf	___ftdiv@f3& (0+255),f,b
  9771  002FF8  37DF               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9772  002FFA  37E0               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9773                           
  9774                           ; BSR set to: 0
  9775  002FFC  0100               	movlb	0	; () banked
  9776  002FFE  51D7               	movf	___ftdiv@f2& (0+255),w,b
  9777  003000  0100               	movlb	0	; () banked
  9778  003002  5DD4               	subwf	___ftdiv@f1& (0+255),w,b
  9779  003004  0100               	movlb	0	; () banked
  9780  003006  51D8               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9781  003008  0100               	movlb	0	; () banked
  9782  00300A  59D5               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9783  00300C  0100               	movlb	0	; () banked
  9784  00300E  51D9               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9785  003010  0100               	movlb	0	; () banked
  9786  003012  59D6               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9787  003014  A0D8               	btfss	status,0,c
  9788  003016  D00E               	goto	l1416
  9789                           
  9790                           ; BSR set to: 0
  9791  003018  0100               	movlb	0	; () banked
  9792  00301A  51D7               	movf	___ftdiv@f2& (0+255),w,b
  9793  00301C  0100               	movlb	0	; () banked
  9794  00301E  5FD4               	subwf	___ftdiv@f1& (0+255),f,b
  9795  003020  0100               	movlb	0	; () banked
  9796  003022  51D8               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9797  003024  0100               	movlb	0	; () banked
  9798  003026  5BD5               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  9799  003028  0100               	movlb	0	; () banked
  9800  00302A  51D9               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9801  00302C  0100               	movlb	0	; () banked
  9802  00302E  5BD6               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  9803                           
  9804                           ; BSR set to: 0
  9805  003030  0100               	movlb	0	; () banked
  9806  003032  81DE               	bsf	___ftdiv@f3& (0+255),0,b
  9807  003034                     l1416:
  9808                           
  9809                           ; BSR set to: 0
  9810  003034  0100               	movlb	0	; () banked
  9811  003036  90D8               	bcf	status,0,c
  9812  003038  37D4               	rlcf	___ftdiv@f1& (0+255),f,b
  9813  00303A  37D5               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  9814  00303C  37D6               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  9815                           
  9816                           ; BSR set to: 0
  9817  00303E  0100               	movlb	0	; () banked
  9818  003040  2FDD               	decfsz	___ftdiv@cntr& (0+255),f,b
  9819  003042  D7D7               	goto	l5161
  9820                           
  9821                           ; BSR set to: 0
  9822                           
  9823                           ; BSR set to: 0
  9824  003044  C0DE  F013         	movff	___ftdiv@f3,___ftpack@arg
  9825  003048  C0DF  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9826  00304C  C0E0  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9827  003050  C0E1  F016         	movff	___ftdiv@exp,___ftpack@exp
  9828  003054  C0E2  F017         	movff	___ftdiv@sign,___ftpack@sign
  9829  003058  EC84  F01D         	call	___ftpack	;wreg free
  9830  00305C  C013  F0D4         	movff	?___ftpack,?___ftdiv
  9831  003060  C014  F0D5         	movff	?___ftpack+1,?___ftdiv+1
  9832  003064  C015  F0D6         	movff	?___ftpack+2,?___ftdiv+2
  9833  003068  0012               	return	
  9834  00306A                     __end_of___ftdiv:
  9835                           	opt stack 0
  9836                           tblptru	equ	0xFF8
  9837                           tblptrh	equ	0xFF7
  9838                           tblptrl	equ	0xFF6
  9839                           tablat	equ	0xFF5
  9840                           prodh	equ	0xFF4
  9841                           prodl	equ	0xFF3
  9842                           intcon	equ	0xFF2
  9843                           postinc0	equ	0xFEE
  9844                           wreg	equ	0xFE8
  9845                           indf2	equ	0xFDF
  9846                           postinc2	equ	0xFDE
  9847                           postdec2	equ	0xFDD
  9848                           fsr2h	equ	0xFDA
  9849                           fsr2l	equ	0xFD9
  9850                           status	equ	0xFD8
  9851                           
  9852 ;; *************** function ___lwtoft *****************
  9853 ;; Defined at:
  9854 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;  c               2   26[COMRAM] unsigned int 
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;		None
  9859 ;; Return value:  Size  Location     Type
  9860 ;;                  3   26[COMRAM] float 
  9861 ;; Registers used:
  9862 ;;		wreg, status,2, status,0, cstack
  9863 ;; Tracked objects:
  9864 ;;		On entry : 0/0
  9865 ;;		On exit  : 0/0
  9866 ;;		Unchanged: 0/0
  9867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9868 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9871 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9872 ;;Total ram usage:        3 bytes
  9873 ;; Hardware stack levels used:    1
  9874 ;; Hardware stack levels required when called:    5
  9875 ;; This function calls:
  9876 ;;		___ftpack
  9877 ;; This function is called by:
  9878 ;;		_computeRollPitch
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text50
  9883  004380                     __ptext50:
  9884                           	opt stack 0
  9885  004380                     ___lwtoft:
  9886                           	opt stack 24
  9887                           
  9888                           ;incstack = 0
  9889  004380  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  9890  004384  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  9891  004388  6A15               	clrf	___ftpack@arg+2,c
  9892  00438A  0E8E               	movlw	142
  9893  00438C  6E16               	movwf	___ftpack@exp,c
  9894  00438E  0E00               	movlw	0
  9895  004390  6E17               	movwf	___ftpack@sign,c
  9896  004392  EC84  F01D         	call	___ftpack	;wreg free
  9897  004396  C013  F01B         	movff	?___ftpack,?___lwtoft
  9898  00439A  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  9899  00439E  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  9900  0043A2  0012               	return	
  9901  0043A4                     __end_of___lwtoft:
  9902                           	opt stack 0
  9903                           tblptru	equ	0xFF8
  9904                           tblptrh	equ	0xFF7
  9905                           tblptrl	equ	0xFF6
  9906                           tablat	equ	0xFF5
  9907                           prodh	equ	0xFF4
  9908                           prodl	equ	0xFF3
  9909                           intcon	equ	0xFF2
  9910                           postinc0	equ	0xFEE
  9911                           wreg	equ	0xFE8
  9912                           indf2	equ	0xFDF
  9913                           postinc2	equ	0xFDE
  9914                           postdec2	equ	0xFDD
  9915                           fsr2h	equ	0xFDA
  9916                           fsr2l	equ	0xFD9
  9917                           status	equ	0xFD8
  9918                           
  9919 ;; *************** function ___ftsub *****************
  9920 ;; Defined at:
  9921 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;  f1              3   19[BANK0 ] float 
  9924 ;;  f2              3   22[BANK0 ] float 
  9925 ;; Auto vars:     Size  Location     Type
  9926 ;;		None
  9927 ;; Return value:  Size  Location     Type
  9928 ;;                  3   19[BANK0 ] float 
  9929 ;; Registers used:
  9930 ;;		wreg, status,2, status,0, cstack
  9931 ;; Tracked objects:
  9932 ;;		On entry : 0/0
  9933 ;;		On exit  : 0/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9936 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9939 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9940 ;;Total ram usage:        6 bytes
  9941 ;; Hardware stack levels used:    1
  9942 ;; Hardware stack levels required when called:    6
  9943 ;; This function calls:
  9944 ;;		___ftadd
  9945 ;; This function is called by:
  9946 ;;		_main
  9947 ;;		_computeRollPitch
  9948 ;;		_printf
  9949 ;; This function uses a non-reentrant model
  9950 ;;
  9951                           
  9952                           	psect	text51
  9953  003FC0                     __ptext51:
  9954                           	opt stack 0
  9955  003FC0                     ___ftsub:
  9956                           	opt stack 23
  9957                           
  9958                           ;incstack = 0
  9959  003FC0  0100               	movlb	0	; () banked
  9960  003FC2  51D7               	movf	___ftsub@f2& (0+255),w,b
  9961  003FC4  0100               	movlb	0	; () banked
  9962  003FC6  11D8               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9963  003FC8  0100               	movlb	0	; () banked
  9964  003FCA  11D9               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9965  003FCC  B4D8               	btfsc	status,2,c
  9966  003FCE  D009               	goto	l5683
  9967                           
  9968                           ; BSR set to: 0
  9969  003FD0  0E00               	movlw	0
  9970  003FD2  0100               	movlb	0	; () banked
  9971  003FD4  1BD7               	xorwf	___ftsub@f2& (0+255),f,b
  9972  003FD6  0E00               	movlw	0
  9973  003FD8  0100               	movlb	0	; () banked
  9974  003FDA  1BD8               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9975  003FDC  0E80               	movlw	128
  9976  003FDE  0100               	movlb	0	; () banked
  9977  003FE0  1BD9               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9978  003FE2                     l5683:
  9979                           
  9980                           ; BSR set to: 0
  9981  003FE2  C0D4  F0C8         	movff	___ftsub@f1,___ftadd@f1
  9982  003FE6  C0D5  F0C9         	movff	___ftsub@f1+1,___ftadd@f1+1
  9983  003FEA  C0D6  F0CA         	movff	___ftsub@f1+2,___ftadd@f1+2
  9984  003FEE  C0D7  F0CB         	movff	___ftsub@f2,___ftadd@f2
  9985  003FF2  C0D8  F0CC         	movff	___ftsub@f2+1,___ftadd@f2+1
  9986  003FF6  C0D9  F0CD         	movff	___ftsub@f2+2,___ftadd@f2+2
  9987  003FFA  ECF6  F012         	call	___ftadd	;wreg free
  9988  003FFE  C0C8  F0D4         	movff	?___ftadd,?___ftsub
  9989  004002  C0C9  F0D5         	movff	?___ftadd+1,?___ftsub+1
  9990  004006  C0CA  F0D6         	movff	?___ftadd+2,?___ftsub+2
  9991  00400A  0012               	return	
  9992  00400C                     __end_of___ftsub:
  9993                           	opt stack 0
  9994                           tblptru	equ	0xFF8
  9995                           tblptrh	equ	0xFF7
  9996                           tblptrl	equ	0xFF6
  9997                           tablat	equ	0xFF5
  9998                           prodh	equ	0xFF4
  9999                           prodl	equ	0xFF3
 10000                           intcon	equ	0xFF2
 10001                           postinc0	equ	0xFEE
 10002                           wreg	equ	0xFE8
 10003                           indf2	equ	0xFDF
 10004                           postinc2	equ	0xFDE
 10005                           postdec2	equ	0xFDD
 10006                           fsr2h	equ	0xFDA
 10007                           fsr2l	equ	0xFD9
 10008                           status	equ	0xFD8
 10009                           
 10010 ;; *************** function ___ftadd *****************
 10011 ;; Defined at:
 10012 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
 10013 ;; Parameters:    Size  Location     Type
 10014 ;;  f1              3    7[BANK0 ] float 
 10015 ;;  f2              3   10[BANK0 ] float 
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;  exp1            1   18[BANK0 ] unsigned char 
 10018 ;;  exp2            1   17[BANK0 ] unsigned char 
 10019 ;;  sign            1   16[BANK0 ] unsigned char 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  3    7[BANK0 ] float 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2, status,0, cstack
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10029 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10030 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10031 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10032 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10033 ;;Total ram usage:       12 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    5
 10036 ;; This function calls:
 10037 ;;		___ftpack
 10038 ;; This function is called by:
 10039 ;;		_main
 10040 ;;		_computeRollPitch
 10041 ;;		_fastatan2
 10042 ;;		_rollPid
 10043 ;;		_kalmanUpdate
 10044 ;;		_printf
 10045 ;;		___ftsub
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text52
 10050  0025EC                     __ptext52:
 10051                           	opt stack 0
 10052  0025EC                     ___ftadd:
 10053                           	opt stack 23
 10054                           
 10055                           ;incstack = 0
 10056  0025EC  C0CA  F0CE         	movff	___ftadd@f1+2,??___ftadd
 10057  0025F0  0100               	movlb	0	; () banked
 10058  0025F2  6BCF               	clrf	(??___ftadd+1)& (0+255),b
 10059  0025F4  6BD0               	clrf	(??___ftadd+2)& (0+255),b
 10060  0025F6  0100               	movlb	0	; () banked
 10061  0025F8  35C9               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10062  0025FA  0100               	movlb	0	; () banked
 10063  0025FC  37CE               	rlcf	??___ftadd& (0+255),f,b
 10064  0025FE  E301               	bnc	u4121
 10065  002600  81CF               	bsf	(??___ftadd+1)& (0+255),0,b
 10066  002602                     u4121:
 10067  002602  0100               	movlb	0	; () banked
 10068  002604  51CE               	movf	??___ftadd& (0+255),w,b
 10069  002606  0100               	movlb	0	; () banked
 10070  002608  6FD3               	movwf	___ftadd@exp1& (0+255),b
 10071  00260A  C0CD  F0CE         	movff	___ftadd@f2+2,??___ftadd
 10072  00260E  0100               	movlb	0	; () banked
 10073  002610  6BCF               	clrf	(??___ftadd+1)& (0+255),b
 10074  002612  6BD0               	clrf	(??___ftadd+2)& (0+255),b
 10075  002614  0100               	movlb	0	; () banked
 10076  002616  35CC               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10077  002618  0100               	movlb	0	; () banked
 10078  00261A  37CE               	rlcf	??___ftadd& (0+255),f,b
 10079  00261C  E301               	bnc	u4131
 10080  00261E  81CF               	bsf	(??___ftadd+1)& (0+255),0,b
 10081  002620                     u4131:
 10082  002620  0100               	movlb	0	; () banked
 10083  002622  51CE               	movf	??___ftadd& (0+255),w,b
 10084  002624  0100               	movlb	0	; () banked
 10085  002626  6FD2               	movwf	___ftadd@exp2& (0+255),b
 10086                           
 10087                           ; BSR set to: 0
 10088  002628  0100               	movlb	0	; () banked
 10089  00262A  51D3               	movf	___ftadd@exp1& (0+255),w,b
 10090  00262C  0100               	movlb	0	; () banked
 10091  00262E  B4D8               	btfsc	status,2,c
 10092  002630  D011               	goto	l1381
 10093                           
 10094                           ; BSR set to: 0
 10095  002632  0100               	movlb	0	; () banked
 10096  002634  51D2               	movf	___ftadd@exp2& (0+255),w,b
 10097  002636  0100               	movlb	0	; () banked
 10098  002638  5DD3               	subwf	___ftadd@exp1& (0+255),w,b
 10099  00263A  B0D8               	btfsc	status,0,c
 10100  00263C  D012               	goto	l5067
 10101                           
 10102                           ; BSR set to: 0
 10103  00263E  0100               	movlb	0	; () banked
 10104  002640  51D3               	movf	___ftadd@exp1& (0+255),w,b
 10105  002642  0800               	sublw	0
 10106  002644  0100               	movlb	0	; () banked
 10107  002646  25D2               	addwf	___ftadd@exp2& (0+255),w,b
 10108  002648  0100               	movlb	0	; () banked
 10109  00264A  6FCE               	movwf	??___ftadd& (0+255),b
 10110  00264C  0E18               	movlw	24
 10111  00264E  0100               	movlb	0	; () banked
 10112  002650  65CE               	cpfsgt	??___ftadd& (0+255),b
 10113  002652  D007               	goto	l5067
 10114  002654                     l1381:
 10115                           
 10116                           ; BSR set to: 0
 10117  002654  C0CB  F0C8         	movff	___ftadd@f2,?___ftadd
 10118  002658  C0CC  F0C9         	movff	___ftadd@f2+1,?___ftadd+1
 10119  00265C  C0CD  F0CA         	movff	___ftadd@f2+2,?___ftadd+2
 10120  002660  0012               	return	
 10121  002662                     l5067:
 10122                           
 10123                           ; BSR set to: 0
 10124  002662  0100               	movlb	0	; () banked
 10125  002664  51D2               	movf	___ftadd@exp2& (0+255),w,b
 10126  002666  0100               	movlb	0	; () banked
 10127  002668  B4D8               	btfsc	status,2,c
 10128  00266A  D011               	goto	l1385
 10129                           
 10130                           ; BSR set to: 0
 10131  00266C  0100               	movlb	0	; () banked
 10132  00266E  51D3               	movf	___ftadd@exp1& (0+255),w,b
 10133  002670  0100               	movlb	0	; () banked
 10134  002672  5DD2               	subwf	___ftadd@exp2& (0+255),w,b
 10135  002674  B0D8               	btfsc	status,0,c
 10136  002676  D012               	goto	l5073
 10137                           
 10138                           ; BSR set to: 0
 10139  002678  0100               	movlb	0	; () banked
 10140  00267A  51D2               	movf	___ftadd@exp2& (0+255),w,b
 10141  00267C  0800               	sublw	0
 10142  00267E  0100               	movlb	0	; () banked
 10143  002680  25D3               	addwf	___ftadd@exp1& (0+255),w,b
 10144  002682  0100               	movlb	0	; () banked
 10145  002684  6FCE               	movwf	??___ftadd& (0+255),b
 10146  002686  0E18               	movlw	24
 10147  002688  0100               	movlb	0	; () banked
 10148  00268A  65CE               	cpfsgt	??___ftadd& (0+255),b
 10149  00268C  D007               	goto	l5073
 10150  00268E                     l1385:
 10151                           
 10152                           ; BSR set to: 0
 10153  00268E  C0C8  F0C8         	movff	___ftadd@f1,?___ftadd
 10154  002692  C0C9  F0C9         	movff	___ftadd@f1+1,?___ftadd+1
 10155  002696  C0CA  F0CA         	movff	___ftadd@f1+2,?___ftadd+2
 10156  00269A  0012               	return	
 10157  00269C                     l5073:
 10158                           
 10159                           ; BSR set to: 0
 10160  00269C  0E06               	movlw	6
 10161  00269E  0100               	movlb	0	; () banked
 10162  0026A0  6FD1               	movwf	___ftadd@sign& (0+255),b
 10163                           
 10164                           ; BSR set to: 0
 10165  0026A2  0100               	movlb	0	; () banked
 10166  0026A4  AFCA               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10167  0026A6  D002               	goto	l5079
 10168                           
 10169                           ; BSR set to: 0
 10170  0026A8  0100               	movlb	0	; () banked
 10171  0026AA  8FD1               	bsf	___ftadd@sign& (0+255),7,b
 10172  0026AC                     l5079:
 10173                           
 10174                           ; BSR set to: 0
 10175  0026AC  0100               	movlb	0	; () banked
 10176  0026AE  AFCD               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10177  0026B0  D002               	goto	l1387
 10178                           
 10179                           ; BSR set to: 0
 10180  0026B2  0100               	movlb	0	; () banked
 10181  0026B4  8DD1               	bsf	___ftadd@sign& (0+255),6,b
 10182  0026B6                     l1387:
 10183                           
 10184                           ; BSR set to: 0
 10185  0026B6  0100               	movlb	0	; () banked
 10186  0026B8  8FC9               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10187                           
 10188                           ; BSR set to: 0
 10189  0026BA  0EFF               	movlw	255
 10190  0026BC  0100               	movlb	0	; () banked
 10191  0026BE  17C8               	andwf	___ftadd@f1& (0+255),f,b
 10192  0026C0  0EFF               	movlw	255
 10193  0026C2  0100               	movlb	0	; () banked
 10194  0026C4  17C9               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10195  0026C6  0E00               	movlw	0
 10196  0026C8  0100               	movlb	0	; () banked
 10197  0026CA  17CA               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10198  0026CC  0100               	movlb	0	; () banked
 10199  0026CE  8FCC               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10200                           
 10201                           ; BSR set to: 0
 10202  0026D0  0EFF               	movlw	255
 10203  0026D2  0100               	movlb	0	; () banked
 10204  0026D4  17CB               	andwf	___ftadd@f2& (0+255),f,b
 10205  0026D6  0EFF               	movlw	255
 10206  0026D8  0100               	movlb	0	; () banked
 10207  0026DA  17CC               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10208  0026DC  0E00               	movlw	0
 10209  0026DE  0100               	movlb	0	; () banked
 10210  0026E0  17CD               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10211                           
 10212                           ; BSR set to: 0
 10213  0026E2  0100               	movlb	0	; () banked
 10214  0026E4  51D2               	movf	___ftadd@exp2& (0+255),w,b
 10215  0026E6  0100               	movlb	0	; () banked
 10216  0026E8  5DD3               	subwf	___ftadd@exp1& (0+255),w,b
 10217  0026EA  B0D8               	btfsc	status,0,c
 10218  0026EC  D025               	goto	l5099
 10219  0026EE                     l5089:
 10220                           
 10221                           ; BSR set to: 0
 10222  0026EE  0100               	movlb	0	; () banked
 10223  0026F0  90D8               	bcf	status,0,c
 10224  0026F2  37CB               	rlcf	___ftadd@f2& (0+255),f,b
 10225  0026F4  37CC               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10226  0026F6  37CD               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10227  0026F8  0100               	movlb	0	; () banked
 10228  0026FA  07D2               	decf	___ftadd@exp2& (0+255),f,b
 10229                           
 10230                           ; BSR set to: 0
 10231  0026FC  0100               	movlb	0	; () banked
 10232  0026FE  51D3               	movf	___ftadd@exp1& (0+255),w,b
 10233  002700  0100               	movlb	0	; () banked
 10234  002702  19D2               	xorwf	___ftadd@exp2& (0+255),w,b
 10235  002704  B4D8               	btfsc	status,2,c
 10236  002706  D011               	goto	l5097
 10237                           
 10238                           ; BSR set to: 0
 10239  002708  0100               	movlb	0	; () banked
 10240  00270A  07D1               	decf	___ftadd@sign& (0+255),f,b
 10241  00270C  C0D1  F0CE         	movff	___ftadd@sign,??___ftadd
 10242  002710  0E07               	movlw	7
 10243  002712  0100               	movlb	0	; () banked
 10244  002714  17CE               	andwf	??___ftadd& (0+255),f,b
 10245  002716  B4D8               	btfsc	status,2,c
 10246  002718  D008               	goto	l5097
 10247  00271A  D7E9               	goto	l5089
 10248  00271C                     l5095:
 10249                           
 10250                           ; BSR set to: 0
 10251  00271C  0100               	movlb	0	; () banked
 10252  00271E  90D8               	bcf	status,0,c
 10253  002720  33CA               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10254  002722  33C9               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10255  002724  33C8               	rrcf	___ftadd@f1& (0+255),f,b
 10256  002726  0100               	movlb	0	; () banked
 10257  002728  2BD3               	incf	___ftadd@exp1& (0+255),f,b
 10258  00272A                     l5097:
 10259                           
 10260                           ; BSR set to: 0
 10261  00272A  0100               	movlb	0	; () banked
 10262  00272C  51D2               	movf	___ftadd@exp2& (0+255),w,b
 10263  00272E  0100               	movlb	0	; () banked
 10264  002730  19D3               	xorwf	___ftadd@exp1& (0+255),w,b
 10265  002732  B4D8               	btfsc	status,2,c
 10266  002734  D02B               	goto	l1396
 10267  002736  D7F2               	goto	l5095
 10268  002738                     l5099:
 10269                           
 10270                           ; BSR set to: 0
 10271  002738  0100               	movlb	0	; () banked
 10272  00273A  51D3               	movf	___ftadd@exp1& (0+255),w,b
 10273  00273C  0100               	movlb	0	; () banked
 10274  00273E  5DD2               	subwf	___ftadd@exp2& (0+255),w,b
 10275  002740  B0D8               	btfsc	status,0,c
 10276  002742  D024               	goto	l1396
 10277  002744                     l5101:
 10278                           
 10279                           ; BSR set to: 0
 10280  002744  0100               	movlb	0	; () banked
 10281  002746  90D8               	bcf	status,0,c
 10282  002748  37C8               	rlcf	___ftadd@f1& (0+255),f,b
 10283  00274A  37C9               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10284  00274C  37CA               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10285  00274E  0100               	movlb	0	; () banked
 10286  002750  07D3               	decf	___ftadd@exp1& (0+255),f,b
 10287                           
 10288                           ; BSR set to: 0
 10289  002752  0100               	movlb	0	; () banked
 10290  002754  51D3               	movf	___ftadd@exp1& (0+255),w,b
 10291  002756  0100               	movlb	0	; () banked
 10292  002758  19D2               	xorwf	___ftadd@exp2& (0+255),w,b
 10293  00275A  B4D8               	btfsc	status,2,c
 10294  00275C  D011               	goto	l5109
 10295                           
 10296                           ; BSR set to: 0
 10297  00275E  0100               	movlb	0	; () banked
 10298  002760  07D1               	decf	___ftadd@sign& (0+255),f,b
 10299  002762  C0D1  F0CE         	movff	___ftadd@sign,??___ftadd
 10300  002766  0E07               	movlw	7
 10301  002768  0100               	movlb	0	; () banked
 10302  00276A  17CE               	andwf	??___ftadd& (0+255),f,b
 10303  00276C  B4D8               	btfsc	status,2,c
 10304  00276E  D008               	goto	l5109
 10305  002770  D7E9               	goto	l5101
 10306  002772                     l5107:
 10307                           
 10308                           ; BSR set to: 0
 10309  002772  0100               	movlb	0	; () banked
 10310  002774  90D8               	bcf	status,0,c
 10311  002776  33CD               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10312  002778  33CC               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10313  00277A  33CB               	rrcf	___ftadd@f2& (0+255),f,b
 10314  00277C  0100               	movlb	0	; () banked
 10315  00277E  2BD2               	incf	___ftadd@exp2& (0+255),f,b
 10316  002780                     l5109:
 10317                           
 10318                           ; BSR set to: 0
 10319  002780  0100               	movlb	0	; () banked
 10320  002782  51D2               	movf	___ftadd@exp2& (0+255),w,b
 10321  002784  0100               	movlb	0	; () banked
 10322  002786  19D3               	xorwf	___ftadd@exp1& (0+255),w,b
 10323  002788  A4D8               	btfss	status,2,c
 10324  00278A  D7F3               	goto	l5107
 10325  00278C                     l1396:
 10326                           
 10327                           ; BSR set to: 0
 10328  00278C  0100               	movlb	0	; () banked
 10329  00278E  AFD1               	btfss	___ftadd@sign& (0+255),7,b
 10330  002790  D012               	goto	l1405
 10331                           
 10332                           ; BSR set to: 0
 10333  002792  0EFF               	movlw	255
 10334  002794  0100               	movlb	0	; () banked
 10335  002796  1BC8               	xorwf	___ftadd@f1& (0+255),f,b
 10336  002798  0EFF               	movlw	255
 10337  00279A  0100               	movlb	0	; () banked
 10338  00279C  1BC9               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10339  00279E  0EFF               	movlw	255
 10340  0027A0  0100               	movlb	0	; () banked
 10341  0027A2  1BCA               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10342  0027A4  0E01               	movlw	1
 10343  0027A6  0100               	movlb	0	; () banked
 10344  0027A8  27C8               	addwf	___ftadd@f1& (0+255),f,b
 10345  0027AA  0E00               	movlw	0
 10346  0027AC  0100               	movlb	0	; () banked
 10347  0027AE  23C9               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10348  0027B0  0E00               	movlw	0
 10349  0027B2  0100               	movlb	0	; () banked
 10350  0027B4  23CA               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10351  0027B6                     l1405:
 10352                           
 10353                           ; BSR set to: 0
 10354  0027B6  0100               	movlb	0	; () banked
 10355  0027B8  ADD1               	btfss	___ftadd@sign& (0+255),6,b
 10356  0027BA  D012               	goto	l5115
 10357                           
 10358                           ; BSR set to: 0
 10359  0027BC  0EFF               	movlw	255
 10360  0027BE  0100               	movlb	0	; () banked
 10361  0027C0  1BCB               	xorwf	___ftadd@f2& (0+255),f,b
 10362  0027C2  0EFF               	movlw	255
 10363  0027C4  0100               	movlb	0	; () banked
 10364  0027C6  1BCC               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10365  0027C8  0EFF               	movlw	255
 10366  0027CA  0100               	movlb	0	; () banked
 10367  0027CC  1BCD               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10368  0027CE  0E01               	movlw	1
 10369  0027D0  0100               	movlb	0	; () banked
 10370  0027D2  27CB               	addwf	___ftadd@f2& (0+255),f,b
 10371  0027D4  0E00               	movlw	0
 10372  0027D6  0100               	movlb	0	; () banked
 10373  0027D8  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10374  0027DA  0E00               	movlw	0
 10375  0027DC  0100               	movlb	0	; () banked
 10376  0027DE  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10377  0027E0                     l5115:
 10378                           
 10379                           ; BSR set to: 0
 10380  0027E0  0E00               	movlw	0
 10381  0027E2  0100               	movlb	0	; () banked
 10382  0027E4  6FD1               	movwf	___ftadd@sign& (0+255),b
 10383                           
 10384                           ; BSR set to: 0
 10385  0027E6  0100               	movlb	0	; () banked
 10386  0027E8  51C8               	movf	___ftadd@f1& (0+255),w,b
 10387  0027EA  0100               	movlb	0	; () banked
 10388  0027EC  27CB               	addwf	___ftadd@f2& (0+255),f,b
 10389  0027EE  0100               	movlb	0	; () banked
 10390  0027F0  51C9               	movf	(___ftadd@f1+1)& (0+255),w,b
 10391  0027F2  0100               	movlb	0	; () banked
 10392  0027F4  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10393  0027F6  0100               	movlb	0	; () banked
 10394  0027F8  51CA               	movf	(___ftadd@f1+2)& (0+255),w,b
 10395  0027FA  0100               	movlb	0	; () banked
 10396  0027FC  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10397                           
 10398                           ; BSR set to: 0
 10399  0027FE  0100               	movlb	0	; () banked
 10400  002800  AFCD               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10401  002802  D015               	goto	l5125
 10402                           
 10403                           ; BSR set to: 0
 10404  002804  0EFF               	movlw	255
 10405  002806  0100               	movlb	0	; () banked
 10406  002808  1BCB               	xorwf	___ftadd@f2& (0+255),f,b
 10407  00280A  0EFF               	movlw	255
 10408  00280C  0100               	movlb	0	; () banked
 10409  00280E  1BCC               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10410  002810  0EFF               	movlw	255
 10411  002812  0100               	movlb	0	; () banked
 10412  002814  1BCD               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10413  002816  0E01               	movlw	1
 10414  002818  0100               	movlb	0	; () banked
 10415  00281A  27CB               	addwf	___ftadd@f2& (0+255),f,b
 10416  00281C  0E00               	movlw	0
 10417  00281E  0100               	movlb	0	; () banked
 10418  002820  23CC               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10419  002822  0E00               	movlw	0
 10420  002824  0100               	movlb	0	; () banked
 10421  002826  23CD               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10422                           
 10423                           ; BSR set to: 0
 10424  002828  0E01               	movlw	1
 10425  00282A  0100               	movlb	0	; () banked
 10426  00282C  6FD1               	movwf	___ftadd@sign& (0+255),b
 10427  00282E                     l5125:
 10428                           
 10429                           ; BSR set to: 0
 10430  00282E  C0CB  F013         	movff	___ftadd@f2,___ftpack@arg
 10431  002832  C0CC  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
 10432  002836  C0CD  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
 10433  00283A  C0D3  F016         	movff	___ftadd@exp1,___ftpack@exp
 10434  00283E  C0D1  F017         	movff	___ftadd@sign,___ftpack@sign
 10435  002842  EC84  F01D         	call	___ftpack	;wreg free
 10436  002846  C013  F0C8         	movff	?___ftpack,?___ftadd
 10437  00284A  C014  F0C9         	movff	?___ftpack+1,?___ftadd+1
 10438  00284E  C015  F0CA         	movff	?___ftpack+2,?___ftadd+2
 10439  002852  0012               	return	
 10440  002854                     __end_of___ftadd:
 10441                           	opt stack 0
 10442                           tblptru	equ	0xFF8
 10443                           tblptrh	equ	0xFF7
 10444                           tblptrl	equ	0xFF6
 10445                           tablat	equ	0xFF5
 10446                           prodh	equ	0xFF4
 10447                           prodl	equ	0xFF3
 10448                           intcon	equ	0xFF2
 10449                           postinc0	equ	0xFEE
 10450                           wreg	equ	0xFE8
 10451                           indf2	equ	0xFDF
 10452                           postinc2	equ	0xFDE
 10453                           postdec2	equ	0xFDD
 10454                           fsr2h	equ	0xFDA
 10455                           fsr2l	equ	0xFD9
 10456                           status	equ	0xFD8
 10457                           
 10458 ;; *************** function ___ftpack *****************
 10459 ;; Defined at:
 10460 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;  arg             3   18[COMRAM] unsigned um
 10463 ;;  exp             1   21[COMRAM] unsigned char 
 10464 ;;  sign            1   22[COMRAM] unsigned char 
 10465 ;; Auto vars:     Size  Location     Type
 10466 ;;		None
 10467 ;; Return value:  Size  Location     Type
 10468 ;;                  3   18[COMRAM] float 
 10469 ;; Registers used:
 10470 ;;		wreg, status,2, status,0
 10471 ;; Tracked objects:
 10472 ;;		On entry : 0/0
 10473 ;;		On exit  : 0/0
 10474 ;;		Unchanged: 0/0
 10475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10476 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10478 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10479 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10480 ;;Total ram usage:        8 bytes
 10481 ;; Hardware stack levels used:    1
 10482 ;; Hardware stack levels required when called:    4
 10483 ;; This function calls:
 10484 ;;		Nothing
 10485 ;; This function is called by:
 10486 ;;		___awtoft
 10487 ;;		___ftadd
 10488 ;;		___ftdiv
 10489 ;;		___ftmul
 10490 ;;		___lltoft
 10491 ;;		___lwtoft
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text53
 10496  003B08                     __ptext53:
 10497                           	opt stack 0
 10498  003B08                     ___ftpack:
 10499                           	opt stack 23
 10500                           
 10501                           ;incstack = 0
 10502  003B08  5016               	movf	___ftpack@exp,w,c
 10503  003B0A  B4D8               	btfsc	status,2,c
 10504  003B0C  D005               	goto	l4933
 10505  003B0E  5013               	movf	___ftpack@arg,w,c
 10506  003B10  1014               	iorwf	___ftpack@arg+1,w,c
 10507  003B12  1015               	iorwf	___ftpack@arg+2,w,c
 10508  003B14  A4D8               	btfss	status,2,c
 10509  003B16  D00C               	goto	l4939
 10510  003B18                     l4933:
 10511  003B18  0E00               	movlw	0
 10512  003B1A  6E13               	movwf	?___ftpack,c
 10513  003B1C  0E00               	movlw	0
 10514  003B1E  6E14               	movwf	?___ftpack+1,c
 10515  003B20  0E00               	movlw	0
 10516  003B22  6E15               	movwf	?___ftpack+2,c
 10517  003B24  0012               	return	
 10518  003B26                     l4937:
 10519  003B26  2A16               	incf	___ftpack@exp,f,c
 10520  003B28  90D8               	bcf	status,0,c
 10521  003B2A  3215               	rrcf	___ftpack@arg+2,f,c
 10522  003B2C  3214               	rrcf	___ftpack@arg+1,f,c
 10523  003B2E  3213               	rrcf	___ftpack@arg,f,c
 10524  003B30                     l4939:
 10525  003B30  0E00               	movlw	0
 10526  003B32  1413               	andwf	___ftpack@arg,w,c
 10527  003B34  6E18               	movwf	??___ftpack& (0+255),c
 10528  003B36  0E00               	movlw	0
 10529  003B38  1414               	andwf	___ftpack@arg+1,w,c
 10530  003B3A  6E19               	movwf	(??___ftpack+1)& (0+255),c
 10531  003B3C  0EFE               	movlw	254
 10532  003B3E  1415               	andwf	___ftpack@arg+2,w,c
 10533  003B40  6E1A               	movwf	(??___ftpack+2)& (0+255),c
 10534  003B42  5018               	movf	??___ftpack,w,c
 10535  003B44  1019               	iorwf	??___ftpack+1,w,c
 10536  003B46  101A               	iorwf	??___ftpack+2,w,c
 10537  003B48  B4D8               	btfsc	status,2,c
 10538  003B4A  D00C               	goto	l4945
 10539  003B4C  D7EC               	goto	l4937
 10540  003B4E                     l4941:
 10541  003B4E  2A16               	incf	___ftpack@exp,f,c
 10542  003B50  0E01               	movlw	1
 10543  003B52  2613               	addwf	___ftpack@arg,f,c
 10544  003B54  0E00               	movlw	0
 10545  003B56  2214               	addwfc	___ftpack@arg+1,f,c
 10546  003B58  0E00               	movlw	0
 10547  003B5A  2215               	addwfc	___ftpack@arg+2,f,c
 10548  003B5C  90D8               	bcf	status,0,c
 10549  003B5E  3215               	rrcf	___ftpack@arg+2,f,c
 10550  003B60  3214               	rrcf	___ftpack@arg+1,f,c
 10551  003B62  3213               	rrcf	___ftpack@arg,f,c
 10552  003B64                     l4945:
 10553  003B64  0E00               	movlw	0
 10554  003B66  1413               	andwf	___ftpack@arg,w,c
 10555  003B68  6E18               	movwf	??___ftpack& (0+255),c
 10556  003B6A  0E00               	movlw	0
 10557  003B6C  1414               	andwf	___ftpack@arg+1,w,c
 10558  003B6E  6E19               	movwf	(??___ftpack+1)& (0+255),c
 10559  003B70  0EFF               	movlw	255
 10560  003B72  1415               	andwf	___ftpack@arg+2,w,c
 10561  003B74  6E1A               	movwf	(??___ftpack+2)& (0+255),c
 10562  003B76  5018               	movf	??___ftpack,w,c
 10563  003B78  1019               	iorwf	??___ftpack+1,w,c
 10564  003B7A  101A               	iorwf	??___ftpack+2,w,c
 10565  003B7C  B4D8               	btfsc	status,2,c
 10566  003B7E  D006               	goto	l4949
 10567  003B80  D7E6               	goto	l4941
 10568  003B82                     l4947:
 10569  003B82  0616               	decf	___ftpack@exp,f,c
 10570  003B84  90D8               	bcf	status,0,c
 10571  003B86  3613               	rlcf	___ftpack@arg,f,c
 10572  003B88  3614               	rlcf	___ftpack@arg+1,f,c
 10573  003B8A  3615               	rlcf	___ftpack@arg+2,f,c
 10574  003B8C                     l4949:
 10575  003B8C  BE14               	btfsc	___ftpack@arg+1,7,c
 10576  003B8E  D003               	goto	l1358
 10577  003B90  0E02               	movlw	2
 10578  003B92  6016               	cpfslt	___ftpack@exp,c
 10579  003B94  D7F6               	goto	l4947
 10580  003B96                     l1358:
 10581  003B96  A016               	btfss	___ftpack@exp,0,c
 10582  003B98  9E14               	bcf	___ftpack@arg+1,7,c
 10583  003B9A  90D8               	bcf	status,0,c
 10584  003B9C  3216               	rrcf	___ftpack@exp,f,c
 10585  003B9E  5016               	movf	___ftpack@exp,w,c
 10586  003BA0  1215               	iorwf	___ftpack@arg+2,f,c
 10587  003BA2  5017               	movf	___ftpack@sign,w,c
 10588  003BA4  A4D8               	btfss	status,2,c
 10589  003BA6  8E15               	bsf	___ftpack@arg+2,7,c
 10590  003BA8  C013  F013         	movff	___ftpack@arg,?___ftpack
 10591  003BAC  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
 10592  003BB0  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
 10593  003BB4  0012               	return	
 10594  003BB6                     __end_of___ftpack:
 10595                           	opt stack 0
 10596                           tblptru	equ	0xFF8
 10597                           tblptrh	equ	0xFF7
 10598                           tblptrl	equ	0xFF6
 10599                           tablat	equ	0xFF5
 10600                           prodh	equ	0xFF4
 10601                           prodl	equ	0xFF3
 10602                           intcon	equ	0xFF2
 10603                           postinc0	equ	0xFEE
 10604                           wreg	equ	0xFE8
 10605                           indf2	equ	0xFDF
 10606                           postinc2	equ	0xFDE
 10607                           postdec2	equ	0xFDD
 10608                           fsr2h	equ	0xFDA
 10609                           fsr2l	equ	0xFD9
 10610                           status	equ	0xFD8
 10611                           
 10612 ;; *************** function _TMR0_Write16bitTimer *****************
 10613 ;; Defined at:
 10614 ;;		line 116 in file "mcc_generated_files/tmr0.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;  timerVal        2   18[COMRAM] unsigned int 
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;		None
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  1    wreg      void 
 10621 ;; Registers used:
 10622 ;;		wreg, status,2
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10628 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10631 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10632 ;;Total ram usage:        2 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:    4
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_computeRollPitch
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text54
 10643  004544                     __ptext54:
 10644                           	opt stack 0
 10645  004544                     _TMR0_Write16bitTimer:
 10646                           	opt stack 25
 10647                           
 10648                           ;tmr0.c: 119: TMR0H = timerVal >> 8;
 10649                           
 10650                           ;incstack = 0
 10651  004544  5014               	movf	TMR0_Write16bitTimer@timerVal+1,w,c
 10652  004546  6ED4               	movwf	4052,c	;volatile
 10653                           
 10654                           ;tmr0.c: 120: TMR0L = (uint8_t) timerVal;
 10655  004548  C013  FFD3         	movff	TMR0_Write16bitTimer@timerVal,4051	;volatile
 10656  00454C  0012               	return		;funcret
 10657  00454E                     __end_of_TMR0_Write16bitTimer:
 10658                           	opt stack 0
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           postinc0	equ	0xFEE
 10667                           wreg	equ	0xFE8
 10668                           indf2	equ	0xFDF
 10669                           postinc2	equ	0xFDE
 10670                           postdec2	equ	0xFDD
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function _TMR0_StopTimer *****************
 10676 ;; Defined at:
 10677 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;		None
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;		None
 10682 ;; Return value:  Size  Location     Type
 10683 ;;                  1    wreg      void 
 10684 ;; Registers used:
 10685 ;;		None
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10695 ;;Total ram usage:        0 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; Hardware stack levels required when called:    4
 10698 ;; This function calls:
 10699 ;;		Nothing
 10700 ;; This function is called by:
 10701 ;;		_computeRollPitch
 10702 ;; This function uses a non-reentrant model
 10703 ;;
 10704                           
 10705                           	psect	text55
 10706  00455E                     __ptext55:
 10707                           	opt stack 0
 10708  00455E                     _TMR0_StopTimer:
 10709                           	opt stack 25
 10710                           
 10711                           ;tmr0.c: 100: T0CON0bits.T0EN = 0;
 10712                           
 10713                           ;incstack = 0
 10714  00455E  9ED5               	bcf	4053,7,c	;volatile
 10715  004560  0012               	return		;funcret
 10716  004562                     __end_of_TMR0_StopTimer:
 10717                           	opt stack 0
 10718                           tblptru	equ	0xFF8
 10719                           tblptrh	equ	0xFF7
 10720                           tblptrl	equ	0xFF6
 10721                           tablat	equ	0xFF5
 10722                           prodh	equ	0xFF4
 10723                           prodl	equ	0xFF3
 10724                           intcon	equ	0xFF2
 10725                           postinc0	equ	0xFEE
 10726                           wreg	equ	0xFE8
 10727                           indf2	equ	0xFDF
 10728                           postinc2	equ	0xFDE
 10729                           postdec2	equ	0xFDD
 10730                           fsr2h	equ	0xFDA
 10731                           fsr2l	equ	0xFD9
 10732                           status	equ	0xFD8
 10733                           
 10734 ;; *************** function _TMR0_Read16bitTimer *****************
 10735 ;; Defined at:
 10736 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 10737 ;; Parameters:    Size  Location     Type
 10738 ;;		None
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;  readVal         2   22[COMRAM] unsigned int 
 10741 ;;  readValHigh     1   25[COMRAM] unsigned char 
 10742 ;;  readValLow      1   24[COMRAM] unsigned char 
 10743 ;; Return value:  Size  Location     Type
 10744 ;;                  2   18[COMRAM] unsigned int 
 10745 ;; Registers used:
 10746 ;;		wreg, status,2
 10747 ;; Tracked objects:
 10748 ;;		On entry : 0/0
 10749 ;;		On exit  : 0/0
 10750 ;;		Unchanged: 0/0
 10751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10752 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10753 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10754 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10755 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10756 ;;Total ram usage:        8 bytes
 10757 ;; Hardware stack levels used:    1
 10758 ;; Hardware stack levels required when called:    4
 10759 ;; This function calls:
 10760 ;;		Nothing
 10761 ;; This function is called by:
 10762 ;;		_computeRollPitch
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           	psect	text56
 10767  00441E                     __ptext56:
 10768                           	opt stack 0
 10769  00441E                     _TMR0_Read16bitTimer:
 10770                           	opt stack 25
 10771                           
 10772                           ;tmr0.c: 105: uint16_t readVal;
 10773                           ;tmr0.c: 106: uint8_t readValLow;
 10774                           ;tmr0.c: 107: uint8_t readValHigh;
 10775                           ;tmr0.c: 109: readValLow = TMR0L;
 10776                           
 10777                           ;incstack = 0
 10778  00441E  CFD3 F019          	movff	4051,TMR0_Read16bitTimer@readValLow	;volatile
 10779                           
 10780                           ;tmr0.c: 110: readValHigh = TMR0H;
 10781  004422  CFD4 F01A          	movff	4052,TMR0_Read16bitTimer@readValHigh	;volatile
 10782                           
 10783                           ;tmr0.c: 111: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 10784  004426  501A               	movf	TMR0_Read16bitTimer@readValHigh,w,c
 10785  004428  6E15               	movwf	??_TMR0_Read16bitTimer& (0+255),c
 10786  00442A  5019               	movf	TMR0_Read16bitTimer@readValLow,w,c
 10787  00442C  6E17               	movwf	TMR0_Read16bitTimer@readVal,c
 10788  00442E  C015  F018         	movff	??_TMR0_Read16bitTimer,TMR0_Read16bitTimer@readVal+1
 10789                           
 10790                           ;tmr0.c: 113: return readVal;
 10791  004432  C017  F013         	movff	TMR0_Read16bitTimer@readVal,?_TMR0_Read16bitTimer
 10792  004436  C018  F014         	movff	TMR0_Read16bitTimer@readVal+1,?_TMR0_Read16bitTimer+1
 10793  00443A  0012               	return	
 10794  00443C                     __end_of_TMR0_Read16bitTimer:
 10795                           	opt stack 0
 10796                           tblptru	equ	0xFF8
 10797                           tblptrh	equ	0xFF7
 10798                           tblptrl	equ	0xFF6
 10799                           tablat	equ	0xFF5
 10800                           prodh	equ	0xFF4
 10801                           prodl	equ	0xFF3
 10802                           intcon	equ	0xFF2
 10803                           postinc0	equ	0xFEE
 10804                           wreg	equ	0xFE8
 10805                           indf2	equ	0xFDF
 10806                           postinc2	equ	0xFDE
 10807                           postdec2	equ	0xFDD
 10808                           fsr2h	equ	0xFDA
 10809                           fsr2l	equ	0xFD9
 10810                           status	equ	0xFD8
 10811                           
 10812 ;; *************** function _SYSTEM_Initialize *****************
 10813 ;; Defined at:
 10814 ;;		line 115 in file "mcc_generated_files/mcc.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;		None
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;		None
 10819 ;; Return value:  Size  Location     Type
 10820 ;;                  1    wreg      void 
 10821 ;; Registers used:
 10822 ;;		wreg, status,2, status,0, cstack
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10832 ;;Total ram usage:        0 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    6
 10835 ;; This function calls:
 10836 ;;		_EUSART1_Initialize
 10837 ;;		_I2C1_Initialize
 10838 ;;		_INTERRUPT_Initialize
 10839 ;;		_OSCILLATOR_Initialize
 10840 ;;		_PIN_MANAGER_Initialize
 10841 ;;		_PWM1_Initialize
 10842 ;;		_PWM2_Initialize
 10843 ;;		_PWM3_Initialize
 10844 ;;		_PWM4_Initialize
 10845 ;;		_TMR0_Initialize
 10846 ;;		_TMR2_Initialize
 10847 ;; This function is called by:
 10848 ;;		_main
 10849 ;; This function uses a non-reentrant model
 10850 ;;
 10851                           
 10852                           	psect	text57
 10853  00425E                     __ptext57:
 10854                           	opt stack 0
 10855  00425E                     _SYSTEM_Initialize:
 10856                           	opt stack 24
 10857                           
 10858                           ;mcc.c: 118: INTERRUPT_Initialize();
 10859                           
 10860                           ;incstack = 0
 10861  00425E  EC8D  F022         	call	_INTERRUPT_Initialize	;wreg free
 10862                           
 10863                           ;mcc.c: 119: PIN_MANAGER_Initialize();
 10864  004262  ECAE  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
 10865                           
 10866                           ;mcc.c: 120: OSCILLATOR_Initialize();
 10867  004266  ECD2  F021         	call	_OSCILLATOR_Initialize	;wreg free
 10868                           
 10869                           ;mcc.c: 121: I2C1_Initialize();
 10870  00426A  EC7C  F020         	call	_I2C1_Initialize	;wreg free
 10871                           
 10872                           ;mcc.c: 122: PWM1_Initialize();
 10873  00426E  EC3F  F022         	call	_PWM1_Initialize	;wreg free
 10874                           
 10875                           ;mcc.c: 123: PWM2_Initialize();
 10876  004272  EC34  F022         	call	_PWM2_Initialize	;wreg free
 10877                           
 10878                           ;mcc.c: 124: PWM4_Initialize();
 10879  004276  EC1E  F022         	call	_PWM4_Initialize	;wreg free
 10880                           
 10881                           ;mcc.c: 125: PWM3_Initialize();
 10882  00427A  EC29  F022         	call	_PWM3_Initialize	;wreg free
 10883                           
 10884                           ;mcc.c: 126: TMR2_Initialize();
 10885  00427E  EC98  F020         	call	_TMR2_Initialize	;wreg free
 10886                           
 10887                           ;mcc.c: 127: TMR0_Initialize();
 10888  004282  EC17  F021         	call	_TMR0_Initialize	;wreg free
 10889                           
 10890                           ;mcc.c: 128: EUSART1_Initialize();
 10891  004286  EC4A  F022         	call	_EUSART1_Initialize	;wreg free
 10892  00428A  0012               	return		;funcret
 10893  00428C                     __end_of_SYSTEM_Initialize:
 10894                           	opt stack 0
 10895                           tblptru	equ	0xFF8
 10896                           tblptrh	equ	0xFF7
 10897                           tblptrl	equ	0xFF6
 10898                           tablat	equ	0xFF5
 10899                           prodh	equ	0xFF4
 10900                           prodl	equ	0xFF3
 10901                           intcon	equ	0xFF2
 10902                           postinc0	equ	0xFEE
 10903                           wreg	equ	0xFE8
 10904                           indf2	equ	0xFDF
 10905                           postinc2	equ	0xFDE
 10906                           postdec2	equ	0xFDD
 10907                           fsr2h	equ	0xFDA
 10908                           fsr2l	equ	0xFD9
 10909                           status	equ	0xFD8
 10910                           
 10911 ;; *************** function _TMR2_Initialize *****************
 10912 ;; Defined at:
 10913 ;;		line 69 in file "mcc_generated_files/tmr2.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;		None
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;		None
 10918 ;; Return value:  Size  Location     Type
 10919 ;;                  1    wreg      void 
 10920 ;; Registers used:
 10921 ;;		wreg, status,2, status,0, cstack
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10931 ;;Total ram usage:        0 bytes
 10932 ;; Hardware stack levels used:    1
 10933 ;; Hardware stack levels required when called:    5
 10934 ;; This function calls:
 10935 ;;		_TMR2_SetInterruptHandler
 10936 ;;		_TMR2_Start
 10937 ;; This function is called by:
 10938 ;;		_SYSTEM_Initialize
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           	psect	text58
 10943  004130                     __ptext58:
 10944                           	opt stack 0
 10945  004130                     _TMR2_Initialize:
 10946                           	opt stack 24
 10947                           
 10948                           ;tmr2.c: 74: T2CON = 0x70;
 10949                           
 10950                           ;incstack = 0
 10951  004130  0E70               	movlw	112
 10952  004132  6EBD               	movwf	4029,c	;volatile
 10953                           
 10954                           ;tmr2.c: 77: T2CLKCON = 0x01;
 10955  004134  0E01               	movlw	1
 10956  004136  6EBF               	movwf	4031,c	;volatile
 10957                           
 10958                           ;tmr2.c: 80: T2HLT = 0x00;
 10959  004138  0E00               	movlw	0
 10960  00413A  6EBE               	movwf	4030,c	;volatile
 10961                           
 10962                           ;tmr2.c: 83: T2RST = 0x0A;
 10963  00413C  0E0A               	movlw	10
 10964  00413E  6EC0               	movwf	4032,c	;volatile
 10965                           
 10966                           ;tmr2.c: 86: T2PR = 0xE9;
 10967  004140  0EE9               	movlw	233
 10968  004142  6EBC               	movwf	4028,c	;volatile
 10969                           
 10970                           ;tmr2.c: 89: T2TMR = 0x00;
 10971  004144  0E00               	movlw	0
 10972  004146  6EBB               	movwf	4027,c	;volatile
 10973                           
 10974                           ;tmr2.c: 92: PIR4bits.TMR2IF = 0;
 10975  004148  010E               	movlb	14	; () banked
 10976  00414A  93CE               	bcf	206,1,b	;volatile
 10977                           
 10978                           ; BSR set to: 14
 10979                           ;tmr2.c: 95: PIE4bits.TMR2IE = 1;
 10980  00414C  010E               	movlb	14	; () banked
 10981  00414E  83C6               	bsf	198,1,b	;volatile
 10982                           
 10983                           ; BSR set to: 14
 10984                           ;tmr2.c: 98: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 10985  004150  0E62               	movlw	low _TMR2_DefaultInterruptHandler
 10986  004152  6E13               	movwf	TMR2_SetInterruptHandler@InterruptHandler,c
 10987  004154  0E3C               	movlw	high _TMR2_DefaultInterruptHandler
 10988  004156  6E14               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1,c
 10989  004158  0E00               	movlw	low (_TMR2_DefaultInterruptHandler shr (0+16))
 10990  00415A  6E15               	movwf	TMR2_SetInterruptHandler@InterruptHandler+2,c
 10991  00415C  EC80  F022         	call	_TMR2_SetInterruptHandler	;wreg free
 10992                           
 10993                           ;tmr2.c: 101: TMR2_Start();
 10994  004160  ECB1  F022         	call	_TMR2_Start	;wreg free
 10995  004164  0012               	return		;funcret
 10996  004166                     __end_of_TMR2_Initialize:
 10997                           	opt stack 0
 10998                           tblptru	equ	0xFF8
 10999                           tblptrh	equ	0xFF7
 11000                           tblptrl	equ	0xFF6
 11001                           tablat	equ	0xFF5
 11002                           prodh	equ	0xFF4
 11003                           prodl	equ	0xFF3
 11004                           intcon	equ	0xFF2
 11005                           postinc0	equ	0xFEE
 11006                           wreg	equ	0xFE8
 11007                           indf2	equ	0xFDF
 11008                           postinc2	equ	0xFDE
 11009                           postdec2	equ	0xFDD
 11010                           fsr2h	equ	0xFDA
 11011                           fsr2l	equ	0xFD9
 11012                           status	equ	0xFD8
 11013                           
 11014 ;; *************** function _TMR2_Start *****************
 11015 ;; Defined at:
 11016 ;;		line 116 in file "mcc_generated_files/tmr2.c"
 11017 ;; Parameters:    Size  Location     Type
 11018 ;;		None
 11019 ;; Auto vars:     Size  Location     Type
 11020 ;;		None
 11021 ;; Return value:  Size  Location     Type
 11022 ;;                  1    wreg      void 
 11023 ;; Registers used:
 11024 ;;		None
 11025 ;; Tracked objects:
 11026 ;;		On entry : 0/0
 11027 ;;		On exit  : 0/0
 11028 ;;		Unchanged: 0/0
 11029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11034 ;;Total ram usage:        0 bytes
 11035 ;; Hardware stack levels used:    1
 11036 ;; Hardware stack levels required when called:    4
 11037 ;; This function calls:
 11038 ;;		Nothing
 11039 ;; This function is called by:
 11040 ;;		_TMR2_Initialize
 11041 ;;		_TMR2_StartTimer
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045                           	psect	text59
 11046  004562                     __ptext59:
 11047                           	opt stack 0
 11048  004562                     _TMR2_Start:
 11049                           	opt stack 24
 11050                           
 11051                           ;tmr2.c: 119: T2CONbits.TMR2ON = 1;
 11052                           
 11053                           ;incstack = 0
 11054  004562  8EBD               	bsf	4029,7,c	;volatile
 11055  004564  0012               	return		;funcret
 11056  004566                     __end_of_TMR2_Start:
 11057                           	opt stack 0
 11058                           tblptru	equ	0xFF8
 11059                           tblptrh	equ	0xFF7
 11060                           tblptrl	equ	0xFF6
 11061                           tablat	equ	0xFF5
 11062                           prodh	equ	0xFF4
 11063                           prodl	equ	0xFF3
 11064                           intcon	equ	0xFF2
 11065                           postinc0	equ	0xFEE
 11066                           wreg	equ	0xFE8
 11067                           indf2	equ	0xFDF
 11068                           postinc2	equ	0xFDE
 11069                           postdec2	equ	0xFDD
 11070                           fsr2h	equ	0xFDA
 11071                           fsr2l	equ	0xFD9
 11072                           status	equ	0xFD8
 11073                           
 11074 ;; *************** function _TMR2_SetInterruptHandler *****************
 11075 ;; Defined at:
 11076 ;;		line 186 in file "mcc_generated_files/tmr2.c"
 11077 ;; Parameters:    Size  Location     Type
 11078 ;;  InterruptHan    3   18[COMRAM] PTR FTN()void 
 11079 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 11080 ;; Auto vars:     Size  Location     Type
 11081 ;;		None
 11082 ;; Return value:  Size  Location     Type
 11083 ;;                  1    wreg      void 
 11084 ;; Registers used:
 11085 ;;		wreg, status,2, status,0
 11086 ;; Tracked objects:
 11087 ;;		On entry : 0/0
 11088 ;;		On exit  : 0/0
 11089 ;;		Unchanged: 0/0
 11090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11091 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11094 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11095 ;;Total ram usage:        3 bytes
 11096 ;; Hardware stack levels used:    1
 11097 ;; Hardware stack levels required when called:    4
 11098 ;; This function calls:
 11099 ;;		Nothing
 11100 ;; This function is called by:
 11101 ;;		_TMR2_Initialize
 11102 ;; This function uses a non-reentrant model
 11103 ;;
 11104                           
 11105                           	psect	text60
 11106  004500                     __ptext60:
 11107                           	opt stack 0
 11108  004500                     _TMR2_SetInterruptHandler:
 11109                           	opt stack 24
 11110                           
 11111                           ;tmr2.c: 187: TMR2_InterruptHandler = InterruptHandler;
 11112                           
 11113                           ;incstack = 0
 11114  004500  C013  F039         	movff	TMR2_SetInterruptHandler@InterruptHandler,_TMR2_InterruptHandler
 11115  004504  C014  F03A         	movff	TMR2_SetInterruptHandler@InterruptHandler+1,_TMR2_InterruptHandler+1
 11116  004508  C015  F03B         	movff	TMR2_SetInterruptHandler@InterruptHandler+2,_TMR2_InterruptHandler+2
 11117  00450C  0012               	return		;funcret
 11118  00450E                     __end_of_TMR2_SetInterruptHandler:
 11119                           	opt stack 0
 11120                           tblptru	equ	0xFF8
 11121                           tblptrh	equ	0xFF7
 11122                           tblptrl	equ	0xFF6
 11123                           tablat	equ	0xFF5
 11124                           prodh	equ	0xFF4
 11125                           prodl	equ	0xFF3
 11126                           intcon	equ	0xFF2
 11127                           postinc0	equ	0xFEE
 11128                           wreg	equ	0xFE8
 11129                           indf2	equ	0xFDF
 11130                           postinc2	equ	0xFDE
 11131                           postdec2	equ	0xFDD
 11132                           fsr2h	equ	0xFDA
 11133                           fsr2l	equ	0xFD9
 11134                           status	equ	0xFD8
 11135                           
 11136 ;; *************** function _TMR0_Initialize *****************
 11137 ;; Defined at:
 11138 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 11139 ;; Parameters:    Size  Location     Type
 11140 ;;		None
 11141 ;; Auto vars:     Size  Location     Type
 11142 ;;		None
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  1    wreg      void 
 11145 ;; Registers used:
 11146 ;;		wreg, status,2, status,0, cstack
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11154 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11155 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11156 ;;Total ram usage:        2 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    5
 11159 ;; This function calls:
 11160 ;;		_TMR0_StartTimer
 11161 ;; This function is called by:
 11162 ;;		_SYSTEM_Initialize
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text61
 11167  00422E                     __ptext61:
 11168                           	opt stack 0
 11169  00422E                     _TMR0_Initialize:
 11170                           	opt stack 24
 11171                           
 11172                           ;tmr0.c: 69: T0CON0 = 0x10;
 11173                           
 11174                           ;incstack = 0
 11175  00422E  0E10               	movlw	16
 11176  004230  6ED5               	movwf	4053,c	;volatile
 11177                           
 11178                           ;tmr0.c: 72: T0CON1 = 0x41;
 11179  004232  0E41               	movlw	65
 11180  004234  6ED6               	movwf	4054,c	;volatile
 11181                           
 11182                           ;tmr0.c: 75: TMR0H = 0x15;
 11183  004236  0E15               	movlw	21
 11184  004238  6ED4               	movwf	4052,c	;volatile
 11185                           
 11186                           ;tmr0.c: 78: TMR0L = 0xA0;
 11187  00423A  0EA0               	movlw	160
 11188  00423C  6ED3               	movwf	4051,c	;volatile
 11189                           
 11190                           ;tmr0.c: 81: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 11191  00423E  50D3               	movf	4051,w,c	;volatile
 11192  004240  CFD4 F013          	movff	4052,??_TMR0_Initialize	;volatile
 11193  004244  6A14               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 11194  004246  C013  F014         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 11195  00424A  6A13               	clrf	??_TMR0_Initialize,c
 11196  00424C  1013               	iorwf	??_TMR0_Initialize,w,c
 11197  00424E  6E3C               	movwf	_timer0ReloadVal16bit,c	;volatile
 11198  004250  5014               	movf	??_TMR0_Initialize+1,w,c
 11199  004252  6E3D               	movwf	_timer0ReloadVal16bit+1,c	;volatile
 11200                           
 11201                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 11202  004254  010E               	movlb	14	; () banked
 11203  004256  9BCA               	bcf	202,5,b	;volatile
 11204                           
 11205                           ; BSR set to: 14
 11206                           ;tmr0.c: 88: TMR0_StartTimer();
 11207  004258  ECB3  F022         	call	_TMR0_StartTimer	;wreg free
 11208  00425C  0012               	return		;funcret
 11209  00425E                     __end_of_TMR0_Initialize:
 11210                           	opt stack 0
 11211                           tblptru	equ	0xFF8
 11212                           tblptrh	equ	0xFF7
 11213                           tblptrl	equ	0xFF6
 11214                           tablat	equ	0xFF5
 11215                           prodh	equ	0xFF4
 11216                           prodl	equ	0xFF3
 11217                           intcon	equ	0xFF2
 11218                           postinc0	equ	0xFEE
 11219                           wreg	equ	0xFE8
 11220                           indf2	equ	0xFDF
 11221                           postinc2	equ	0xFDE
 11222                           postdec2	equ	0xFDD
 11223                           fsr2h	equ	0xFDA
 11224                           fsr2l	equ	0xFD9
 11225                           status	equ	0xFD8
 11226                           
 11227 ;; *************** function _TMR0_StartTimer *****************
 11228 ;; Defined at:
 11229 ;;		line 91 in file "mcc_generated_files/tmr0.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;		None
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;		None
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  1    wreg      void 
 11236 ;; Registers used:
 11237 ;;		None
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11247 ;;Total ram usage:        0 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    4
 11250 ;; This function calls:
 11251 ;;		Nothing
 11252 ;; This function is called by:
 11253 ;;		_TMR0_Initialize
 11254 ;;		_computeRollPitch
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text62
 11259  004566                     __ptext62:
 11260                           	opt stack 0
 11261  004566                     _TMR0_StartTimer:
 11262                           	opt stack 25
 11263                           
 11264                           ;tmr0.c: 94: T0CON0bits.T0EN = 1;
 11265                           
 11266                           ;incstack = 0
 11267  004566  8ED5               	bsf	4053,7,c	;volatile
 11268  004568  0012               	return		;funcret
 11269  00456A                     __end_of_TMR0_StartTimer:
 11270                           	opt stack 0
 11271                           tblptru	equ	0xFF8
 11272                           tblptrh	equ	0xFF7
 11273                           tblptrl	equ	0xFF6
 11274                           tablat	equ	0xFF5
 11275                           prodh	equ	0xFF4
 11276                           prodl	equ	0xFF3
 11277                           intcon	equ	0xFF2
 11278                           postinc0	equ	0xFEE
 11279                           wreg	equ	0xFE8
 11280                           indf2	equ	0xFDF
 11281                           postinc2	equ	0xFDE
 11282                           postdec2	equ	0xFDD
 11283                           fsr2h	equ	0xFDA
 11284                           fsr2l	equ	0xFD9
 11285                           status	equ	0xFD8
 11286                           
 11287 ;; *************** function _PWM4_Initialize *****************
 11288 ;; Defined at:
 11289 ;;		line 57 in file "mcc_generated_files/pwm4.c"
 11290 ;; Parameters:    Size  Location     Type
 11291 ;;		None
 11292 ;; Auto vars:     Size  Location     Type
 11293 ;;		None
 11294 ;; Return value:  Size  Location     Type
 11295 ;;                  1    wreg      void 
 11296 ;; Registers used:
 11297 ;;		wreg, status,2
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11307 ;;Total ram usage:        0 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:    4
 11310 ;; This function calls:
 11311 ;;		Nothing
 11312 ;; This function is called by:
 11313 ;;		_SYSTEM_Initialize
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           	psect	text63
 11318  00443C                     __ptext63:
 11319                           	opt stack 0
 11320  00443C                     _PWM4_Initialize:
 11321                           	opt stack 25
 11322                           
 11323                           ;pwm4.c: 61: PWM4CON = 0x80;
 11324                           
 11325                           ;incstack = 0
 11326  00443C  0E80               	movlw	128
 11327  00443E  6EA2               	movwf	4002,c	;volatile
 11328                           
 11329                           ;pwm4.c: 64: PWM4DCH = 0x5D;
 11330  004440  0E5D               	movlw	93
 11331  004442  6EA1               	movwf	4001,c	;volatile
 11332                           
 11333                           ;pwm4.c: 67: PWM4DCL = 0x40;
 11334  004444  0E40               	movlw	64
 11335  004446  6EA0               	movwf	4000,c	;volatile
 11336                           
 11337                           ;pwm4.c: 71: CCPTMRSbits.P4TSEL = 0x1;
 11338  004448  50AE               	movf	4014,w,c	;volatile
 11339  00444A  0B3F               	andlw	-193
 11340  00444C  0940               	iorlw	64
 11341  00444E  6EAE               	movwf	4014,c	;volatile
 11342  004450  0012               	return		;funcret
 11343  004452                     __end_of_PWM4_Initialize:
 11344                           	opt stack 0
 11345                           tblptru	equ	0xFF8
 11346                           tblptrh	equ	0xFF7
 11347                           tblptrl	equ	0xFF6
 11348                           tablat	equ	0xFF5
 11349                           prodh	equ	0xFF4
 11350                           prodl	equ	0xFF3
 11351                           intcon	equ	0xFF2
 11352                           postinc0	equ	0xFEE
 11353                           wreg	equ	0xFE8
 11354                           indf2	equ	0xFDF
 11355                           postinc2	equ	0xFDE
 11356                           postdec2	equ	0xFDD
 11357                           fsr2h	equ	0xFDA
 11358                           fsr2l	equ	0xFD9
 11359                           status	equ	0xFD8
 11360                           
 11361 ;; *************** function _PWM3_Initialize *****************
 11362 ;; Defined at:
 11363 ;;		line 57 in file "mcc_generated_files/pwm3.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;		None
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;		None
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      void 
 11370 ;; Registers used:
 11371 ;;		wreg, status,2
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11381 ;;Total ram usage:        0 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    4
 11384 ;; This function calls:
 11385 ;;		Nothing
 11386 ;; This function is called by:
 11387 ;;		_SYSTEM_Initialize
 11388 ;; This function uses a non-reentrant model
 11389 ;;
 11390                           
 11391                           	psect	text64
 11392  004452                     __ptext64:
 11393                           	opt stack 0
 11394  004452                     _PWM3_Initialize:
 11395                           	opt stack 25
 11396                           
 11397                           ;pwm3.c: 61: PWM3CON = 0x80;
 11398                           
 11399                           ;incstack = 0
 11400  004452  0E80               	movlw	128
 11401  004454  6EA5               	movwf	4005,c	;volatile
 11402                           
 11403                           ;pwm3.c: 64: PWM3DCH = 0x5D;
 11404  004456  0E5D               	movlw	93
 11405  004458  6EA4               	movwf	4004,c	;volatile
 11406                           
 11407                           ;pwm3.c: 67: PWM3DCL = 0x40;
 11408  00445A  0E40               	movlw	64
 11409  00445C  6EA3               	movwf	4003,c	;volatile
 11410                           
 11411                           ;pwm3.c: 71: CCPTMRSbits.P3TSEL = 0x1;
 11412  00445E  50AE               	movf	4014,w,c	;volatile
 11413  004460  0BCF               	andlw	-49
 11414  004462  0910               	iorlw	16
 11415  004464  6EAE               	movwf	4014,c	;volatile
 11416  004466  0012               	return		;funcret
 11417  004468                     __end_of_PWM3_Initialize:
 11418                           	opt stack 0
 11419                           tblptru	equ	0xFF8
 11420                           tblptrh	equ	0xFF7
 11421                           tblptrl	equ	0xFF6
 11422                           tablat	equ	0xFF5
 11423                           prodh	equ	0xFF4
 11424                           prodl	equ	0xFF3
 11425                           intcon	equ	0xFF2
 11426                           postinc0	equ	0xFEE
 11427                           wreg	equ	0xFE8
 11428                           indf2	equ	0xFDF
 11429                           postinc2	equ	0xFDE
 11430                           postdec2	equ	0xFDD
 11431                           fsr2h	equ	0xFDA
 11432                           fsr2l	equ	0xFD9
 11433                           status	equ	0xFD8
 11434                           
 11435 ;; *************** function _PWM2_Initialize *****************
 11436 ;; Defined at:
 11437 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 11438 ;; Parameters:    Size  Location     Type
 11439 ;;		None
 11440 ;; Auto vars:     Size  Location     Type
 11441 ;;		None
 11442 ;; Return value:  Size  Location     Type
 11443 ;;                  1    wreg      void 
 11444 ;; Registers used:
 11445 ;;		wreg, status,2
 11446 ;; Tracked objects:
 11447 ;;		On entry : 0/0
 11448 ;;		On exit  : 0/0
 11449 ;;		Unchanged: 0/0
 11450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11455 ;;Total ram usage:        0 bytes
 11456 ;; Hardware stack levels used:    1
 11457 ;; Hardware stack levels required when called:    4
 11458 ;; This function calls:
 11459 ;;		Nothing
 11460 ;; This function is called by:
 11461 ;;		_SYSTEM_Initialize
 11462 ;; This function uses a non-reentrant model
 11463 ;;
 11464                           
 11465                           	psect	text65
 11466  004468                     __ptext65:
 11467                           	opt stack 0
 11468  004468                     _PWM2_Initialize:
 11469                           	opt stack 25
 11470                           
 11471                           ;pwm2.c: 68: CCP2CON = 0x9C;
 11472                           
 11473                           ;incstack = 0
 11474  004468  0E9C               	movlw	156
 11475  00446A  6EA8               	movwf	4008,c	;volatile
 11476                           
 11477                           ;pwm2.c: 71: CCPR2H = 0x5D;
 11478  00446C  0E5D               	movlw	93
 11479  00446E  6EA7               	movwf	4007,c	;volatile
 11480                           
 11481                           ;pwm2.c: 74: CCPR2L = 0x40;
 11482  004470  0E40               	movlw	64
 11483  004472  6EA6               	movwf	4006,c	;volatile
 11484                           
 11485                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 11486  004474  50AE               	movf	4014,w,c	;volatile
 11487  004476  0BF3               	andlw	-13
 11488  004478  0904               	iorlw	4
 11489  00447A  6EAE               	movwf	4014,c	;volatile
 11490  00447C  0012               	return		;funcret
 11491  00447E                     __end_of_PWM2_Initialize:
 11492                           	opt stack 0
 11493                           tblptru	equ	0xFF8
 11494                           tblptrh	equ	0xFF7
 11495                           tblptrl	equ	0xFF6
 11496                           tablat	equ	0xFF5
 11497                           prodh	equ	0xFF4
 11498                           prodl	equ	0xFF3
 11499                           intcon	equ	0xFF2
 11500                           postinc0	equ	0xFEE
 11501                           wreg	equ	0xFE8
 11502                           indf2	equ	0xFDF
 11503                           postinc2	equ	0xFDE
 11504                           postdec2	equ	0xFDD
 11505                           fsr2h	equ	0xFDA
 11506                           fsr2l	equ	0xFD9
 11507                           status	equ	0xFD8
 11508                           
 11509 ;; *************** function _PWM1_Initialize *****************
 11510 ;; Defined at:
 11511 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;		None
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;		None
 11516 ;; Return value:  Size  Location     Type
 11517 ;;                  1    wreg      void 
 11518 ;; Registers used:
 11519 ;;		wreg, status,2
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11529 ;;Total ram usage:        0 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    4
 11532 ;; This function calls:
 11533 ;;		Nothing
 11534 ;; This function is called by:
 11535 ;;		_SYSTEM_Initialize
 11536 ;; This function uses a non-reentrant model
 11537 ;;
 11538                           
 11539                           	psect	text66
 11540  00447E                     __ptext66:
 11541                           	opt stack 0
 11542  00447E                     _PWM1_Initialize:
 11543                           	opt stack 25
 11544                           
 11545                           ;pwm1.c: 68: CCP1CON = 0x9C;
 11546                           
 11547                           ;incstack = 0
 11548  00447E  0E9C               	movlw	156
 11549  004480  6EAC               	movwf	4012,c	;volatile
 11550                           
 11551                           ;pwm1.c: 71: CCPR1H = 0x5D;
 11552  004482  0E5D               	movlw	93
 11553  004484  6EAB               	movwf	4011,c	;volatile
 11554                           
 11555                           ;pwm1.c: 74: CCPR1L = 0x40;
 11556  004486  0E40               	movlw	64
 11557  004488  6EAA               	movwf	4010,c	;volatile
 11558                           
 11559                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 11560  00448A  50AE               	movf	4014,w,c	;volatile
 11561  00448C  0BFC               	andlw	-4
 11562  00448E  0901               	iorlw	1
 11563  004490  6EAE               	movwf	4014,c	;volatile
 11564  004492  0012               	return		;funcret
 11565  004494                     __end_of_PWM1_Initialize:
 11566                           	opt stack 0
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           intcon	equ	0xFF2
 11574                           postinc0	equ	0xFEE
 11575                           wreg	equ	0xFE8
 11576                           indf2	equ	0xFDF
 11577                           postinc2	equ	0xFDE
 11578                           postdec2	equ	0xFDD
 11579                           fsr2h	equ	0xFDA
 11580                           fsr2l	equ	0xFD9
 11581                           status	equ	0xFD8
 11582                           
 11583 ;; *************** function _PIN_MANAGER_Initialize *****************
 11584 ;; Defined at:
 11585 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;		None
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;  state           1   18[COMRAM] unsigned char 
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      void 
 11592 ;; Registers used:
 11593 ;;		wreg, status,2
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11603 ;;Total ram usage:        1 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:    4
 11606 ;; This function calls:
 11607 ;;		Nothing
 11608 ;; This function is called by:
 11609 ;;		_SYSTEM_Initialize
 11610 ;; This function uses a non-reentrant model
 11611 ;;
 11612                           
 11613                           	psect	text67
 11614  00375C                     __ptext67:
 11615                           	opt stack 0
 11616  00375C                     _PIN_MANAGER_Initialize:
 11617                           	opt stack 25
 11618                           
 11619                           ;pin_manager.c: 57: LATE = 0x00;
 11620                           
 11621                           ;incstack = 0
 11622  00375C  0E00               	movlw	0
 11623  00375E  6E87               	movwf	3975,c	;volatile
 11624                           
 11625                           ;pin_manager.c: 58: LATD = 0x00;
 11626  003760  0E00               	movlw	0
 11627  003762  6E86               	movwf	3974,c	;volatile
 11628                           
 11629                           ;pin_manager.c: 59: LATA = 0x00;
 11630  003764  0E00               	movlw	0
 11631  003766  6E83               	movwf	3971,c	;volatile
 11632                           
 11633                           ;pin_manager.c: 60: LATB = 0x00;
 11634  003768  0E00               	movlw	0
 11635  00376A  6E84               	movwf	3972,c	;volatile
 11636                           
 11637                           ;pin_manager.c: 61: LATC = 0x00;
 11638  00376C  0E00               	movlw	0
 11639  00376E  6E85               	movwf	3973,c	;volatile
 11640                           
 11641                           ;pin_manager.c: 66: TRISE = 0x07;
 11642  003770  0E07               	movlw	7
 11643  003772  6E8C               	movwf	3980,c	;volatile
 11644                           
 11645                           ;pin_manager.c: 67: TRISA = 0xCF;
 11646  003774  0ECF               	movlw	207
 11647  003776  6E88               	movwf	3976,c	;volatile
 11648                           
 11649                           ;pin_manager.c: 68: TRISB = 0xF9;
 11650  003778  0EF9               	movlw	249
 11651  00377A  6E89               	movwf	3977,c	;volatile
 11652                           
 11653                           ;pin_manager.c: 69: TRISC = 0x7F;
 11654  00377C  0E7F               	movlw	127
 11655  00377E  6E8A               	movwf	3978,c	;volatile
 11656                           
 11657                           ;pin_manager.c: 70: TRISD = 0xFF;
 11658  003780  688B               	setf	3979,c	;volatile
 11659                           
 11660                           ;pin_manager.c: 75: ANSELC = 0xA7;
 11661  003782  0EA7               	movlw	167
 11662  003784  010F               	movlb	15	; () banked
 11663  003786  6F21               	movwf	33,b	;volatile
 11664                           
 11665                           ; BSR set to: 15
 11666                           ;pin_manager.c: 76: ANSELB = 0xFF;
 11667  003788  010F               	movlb	15	; () banked
 11668  00378A  6919               	setf	25,b	;volatile
 11669                           
 11670                           ; BSR set to: 15
 11671                           ;pin_manager.c: 77: ANSELD = 0xFF;
 11672  00378C  010F               	movlb	15	; () banked
 11673  00378E  6926               	setf	38,b	;volatile
 11674                           
 11675                           ;pin_manager.c: 78: ANSELE = 0x07;
 11676  003790  0E07               	movlw	7
 11677  003792  010F               	movlb	15	; () banked
 11678  003794  6F2E               	movwf	46,b	;volatile
 11679                           
 11680                           ; BSR set to: 15
 11681                           ;pin_manager.c: 79: ANSELA = 0xFF;
 11682  003796  010F               	movlb	15	; () banked
 11683  003798  6911               	setf	17,b	;volatile
 11684                           
 11685                           ;pin_manager.c: 84: WPUD = 0x00;
 11686  00379A  0E00               	movlw	0
 11687  00379C  010F               	movlb	15	; () banked
 11688  00379E  6F25               	movwf	37,b	;volatile
 11689                           
 11690                           ;pin_manager.c: 85: WPUE = 0x00;
 11691  0037A0  0E00               	movlw	0
 11692  0037A2  010F               	movlb	15	; () banked
 11693  0037A4  6F2D               	movwf	45,b	;volatile
 11694                           
 11695                           ;pin_manager.c: 86: WPUB = 0x00;
 11696  0037A6  0E00               	movlw	0
 11697  0037A8  010F               	movlb	15	; () banked
 11698  0037AA  6F18               	movwf	24,b	;volatile
 11699                           
 11700                           ;pin_manager.c: 87: WPUA = 0x00;
 11701  0037AC  0E00               	movlw	0
 11702  0037AE  010F               	movlb	15	; () banked
 11703  0037B0  6F10               	movwf	16,b	;volatile
 11704                           
 11705                           ;pin_manager.c: 88: WPUC = 0x00;
 11706  0037B2  0E00               	movlw	0
 11707  0037B4  010F               	movlb	15	; () banked
 11708  0037B6  6F20               	movwf	32,b	;volatile
 11709                           
 11710                           ;pin_manager.c: 93: ODCONE = 0x00;
 11711  0037B8  0E00               	movlw	0
 11712  0037BA  010F               	movlb	15	; () banked
 11713  0037BC  6F2C               	movwf	44,b	;volatile
 11714                           
 11715                           ;pin_manager.c: 94: ODCONA = 0x00;
 11716  0037BE  0E00               	movlw	0
 11717  0037C0  010F               	movlb	15	; () banked
 11718  0037C2  6F0F               	movwf	15,b	;volatile
 11719                           
 11720                           ;pin_manager.c: 95: ODCONB = 0x00;
 11721  0037C4  0E00               	movlw	0
 11722  0037C6  010F               	movlb	15	; () banked
 11723  0037C8  6F17               	movwf	23,b	;volatile
 11724                           
 11725                           ;pin_manager.c: 96: ODCONC = 0x00;
 11726  0037CA  0E00               	movlw	0
 11727  0037CC  010F               	movlb	15	; () banked
 11728  0037CE  6F1F               	movwf	31,b	;volatile
 11729                           
 11730                           ;pin_manager.c: 97: ODCOND = 0x00;
 11731  0037D0  0E00               	movlw	0
 11732  0037D2  010F               	movlb	15	; () banked
 11733  0037D4  6F24               	movwf	36,b	;volatile
 11734                           
 11735                           ;pin_manager.c: 104: bool state = (unsigned char)GIE;
 11736  0037D6  0E00               	movlw	0
 11737  0037D8  BEF2               	btfsc	intcon,7,c	;volatile
 11738  0037DA  0E01               	movlw	1
 11739  0037DC  6E13               	movwf	PIN_MANAGER_Initialize@state,c
 11740                           
 11741                           ; BSR set to: 15
 11742                           ;pin_manager.c: 105: GIE = 0;
 11743  0037DE  9EF2               	bcf	intcon,7,c	;volatile
 11744                           
 11745                           ;pin_manager.c: 106: PPSLOCK = 0x55;
 11746  0037E0  0E55               	movlw	85
 11747  0037E2  010E               	movlb	14	; () banked
 11748  0037E4  6FA0               	movwf	160,b	;volatile
 11749                           
 11750                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
 11751  0037E6  0EAA               	movlw	170
 11752  0037E8  010E               	movlb	14	; () banked
 11753  0037EA  6FA0               	movwf	160,b	;volatile
 11754                           
 11755                           ; BSR set to: 14
 11756                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x00;
 11757  0037EC  010E               	movlb	14	; () banked
 11758  0037EE  91A0               	bcf	160,0,b	;volatile
 11759                           
 11760                           ;pin_manager.c: 110: RA4PPS = 0x07;
 11761  0037F0  0E07               	movlw	7
 11762  0037F2  010E               	movlb	14	; () banked
 11763  0037F4  6FEB               	movwf	235,b	;volatile
 11764                           
 11765                           ;pin_manager.c: 111: RB1PPS = 0x05;
 11766  0037F6  0E05               	movlw	5
 11767  0037F8  010E               	movlb	14	; () banked
 11768  0037FA  6FF0               	movwf	240,b	;volatile
 11769                           
 11770                           ;pin_manager.c: 112: RC3PPS = 0x0F;
 11771  0037FC  0E0F               	movlw	15
 11772  0037FE  010E               	movlb	14	; () banked
 11773  003800  6FFA               	movwf	250,b	;volatile
 11774                           
 11775                           ;pin_manager.c: 113: RB2PPS = 0x06;
 11776  003802  0E06               	movlw	6
 11777  003804  010E               	movlb	14	; () banked
 11778  003806  6FF1               	movwf	241,b	;volatile
 11779                           
 11780                           ;pin_manager.c: 114: RC4PPS = 0x10;
 11781  003808  0E10               	movlw	16
 11782  00380A  010E               	movlb	14	; () banked
 11783  00380C  6FFB               	movwf	251,b	;volatile
 11784                           
 11785                           ;pin_manager.c: 115: RA5PPS = 0x08;
 11786  00380E  0E08               	movlw	8
 11787  003810  010E               	movlb	14	; () banked
 11788  003812  6FEC               	movwf	236,b	;volatile
 11789                           
 11790                           ; BSR set to: 14
 11791                           ;pin_manager.c: 116: RX1PPSbits.RXPPS = 0x16;
 11792  003814  010E               	movlb	14	; () banked
 11793  003816  91B5               	bcf	181,0,b	;volatile
 11794  003818  83B5               	bsf	181,1,b	;volatile
 11795  00381A  85B5               	bsf	181,2,b	;volatile
 11796  00381C  97B5               	bcf	181,3,b	;volatile
 11797  00381E  89B5               	bsf	181,4,b	;volatile
 11798                           
 11799                           ;pin_manager.c: 117: RC7PPS = 0x09;
 11800  003820  0E09               	movlw	9
 11801  003822  010E               	movlb	14	; () banked
 11802  003824  6FFE               	movwf	254,b	;volatile
 11803                           
 11804                           ; BSR set to: 14
 11805                           ;pin_manager.c: 118: SSP1CLKPPSbits.SSPCLKPPS = 0x13;
 11806  003826  010E               	movlb	14	; () banked
 11807  003828  81B7               	bsf	183,0,b	;volatile
 11808  00382A  83B7               	bsf	183,1,b	;volatile
 11809  00382C  95B7               	bcf	183,2,b	;volatile
 11810  00382E  97B7               	bcf	183,3,b	;volatile
 11811  003830  89B7               	bsf	183,4,b	;volatile
 11812                           
 11813                           ; BSR set to: 14
 11814                           ;pin_manager.c: 119: SSP1DATPPSbits.SSPDATPPS = 0x14;
 11815  003832  010E               	movlb	14	; () banked
 11816  003834  91B8               	bcf	184,0,b	;volatile
 11817  003836  93B8               	bcf	184,1,b	;volatile
 11818  003838  85B8               	bsf	184,2,b	;volatile
 11819  00383A  97B8               	bcf	184,3,b	;volatile
 11820  00383C  89B8               	bsf	184,4,b	;volatile
 11821                           
 11822                           ;pin_manager.c: 121: PPSLOCK = 0x55;
 11823  00383E  0E55               	movlw	85
 11824  003840  010E               	movlb	14	; () banked
 11825  003842  6FA0               	movwf	160,b	;volatile
 11826                           
 11827                           ;pin_manager.c: 122: PPSLOCK = 0xAA;
 11828  003844  0EAA               	movlw	170
 11829  003846  010E               	movlb	14	; () banked
 11830  003848  6FA0               	movwf	160,b	;volatile
 11831                           
 11832                           ; BSR set to: 14
 11833                           ;pin_manager.c: 123: PPSLOCKbits.PPSLOCKED = 0x01;
 11834  00384A  010E               	movlb	14	; () banked
 11835  00384C  81A0               	bsf	160,0,b	;volatile
 11836                           
 11837                           ; BSR set to: 14
 11838                           ;pin_manager.c: 125: GIE = state;
 11839  00384E  A013               	btfss	PIN_MANAGER_Initialize@state,0,c
 11840  003850  D002               	goto	u4650
 11841  003852  8EF2               	bsf	intcon,7,c	;volatile
 11842  003854  0012               	return	
 11843  003856                     u4650:
 11844  003856  9EF2               	bcf	intcon,7,c	;volatile
 11845  003858  0012               	return		;funcret
 11846  00385A                     __end_of_PIN_MANAGER_Initialize:
 11847                           	opt stack 0
 11848                           tblptru	equ	0xFF8
 11849                           tblptrh	equ	0xFF7
 11850                           tblptrl	equ	0xFF6
 11851                           tablat	equ	0xFF5
 11852                           prodh	equ	0xFF4
 11853                           prodl	equ	0xFF3
 11854                           intcon	equ	0xFF2
 11855                           postinc0	equ	0xFEE
 11856                           wreg	equ	0xFE8
 11857                           indf2	equ	0xFDF
 11858                           postinc2	equ	0xFDE
 11859                           postdec2	equ	0xFDD
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function _OSCILLATOR_Initialize *****************
 11865 ;; Defined at:
 11866 ;;		line 131 in file "mcc_generated_files/mcc.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;		None
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;		None
 11871 ;; Return value:  Size  Location     Type
 11872 ;;                  1    wreg      void 
 11873 ;; Registers used:
 11874 ;;		wreg, status,2
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11884 ;;Total ram usage:        0 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; Hardware stack levels required when called:    4
 11887 ;; This function calls:
 11888 ;;		Nothing
 11889 ;; This function is called by:
 11890 ;;		_SYSTEM_Initialize
 11891 ;; This function uses a non-reentrant model
 11892 ;;
 11893                           
 11894                           	psect	text68
 11895  0043A4                     __ptext68:
 11896                           	opt stack 0
 11897  0043A4                     _OSCILLATOR_Initialize:
 11898                           	opt stack 25
 11899                           
 11900                           ;mcc.c: 134: OSCCON1 = 0x60;
 11901                           
 11902                           ;incstack = 0
 11903  0043A4  0E60               	movlw	96
 11904  0043A6  010E               	movlb	14	; () banked
 11905  0043A8  6FD8               	movwf	216,b	;volatile
 11906                           
 11907                           ;mcc.c: 136: OSCCON3 = 0x00;
 11908  0043AA  0E00               	movlw	0
 11909  0043AC  010E               	movlb	14	; () banked
 11910  0043AE  6FDA               	movwf	218,b	;volatile
 11911                           
 11912                           ;mcc.c: 138: OSCEN = 0x00;
 11913  0043B0  0E00               	movlw	0
 11914  0043B2  010E               	movlb	14	; () banked
 11915  0043B4  6FDC               	movwf	220,b	;volatile
 11916                           
 11917                           ;mcc.c: 140: OSCFRQ = 0x07;
 11918  0043B6  0E07               	movlw	7
 11919  0043B8  010E               	movlb	14	; () banked
 11920  0043BA  6FDE               	movwf	222,b	;volatile
 11921                           
 11922                           ;mcc.c: 142: OSCTUNE = 0x00;
 11923  0043BC  0E00               	movlw	0
 11924  0043BE  010E               	movlb	14	; () banked
 11925  0043C0  6FDD               	movwf	221,b	;volatile
 11926                           
 11927                           ; BSR set to: 14
 11928  0043C2  0012               	return		;funcret
 11929  0043C4                     __end_of_OSCILLATOR_Initialize:
 11930                           	opt stack 0
 11931                           tblptru	equ	0xFF8
 11932                           tblptrh	equ	0xFF7
 11933                           tblptrl	equ	0xFF6
 11934                           tablat	equ	0xFF5
 11935                           prodh	equ	0xFF4
 11936                           prodl	equ	0xFF3
 11937                           intcon	equ	0xFF2
 11938                           postinc0	equ	0xFEE
 11939                           wreg	equ	0xFE8
 11940                           indf2	equ	0xFDF
 11941                           postinc2	equ	0xFDE
 11942                           postdec2	equ	0xFDD
 11943                           fsr2h	equ	0xFDA
 11944                           fsr2l	equ	0xFD9
 11945                           status	equ	0xFD8
 11946                           
 11947 ;; *************** function _INTERRUPT_Initialize *****************
 11948 ;; Defined at:
 11949 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11950 ;; Parameters:    Size  Location     Type
 11951 ;;		None
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;		None
 11954 ;; Return value:  Size  Location     Type
 11955 ;;                  1    wreg      void 
 11956 ;; Registers used:
 11957 ;;		None
 11958 ;; Tracked objects:
 11959 ;;		On entry : 0/0
 11960 ;;		On exit  : 0/0
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11967 ;;Total ram usage:        0 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; Hardware stack levels required when called:    4
 11970 ;; This function calls:
 11971 ;;		Nothing
 11972 ;; This function is called by:
 11973 ;;		_SYSTEM_Initialize
 11974 ;; This function uses a non-reentrant model
 11975 ;;
 11976                           
 11977                           	psect	text69
 11978  00451A                     __ptext69:
 11979                           	opt stack 0
 11980  00451A                     _INTERRUPT_Initialize:
 11981                           	opt stack 25
 11982                           
 11983                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 1;
 11984                           
 11985                           ; BSR set to: 14
 11986                           ;incstack = 0
 11987  00451A  8AF2               	bsf	intcon,5,c	;volatile
 11988                           
 11989                           ;interrupt_manager.c: 59: IPR4bits.TMR2IP = 1;
 11990  00451C  010E               	movlb	14	; () banked
 11991  00451E  83BE               	bsf	190,1,b	;volatile
 11992                           
 11993                           ;interrupt_manager.c: 62: IPR3bits.BCL1IP = 1;
 11994  004520  010E               	movlb	14	; () banked
 11995  004522  83BD               	bsf	189,1,b	;volatile
 11996                           
 11997                           ; BSR set to: 14
 11998  004524  0012               	return		;funcret
 11999  004526                     __end_of_INTERRUPT_Initialize:
 12000                           	opt stack 0
 12001                           tblptru	equ	0xFF8
 12002                           tblptrh	equ	0xFF7
 12003                           tblptrl	equ	0xFF6
 12004                           tablat	equ	0xFF5
 12005                           prodh	equ	0xFF4
 12006                           prodl	equ	0xFF3
 12007                           intcon	equ	0xFF2
 12008                           postinc0	equ	0xFEE
 12009                           wreg	equ	0xFE8
 12010                           indf2	equ	0xFDF
 12011                           postinc2	equ	0xFDE
 12012                           postdec2	equ	0xFDD
 12013                           fsr2h	equ	0xFDA
 12014                           fsr2l	equ	0xFD9
 12015                           status	equ	0xFD8
 12016                           
 12017 ;; *************** function _I2C1_Initialize *****************
 12018 ;; Defined at:
 12019 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 12020 ;; Parameters:    Size  Location     Type
 12021 ;;		None
 12022 ;; Auto vars:     Size  Location     Type
 12023 ;;		None
 12024 ;; Return value:  Size  Location     Type
 12025 ;;                  1    wreg      void 
 12026 ;; Registers used:
 12027 ;;		wreg, status,2, status,0
 12028 ;; Tracked objects:
 12029 ;;		On entry : 0/0
 12030 ;;		On exit  : 0/0
 12031 ;;		Unchanged: 0/0
 12032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12037 ;;Total ram usage:        0 bytes
 12038 ;; Hardware stack levels used:    1
 12039 ;; Hardware stack levels required when called:    4
 12040 ;; This function calls:
 12041 ;;		Nothing
 12042 ;; This function is called by:
 12043 ;;		_SYSTEM_Initialize
 12044 ;; This function uses a non-reentrant model
 12045 ;;
 12046                           
 12047                           	psect	text70
 12048  0040F8                     __ptext70:
 12049                           	opt stack 0
 12050  0040F8                     _I2C1_Initialize:
 12051                           	opt stack 25
 12052                           
 12053                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 12054                           
 12055                           ; BSR set to: 14
 12056                           ;incstack = 0
 12057  0040F8  0EBB               	movlw	low _i2c1_tr_queue
 12058  0040FA  0100               	movlb	0	; () banked
 12059  0040FC  6F62               	movwf	(_i2c1_object+2)& (0+255),b
 12060  0040FE  0E00               	movlw	high _i2c1_tr_queue
 12061  004100  0100               	movlb	0	; () banked
 12062  004102  6F63               	movwf	(_i2c1_object+3)& (0+255),b
 12063                           
 12064                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 12065  004104  0EBB               	movlw	low _i2c1_tr_queue
 12066  004106  0100               	movlb	0	; () banked
 12067  004108  6F60               	movwf	_i2c1_object& (0+255),b
 12068  00410A  0E00               	movlw	high _i2c1_tr_queue
 12069  00410C  0100               	movlb	0	; () banked
 12070  00410E  6F61               	movwf	(_i2c1_object+1)& (0+255),b
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 12074  004110  0100               	movlb	0	; () banked
 12075  004112  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 12079  004114  0100               	movlb	0	; () banked
 12080  004116  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 12084  004118  0E00               	movlw	0
 12085  00411A  0100               	movlb	0	; () banked
 12086  00411C  6F66               	movwf	(_i2c1_object+6)& (0+255),b
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;i2c1.c: 208: SSP1STAT = 0x80;
 12090  00411E  0E80               	movlw	128
 12091  004120  6E95               	movwf	3989,c	;volatile
 12092                           
 12093                           ; BSR set to: 0
 12094                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 12095  004122  0E28               	movlw	40
 12096  004124  6E96               	movwf	3990,c	;volatile
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 12100  004126  0E00               	movlw	0
 12101  004128  6E98               	movwf	3992,c	;volatile
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;i2c1.c: 214: SSP1ADD = 0x20;
 12105  00412A  0E20               	movlw	32
 12106  00412C  6E93               	movwf	3987,c	;volatile
 12107                           
 12108                           ; BSR set to: 0
 12109  00412E  0012               	return		;funcret
 12110  004130                     __end_of_I2C1_Initialize:
 12111                           	opt stack 0
 12112                           tblptru	equ	0xFF8
 12113                           tblptrh	equ	0xFF7
 12114                           tblptrl	equ	0xFF6
 12115                           tablat	equ	0xFF5
 12116                           prodh	equ	0xFF4
 12117                           prodl	equ	0xFF3
 12118                           intcon	equ	0xFF2
 12119                           postinc0	equ	0xFEE
 12120                           wreg	equ	0xFE8
 12121                           indf2	equ	0xFDF
 12122                           postinc2	equ	0xFDE
 12123                           postdec2	equ	0xFDD
 12124                           fsr2h	equ	0xFDA
 12125                           fsr2l	equ	0xFD9
 12126                           status	equ	0xFD8
 12127                           
 12128 ;; *************** function _EUSART1_Initialize *****************
 12129 ;; Defined at:
 12130 ;;		line 55 in file "mcc_generated_files/eusart1.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;		None
 12135 ;; Return value:  Size  Location     Type
 12136 ;;                  1    wreg      void 
 12137 ;; Registers used:
 12138 ;;		wreg, status,2
 12139 ;; Tracked objects:
 12140 ;;		On entry : 0/0
 12141 ;;		On exit  : 0/0
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12148 ;;Total ram usage:        0 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; Hardware stack levels required when called:    4
 12151 ;; This function calls:
 12152 ;;		Nothing
 12153 ;; This function is called by:
 12154 ;;		_SYSTEM_Initialize
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           	psect	text71
 12159  004494                     __ptext71:
 12160                           	opt stack 0
 12161  004494                     _EUSART1_Initialize:
 12162                           	opt stack 25
 12163                           
 12164                           ;eusart1.c: 60: BAUD1CON = 0x08;
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;incstack = 0
 12168  004494  0E08               	movlw	8
 12169  004496  6E9F               	movwf	3999,c	;volatile
 12170                           
 12171                           ;eusart1.c: 63: RC1STA = 0x90;
 12172  004498  0E90               	movlw	144
 12173  00449A  6E9D               	movwf	3997,c	;volatile
 12174                           
 12175                           ;eusart1.c: 66: TX1STA = 0x24;
 12176  00449C  0E24               	movlw	36
 12177  00449E  6E9E               	movwf	3998,c	;volatile
 12178                           
 12179                           ;eusart1.c: 69: SP1BRGL = 0x67;
 12180  0044A0  0E67               	movlw	103
 12181  0044A2  6E9B               	movwf	3995,c	;volatile
 12182                           
 12183                           ;eusart1.c: 72: SP1BRGH = 0x00;
 12184  0044A4  0E00               	movlw	0
 12185  0044A6  6E9C               	movwf	3996,c	;volatile
 12186  0044A8  0012               	return		;funcret
 12187  0044AA                     __end_of_EUSART1_Initialize:
 12188                           	opt stack 0
 12189                           tblptru	equ	0xFF8
 12190                           tblptrh	equ	0xFF7
 12191                           tblptrl	equ	0xFF6
 12192                           tablat	equ	0xFF5
 12193                           prodh	equ	0xFF4
 12194                           prodl	equ	0xFF3
 12195                           intcon	equ	0xFF2
 12196                           postinc0	equ	0xFEE
 12197                           wreg	equ	0xFE8
 12198                           indf2	equ	0xFDF
 12199                           postinc2	equ	0xFDE
 12200                           postdec2	equ	0xFDD
 12201                           fsr2h	equ	0xFDA
 12202                           fsr2l	equ	0xFD9
 12203                           status	equ	0xFD8
 12204                           
 12205 ;; *************** function _EUSART1_Read *****************
 12206 ;; Defined at:
 12207 ;;		line 77 in file "mcc_generated_files/eusart1.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;		None
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;		None
 12212 ;; Return value:  Size  Location     Type
 12213 ;;                  1    wreg      unsigned char 
 12214 ;; Registers used:
 12215 ;;		wreg, status,2
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12225 ;;Total ram usage:        0 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; Hardware stack levels required when called:    4
 12228 ;; This function calls:
 12229 ;;		Nothing
 12230 ;; This function is called by:
 12231 ;;		_main
 12232 ;;		_getch
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           	psect	text72
 12237  0044D0                     __ptext72:
 12238                           	opt stack 0
 12239  0044D0                     _EUSART1_Read:
 12240                           	opt stack 26
 12241  0044D0                     l394:
 12242  0044D0  010E               	movlb	14	; () banked
 12243  0044D2  ABCD               	btfss	205,5,b	;volatile
 12244  0044D4  D7FD               	goto	l394
 12245                           
 12246                           ; BSR set to: 14
 12247                           ;eusart1.c: 82: }
 12248                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
 12249  0044D6  A29D               	btfss	3997,1,c	;volatile
 12250  0044D8  D002               	goto	l5743
 12251                           
 12252                           ; BSR set to: 14
 12253                           ;eusart1.c: 86: {
 12254                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
 12255  0044DA  9E9D               	bcf	3997,7,c	;volatile
 12256                           
 12257                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
 12258  0044DC  8E9D               	bsf	3997,7,c	;volatile
 12259  0044DE                     l5743:
 12260                           
 12261                           ; BSR set to: 14
 12262                           ;eusart1.c: 91: }
 12263                           ;eusart1.c: 93: return RC1REG;
 12264  0044DE  5099               	movf	3993,w,c	;volatile
 12265  0044E0  0012               	return	
 12266  0044E2                     __end_of_EUSART1_Read:
 12267                           	opt stack 0
 12268                           tblptru	equ	0xFF8
 12269                           tblptrh	equ	0xFF7
 12270                           tblptrl	equ	0xFF6
 12271                           tablat	equ	0xFF5
 12272                           prodh	equ	0xFF4
 12273                           prodl	equ	0xFF3
 12274                           intcon	equ	0xFF2
 12275                           postinc0	equ	0xFEE
 12276                           wreg	equ	0xFE8
 12277                           indf2	equ	0xFDF
 12278                           postinc2	equ	0xFDE
 12279                           postdec2	equ	0xFDD
 12280                           fsr2h	equ	0xFDA
 12281                           fsr2l	equ	0xFD9
 12282                           status	equ	0xFD8
 12283                           
 12284 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 12285 ;; Defined at:
 12286 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
 12287 ;; Parameters:    Size  Location     Type
 12288 ;;		None
 12289 ;; Auto vars:     Size  Location     Type
 12290 ;;		None
 12291 ;; Return value:  Size  Location     Type
 12292 ;;                  1    wreg      void 
 12293 ;; Registers used:
 12294 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 12295 ;; Tracked objects:
 12296 ;;		On entry : 0/0
 12297 ;;		On exit  : 0/0
 12298 ;;		Unchanged: 0/0
 12299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12302 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12303 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12304 ;;Total ram usage:       14 bytes
 12305 ;; Hardware stack levels used:    1
 12306 ;; Hardware stack levels required when called:    3
 12307 ;; This function calls:
 12308 ;;		_TMR2_ISR
 12309 ;; This function is called by:
 12310 ;;		Interrupt level 2
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           	psect	intcode
 12315  000008                     __pintcode:
 12316                           	opt stack 0
 12317  000008                     _INTERRUPT_InterruptManagerHigh:
 12318                           	opt stack 22
 12319                           
 12320                           ; BSR set to: 14
 12321                           ;incstack = 0
 12322  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12323  00000A  CFFA F005          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 12324  00000E  CFFB F006          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 12325  000012  CFE9 F007          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 12326  000016  CFEA F008          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 12327  00001A  CFE1 F009          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 12328  00001E  CFE2 F00A          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 12329  000022  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 12330  000026  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 12331  00002A  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 12332  00002E  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 12333  000032  CFF6 F00F          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 12334  000036  CFF7 F010          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 12335  00003A  CFF8 F011          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 12336  00003E  CFF5 F012          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 12337                           
 12338                           ;interrupt_manager.c: 71: if(PIE4bits.TMR2IE == 1 && PIR4bits.TMR2IF == 1)
 12339  000042  010E               	movlb	14	; () banked
 12340  000044  A3C6               	btfss	198,1,b	;volatile
 12341  000046  D004               	goto	i2l437
 12342                           
 12343                           ; BSR set to: 14
 12344  000048  010E               	movlb	14	; () banked
 12345  00004A  B3CE               	btfsc	206,1,b	;volatile
 12346                           
 12347                           ; BSR set to: 14
 12348                           ;interrupt_manager.c: 72: {
 12349                           ;interrupt_manager.c: 73: TMR2_ISR();
 12350  00004C  EC9B  F021         	call	_TMR2_ISR	;wreg free
 12351  000050                     i2l437:
 12352  000050  C012  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 12353  000054  C011  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 12354  000058  C010  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 12355  00005C  C00F  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 12356  000060  C00E  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 12357  000064  C00D  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 12358  000068  C00C  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 12359  00006C  C00B  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 12360  000070  C00A  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 12361  000074  C009  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 12362  000078  C008  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 12363  00007C  C007  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 12364  000080  C006  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 12365  000084  C005  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 12366  000088  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12367  00008A  0011               	retfie		f
 12368  00008C                     __end_of_INTERRUPT_InterruptManagerHigh:
 12369                           	opt stack 0
 12370                           pclatu	equ	0xFFB
 12371                           pclath	equ	0xFFA
 12372                           tblptru	equ	0xFF8
 12373                           tblptrh	equ	0xFF7
 12374                           tblptrl	equ	0xFF6
 12375                           tablat	equ	0xFF5
 12376                           prodh	equ	0xFF4
 12377                           prodl	equ	0xFF3
 12378                           intcon	equ	0xFF2
 12379                           postinc0	equ	0xFEE
 12380                           fsr0h	equ	0xFEA
 12381                           fsr0l	equ	0xFE9
 12382                           wreg	equ	0xFE8
 12383                           fsr1h	equ	0xFE2
 12384                           fsr1l	equ	0xFE1
 12385                           indf2	equ	0xFDF
 12386                           postinc2	equ	0xFDE
 12387                           postdec2	equ	0xFDD
 12388                           fsr2h	equ	0xFDA
 12389                           fsr2l	equ	0xFD9
 12390                           status	equ	0xFD8
 12391                           
 12392 ;; *************** function _TMR2_ISR *****************
 12393 ;; Defined at:
 12394 ;;		line 173 in file "mcc_generated_files/tmr2.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;		None
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;		None
 12399 ;; Return value:  Size  Location     Type
 12400 ;;                  1    wreg      void 
 12401 ;; Registers used:
 12402 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12412 ;;Total ram usage:        0 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; Hardware stack levels required when called:    2
 12415 ;; This function calls:
 12416 ;;		Absolute function
 12417 ;;		_TMR2_DefaultInterruptHandler
 12418 ;; This function is called by:
 12419 ;;		_INTERRUPT_InterruptManagerHigh
 12420 ;; This function uses a non-reentrant model
 12421 ;;
 12422                           
 12423                           	psect	text74
 12424  004336                     __ptext74:
 12425                           	opt stack 0
 12426  004336                     _TMR2_ISR:
 12427                           	opt stack 22
 12428                           
 12429                           ;tmr2.c: 177: PIR4bits.TMR2IF = 0;
 12430                           
 12431                           ;incstack = 0
 12432  004336  010E               	movlb	14	; () banked
 12433  004338  93CE               	bcf	206,1,b	;volatile
 12434                           
 12435                           ; BSR set to: 14
 12436                           ;tmr2.c: 179: if(TMR2_InterruptHandler)
 12437  00433A  5039               	movf	_TMR2_InterruptHandler,w,c
 12438  00433C  103A               	iorwf	_TMR2_InterruptHandler+1,w,c
 12439  00433E  103B               	iorwf	_TMR2_InterruptHandler+2,w,c
 12440  004340  B4D8               	btfsc	status,2,c
 12441  004342  0012               	return	
 12442                           
 12443                           ; BSR set to: 14
 12444                           ;tmr2.c: 180: {
 12445                           ;tmr2.c: 181: TMR2_InterruptHandler();
 12446  004344  D801               	call	i2u316_48
 12447  004346  0012               	return	
 12448  004348                     i2u316_48:
 12449  004348  0005               	push	
 12450  00434A  6EFA               	movwf	pclath,c
 12451  00434C  5039               	movf	_TMR2_InterruptHandler,w,c
 12452  00434E  6EFD               	movwf	tosl,c
 12453  004350  503A               	movf	_TMR2_InterruptHandler+1,w,c
 12454  004352  6EFE               	movwf	tosh,c
 12455  004354  503B               	movf	_TMR2_InterruptHandler+2,w,c
 12456  004356  6EFF               	movwf	tosu,c
 12457  004358  50FA               	movf	pclath,w,c
 12458  00435A  0012               	return		;indir
 12459  00435C                     __end_of_TMR2_ISR:
 12460                           	opt stack 0
 12461                           tosu	equ	0xFFF
 12462                           tosh	equ	0xFFE
 12463                           tosl	equ	0xFFD
 12464                           pclatu	equ	0xFFB
 12465                           pclath	equ	0xFFA
 12466                           tblptru	equ	0xFF8
 12467                           tblptrh	equ	0xFF7
 12468                           tblptrl	equ	0xFF6
 12469                           tablat	equ	0xFF5
 12470                           prodh	equ	0xFF4
 12471                           prodl	equ	0xFF3
 12472                           intcon	equ	0xFF2
 12473                           postinc0	equ	0xFEE
 12474                           fsr0h	equ	0xFEA
 12475                           fsr0l	equ	0xFE9
 12476                           wreg	equ	0xFE8
 12477                           fsr1h	equ	0xFE2
 12478                           fsr1l	equ	0xFE1
 12479                           indf2	equ	0xFDF
 12480                           postinc2	equ	0xFDE
 12481                           postdec2	equ	0xFDD
 12482                           fsr2h	equ	0xFDA
 12483                           fsr2l	equ	0xFD9
 12484                           status	equ	0xFD8
 12485                           
 12486 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 12487 ;; Defined at:
 12488 ;;		line 190 in file "mcc_generated_files/tmr2.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;		None
 12491 ;; Auto vars:     Size  Location     Type
 12492 ;;		None
 12493 ;; Return value:  Size  Location     Type
 12494 ;;                  1    wreg      void 
 12495 ;; Registers used:
 12496 ;;		wreg, status,2, status,0, cstack
 12497 ;; Tracked objects:
 12498 ;;		On entry : 0/0
 12499 ;;		On exit  : 0/0
 12500 ;;		Unchanged: 0/0
 12501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12506 ;;Total ram usage:        0 bytes
 12507 ;; Hardware stack levels used:    1
 12508 ;; Hardware stack levels required when called:    1
 12509 ;; This function calls:
 12510 ;;		_PWM1_LoadDutyValue
 12511 ;;		_PWM2_LoadDutyValue
 12512 ;;		_PWM3_LoadDutyValue
 12513 ;;		_PWM4_LoadDutyValue
 12514 ;; This function is called by:
 12515 ;;		_TMR2_Initialize
 12516 ;;		_TMR2_ISR
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           	psect	text75
 12521  003C62                     __ptext75:
 12522                           	opt stack 0
 12523  003C62                     _TMR2_DefaultInterruptHandler:
 12524                           	opt stack 22
 12525                           
 12526                           ;tmr2.c: 191: if ( beginCounter < 2000 ) {
 12527                           
 12528                           ;incstack = 0
 12529  003C62  0100               	movlb	0	; () banked
 12530  003C64  BFB8               	btfsc	(_beginCounter+1)& (0+255),7,b
 12531  003C66  D008               	goto	i2l3875
 12532  003C68  0ED0               	movlw	208
 12533  003C6A  0100               	movlb	0	; () banked
 12534  003C6C  5DB7               	subwf	_beginCounter& (0+255),w,b
 12535  003C6E  0E07               	movlw	7
 12536  003C70  0100               	movlb	0	; () banked
 12537  003C72  59B8               	subwfb	(_beginCounter+1)& (0+255),w,b
 12538  003C74  B0D8               	btfsc	status,0,c
 12539  003C76  D016               	goto	i2l3885
 12540  003C78                     i2l3875:
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;tmr2.c: 192: beginCounter++;
 12544  003C78  0100               	movlb	0	; () banked
 12545  003C7A  4BB7               	infsnz	_beginCounter& (0+255),f,b
 12546  003C7C  2BB8               	incf	(_beginCounter+1)& (0+255),f,b
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;tmr2.c: 193: throttle1 = 0;
 12550  003C7E  0E00               	movlw	0
 12551  003C80  6E45               	movwf	_throttle1+1,c
 12552  003C82  0E00               	movlw	0
 12553  003C84  6E44               	movwf	_throttle1,c
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;tmr2.c: 194: throttle2 = 0;
 12557  003C86  0E00               	movlw	0
 12558  003C88  6E43               	movwf	_throttle2+1,c
 12559  003C8A  0E00               	movlw	0
 12560  003C8C  6E42               	movwf	_throttle2,c
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;tmr2.c: 195: throttle3 = 0;
 12564  003C8E  0E00               	movlw	0
 12565  003C90  0100               	movlb	0	; () banked
 12566  003C92  6FB0               	movwf	(_throttle3+1)& (0+255),b
 12567  003C94  0E00               	movlw	0
 12568  003C96  6FAF               	movwf	_throttle3& (0+255),b
 12569                           
 12570                           ; BSR set to: 0
 12571                           ;tmr2.c: 196: throttle4 = 0;
 12572  003C98  0E00               	movlw	0
 12573  003C9A  0100               	movlb	0	; () banked
 12574  003C9C  6FAE               	movwf	(_throttle4+1)& (0+255),b
 12575  003C9E  0E00               	movlw	0
 12576  003CA0  6FAD               	movwf	_throttle4& (0+255),b
 12577                           
 12578                           ;tmr2.c: 197: } else {
 12579  003CA2  D003               	goto	i2l3887
 12580  003CA4                     i2l3885:
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;tmr2.c: 198: begin = 1;
 12584  003CA4  0E01               	movlw	1
 12585  003CA6  0100               	movlb	0	; () banked
 12586  003CA8  6FBA               	movwf	_begin& (0+255),b
 12587  003CAA                     i2l3887:
 12588                           
 12589                           ; BSR set to: 0
 12590                           ;tmr2.c: 199: }
 12591                           ;tmr2.c: 200: accCounter++;
 12592  003CAA  0100               	movlb	0	; () banked
 12593  003CAC  2BB9               	incf	_accCounter& (0+255),f,b
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;tmr2.c: 202: PWM1_LoadDutyValue(373 + throttle1 );
 12597  003CAE  0E75               	movlw	117
 12598  003CB0  2444               	addwf	_throttle1,w,c
 12599  003CB2  6E01               	movwf	PWM1_LoadDutyValue@dutyValue,c
 12600  003CB4  0E01               	movlw	1
 12601  003CB6  2045               	addwfc	_throttle1+1,w,c
 12602  003CB8  6E02               	movwf	PWM1_LoadDutyValue@dutyValue+1,c
 12603  003CBA  EC72  F021         	call	_PWM1_LoadDutyValue	;wreg free
 12604                           
 12605                           ;tmr2.c: 203: PWM2_LoadDutyValue(373 + throttle2 );
 12606  003CBE  0E75               	movlw	117
 12607  003CC0  2442               	addwf	_throttle2,w,c
 12608  003CC2  6E01               	movwf	PWM2_LoadDutyValue@dutyValue,c
 12609  003CC4  0E01               	movlw	1
 12610  003CC6  2043               	addwfc	_throttle2+1,w,c
 12611  003CC8  6E02               	movwf	PWM2_LoadDutyValue@dutyValue+1,c
 12612  003CCA  EC5C  F021         	call	_PWM2_LoadDutyValue	;wreg free
 12613                           
 12614                           ;tmr2.c: 204: PWM3_LoadDutyValue(373 + throttle3 );
 12615  003CCE  0E75               	movlw	117
 12616  003CD0  0100               	movlb	0	; () banked
 12617  003CD2  25AF               	addwf	_throttle3& (0+255),w,b
 12618  003CD4  6E01               	movwf	PWM3_LoadDutyValue@dutyValue,c
 12619  003CD6  0E01               	movlw	1
 12620  003CD8  0100               	movlb	0	; () banked
 12621  003CDA  21B0               	addwfc	(_throttle3+1)& (0+255),w,b
 12622  003CDC  6E02               	movwf	PWM3_LoadDutyValue@dutyValue+1,c
 12623  003CDE  ECFE  F020         	call	_PWM3_LoadDutyValue	;wreg free
 12624                           
 12625                           ;tmr2.c: 205: PWM4_LoadDutyValue(373 + throttle4 );
 12626  003CE2  0E75               	movlw	117
 12627  003CE4  0100               	movlb	0	; () banked
 12628  003CE6  25AD               	addwf	_throttle4& (0+255),w,b
 12629  003CE8  6E01               	movwf	PWM4_LoadDutyValue@dutyValue,c
 12630  003CEA  0E01               	movlw	1
 12631  003CEC  0100               	movlb	0	; () banked
 12632  003CEE  21AE               	addwfc	(_throttle4+1)& (0+255),w,b
 12633  003CF0  6E02               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
 12634  003CF2  ECE5  F020         	call	_PWM4_LoadDutyValue	;wreg free
 12635  003CF6  0012               	return		;funcret
 12636  003CF8                     __end_of_TMR2_DefaultInterruptHandler:
 12637                           	opt stack 0
 12638                           tosu	equ	0xFFF
 12639                           tosh	equ	0xFFE
 12640                           tosl	equ	0xFFD
 12641                           pclatu	equ	0xFFB
 12642                           pclath	equ	0xFFA
 12643                           tblptru	equ	0xFF8
 12644                           tblptrh	equ	0xFF7
 12645                           tblptrl	equ	0xFF6
 12646                           tablat	equ	0xFF5
 12647                           prodh	equ	0xFF4
 12648                           prodl	equ	0xFF3
 12649                           intcon	equ	0xFF2
 12650                           postinc0	equ	0xFEE
 12651                           fsr0h	equ	0xFEA
 12652                           fsr0l	equ	0xFE9
 12653                           wreg	equ	0xFE8
 12654                           fsr1h	equ	0xFE2
 12655                           fsr1l	equ	0xFE1
 12656                           indf2	equ	0xFDF
 12657                           postinc2	equ	0xFDE
 12658                           postdec2	equ	0xFDD
 12659                           fsr2h	equ	0xFDA
 12660                           fsr2l	equ	0xFD9
 12661                           status	equ	0xFD8
 12662                           
 12663 ;; *************** function _PWM4_LoadDutyValue *****************
 12664 ;; Defined at:
 12665 ;;		line 74 in file "mcc_generated_files/pwm4.c"
 12666 ;; Parameters:    Size  Location     Type
 12667 ;;  dutyValue       2    0[COMRAM] unsigned int 
 12668 ;; Auto vars:     Size  Location     Type
 12669 ;;		None
 12670 ;; Return value:  Size  Location     Type
 12671 ;;                  1    wreg      void 
 12672 ;; Registers used:
 12673 ;;		wreg, status,2, status,0
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12679 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12682 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12683 ;;Total ram usage:        4 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; This function calls:
 12686 ;;		Nothing
 12687 ;; This function is called by:
 12688 ;;		_TMR2_DefaultInterruptHandler
 12689 ;; This function uses a non-reentrant model
 12690 ;;
 12691                           
 12692                           	psect	text76
 12693  0041CA                     __ptext76:
 12694                           	opt stack 0
 12695  0041CA                     _PWM4_LoadDutyValue:
 12696                           	opt stack 22
 12697                           
 12698                           ;pwm4.c: 77: PWM4DCH = (dutyValue & 0x03FC)>>2;
 12699                           
 12700                           ;incstack = 0
 12701  0041CA  C001  F003         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
 12702  0041CE  C002  F004         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
 12703  0041D2  90D8               	bcf	status,0,c
 12704  0041D4  3204               	rrcf	??_PWM4_LoadDutyValue+1,f,c
 12705  0041D6  3203               	rrcf	??_PWM4_LoadDutyValue,f,c
 12706  0041D8  90D8               	bcf	status,0,c
 12707  0041DA  3204               	rrcf	??_PWM4_LoadDutyValue+1,f,c
 12708  0041DC  3203               	rrcf	??_PWM4_LoadDutyValue,f,c
 12709  0041DE  5003               	movf	??_PWM4_LoadDutyValue,w,c
 12710  0041E0  6EA1               	movwf	4001,c	;volatile
 12711                           
 12712                           ;pwm4.c: 80: PWM4DCL = (dutyValue & 0x0003)<<6;
 12713  0041E2  C001  F003         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
 12714  0041E6  0E03               	movlw	3
 12715  0041E8  1603               	andwf	??_PWM4_LoadDutyValue,f,c
 12716  0041EA  0E06               	movlw	6
 12717  0041EC  6E04               	movwf	(??_PWM4_LoadDutyValue+1)& (0+255),c
 12718  0041EE                     i2u217_45:
 12719  0041EE  90D8               	bcf	status,0,c
 12720  0041F0  3603               	rlcf	??_PWM4_LoadDutyValue,f,c
 12721  0041F2  2E04               	decfsz	(??_PWM4_LoadDutyValue+1)& (0+255),f,c
 12722  0041F4  D7FC               	goto	i2u217_45
 12723  0041F6  5003               	movf	??_PWM4_LoadDutyValue,w,c
 12724  0041F8  6EA0               	movwf	4000,c	;volatile
 12725  0041FA  0012               	return		;funcret
 12726  0041FC                     __end_of_PWM4_LoadDutyValue:
 12727                           	opt stack 0
 12728                           tosu	equ	0xFFF
 12729                           tosh	equ	0xFFE
 12730                           tosl	equ	0xFFD
 12731                           pclatu	equ	0xFFB
 12732                           pclath	equ	0xFFA
 12733                           tblptru	equ	0xFF8
 12734                           tblptrh	equ	0xFF7
 12735                           tblptrl	equ	0xFF6
 12736                           tablat	equ	0xFF5
 12737                           prodh	equ	0xFF4
 12738                           prodl	equ	0xFF3
 12739                           intcon	equ	0xFF2
 12740                           postinc0	equ	0xFEE
 12741                           fsr0h	equ	0xFEA
 12742                           fsr0l	equ	0xFE9
 12743                           wreg	equ	0xFE8
 12744                           fsr1h	equ	0xFE2
 12745                           fsr1l	equ	0xFE1
 12746                           indf2	equ	0xFDF
 12747                           postinc2	equ	0xFDE
 12748                           postdec2	equ	0xFDD
 12749                           fsr2h	equ	0xFDA
 12750                           fsr2l	equ	0xFD9
 12751                           status	equ	0xFD8
 12752                           
 12753 ;; *************** function _PWM3_LoadDutyValue *****************
 12754 ;; Defined at:
 12755 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;  dutyValue       2    0[COMRAM] unsigned int 
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;		None
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      void 
 12762 ;; Registers used:
 12763 ;;		wreg, status,2, status,0
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12769 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12771 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12772 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12773 ;;Total ram usage:        4 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; This function calls:
 12776 ;;		Nothing
 12777 ;; This function is called by:
 12778 ;;		_TMR2_DefaultInterruptHandler
 12779 ;; This function uses a non-reentrant model
 12780 ;;
 12781                           
 12782                           	psect	text77
 12783  0041FC                     __ptext77:
 12784                           	opt stack 0
 12785  0041FC                     _PWM3_LoadDutyValue:
 12786                           	opt stack 22
 12787                           
 12788                           ;pwm3.c: 77: PWM3DCH = (dutyValue & 0x03FC)>>2;
 12789                           
 12790                           ;incstack = 0
 12791  0041FC  C001  F003         	movff	PWM3_LoadDutyValue@dutyValue,??_PWM3_LoadDutyValue
 12792  004200  C002  F004         	movff	PWM3_LoadDutyValue@dutyValue+1,??_PWM3_LoadDutyValue+1
 12793  004204  90D8               	bcf	status,0,c
 12794  004206  3204               	rrcf	??_PWM3_LoadDutyValue+1,f,c
 12795  004208  3203               	rrcf	??_PWM3_LoadDutyValue,f,c
 12796  00420A  90D8               	bcf	status,0,c
 12797  00420C  3204               	rrcf	??_PWM3_LoadDutyValue+1,f,c
 12798  00420E  3203               	rrcf	??_PWM3_LoadDutyValue,f,c
 12799  004210  5003               	movf	??_PWM3_LoadDutyValue,w,c
 12800  004212  6EA4               	movwf	4004,c	;volatile
 12801                           
 12802                           ;pwm3.c: 80: PWM3DCL = (dutyValue & 0x0003)<<6;
 12803  004214  C001  F003         	movff	PWM3_LoadDutyValue@dutyValue,??_PWM3_LoadDutyValue
 12804  004218  0E03               	movlw	3
 12805  00421A  1603               	andwf	??_PWM3_LoadDutyValue,f,c
 12806  00421C  0E06               	movlw	6
 12807  00421E  6E04               	movwf	(??_PWM3_LoadDutyValue+1)& (0+255),c
 12808  004220                     i2u216_45:
 12809  004220  90D8               	bcf	status,0,c
 12810  004222  3603               	rlcf	??_PWM3_LoadDutyValue,f,c
 12811  004224  2E04               	decfsz	(??_PWM3_LoadDutyValue+1)& (0+255),f,c
 12812  004226  D7FC               	goto	i2u216_45
 12813  004228  5003               	movf	??_PWM3_LoadDutyValue,w,c
 12814  00422A  6EA3               	movwf	4003,c	;volatile
 12815  00422C  0012               	return		;funcret
 12816  00422E                     __end_of_PWM3_LoadDutyValue:
 12817                           	opt stack 0
 12818                           tosu	equ	0xFFF
 12819                           tosh	equ	0xFFE
 12820                           tosl	equ	0xFFD
 12821                           pclatu	equ	0xFFB
 12822                           pclath	equ	0xFFA
 12823                           tblptru	equ	0xFF8
 12824                           tblptrh	equ	0xFF7
 12825                           tblptrl	equ	0xFF6
 12826                           tablat	equ	0xFF5
 12827                           prodh	equ	0xFF4
 12828                           prodl	equ	0xFF3
 12829                           intcon	equ	0xFF2
 12830                           postinc0	equ	0xFEE
 12831                           fsr0h	equ	0xFEA
 12832                           fsr0l	equ	0xFE9
 12833                           wreg	equ	0xFE8
 12834                           fsr1h	equ	0xFE2
 12835                           fsr1l	equ	0xFE1
 12836                           indf2	equ	0xFDF
 12837                           postinc2	equ	0xFDE
 12838                           postdec2	equ	0xFDD
 12839                           fsr2h	equ	0xFDA
 12840                           fsr2l	equ	0xFD9
 12841                           status	equ	0xFD8
 12842                           
 12843 ;; *************** function _PWM2_LoadDutyValue *****************
 12844 ;; Defined at:
 12845 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 12846 ;; Parameters:    Size  Location     Type
 12847 ;;  dutyValue       2    0[COMRAM] unsigned int 
 12848 ;; Auto vars:     Size  Location     Type
 12849 ;;		None
 12850 ;; Return value:  Size  Location     Type
 12851 ;;                  1    wreg      void 
 12852 ;; Registers used:
 12853 ;;		wreg, status,2, status,0
 12854 ;; Tracked objects:
 12855 ;;		On entry : 0/0
 12856 ;;		On exit  : 0/0
 12857 ;;		Unchanged: 0/0
 12858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12859 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12862 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12863 ;;Total ram usage:        2 bytes
 12864 ;; Hardware stack levels used:    1
 12865 ;; This function calls:
 12866 ;;		Nothing
 12867 ;; This function is called by:
 12868 ;;		_TMR2_DefaultInterruptHandler
 12869 ;; This function uses a non-reentrant model
 12870 ;;
 12871                           
 12872                           	psect	text78
 12873  0042B8                     __ptext78:
 12874                           	opt stack 0
 12875  0042B8                     _PWM2_LoadDutyValue:
 12876                           	opt stack 22
 12877                           
 12878                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 12879                           
 12880                           ;incstack = 0
 12881  0042B8  0EFF               	movlw	255
 12882  0042BA  1601               	andwf	PWM2_LoadDutyValue@dutyValue,f,c
 12883  0042BC  0E03               	movlw	3
 12884  0042BE  1602               	andwf	PWM2_LoadDutyValue@dutyValue+1,f,c
 12885                           
 12886                           ;pwm2.c: 85: if(CCP2CONbits.FMT)
 12887  0042C0  A8A8               	btfss	4008,4,c	;volatile
 12888  0042C2  D00B               	goto	i2l3485
 12889                           
 12890                           ;pwm2.c: 86: {
 12891                           ;pwm2.c: 87: dutyValue <<= 6;
 12892  0042C4  0E06               	movlw	6
 12893  0042C6                     i2u215_45:
 12894  0042C6  90D8               	bcf	status,0,c
 12895  0042C8  3601               	rlcf	PWM2_LoadDutyValue@dutyValue,f,c
 12896  0042CA  3602               	rlcf	PWM2_LoadDutyValue@dutyValue+1,f,c
 12897  0042CC  2EE8               	decfsz	wreg,f,c
 12898  0042CE  D7FB               	goto	i2u215_45
 12899                           
 12900                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 12901  0042D0  5002               	movf	PWM2_LoadDutyValue@dutyValue+1,w,c
 12902  0042D2  6EA7               	movwf	4007,c	;volatile
 12903                           
 12904                           ;pwm2.c: 89: CCPR2L = dutyValue;
 12905  0042D4  C001  FFA6         	movff	PWM2_LoadDutyValue@dutyValue,4006	;volatile
 12906                           
 12907                           ;pwm2.c: 90: }
 12908  0042D8  0012               	return	
 12909  0042DA                     i2l3485:
 12910                           
 12911                           ;pwm2.c: 91: else
 12912                           ;pwm2.c: 92: {
 12913                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 12914  0042DA  5002               	movf	PWM2_LoadDutyValue@dutyValue+1,w,c
 12915  0042DC  6EA7               	movwf	4007,c	;volatile
 12916                           
 12917                           ;pwm2.c: 94: CCPR2L = dutyValue;
 12918  0042DE  C001  FFA6         	movff	PWM2_LoadDutyValue@dutyValue,4006	;volatile
 12919  0042E2  0012               	return	
 12920  0042E4                     __end_of_PWM2_LoadDutyValue:
 12921                           	opt stack 0
 12922                           tosu	equ	0xFFF
 12923                           tosh	equ	0xFFE
 12924                           tosl	equ	0xFFD
 12925                           pclatu	equ	0xFFB
 12926                           pclath	equ	0xFFA
 12927                           tblptru	equ	0xFF8
 12928                           tblptrh	equ	0xFF7
 12929                           tblptrl	equ	0xFF6
 12930                           tablat	equ	0xFF5
 12931                           prodh	equ	0xFF4
 12932                           prodl	equ	0xFF3
 12933                           intcon	equ	0xFF2
 12934                           postinc0	equ	0xFEE
 12935                           fsr0h	equ	0xFEA
 12936                           fsr0l	equ	0xFE9
 12937                           wreg	equ	0xFE8
 12938                           fsr1h	equ	0xFE2
 12939                           fsr1l	equ	0xFE1
 12940                           indf2	equ	0xFDF
 12941                           postinc2	equ	0xFDE
 12942                           postdec2	equ	0xFDD
 12943                           fsr2h	equ	0xFDA
 12944                           fsr2l	equ	0xFD9
 12945                           status	equ	0xFD8
 12946                           
 12947 ;; *************** function _PWM1_LoadDutyValue *****************
 12948 ;; Defined at:
 12949 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;  dutyValue       2    0[COMRAM] unsigned int 
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;		None
 12954 ;; Return value:  Size  Location     Type
 12955 ;;                  1    wreg      void 
 12956 ;; Registers used:
 12957 ;;		wreg, status,2, status,0
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12966 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12967 ;;Total ram usage:        2 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; This function calls:
 12970 ;;		Nothing
 12971 ;; This function is called by:
 12972 ;;		_TMR2_DefaultInterruptHandler
 12973 ;; This function uses a non-reentrant model
 12974 ;;
 12975                           
 12976                           	psect	text79
 12977  0042E4                     __ptext79:
 12978                           	opt stack 0
 12979  0042E4                     _PWM1_LoadDutyValue:
 12980                           	opt stack 22
 12981                           
 12982                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 12983                           
 12984                           ;incstack = 0
 12985  0042E4  0EFF               	movlw	255
 12986  0042E6  1601               	andwf	PWM1_LoadDutyValue@dutyValue,f,c
 12987  0042E8  0E03               	movlw	3
 12988  0042EA  1602               	andwf	PWM1_LoadDutyValue@dutyValue+1,f,c
 12989                           
 12990                           ;pwm1.c: 85: if(CCP1CONbits.FMT)
 12991  0042EC  A8AC               	btfss	4012,4,c	;volatile
 12992  0042EE  D00B               	goto	i2l3471
 12993                           
 12994                           ;pwm1.c: 86: {
 12995                           ;pwm1.c: 87: dutyValue <<= 6;
 12996  0042F0  0E06               	movlw	6
 12997  0042F2                     i2u213_45:
 12998  0042F2  90D8               	bcf	status,0,c
 12999  0042F4  3601               	rlcf	PWM1_LoadDutyValue@dutyValue,f,c
 13000  0042F6  3602               	rlcf	PWM1_LoadDutyValue@dutyValue+1,f,c
 13001  0042F8  2EE8               	decfsz	wreg,f,c
 13002  0042FA  D7FB               	goto	i2u213_45
 13003                           
 13004                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 13005  0042FC  5002               	movf	PWM1_LoadDutyValue@dutyValue+1,w,c
 13006  0042FE  6EAB               	movwf	4011,c	;volatile
 13007                           
 13008                           ;pwm1.c: 89: CCPR1L = dutyValue;
 13009  004300  C001  FFAA         	movff	PWM1_LoadDutyValue@dutyValue,4010	;volatile
 13010                           
 13011                           ;pwm1.c: 90: }
 13012  004304  0012               	return	
 13013  004306                     i2l3471:
 13014                           
 13015                           ;pwm1.c: 91: else
 13016                           ;pwm1.c: 92: {
 13017                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 13018  004306  5002               	movf	PWM1_LoadDutyValue@dutyValue+1,w,c
 13019  004308  6EAB               	movwf	4011,c	;volatile
 13020                           
 13021                           ;pwm1.c: 94: CCPR1L = dutyValue;
 13022  00430A  C001  FFAA         	movff	PWM1_LoadDutyValue@dutyValue,4010	;volatile
 13023  00430E  0012               	return	
 13024  004310                     __end_of_PWM1_LoadDutyValue:
 13025                           	opt stack 0
 13026                           tosu	equ	0xFFF
 13027                           tosh	equ	0xFFE
 13028                           tosl	equ	0xFFD
 13029                           pclatu	equ	0xFFB
 13030                           pclath	equ	0xFFA
 13031                           tblptru	equ	0xFF8
 13032                           tblptrh	equ	0xFF7
 13033                           tblptrl	equ	0xFF6
 13034                           tablat	equ	0xFF5
 13035                           prodh	equ	0xFF4
 13036                           prodl	equ	0xFF3
 13037                           intcon	equ	0xFF2
 13038                           postinc0	equ	0xFEE
 13039                           fsr0h	equ	0xFEA
 13040                           fsr0l	equ	0xFE9
 13041                           wreg	equ	0xFE8
 13042                           fsr1h	equ	0xFE2
 13043                           fsr1l	equ	0xFE1
 13044                           indf2	equ	0xFDF
 13045                           postinc2	equ	0xFDE
 13046                           postdec2	equ	0xFDD
 13047                           fsr2h	equ	0xFDA
 13048                           fsr2l	equ	0xFD9
 13049                           status	equ	0xFD8
 13050                           tosu	equ	0xFFF
 13051                           tosh	equ	0xFFE
 13052                           tosl	equ	0xFFD
 13053                           pclatu	equ	0xFFB
 13054                           pclath	equ	0xFFA
 13055                           tblptru	equ	0xFF8
 13056                           tblptrh	equ	0xFF7
 13057                           tblptrl	equ	0xFF6
 13058                           tablat	equ	0xFF5
 13059                           prodh	equ	0xFF4
 13060                           prodl	equ	0xFF3
 13061                           intcon	equ	0xFF2
 13062                           postinc0	equ	0xFEE
 13063                           fsr0h	equ	0xFEA
 13064                           fsr0l	equ	0xFE9
 13065                           wreg	equ	0xFE8
 13066                           fsr1h	equ	0xFE2
 13067                           fsr1l	equ	0xFE1
 13068                           indf2	equ	0xFDF
 13069                           postinc2	equ	0xFDE
 13070                           postdec2	equ	0xFDD
 13071                           fsr2h	equ	0xFDA
 13072                           fsr2l	equ	0xFD9
 13073                           status	equ	0xFD8
 13074                           
 13075                           	psect	text80
 13076  000000                     __ptext80:
 13077                           	opt stack 0
 13078                           tosu	equ	0xFFF
 13079                           tosh	equ	0xFFE
 13080                           tosl	equ	0xFFD
 13081                           pclatu	equ	0xFFB
 13082                           pclath	equ	0xFFA
 13083                           tblptru	equ	0xFF8
 13084                           tblptrh	equ	0xFF7
 13085                           tblptrl	equ	0xFF6
 13086                           tablat	equ	0xFF5
 13087                           prodh	equ	0xFF4
 13088                           prodl	equ	0xFF3
 13089                           intcon	equ	0xFF2
 13090                           postinc0	equ	0xFEE
 13091                           fsr0h	equ	0xFEA
 13092                           fsr0l	equ	0xFE9
 13093                           wreg	equ	0xFE8
 13094                           fsr1h	equ	0xFE2
 13095                           fsr1l	equ	0xFE1
 13096                           indf2	equ	0xFDF
 13097                           postinc2	equ	0xFDE
 13098                           postdec2	equ	0xFDD
 13099                           fsr2h	equ	0xFDA
 13100                           fsr2l	equ	0xFD9
 13101                           status	equ	0xFD8
 13102                           
 13103                           	psect	rparam
 13104  0000                     tosu	equ	0xFFF
 13105                           tosh	equ	0xFFE
 13106                           tosl	equ	0xFFD
 13107                           pclatu	equ	0xFFB
 13108                           pclath	equ	0xFFA
 13109                           tblptru	equ	0xFF8
 13110                           tblptrh	equ	0xFF7
 13111                           tblptrl	equ	0xFF6
 13112                           tablat	equ	0xFF5
 13113                           prodh	equ	0xFF4
 13114                           prodl	equ	0xFF3
 13115                           intcon	equ	0xFF2
 13116                           postinc0	equ	0xFEE
 13117                           fsr0h	equ	0xFEA
 13118                           fsr0l	equ	0xFE9
 13119                           wreg	equ	0xFE8
 13120                           fsr1h	equ	0xFE2
 13121                           fsr1l	equ	0xFE1
 13122                           indf2	equ	0xFDF
 13123                           postinc2	equ	0xFDE
 13124                           postdec2	equ	0xFDD
 13125                           fsr2h	equ	0xFDA
 13126                           fsr2l	equ	0xFD9
 13127                           status	equ	0xFD8
 13128                           
 13129                           	psect	temp
 13130  00004C                     btemp:
 13131                           	opt stack 0
 13132  00004C                     	ds	1
 13133  0000                     int$flags	set	btemp
 13134                           tosu	equ	0xFFF
 13135                           tosh	equ	0xFFE
 13136                           tosl	equ	0xFFD
 13137                           pclatu	equ	0xFFB
 13138                           pclath	equ	0xFFA
 13139                           tblptru	equ	0xFF8
 13140                           tblptrh	equ	0xFF7
 13141                           tblptrl	equ	0xFF6
 13142                           tablat	equ	0xFF5
 13143                           prodh	equ	0xFF4
 13144                           prodl	equ	0xFF3
 13145                           intcon	equ	0xFF2
 13146                           postinc0	equ	0xFEE
 13147                           fsr0h	equ	0xFEA
 13148                           fsr0l	equ	0xFE9
 13149                           wreg	equ	0xFE8
 13150                           fsr1h	equ	0xFE2
 13151                           fsr1l	equ	0xFE1
 13152                           indf2	equ	0xFDF
 13153                           postinc2	equ	0xFDE
 13154                           postdec2	equ	0xFDD
 13155                           fsr2h	equ	0xFDA
 13156                           fsr2l	equ	0xFD9
 13157                           status	equ	0xFD8


Data Sizes:
    Strings     49
    Constant    118
    Data        0
    BSS         230
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      75
    BANK0           160     58     155
    BANK1           256     29     143
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E11626 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 49
		 -> STR_1(CODE[49]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    kalmanUpdate@state	PTR struct . size(2) Largest target is 15
		 -> gzState(BANK1[15]), gyState(BANK1[15]), gxState(BANK1[15]), azState(BANK1[15]), 
		 -> ayState(BANK1[15]), axState(BANK1[15]), 

    readi2cData@data	PTR unsigned char  size(2) Largest target is 6
		 -> readGyro@gData(COMRAM[6]), readAccel@aData(BANK0[6]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E11626 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    F11738.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F11733.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E11626 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    S426$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    S438$pTrFlag	PTR enum E11626 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E11626 size(2) Largest target is 0

    S438$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[6]), I2C1_MasterWrite@trBlock(BANK1[6]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), NULL(NULL[0]), 

    S449$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    S449$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _gyro_Init->_writei2cData
    _accel_Init->_writei2cData
    _writei2cData->_writei2c
    _readGyro->_readi2cData
    _readi2cData->_writei2c
    _writei2c->_checkI2Cbusy
    _starti2c->_checkI2Cbusy
    ___awtoft->___ftpack
    _printf->___ftneg
    _printf->_fround
    _printf->_scale
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _rollPid->___ftneg
    ___fttol->___ftneg
    ___fttol->_scale
    _kalmanUpdate->___ftneg
    _computeRollPitch->___ftneg
    _fastatan2->___ftneg
    _fabs->___ftneg
    ___ftneg->___ftmul
    ___ftmul->___wmul
    ___lwtoft->___ftpack
    ___ftadd->___ftneg
    ___ftadd->_fround
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    _TMR2_DefaultInterruptHandler->_PWM3_LoadDutyValue
    _TMR2_DefaultInterruptHandler->_PWM4_LoadDutyValue

Critical Paths under _main in BANK0

    _readSensors->_readAccel
    _readAccel->___ftdiv
    _printf->___fttol
    _pid->_rollPid
    _rollPid->___fttol
    ___fttol->___ftadd
    _filterData->_kalmanUpdate
    _kalmanUpdate->___ftdiv
    _computeRollPitch->_fastatan2
    _fastatan2->___ftdiv
    _minimum->___ftge
    _maximum->___ftge
    ___ftge->_fabs
    ___ftdiv->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  233274
                                             23 BANK1      6     6      0
                       _EUSART1_Read
                      _EUSART1_Write
                  _SYSTEM_Initialize
                            ___ftadd
                            ___ftmul
                            ___ftsub
                            ___fttol
                   _computeRollPitch
                         _filterData
                     _interrupt_Init
                        _kalman_Init
                                _pid
                           _pid_Init
                             _printf
                        _readSensors
                       _sensors_Init
                          _unlockI2C
 ---------------------------------------------------------------------------------
 (1) _unlockI2C                                            3     3      0      71
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _sensors_Init                                         0     0      0    2048
                         _accel_Init
                          _gyro_Init
 ---------------------------------------------------------------------------------
 (2) _gyro_Init                                            0     0      0    1024
                       _writei2cData
 ---------------------------------------------------------------------------------
 (2) _accel_Init                                           0     0      0    1024
                       _writei2cData
 ---------------------------------------------------------------------------------
 (3) _writei2cData                                         3     1      2    1024
                                             20 COMRAM     3     1      2
                           _starti2c
                            _stopi2c
                           _writei2c
 ---------------------------------------------------------------------------------
 (1) _readSensors                                          0     0      0   14171
                          _readAccel
                           _readGyro
 ---------------------------------------------------------------------------------
 (2) _readGyro                                            10    10      0    4789
                                             31 COMRAM    10    10      0
                           ___awtoft
                        _readi2cData
 ---------------------------------------------------------------------------------
 (2) _readAccel                                           10    10      0    9382
                                             34 BANK0     10    10      0
                           ___awtoft
                            ___ftdiv
                        _readi2cData
 ---------------------------------------------------------------------------------
 (3) _readi2cData                                         11     7      4     859
                                             20 COMRAM    11     7      4
                             _acki2c
                       _checkI2Cbusy
                            _readi2c
                           _starti2c
                            _stopi2c
                           _writei2c
 ---------------------------------------------------------------------------------
 (4) _writei2c                                             1     1      0      31
                                             19 COMRAM     1     1      0
                       _checkI2Cbusy
 ---------------------------------------------------------------------------------
 (4) _stopi2c                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _starti2c                                             0     0      0       0
                       _checkI2Cbusy
 ---------------------------------------------------------------------------------
 (5) _checkI2Cbusy                                         1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _readi2c                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _acki2c                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3686
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _printf                                              50    37     13   80738
                                             34 BANK0     19     6     13
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   17748
                                             53 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      62
                                             19 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   17469
                                             53 COMRAM     3     0      3
                                              0 BANK0      7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3292
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     634
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     853
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3205
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     952
                                             31 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _pid_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pid                                                 11     2      9   20714
                                             46 BANK0     11     2      9
                           _pitchPid
                            _rollPid
                             _yawPid
 ---------------------------------------------------------------------------------
 (2) _yawPid                                               3     0      3      90
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _rollPid                                             12     9      3   20171
                                             34 BANK0     12     9      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1091
                                             19 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) _pitchPid                                             3     0      3      90
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _kalman_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _filterData                                           0     0      0   24936
                       _kalmanUpdate
 ---------------------------------------------------------------------------------
 (2) _kalmanUpdate                                         8     3      5   24936
                                             34 BANK0      8     3      5
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _computeRollPitch                                    14    14      0   62150
                                              0 BANK1     14    14      0
                _TMR0_Read16bitTimer
                    _TMR0_StartTimer
                     _TMR0_StopTimer
               _TMR0_Write16bitTimer
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___ftsub
                           ___lwtoft
                          _fastatan2
 ---------------------------------------------------------------------------------
 (2) _fastatan2                                           24    18      6   30474
                                             34 BANK0     24    18      6
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                               _fabs
                            _maximum
                            _minimum
 ---------------------------------------------------------------------------------
 (3) _minimum                                              6     0      6    1582
                                             12 BANK0      6     0      6
                             ___ftge
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (3) _maximum                                              6     0      6    1582
                                             12 BANK0      6     0      6
                             ___ftge
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1278
                                              3 BANK0      9     3      6
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 3     0      3    1718
                                              0 BANK0      3     0      3
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3    1085
                                             53 COMRAM     3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    9461
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4593
                                             19 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                               _fabs (ARG)
                            _maximum (ARG)
                            _minimum (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3134
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    9354
                                             19 BANK0      6     0      6
                            ___ftadd
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    8218
                                              7 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3013
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _TMR0_Write16bitTimer                                 2     0      2     152
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Read16bitTimer                                  8     6      2     102
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     155
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     121
           _TMR2_SetInterruptHandler
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (3) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             3     0      3     121
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             18 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManagerHigh                      14    14      0     572
                                              4 COMRAM    14    14      0
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0     572
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR2_DefaultInterruptHandler                         0     0      0     572
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (9) _PWM4_LoadDutyValue                                   4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _PWM3_LoadDutyValue                                   4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _PWM2_LoadDutyValue                                   2     0      2     166
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _PWM1_LoadDutyValue                                   2     0      2     166
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _EUSART1_Write
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_Start
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftsub
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _computeRollPitch
     _TMR0_Read16bitTimer
     _TMR0_StartTimer
     _TMR0_StopTimer
     _TMR0_Write16bitTimer
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fastatan2
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         _maximum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         _minimum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
       ___ftge
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _fabs
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _maximum
         ___ftge
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _minimum
         ___ftge
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
   _filterData
     _kalmanUpdate
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         _maximum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         _minimum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _interrupt_Init
   _kalman_Init
   _pid
     _pitchPid
     _rollPid
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___fttol
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _yawPid
   _pid_Init
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       _fabs (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _EUSART1_Write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _readSensors
     _readAccel
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         _maximum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         _minimum (ARG)
           ___ftge
             _fabs (ARG)
               ___ftneg
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
           _fabs (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
       _readi2cData
         _acki2c
         _checkI2Cbusy
         _readi2c
         _starti2c
           _checkI2Cbusy
         _stopi2c
         _writei2c
           _checkI2Cbusy
     _readGyro
       ___awtoft
         ___ftpack
       _readi2cData
         _acki2c
         _checkI2Cbusy
         _readi2c
         _starti2c
           _checkI2Cbusy
         _stopi2c
         _writei2c
           _checkI2Cbusy
   _sensors_Init
     _accel_Init
       _writei2cData
         _starti2c
           _checkI2Cbusy
         _stopi2c
         _writei2c
           _checkI2Cbusy
     _gyro_Init
       _writei2cData
         _starti2c
           _checkI2Cbusy
         _stopi2c
         _writei2c
           _checkI2Cbusy
   _unlockI2C

 _INTERRUPT_InterruptManagerHigh (ROOT)
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     1D      8F       8       55.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3A      9B       5       96.9%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4B       1       79.8%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     175       6        0.0%
DATA                 0      0     175       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Jul 23 01:44:02 2017

        __end_of_TMR2_SetInterruptHandler 450E                         kalmanUpdate@state 00E3  
                             __CFG_CP$OFF 000000                              ?_kalman_Init 0001  
                            ___awdiv@sign 001E                                        _ax 007C  
                                      _ay 0079                                        _az 0076  
                                      _gx 0073                                        _gy 0070  
                                      _gz 006D                          yawPid@desiredYaw 0013  
                     ___wmul@multiplicand 0023                    __end_of_interrupt_Init 455A  
                            ___ftadd@exp1 00D3                              ___ftadd@exp2 00D2  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 00D1  
                                     l401 44F4                                       l394 44D0  
                                     l731 40BE                                       l830 407A  
                                     l826 1FE2                                       l835 403C  
                                     l865 44E4                                       l859 44B4  
                                     _GIE 007F97                                       _PR2 000FBC  
                            __CFG_CPD$OFF 000000                                       _pid 352E  
                           ?_kalmanUpdate 00E3                                       _yaw 0103  
                            ___awmod@sign 0018                           _TMR2_Initialize 4130  
                         _PWM4_Initialize 443C                                       tosl 000FFD  
                                     wreg 000FE8                      rollPid@changeInError 00E6  
                       ?_computeRollPitch 0001                              __CFG_ZCD$OFF 000000  
                            ___ftdiv@cntr 00DD                              ___ftdiv@sign 00E2  
                                    l1312 41BC                                      l1090 154A  
                                    l1405 27B6                                      l1326 33F6  
                                    l1430 32CE                                      l1423 3240  
                                    l1416 3034                                      l1424 3268  
                                    l1505 3E7C                                      l1515 3F52  
                                    l1381 2654                                      l1358 3B96  
                                    l1455 4372                                      l1385 268E  
                                    l1387 26B6                                      l1396 278C  
                                    l5101 2744                                      l5201 38DC  
                                    l5017 3BEC                                      l5115 27E0  
                                    l5107 2772                                      l5211 3904  
                                    l6011 152C                                      l6003 14FC  
                                    l5027 3C0E                                      l5125 282E  
                                    l5109 2780                                      l5141 2F92  
                                    l5205 38EC                                      l6021 1572  
                                    l6005 150A                                      l5135 2F58  
                                    l5215 3914                                      l5231 3D9C  
                                    l6031 16AA                                      l6015 154E  
                                    l5311 40D4                                      l6111 209E  
                                    l5073 269C                                      l5161 2FF2  
                                    l5321 30A4                                      l6033 16B8  
                                    l6025 15C4                                      l6009 1518  
                                    l5067 2662                                      l5243 3DC2  
                                    l6131 2168                                      l6115 20AA  
                                    l5181 3882                                      l5245 3DCA  
                                    l5237 3DAC                                      l5501 24D6  
                                    l6037 16C6                                      l6141 2232  
                                    l6133 2198                                      l6117 20B2  
                                    l5095 271C                                      l5079 26AC  
                                    l5351 3176                                      l5343 314A  
                                    l5263 3E02                                      l5255 3DEA  
                                    l5247 3DCE                                      l6055 173E  
                                    l6039 16D4                                      l6143 223E  
                                    l6135 21C8                                      l6127 2108  
                                    l6151 22BC                                      l5097 272A  
                                    l5089 26EE                                      l5353 3180  
                                    l6081 1810                                      l6073 17B8  
                                    l6057 1744                                      l6049 1718  
                                    l6137 21F8                                      l6129 2138  
                                    l5099 2738                                      l5187 38AA  
                                    l5339 3136                                      l5259 3DF4  
                                    l5291 3EDC                                      l5283 3EBC  
                                    l5275 3EA2                                      l5523 1A2A  
                                    l6139 2228                                      l6147 2246  
                                    l5357 319C                                      l5349 3166  
                                    l5605 3294                                      l5285 3EC4  
                                    l5509 25A4                                      l5541 1C52  
                                    l5533 1B0C                                      l6085 189C  
                                    l6077 17E8                                      l6069 1790  
                                    l6165 2376                                      l6149 2280  
                                    l5631 331C                                      l5615 32BC  
                                    l5287 3EC8                                      l5295 3EE6  
                                    l5279 3EAE                                      l6087 18B2  
                                    l5473 1F7C                                      l5705 3E6E  
                                    l5721 3F44                                      l5713 3F10  
                                    l5625 32FE                                      l5617 32C8  
                                    l5609 32A4                                      l5529 1AE0  
                                    l4905 44BE                                      l5715 3F1C  
                                    l5299 3EF4                                      l5547 1D08  
                                    l4941 3B4E                                      l4933 3B18  
                                    l5477 1FC0                                      l5717 3F20  
                                    l5653 338E                                      l5645 335E  
                                    ?_pid 00EF                                      l5743 44DE  
                                    l5727 3F6A                                      l5575 3206  
                                    l5559 4416                                      l5911 10C6  
                                    l5903 1076                                      l4945 3B64  
                                    l4937 3B26                                      l5841 2C18  
                                    l5729 3F76                                      l5665 33BC  
                                    l5569 31DA                                      l5921 110C  
                                    l5905 10AC                                      l4947 3B82  
                                    l4939 3B30                                      l5683 3FE2  
                                    l5675 33E4                                      l4949 3B8C  
                                    l4973 3AC0                                      l5693 3E2E  
                                    l5677 33F0                                      l5669 33CC  
                                    l5773 409A                                      l5871 3628  
                                    l5863 35F0                                      l5695 3E3A  
                                    l5951 126E                                      l4969 3A80  
                                    l5697 3E3E                                      l5961 12FE  
                                    l5953 129E                                      l5945 122A  
                                    l5937 11BA                                      l5881 0FD0  
                                    l4979 3B04                                      l5867 3612  
                                    l5955 12B4                                      l5981 13F6  
                                    l5965 132C                                      l5949 1258  
                                    l5893 1046                                      l5877 0FBA  
                                    l5975 138A                                      l5895 1060  
                                    l5993 1442                                      l5889 1006  
                                    l5979 13F0                                      l5899 1070  
                                    l5997 146A                                      STR_1 0F77  
                 __end_of_PWM1_Initialize 4494                                      _LATA 000F83  
                                    _LATB 000F84                                      _LATC 000F85  
                                    _LATD 000F86                                      _LATE 000F87  
                                    u4121 2602                                      _T2PR 000FBC  
                                    u4131 2620                                      u4401 3892  
                                    u4331 2F34                              printf@tmpval 017B  
                                    u4351 2F6E                                      u4381 386A  
                                    u5350 1542                                      u5190 1152  
                                    u4650 3856                                      u4571 3080  
                                    u4811 31EA                                      u5195 1146  
                                    u4590 30CA                                      u5537 40AE  
                                    u4595 30C0                                      u4791 31BE  
                                    _TMR2 000FBB                                      _WPUA 000F10  
                                    _WPUB 000F18                                      _WPUC 000F20  
                                    _WPUD 000F25                                      _WPUE 000F2D  
                      ??_computeRollPitch 0039                             _EUSART1_Write 44F2  
                           __CFG_FCMEN$ON 000000                                      _fabs 4198  
                                    _main 2078                              ___ftpack@arg 0013  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 0016  
                         _TMR0_StartTimer 4566                                      _roll 006A  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 004C  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 008C                             __CFG_CSWEN$ON 000000  
                            ___ftmul@cntr 0034                              ___param_bank 000000  
                            ___ftmul@sign 0035                             __CFG_SCANE$ON 000000  
                            ?_readi2cData 0015                              ___fttol@exp1 00E2  
                            ___fttol@lval 00DE                                     ??_pid 00F8  
                 __end_of_PWM2_Initialize 447E                   __end_of_TMR0_Initialize 425E  
                              _i2c1_state 0049            __size_of_OSCILLATOR_Initialize 0020  
           __end_of_OSCILLATOR_Initialize 43C4                           ?_interrupt_Init 0001  
                                   ?_fabs 00C1                                     ?_main 0001  
                         __end_of___awdiv 3E0C                           __end_of___ftadd 2854  
                           __CFG_WDTE$OFF 000000                           __end_of___awmod 3EFE  
                         __end_of___ftdiv 306A                           __end_of___ftneg 4380  
                         __end_of___lldiv 3E8E                           __end_of___ftmul 394E  
                         ___awdiv@divisor 001B                              ?_readSensors 0001  
                         __end_of___llmod 3F64                           __end_of___ftsub 400C  
                         __end_of___fttol 31AE                                     _T2CON 000FBD  
                                   _T2HLT 000FBE                            __CFG_DEBUG$OFF 000000  
                          ??_kalmanUpdate 0039                                     _T2TMR 000FBB  
                                   _T2RST 000FC0                                     i2l437 0050  
                         ___awdiv@counter 001D                                     _OSCEN 000EDC  
                      _PWM4_LoadDutyValue 41CA                                     _TMR0H 000FD4  
                                   _TMR0L 000FD3                                     _TRISA 000F88  
                                   _TRISB 000F89                                     _TRISC 000F8A  
                                   _TRISD 000F8B                                     _TRISE 000F8C  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                           __CFG_WRT4$OFF 000000                             __CFG_WRT5$OFF 000000  
                            ___lltoft@exp 0023                             __CFG_WRT6$OFF 000000  
                           __CFG_WRT7$OFF 000000                            __CFG_EBTR0$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ??_I2C1_Initialize 0013  
                          __CFG_EBTR4$OFF 000000                            __CFG_EBTR5$OFF 000000  
                          __CFG_EBTR6$OFF 000000                            __CFG_EBTR7$OFF 000000  
                        __end_of_TMR2_ISR 435C                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                                   _begin 00BA                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 001E                           __end_of_dpowers 0F29  
                             ?_TMR2_Start 0001                                     fabs@d 00C1  
                         __end_of_readi2c 44F2                                     _scale 18D6  
                         __end_of_isdigit 441E                           __end_of_maximum 4088  
                                   _pitch 0106                       ?_PWM4_LoadDutyValue 0001  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0017  
                         __end_of_minimum 404A                                     _putch 453A  
                                   _yawkd 0082                                     main@c 0189  
                                   _yawki 0085                                     _yawkp 0088  
                          ?_EUSART1_Write 0001                   __end_of_PWM3_Initialize 4468  
                                   pclath 000FFA                                     tablat 000FF5  
                         __end_of_rollPid 2F1E                            ??_EUSART1_Read 0013  
                                   nvmcon 000F81                                     status 000FD8  
                         __end_of_stopi2c 455E                     __size_of_writei2cData 001E  
                   _computeRollPitch$2957 0175                     _computeRollPitch$2958 0178  
                   _computeRollPitch$2959 017B                           __initialization 4166  
                            __end_of_fabs 41CA                __end_of_EUSART1_Initialize 44AA  
                            __end_of_main 237A                      ??_PWM4_LoadDutyValue 0003  
                   __size_of_checkI2Cbusy 0012                   __end_of_PWM4_Initialize 4452  
                 __end_of_TMR2_Initialize 4166                                    ??_fabs 0039  
                             _i2c1_object 0060                  _TMR2_SetInterruptHandler 4500  
                                  ??_main 0039                             ___fttol@sign1 00DD  
                           __activetblptr 000003                      __size_of__tdiv_to_l_ 0132  
                            _writei2cData 43E2                   __end_of_TMR0_StartTimer 456A  
                        ___llmod@dividend 0020                                    ?_scale 0036  
                                  _CCPR1H 000FAB                                    _CCPR2H 000FA7  
                                  _CCPR1L 000FAA                                    _CCPR2L 000FA6  
                        ___awdiv@dividend 0019                          __end_of___awtoft 40F8  
                                  _ANSELA 000F11                                    ?_putch 0001  
                                  _ANSELB 000F19                                    _ANSELC 000F21  
                                  _ANSELD 000F26                                    _ANSELE 000F2E  
                        __end_of___ftpack 3BB6                                    _T0CON0 000FD5  
                                  _T0CON1 000FD6                                    _RC1REG 000F99  
                                  _RB1PPS 000EF0                                    _RA4PPS 000EEB  
                                  _RB2PPS 000EF1                                    _RA5PPS 000EEC  
                                  _RC1STA 000F9D                          __end_of___lltoft 3FC0  
                                  _RC3PPS 000EFA                                    _RC4PPS 000EFB  
                        ?_PWM1_Initialize 0001                                    _ODCONA 000F0F  
                                  _ODCONB 000F17                                    _ODCONC 000F1F  
                                  _ODCOND 000F24                                    _ODCONE 000F2C  
                                  _RC7PPS 000EFE                            __CFG_WDTCCS$SC 000000  
             __end_of_TMR0_Read16bitTimer 443C                                    i2l3471 4306  
                                  i2l3485 42DA                                    i2l3875 3C78  
                                  i2l3885 3CA4                                    i2l3887 3CAA  
                        __end_of___lwtoft 43A4                                    _OSCFRQ 000EDE  
                                  _TX1REG 000F9A                                    _TX1STA 000F9E  
                            _checkI2Cbusy 44BE                            __CFG_PWRTE$OFF 000000  
            __end_of_TMR0_Write16bitTimer 454E                            __CFG_XINST$OFF 000000  
                            _beginCounter 00B7                          __end_of__powers_ 0F50  
                          _p_i2c1_current 00AB                                    ___ftge 3A40  
                                  _acki2c 454E               __size_of_PWM3_LoadDutyValue 0032  
                                  ___wmul 4310                                 ??___awdiv 001D  
                               ??___ftadd 00CE                            __CFG_STVREN$ON 000000  
                               ??___awmod 0017                                 ??___ftdiv 00DA  
                               ??___ftneg 0039                                 ??___lldiv 001B  
                               ??___ftmul 002D                                 ??___llmod 0028  
                               ??___ftsub 0039                                 ??___fttol 00D8  
                     __size_of_TMR2_Start 0004                          __end_of_pid_Init 375C  
                        __end_of_readGyro 3D88                          ?_TMR0_Initialize 0001  
                        ?_PWM2_Initialize 0001                                    _fround 237A  
                                  clear_0 4170                                    clear_1 417C  
                                  clear_2 4188                          ___awdiv@quotient 001F  
                         ___awmod@divisor 0015                                    _yawAdj 00B1  
                                  _yawPid 456A                           ___awmod@counter 0017  
                                  _printf 0FAA                                    _rollkd 00A0  
                                  _rollki 00A3                                    _rollkp 00A6  
                    __size_of_kalman_Init 018E                     ___ftmul@f3_as_product 0031  
                        __end_of_pitchPid 456E                                 ??_readi2c 0013  
                               ??_isdigit 0013                                 ??_maximum 0039  
                               ??_minimum 0039                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                                 ??_rollPid 0039  
           TMR0_Read16bitTimer@readValLow 0019                          __end_of_starti2c 451A  
                         ??_EUSART1_Write 0013  TMR2_SetInterruptHandler@InterruptHandler 0013  
                               ??_stopi2c 0013                         _rollPreviousError 009D  
           __size_of_INTERRUPT_Initialize 000C                          __end_of_writei2c 44BE  
                              _accCounter 00B9                          ?_PWM3_Initialize 0001  
        ??_INTERRUPT_InterruptManagerHigh 0005           ?_INTERRUPT_InterruptManagerHigh 0001  
                       _SYSTEM_Initialize 425E                                __accesstop 0060  
                 __end_of__initialization 418E                                ___ftadd@f1 00C8  
                              ___ftadd@f2 00CB                                ___ftge@ff1 00C4  
                              ___ftge@ff2 00C7                        ?_SYSTEM_Initialize 0001  
              __end_of_PWM2_LoadDutyValue 42E4                             ___rparam_used 000001  
                              ___ftdiv@f1 00D4                                ___ftdiv@f2 00D7  
                              ___ftdiv@f3 00DE                      __end_of_kalmanUpdate 2A56  
                              ___ftneg@f1 0036                            _i2c1_trb_count 0048  
             PWM1_LoadDutyValue@dutyValue 0001                                ___awtoft@c 001B  
                              ___ftmul@f1 0027                                ___ftmul@f2 002A  
                              ___ftsub@f1 00D4                                ___ftsub@f2 00D7  
                              ___fttol@f1 00D4                            __pcstackCOMRAM 0001  
                              _accel_Init 428C                       ??_SYSTEM_Initialize 0016  
                          readAccel@aData 00E7                                 ?_TMR2_ISR 0001  
                              ___lltoft@c 001B                             __end_of_scale 1D34  
                           __end_of_putch 4544                        _PWM1_LoadDutyValue 42E4  
                        ?_TMR2_Initialize 0001                          ?_PWM4_Initialize 0001  
                    __size_of_readi2cData 00AC                                ___lwtoft@c 001B  
             PWM4_LoadDutyValue@dutyValue 0001                      __end_of_EUSART1_Read 44E2  
                              __div_to_l_ 32E0                       ?_PWM1_LoadDutyValue 0001  
                      __size_of_fastatan2 0344                      __size_of_readSensors 000A  
                         __div_to_l_@exp1 001E                          ?_TMR0_StartTimer 0001  
                         __div_to_l_@cntr 001D                                   ??_scale 0039  
               __end_of_SYSTEM_Initialize 428C                           __div_to_l_@quot 0019  
                                 ??_putch 0014                                __pbssBANK0 0060  
                              __pbssBANK1 0100                        __size_of_readAccel 0126  
                           __div_to_l_@f1 0013                             __div_to_l_@f2 0016  
                    ??_PWM1_LoadDutyValue 0003                            _SSP1DATPPSbits 000EB8  
                      rollPid@desiredRoll 00E3                          ??_interrupt_Init 0013  
               __size_of_computeRollPitch 01D4                                   ?___ftge 00C4  
                                 ?_acki2c 0001                   __size_of_TMR0_StopTimer 0004  
                                 ?___wmul 0021                           __CFG_PPS1WAY$ON 000000  
                              ??_TMR2_ISR 0005                        __size_of_gyro_Init 001E  
                         _I2C1_Initialize 40F8                                   _CCP1CON 000FAC  
                                 _CCP2CON 000FA8                                   ?_fround 0036  
                               ?___awtoft 001B                                 ?___ftpack 0013  
                          _SSP1CLKPPSbits 000EB7                                   ?_yawPid 0013  
                                 ?_printf 00E3                                 ?___lltoft 001B  
                               ?___lwtoft 001B                                   _SP1BRGH 000F9C  
                                 _SP1BRGL 000F9B                                   _OSCCON1 000ED8  
                                 _OSCCON3 000EDA                      _TMR0_Write16bitTimer 4544  
                                 _OSCTUNE 000EDD                                   _PWM3DCH 000FA4  
                                 _PWM3DCL 000FA3                                   _PWM4DCH 000FA1  
                                 _PWM4DCL 000FA0                                   _PWM3CON 000FA5  
                                 _PWM4CON 000FA2                                   _SSP1ADD 000F93  
                                 _PPSLOCK 000EA0                                   _SSP1BUF 000F92  
                            readi2cData@i 001E                              ??_TMR2_Start 0013  
                              _filterData 394E                        __size_of_unlockI2C 0038  
                               ?_pid_Init 0001                                 ?_readGyro 0001  
                       __end_of__npowers_ 0F77                                   __Hparam 0000  
                               ?_pitchPid 0013                                _scale$2967 00C1  
                       __end_of_fastatan2 2078                                   __Lparam 0000  
              ??_TMR2_SetInterruptHandler 0016                __CFG_RSTOSC$HFINTOSC_64MHZ 000000  
                      _p_i2c1_trb_current 0040                               ?_accel_Init 0001  
                         __size_of___ftge 00C8                           __size_of_acki2c 0006  
                                 ___awdiv 3D88                                   ___ftadd 25EC  
                                 ___awmod 3E8E                                   ___ftdiv 2F1E  
                                 ___ftneg 435C                                   ___lldiv 3E0C  
                         __size_of___wmul 0026                                   ___ftmul 385A  
                                 ___llmod 3EFE                                   ___ftsub 3FC0  
                                 ___fttol 306A                                 ?_starti2c 0001  
                            __psmallconst 0F00                        __end_of_TMR2_Start 4566  
                                 __pcinit 4166                                ??___awtoft 001E  
                              ??___ftpack 0018                           __size_of_fround 0272  
                                 __ramtop 0F00                                   _axState 0157  
                                 _ayState 0148                                ??___lltoft 001F  
                                 __ptext0 2078                                   __ptext1 4088  
                                 _azState 0139                                   __ptext2 4526  
                                 __ptext3 43C4                                   __ptext4 428C  
                                 __ptext5 43E2                                   __ptext6 4530  
                               ?_writei2c 0001                                   __ptext7 3CF8  
                                 __ptext8 3408                                   __ptext9 3BB6  
                       __end_of_readAccel 352E                           __size_of_yawPid 0002  
                         __size_of_printf 092C                                ??___lwtoft 001E  
                 kalmanUpdate@measurement 00E5                               ?__div_to_l_ 0013  
                                 _gxState 012A                                   _gyState 011B  
                                 _dpowers 0F01                                   _gzState 010C  
                   _OSCILLATOR_Initialize 43A4                                   _readi2c 44E2  
                               _T2CONbits 000FBD                              __size_of_pid 011E  
                                 _isdigit 4400                                   _maximum 404A  
                        ___awmod@dividend 0013                                   _minimum 400C  
                   ?_TMR0_Write16bitTimer 0013                        _EUSART1_Initialize 4494  
                ??_PIN_MANAGER_Initialize 0013                                 _T2HLTbits 000FBE  
                                 _pitchkd 0091                                   _pitchki 0094  
                                 _pitchkp 0097                                   _rollAcc 0067  
                                 _rollAdj 00B5                                   _rollPid 2DB8  
                                 _stopi2c 455A                __size_of_SYSTEM_Initialize 002E  
                    I2C1_ISR@pi2c_buf_ptr 003E                                   main@val 018C  
                    end_of_initialization 418E                         __end_of_gyro_Init 43E2  
                               _T2RSTbits 000FC0                     __size_of_kalmanUpdate 0202  
                     ?_EUSART1_Initialize 0001                             ?_sensors_Init 0001  
                              ??_pid_Init 0013                                ??_readGyro 0020  
                 __end_of_I2C1_Initialize 4130                           ___lldiv@divisor 0017  
                              ??_pitchPid 0016                           ___lldiv@counter 001F  
                                 printf@c 0188                                   printf@f 00E3  
                                 postdec2 000FDD            TMR0_Read16bitTimer@readValHigh 001A  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0012                              writei2c@data 0014  
                       __end_of_unlockI2C 40C0               __size_of_PWM4_LoadDutyValue 0032  
                              ??_starti2c 0014                            __tdiv_to_l_@f1 0013  
                          __tdiv_to_l_@f2 0016                      ??_EUSART1_Initialize 0013  
                   __CFG_WDTCPS$WDTCPS_31 000000                            readi2cData@len 0018  
                           ??__tdiv_to_l_ 0019                            readi2cData@reg 0015  
                              ??_writei2c 0014                             pid@desiredYaw 00F5  
                              fastatan2@a 00F5                                fastatan2@r 00F8  
                              fastatan2@s 00F2                                fastatan2@x 00E3  
                              fastatan2@y 00E6                              _kalmanUpdate 2854  
                               _TRISBbits 000F89                                 _TRISCbits 000F8A  
                             ?_filterData 0001                       EUSART1_Write@txData 0013  
                     __size_of_accel_Init 002C                          __CFG_FEXTOSC$OFF 000000  
       I2C1_ISR@i2c_10bit_address_restart 0046                            ??_sensors_Init 0018  
            TMR0_Write16bitTimer@timerVal 0013                               _CCP1CONbits 000FAC  
                             ___ftdiv@exp 00E1                              _EUSART1_Read 44D0  
                             _CCP2CONbits 000FA8                __end_of_PWM3_LoadDutyValue 422E  
                     __size_of__div_to_l_ 0128              __size_of_TMR0_Read16bitTimer 001E  
                __size_of_PWM1_Initialize 0016                               ___ftmul@exp 0030  
                    _timer0ReloadVal16bit 003C                            _TMR0_StopTimer 455E  
                        _computeRollPitch 2A56              __end_of_INTERRUPT_Initialize 4526  
    __end_of_TMR2_DefaultInterruptHandler 3CF8     __size_of_TMR2_DefaultInterruptHandler 0096  
            _TMR2_DefaultInterruptHandler 3C62                             ??_kalman_Init 0013  
                          __end_of___ftge 3B08                            __end_of_acki2c 4554  
                          __end_of___wmul 4336                   I2C1_MasterWrite@trBlock 016C  
                       __size_of_TMR2_ISR 0026                        _PWM2_LoadDutyValue 42B8  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_fround 25EC  
                          __end_of_yawPid 456C                    ??_TMR0_Write16bitTimer 0015  
                          __end_of_printf 18D6                       start_initialization 4166  
                __size_of_PWM2_Initialize 0016                  __size_of_TMR0_Initialize 0030  
                     ?_PWM2_LoadDutyValue 0001           __size_of_PIN_MANAGER_Initialize 00FE  
                     __end_of__tdiv_to_l_ 32E0                               __end_of_pid 364C  
                             putch@txData 0014                     __end_of_EUSART1_Write 4500  
                         ___llmod@divisor 0024                           ___llmod@counter 0028  
                  __end_of_TMR0_StopTimer 4562                          ?_I2C1_Initialize 0001  
                        __CFG_LPBOREN$OFF 000000                      ??_PWM2_LoadDutyValue 0003  
                __size_of_PWM3_Initialize 0016               PWM2_LoadDutyValue@dutyValue 0001  
                                ??___ftge 00CA                                  ??_acki2c 0013  
                                ??___wmul 0025                             ??_readi2cData 0019  
                             _CCPTMRSbits 000FAE                          writei2cData@data 0016  
                     __size_of_filterData 00F2                                  ??_fround 0039  
           ?_TMR2_DefaultInterruptHandler 0001                                  ??_yawPid 0016  
                                ??_printf 00F0                             ??_readSensors 0039  
                              fround@prec 00C7                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                     __end_of_kalman_Init 2DB8                               __pbssCOMRAM 0039  
                       __size_of___lwtoft 0024                             _pitchIntegral 008B  
                           __pcstackBANK0 00C1                             __pcstackBANK1 0172  
                __size_of_PWM4_Initialize 0016                  __size_of_TMR2_Initialize 0036  
                           _i2c1_tr_queue 00BB                              _isdigit$2516 0014  
                        rollPid@rollError 00EC                            _fastatan2$2960 00E9  
                          _fastatan2$2961 00EC                            _fastatan2$2962 00EF  
                __size_of_TMR0_StartTimer 0004                           ?_TMR0_StopTimer 0001  
                       __size_of_pid_Init 0110                         __size_of_readGyro 0090  
             __size_of_PWM1_LoadDutyValue 002C                    _PIN_MANAGER_Initialize 375C  
                            ??_accel_Init 0018                                 __pintcode 0008  
                       __size_of_pitchPid 0002                                  ?___awdiv 0019  
                                ?___ftadd 00C8                                  ?___awmod 0013  
                                ?___ftdiv 00D4                                  ?___ftneg 0036  
                                ?___lldiv 0013                                  ?___ftmul 0027  
                                ?___llmod 0020                                  ?___ftsub 00D4  
                               __npowers_ 0F50                                  ?___fttol 00D4  
                               _fastatan2 1D34                      __end_of_sensors_Init 4530  
                       ??_PWM1_Initialize 0013                               __tdiv_to_l_ 31AE  
                       __size_of_starti2c 000C                              ??__div_to_l_ 0019  
                                _BAUD1CON 000F9F                               __smallconst 0F00  
                     __end_of_readi2cData 3C62                                  ?_readi2c 0001  
                                ?_isdigit 0001                                  ?_maximum 00CD  
                       __size_of_writei2c 0014                                  ?_minimum 00CD  
                               _readAccel 3408                                  ?_rollPid 00E3  
                           ?_writei2cData 0015                        readi2cData@address 001D  
                     __end_of_readSensors 453A                                  ?_stopi2c 0001  
                                _T2CLKCON 000FBF                            __size_of_scale 045E  
                          __size_of_putch 000A                        __end_of_accel_Init 42B8  
                    _INTERRUPT_Initialize 451A                    I2C1_MasterRead@trBlock 0166  
                       ??_TMR0_Initialize 0013                         ??_PWM2_Initialize 0013  
                          ___wmul@product 0025                                  _LATBbits 000F84  
                                _LATCbits 000F85                                 _gyro_Init 43C4  
                                _IPR3bits 000EBD                                  _IPR4bits 000EBE  
                           ?_checkI2Cbusy 0001                                  _PIE4bits 000EC6  
                     __CFG_BORV$VBOR_2P45 000000                                  i2u213_45 42F2  
                                i2u215_45 42C6                                  i2u216_45 4220  
                                i2u217_45 41EE                                  i2u316_48 4348  
                                _PIR0bits 000ECA                        __end_of__div_to_l_ 3408  
                                _PIR3bits 000ECD                                  _PIR4bits 000ECE  
              TMR0_Read16bitTimer@readVal 0017                        _pitchPreviousError 008E  
                                _SSP1CON1 000F96                                  _SSP1CON2 000F97  
                                _SSP1CON3 000F98                                  _TMR2_ISR 4336  
                                _SSP1STAT 000F95                                ?_fastatan2 00E3  
                             _kalman_Init 2C2A                          _yawPreviousError 007F  
                       ??_PWM3_Initialize 0013                                 _throttle1 0044  
                               _throttle2 0042                                 _throttle3 00AF  
                               _throttle4 00AD                         ___wmul@multiplier 0021  
                               _unlockI2C 4088                                printf@flag 0177  
                              printf@fval 0185                                printf@prec 0183  
                 __size_of_interrupt_Init 0006            ??_TMR2_DefaultInterruptHandler 0005  
       __size_of_TMR2_SetInterruptHandler 000E                   computeRollPitch@tmr0val 017E  
                          ??_writei2cData 0017                 ?_TMR2_SetInterruptHandler 0013  
                              ?_readAccel 0001                       _TMR0_Read16bitTimer 441E  
                __end_of_computeRollPitch 2C2A                              ??_filterData 0039  
                   ?_INTERRUPT_Initialize 0001                         ??_TMR2_Initialize 0016  
                       ??_PWM4_Initialize 0013                            ??_checkI2Cbusy 0013  
                              ?_gyro_Init 0001                                  __Hrparam 0000  
                    ?_TMR0_Read16bitTimer 0013                __end_of_PWM4_LoadDutyValue 41FC  
                                __Lrparam 0000                                unlockI2C@i 0014  
                      __CFG_BOREN$SBORDIS 000000                           writei2cData@reg 0015  
                  I2C1_ISR@i2c_bytes_left 0047                             readGyro@gData 0024  
                 ??_OSCILLATOR_Initialize 0013                               _readi2cData 3BB6  
                       ??_TMR0_StartTimer 0013                          __size_of___awdiv 0084  
                        __size_of___ftadd 0268                          __size_of___awmod 0070  
                        __size_of___ftdiv 014C                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                          __size_of___ftmul 00F4  
                        __size_of___llmod 0066                          __size_of___ftsub 004C  
                        __size_of___fttol 0144               __size_of_EUSART1_Initialize 0016  
                      __end_of_filterData 3A40                                  ___awtoft 40C0  
                                ___ftpack 3B08                               _fround$2965 00C4  
                             _fround$2966 00C1                                  ___lltoft 3F64  
                              ?_unlockI2C 0001                        _PWM3_LoadDutyValue 41FC  
                                ___lwtoft 4380                         _kalmanUpdate$2964 00E8  
                             _readSensors 4530                                _T0CON0bits 000FD5  
                        __size_of_readi2c 0010                          __size_of_isdigit 001E  
                        __size_of_maximum 003E                          __size_of_minimum 003E  
                     I2C1_ISR@i2c_address 004A                                  __ptext10 44AA  
                                __ptext11 455A                                  __ptext20 44F2  
                                __ptext12 450E                                  __ptext21 4400  
                                __ptext13 44BE                                  __ptext30 3E0C  
                                __ptext22 237A                                  __ptext14 44E2  
                                __ptext31 364C                                  __ptext23 4310  
                                __ptext15 454E                                  __ptext40 2854  
                                __ptext32 352E                                  __ptext24 3E8E  
                                __ptext16 40C0                                  __ptext41 2A56  
                                __ptext33 456A                                  __ptext25 3D88  
                                __ptext17 0FAA                                  __ptext50 4380  
                                __ptext42 1D34                                  __ptext34 2DB8  
                                __ptext26 31AE                                  __ptext18 18D6  
                                __ptext51 3FC0                                  __ptext43 400C  
                                __ptext35 306A                                  __ptext27 32E0  
                                __ptext19 453A                                  __ptext60 4500  
                                __ptext52 25EC                                  __ptext44 404A  
                                __ptext36 456C                                  __ptext28 3F64  
                                __ptext61 422E                                  __ptext53 3B08  
                                __ptext45 3A40                                  __ptext37 2C2A  
                                __ptext29 3EFE                                  __ptext70 40F8  
                                __ptext62 4566                                  __ptext54 4544  
                                __ptext46 4198                                  __ptext38 4554  
                                __ptext71 4494                                  __ptext63 443C  
                                __ptext55 455E                                  __ptext47 435C  
                                __ptext39 394E                                  __ptext80 0000  
                                __ptext72 44D0                                  __ptext64 4452  
                                __ptext56 441E                                  __ptext48 385A  
                                __ptext65 4468                                  __ptext57 425E  
                                __ptext49 2F1E                                  __ptext74 4336  
                                __ptext66 447E                                  __ptext58 4130  
                     ?_PWM3_LoadDutyValue 0001                                  __ptext75 3C62  
                                __ptext67 375C                                  __ptext59 4562  
                                __ptext76 41CA                                  __ptext68 43A4  
                                __ptext77 41FC                                  __ptext69 451A  
                                __ptext78 42B8                                  __ptext79 42E4  
                            _SSP1CON1bits 000F96                              _SSP1CON2bits 000F97  
                                __powers_ 0F29                          __size_of_rollPid 0166  
                        __size_of_stopi2c 0004                                  _pid_Init 364C  
                           __size_of_fabs 0032                                  _readGyro 3CF8  
                           __size_of_main 0302                      __CFG_WDTCWS$WDTCWS_7 000000  
                     writei2cData@address 0017                     ??_TMR0_Read16bitTimer 0015  
                                _pitchAcc 0100                                  _pitchAdj 00B3  
                                _pitchPid 456C                                _RC1STAbits 000F9D  
                   __size_of_sensors_Init 000A                      ??_PWM3_LoadDutyValue 0003  
                                int$flags 004C                                  _starti2c 450E  
                             ??_fastatan2 0039                                  _throttle 00A9  
                               printf@exp 0179                                 printf@val 017F  
                            _SSP1STATbits 000F95                                  main@show 018A  
                                _writei2c 44AA                      pitchPid@desiredPitch 0013  
             PIN_MANAGER_Initialize@state 0013                                _INTCONbits 000FF2  
                             ??_readAccel 00E3                              _rollPid$2963 00E9  
           __size_of_TMR0_Write16bitTimer 000A                                  isdigit@c 0015  
                  ??_INTERRUPT_Initialize 0013                                  scale@scl 00C4  
                                maximum@x 00CD                                  maximum@y 00D0  
                                intlevel2 0000                                  minimum@x 00CD  
                                minimum@y 00D0                          ??_TMR0_StopTimer 0013  
                        __tdiv_to_l_@exp1 0021                          __tdiv_to_l_@cntr 0020  
                        __tdiv_to_l_@quot 001C                              _sensors_Init 4526  
                        ___lldiv@dividend 0013                   ?_PIN_MANAGER_Initialize 0001  
                       __CFG_CLKOUTEN$OFF 000000                               ??_gyro_Init 0018  
                             _PPSLOCKbits 000EA0                           _PWM1_Initialize 447E  
                            _rollIntegral 009A                        computeRollPitch@dt 0172  
             __size_of_PWM2_LoadDutyValue 002C                      __end_of_writei2cData 4400  
                                printf@ap 0175               PWM3_LoadDutyValue@dutyValue 0001  
                         pid@desiredPitch 00F2                  __size_of_I2C1_Initialize 0038  
                  __size_of_EUSART1_Write 000E                              ?__tdiv_to_l_ 0013  
  __end_of_INTERRUPT_InterruptManagerHigh 008C   __size_of_INTERRUPT_InterruptManagerHigh 0084  
          _INTERRUPT_InterruptManagerHigh 0008                               ??_unlockI2C 0013  
                              _RX1PPSbits 000EB5                               _printf$2968 0172  
                          _interrupt_Init 4554                      __end_of_checkI2Cbusy 44D0  
                        ___lldiv@quotient 001B                           _TMR0_Initialize 422E  
                         _PWM2_Initialize 4468                           readi2cData@data 0016  
                              _TMR2_Start 4562                            pid@desiredRoll 00EF  
                             _yawIntegral 0109            __end_of_PIN_MANAGER_Initialize 385A  
              __end_of_PWM1_LoadDutyValue 4310                     _TMR2_InterruptHandler 0039  
                         _PWM3_Initialize 4452  
